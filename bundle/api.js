"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var crypto;
        if (typeof window !== "undefined" && window.crypto) {
          crypto = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto = globalThis.crypto;
        }
        if (!crypto && typeof window !== "undefined" && window.msCrypto) {
          crypto = window.msCrypto;
        }
        if (!crypto && typeof global !== "undefined" && global.crypto) {
          crypto = global.crypto;
        }
        if (!crypto && typeof require === "function") {
          try {
            crypto = require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto) {
            if (typeof crypto.getRandomValues === "function") {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto.randomBytes === "function") {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || /* @__PURE__ */ function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i2 = 0; i2 < thatSigBytes; i2++) {
                var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i2 = 0; i2 < nBytes; i2 += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
              words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i2 = 0; i2 < latin1StrLength; i2++) {
              words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i2 = 0; i2 < x64WordsLength; i2++) {
              var x64Word = x64Words[i2];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i2 = 0; i2 < wordsLength; i2++) {
              words[i2] = words[i2].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
              words[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = swapEndian(words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe) {
            if (urlSafe === void 0) {
              urlSafe = true;
            }
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 64; i2++) {
            T[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i2 = 0; i2 < 4; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i2 = 0; i2 < 80; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var n = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
                W[i2] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i2];
              if (i2 < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i2 < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i2 < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i2 = 0; i2 < 64; i2++) {
              if (i2 < 16) {
                W[i2] = M[offset + i2] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i2 - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i2] = gamma0 + W[i2 - 7] + gamma1 + W[i2 - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i2] + W[i2];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i2 = 0; i2 < 80; i2++) {
            W[i2] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i2 = 0; i2 < 80; i2++) {
              var Wil;
              var Wih;
              var Wi = W[i2];
              if (i2 < 16) {
                Wih = Wi.high = M[offset + i2 * 2] | 0;
                Wil = Wi.low = M[offset + i2 * 2 + 1] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i2 - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i2 - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i2 - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i2];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i2 = 0; i2 < 24; i2++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i2 = 0; i2 < 25; i2++) {
            T[i2] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
              var M2i = M[offset + 2 * i2];
              var M2i1 = M[offset + 2 * i2 + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i2];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i2 = 0; i2 < outputLengthLanes; i2++) {
              var lane = state[i2];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = state[i2].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i2 = 0; i2 < 80; i2 += 1) {
              t = al + M[offset + zl[i2]] | 0;
              if (i2 < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i2 < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i2 < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i2 < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i2]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i2]] | 0;
              if (i2 < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i2 < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i2 < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i2 < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i2]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i2 = 0; i2 < 5; i2++) {
              var H_i = H[i2];
              H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports2, module2) {
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i2 = 0; i2 < hasherBlockSize; i2++) {
              oKeyWords[i2] ^= 1549556828;
              iKeyWords[i2] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha256(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i2 = 1; i2 < iterations; i2++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i2 = 1; i2 < iterations; i2++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= block[i2];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt, hasher) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            if (!hasher) {
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            } else {
              var key = EvpKDF.create({ keySize: keySize + ivSize, hasher }).compute(password, salt);
            }
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i2 = 0; i2 < blockSize; i2++) {
            words[offset + i2] ^= keystream[i2];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i2 = data.sigBytes - 1;
          for (var i2 = data.sigBytes - 1; i2 >= 0; i2--) {
            if (dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) {
              data.sigBytes = i2 + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d[i2] = i2 << 1;
            } else {
              d[i2] = i2 << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i2 = 0; i2 < 56; i2++) {
              var keyBitPos = PC1[i2] - 1;
              keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i2 = 0; i2 < 24; i2++) {
                subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i2 = 1; i2 < 7; i2++) {
                subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i2 = 0; i2 < 16; i2++) {
              invSubKeys[i2] = subKeys[15 - i2];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i2 = 0; i2 < 8; i2++) {
                f |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i2 = 0; i2 < 256; i2++) {
              S[i2] = i2;
            }
            for (var i2 = 0, j = 0; i2 < 256; i2++) {
              var keyByteIndex = i2 % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i2] + keyByte) % 256;
              var t = S[i2];
              S[i2] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i2 = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i2 = (i2 + 1) % 256;
            j = (j + S[i2]) % 256;
            var t = S[i2];
            S[i2] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i2] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i2;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i2 = this.cfg.drop; i2 > 0; i2--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i2 = 0; i2 < 4; i2++) {
              K[i2] = (K[i2] << 8 | K[i2] >>> 24) & 16711935 | (K[i2] << 24 | K[i2] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S[i2] = (S[i2] << 8 | S[i2] >>> 24) & 16711935 | (S[i2] << 24 | S[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S[i2] = (S[i2] << 8 | S[i2] >>> 24) & 16711935 | (S[i2] << 24 | S[i2] >>> 8) & 4278255360;
              M[offset + i2] ^= S[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i2] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/blowfish.js
var require_blowfish = __commonJS({
  "node_modules/crypto-js/blowfish.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        const ORIG_P = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ];
        const ORIG_S = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 255;
          let b = x >> 16 & 255;
          let c = x >> 8 & 255;
          let d = x & 255;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i2 = 0; i2 < N; ++i2) {
            Xl = Xl ^ ctx.pbox[i2];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return { left: Xl, right: Xr };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i2 = N + 1; i2 > 1; --i2) {
            Xl = Xl ^ ctx.pbox[i2];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return { left: Xl, right: Xr };
        }
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i2 = 0; i2 < N + 2; i2 += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i2] = Data1;
            ctx.pbox[i2 + 1] = Data2;
          }
          for (let i2 = 0; i2 < 4; i2++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i2][j] = Data1;
              ctx.sbox[i2][j + 1] = Data2;
            }
          }
          return true;
        }
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function() {
            if (this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function(M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function(M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS.Blowfish;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports2, module2) {
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module2.exports = exports2 = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy(), require_blowfish());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy", "./blowfish"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// node_modules/restructure/src/DecodeStream.js
var require_DecodeStream = __commonJS({
  "node_modules/restructure/src/DecodeStream.js"(exports2, module2) {
    var iconv;
    try {
      iconv = require("iconv-lite");
    } catch (error) {
    }
    var DecodeStream = class {
      constructor(buffer) {
        this.buffer = buffer;
        this.pos = 0;
        this.length = this.buffer.length;
      }
      readString(length, encoding = "ascii") {
        switch (encoding) {
          case "utf16le":
          case "ucs2":
          case "utf8":
          case "ascii":
            return this.buffer.toString(encoding, this.pos, this.pos += length);
          case "utf16be":
            var buf = Buffer.from(this.readBuffer(length));
            for (let i2 = 0, end = buf.length - 1; i2 < end; i2 += 2) {
              const byte = buf[i2];
              buf[i2] = buf[i2 + 1];
              buf[i2 + 1] = byte;
            }
            return buf.toString("utf16le");
          default:
            buf = this.readBuffer(length);
            if (iconv) {
              try {
                return iconv.decode(buf, encoding);
              } catch (error1) {
              }
            }
            return buf;
        }
      }
      readBuffer(length) {
        return this.buffer.slice(this.pos, this.pos += length);
      }
      readUInt24BE() {
        return (this.readUInt16BE() << 8) + this.readUInt8();
      }
      readUInt24LE() {
        return this.readUInt16LE() + (this.readUInt8() << 16);
      }
      readInt24BE() {
        return (this.readInt16BE() << 8) + this.readUInt8();
      }
      readInt24LE() {
        return this.readUInt16LE() + (this.readInt8() << 16);
      }
    };
    DecodeStream.TYPES = {
      UInt8: 1,
      UInt16: 2,
      UInt24: 3,
      UInt32: 4,
      Int8: 1,
      Int16: 2,
      Int24: 3,
      Int32: 4,
      Float: 4,
      Double: 8
    };
    for (let key in Buffer.prototype) {
      if (key.slice(0, 4) === "read") {
        const bytes = DecodeStream.TYPES[key.replace(/read|[BL]E/g, "")];
        DecodeStream.prototype[key] = function() {
          const ret = this.buffer[key](this.pos);
          this.pos += bytes;
          return ret;
        };
      }
    }
    module2.exports = DecodeStream;
  }
});

// node_modules/restructure/src/EncodeStream.js
var require_EncodeStream = __commonJS({
  "node_modules/restructure/src/EncodeStream.js"(exports2, module2) {
    var iconv;
    var stream = require("stream");
    var DecodeStream = require_DecodeStream();
    try {
      iconv = require("iconv-lite");
    } catch (error) {
    }
    var EncodeStream = class extends stream.Readable {
      constructor(bufferSize = 65536) {
        super(...arguments);
        this.buffer = Buffer.alloc(bufferSize);
        this.bufferOffset = 0;
        this.pos = 0;
      }
      // do nothing, required by node
      _read() {
      }
      ensure(bytes) {
        if (this.bufferOffset + bytes > this.buffer.length) {
          return this.flush();
        }
      }
      flush() {
        if (this.bufferOffset > 0) {
          this.push(Buffer.from(this.buffer.slice(0, this.bufferOffset)));
          return this.bufferOffset = 0;
        }
      }
      writeBuffer(buffer) {
        this.flush();
        this.push(buffer);
        return this.pos += buffer.length;
      }
      writeString(string, encoding = "ascii") {
        switch (encoding) {
          case "utf16le":
          case "ucs2":
          case "utf8":
          case "ascii":
            return this.writeBuffer(Buffer.from(string, encoding));
          case "utf16be":
            var buf = Buffer.from(string, "utf16le");
            for (let i2 = 0, end = buf.length - 1; i2 < end; i2 += 2) {
              const byte = buf[i2];
              buf[i2] = buf[i2 + 1];
              buf[i2 + 1] = byte;
            }
            return this.writeBuffer(buf);
          default:
            if (iconv) {
              return this.writeBuffer(iconv.encode(string, encoding));
            } else {
              throw new Error("Install iconv-lite to enable additional string encodings.");
            }
        }
      }
      writeUInt24BE(val) {
        this.ensure(3);
        this.buffer[this.bufferOffset++] = val >>> 16 & 255;
        this.buffer[this.bufferOffset++] = val >>> 8 & 255;
        this.buffer[this.bufferOffset++] = val & 255;
        return this.pos += 3;
      }
      writeUInt24LE(val) {
        this.ensure(3);
        this.buffer[this.bufferOffset++] = val & 255;
        this.buffer[this.bufferOffset++] = val >>> 8 & 255;
        this.buffer[this.bufferOffset++] = val >>> 16 & 255;
        return this.pos += 3;
      }
      writeInt24BE(val) {
        if (val >= 0) {
          return this.writeUInt24BE(val);
        } else {
          return this.writeUInt24BE(val + 16777215 + 1);
        }
      }
      writeInt24LE(val) {
        if (val >= 0) {
          return this.writeUInt24LE(val);
        } else {
          return this.writeUInt24LE(val + 16777215 + 1);
        }
      }
      fill(val, length) {
        if (length < this.buffer.length) {
          this.ensure(length);
          this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
          this.bufferOffset += length;
          return this.pos += length;
        } else {
          const buf = Buffer.alloc(length);
          buf.fill(val);
          return this.writeBuffer(buf);
        }
      }
      end() {
        this.flush();
        return this.push(null);
      }
    };
    for (let key in Buffer.prototype) {
      if (key.slice(0, 5) === "write") {
        const bytes = +DecodeStream.TYPES[key.replace(/write|[BL]E/g, "")];
        EncodeStream.prototype[key] = function(value) {
          this.ensure(bytes);
          this.buffer[key](value, this.bufferOffset);
          this.bufferOffset += bytes;
          return this.pos += bytes;
        };
      }
    }
    module2.exports = EncodeStream;
  }
});

// node_modules/restructure/src/Number.js
var require_Number = __commonJS({
  "node_modules/restructure/src/Number.js"(exports2) {
    var DecodeStream = require_DecodeStream();
    var NumberT = class {
      constructor(type, endian = "BE") {
        this.type = type;
        this.endian = endian;
        this.fn = this.type;
        if (this.type[this.type.length - 1] !== "8") {
          this.fn += this.endian;
        }
      }
      size() {
        return DecodeStream.TYPES[this.type];
      }
      decode(stream) {
        return stream[`read${this.fn}`]();
      }
      encode(stream, val) {
        return stream[`write${this.fn}`](val);
      }
    };
    exports2.Number = NumberT;
    exports2.uint8 = new NumberT("UInt8");
    exports2.uint16be = exports2.uint16 = new NumberT("UInt16", "BE");
    exports2.uint16le = new NumberT("UInt16", "LE");
    exports2.uint24be = exports2.uint24 = new NumberT("UInt24", "BE");
    exports2.uint24le = new NumberT("UInt24", "LE");
    exports2.uint32be = exports2.uint32 = new NumberT("UInt32", "BE");
    exports2.uint32le = new NumberT("UInt32", "LE");
    exports2.int8 = new NumberT("Int8");
    exports2.int16be = exports2.int16 = new NumberT("Int16", "BE");
    exports2.int16le = new NumberT("Int16", "LE");
    exports2.int24be = exports2.int24 = new NumberT("Int24", "BE");
    exports2.int24le = new NumberT("Int24", "LE");
    exports2.int32be = exports2.int32 = new NumberT("Int32", "BE");
    exports2.int32le = new NumberT("Int32", "LE");
    exports2.floatbe = exports2.float = new NumberT("Float", "BE");
    exports2.floatle = new NumberT("Float", "LE");
    exports2.doublebe = exports2.double = new NumberT("Double", "BE");
    exports2.doublele = new NumberT("Double", "LE");
    var Fixed = class extends NumberT {
      constructor(size, endian, fracBits = size >> 1) {
        super(`Int${size}`, endian);
        this._point = 1 << fracBits;
      }
      decode(stream) {
        return super.decode(stream) / this._point;
      }
      encode(stream, val) {
        return super.encode(stream, val * this._point | 0);
      }
    };
    exports2.Fixed = Fixed;
    exports2.fixed16be = exports2.fixed16 = new Fixed(16, "BE");
    exports2.fixed16le = new Fixed(16, "LE");
    exports2.fixed32be = exports2.fixed32 = new Fixed(32, "BE");
    exports2.fixed32le = new Fixed(32, "LE");
  }
});

// node_modules/restructure/src/utils.js
var require_utils = __commonJS({
  "node_modules/restructure/src/utils.js"(exports2) {
    var { Number: NumberT } = require_Number();
    exports2.resolveLength = function(length, stream, parent) {
      let res;
      if (typeof length === "number") {
        res = length;
      } else if (typeof length === "function") {
        res = length.call(parent, parent);
      } else if (parent && typeof length === "string") {
        res = parent[length];
      } else if (stream && length instanceof NumberT) {
        res = length.decode(stream);
      }
      if (isNaN(res)) {
        throw new Error("Not a fixed size");
      }
      return res;
    };
    var PropertyDescriptor = class {
      constructor(opts = {}) {
        this.enumerable = true;
        this.configurable = true;
        for (let key in opts) {
          const val = opts[key];
          this[key] = val;
        }
      }
    };
    exports2.PropertyDescriptor = PropertyDescriptor;
  }
});

// node_modules/restructure/src/Array.js
var require_Array = __commonJS({
  "node_modules/restructure/src/Array.js"(exports2, module2) {
    var { Number: NumberT } = require_Number();
    var utils = require_utils();
    var ArrayT = class {
      constructor(type, length, lengthType = "count") {
        this.type = type;
        this.length = length;
        this.lengthType = lengthType;
      }
      decode(stream, parent) {
        let length;
        const { pos } = stream;
        const res = [];
        let ctx = parent;
        if (this.length != null) {
          length = utils.resolveLength(this.length, stream, parent);
        }
        if (this.length instanceof NumberT) {
          Object.defineProperties(res, {
            parent: { value: parent },
            _startOffset: { value: pos },
            _currentOffset: { value: 0, writable: true },
            _length: { value: length }
          });
          ctx = res;
        }
        if (length == null || this.lengthType === "bytes") {
          const target = length != null ? stream.pos + length : (parent != null ? parent._length : void 0) ? parent._startOffset + parent._length : stream.length;
          while (stream.pos < target) {
            res.push(this.type.decode(stream, ctx));
          }
        } else {
          for (let i2 = 0, end = length; i2 < end; i2++) {
            res.push(this.type.decode(stream, ctx));
          }
        }
        return res;
      }
      size(array, ctx) {
        if (!array) {
          return this.type.size(null, ctx) * utils.resolveLength(this.length, null, ctx);
        }
        let size = 0;
        if (this.length instanceof NumberT) {
          size += this.length.size();
          ctx = { parent: ctx };
        }
        for (let item of array) {
          size += this.type.size(item, ctx);
        }
        return size;
      }
      encode(stream, array, parent) {
        let ctx = parent;
        if (this.length instanceof NumberT) {
          ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent
          };
          ctx.pointerOffset = stream.pos + this.size(array, ctx);
          this.length.encode(stream, array.length);
        }
        for (let item of array) {
          this.type.encode(stream, item, ctx);
        }
        if (this.length instanceof NumberT) {
          let i2 = 0;
          while (i2 < ctx.pointers.length) {
            const ptr = ctx.pointers[i2++];
            ptr.type.encode(stream, ptr.val);
          }
        }
      }
    };
    module2.exports = ArrayT;
  }
});

// node_modules/restructure/src/LazyArray.js
var require_LazyArray = __commonJS({
  "node_modules/restructure/src/LazyArray.js"(exports2, module2) {
    var ArrayT = require_Array();
    var { Number: NumberT } = require_Number();
    var utils = require_utils();
    var { inspect } = require("util");
    var LazyArrayT = class extends ArrayT {
      decode(stream, parent) {
        const { pos } = stream;
        const length = utils.resolveLength(this.length, stream, parent);
        if (this.length instanceof NumberT) {
          parent = {
            parent,
            _startOffset: pos,
            _currentOffset: 0,
            _length: length
          };
        }
        const res = new LazyArray(this.type, length, stream, parent);
        stream.pos += length * this.type.size(null, parent);
        return res;
      }
      size(val, ctx) {
        if (val instanceof LazyArray) {
          val = val.toArray();
        }
        return super.size(val, ctx);
      }
      encode(stream, val, ctx) {
        if (val instanceof LazyArray) {
          val = val.toArray();
        }
        return super.encode(stream, val, ctx);
      }
    };
    var LazyArray = class {
      constructor(type, length, stream, ctx) {
        this.type = type;
        this.length = length;
        this.stream = stream;
        this.ctx = ctx;
        this.base = this.stream.pos;
        this.items = [];
      }
      get(index) {
        if (index < 0 || index >= this.length) {
          return void 0;
        }
        if (this.items[index] == null) {
          const { pos } = this.stream;
          this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
          this.items[index] = this.type.decode(this.stream, this.ctx);
          this.stream.pos = pos;
        }
        return this.items[index];
      }
      toArray() {
        const result = [];
        for (let i2 = 0, end = this.length; i2 < end; i2++) {
          result.push(this.get(i2));
        }
        return result;
      }
      inspect() {
        return inspect(this.toArray());
      }
    };
    module2.exports = LazyArrayT;
  }
});

// node_modules/restructure/src/Bitfield.js
var require_Bitfield = __commonJS({
  "node_modules/restructure/src/Bitfield.js"(exports2, module2) {
    var Bitfield = class {
      constructor(type, flags = []) {
        this.type = type;
        this.flags = flags;
      }
      decode(stream) {
        const val = this.type.decode(stream);
        const res = {};
        for (let i2 = 0; i2 < this.flags.length; i2++) {
          const flag = this.flags[i2];
          if (flag != null) {
            res[flag] = !!(val & 1 << i2);
          }
        }
        return res;
      }
      size() {
        return this.type.size();
      }
      encode(stream, keys) {
        let val = 0;
        for (let i2 = 0; i2 < this.flags.length; i2++) {
          const flag = this.flags[i2];
          if (flag != null) {
            if (keys[flag]) {
              val |= 1 << i2;
            }
          }
        }
        return this.type.encode(stream, val);
      }
    };
    module2.exports = Bitfield;
  }
});

// node_modules/restructure/src/Boolean.js
var require_Boolean = __commonJS({
  "node_modules/restructure/src/Boolean.js"(exports2, module2) {
    var BooleanT = class {
      constructor(type) {
        this.type = type;
      }
      decode(stream, parent) {
        return !!this.type.decode(stream, parent);
      }
      size(val, parent) {
        return this.type.size(val, parent);
      }
      encode(stream, val, parent) {
        return this.type.encode(stream, +val, parent);
      }
    };
    module2.exports = BooleanT;
  }
});

// node_modules/restructure/src/Buffer.js
var require_Buffer = __commonJS({
  "node_modules/restructure/src/Buffer.js"(exports2, module2) {
    var utils = require_utils();
    var { Number: NumberT } = require_Number();
    var BufferT = class {
      constructor(length) {
        this.length = length;
      }
      decode(stream, parent) {
        const length = utils.resolveLength(this.length, stream, parent);
        return stream.readBuffer(length);
      }
      size(val, parent) {
        if (!val) {
          return utils.resolveLength(this.length, null, parent);
        }
        return val.length;
      }
      encode(stream, buf, parent) {
        if (this.length instanceof NumberT) {
          this.length.encode(stream, buf.length);
        }
        return stream.writeBuffer(buf);
      }
    };
    module2.exports = BufferT;
  }
});

// node_modules/restructure/src/Enum.js
var require_Enum = __commonJS({
  "node_modules/restructure/src/Enum.js"(exports2, module2) {
    var Enum = class {
      constructor(type, options = []) {
        this.type = type;
        this.options = options;
      }
      decode(stream) {
        const index = this.type.decode(stream);
        return this.options[index] || index;
      }
      size() {
        return this.type.size();
      }
      encode(stream, val) {
        const index = this.options.indexOf(val);
        if (index === -1) {
          throw new Error(`Unknown option in enum: ${val}`);
        }
        return this.type.encode(stream, index);
      }
    };
    module2.exports = Enum;
  }
});

// node_modules/restructure/src/Optional.js
var require_Optional = __commonJS({
  "node_modules/restructure/src/Optional.js"(exports2, module2) {
    var Optional = class {
      constructor(type, condition = true) {
        this.type = type;
        this.condition = condition;
      }
      decode(stream, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.decode(stream, parent);
        }
      }
      size(val, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.size(val, parent);
        } else {
          return 0;
        }
      }
      encode(stream, val, parent) {
        let { condition } = this;
        if (typeof condition === "function") {
          condition = condition.call(parent, parent);
        }
        if (condition) {
          return this.type.encode(stream, val, parent);
        }
      }
    };
    module2.exports = Optional;
  }
});

// node_modules/restructure/src/Reserved.js
var require_Reserved = __commonJS({
  "node_modules/restructure/src/Reserved.js"(exports2, module2) {
    var utils = require_utils();
    var Reserved = class {
      constructor(type, count = 1) {
        this.type = type;
        this.count = count;
      }
      decode(stream, parent) {
        stream.pos += this.size(null, parent);
        return void 0;
      }
      size(data, parent) {
        const count = utils.resolveLength(this.count, null, parent);
        return this.type.size() * count;
      }
      encode(stream, val, parent) {
        return stream.fill(0, this.size(val, parent));
      }
    };
    module2.exports = Reserved;
  }
});

// node_modules/restructure/src/String.js
var require_String = __commonJS({
  "node_modules/restructure/src/String.js"(exports2, module2) {
    var { Number: NumberT } = require_Number();
    var utils = require_utils();
    var StringT = class {
      constructor(length, encoding = "ascii") {
        this.length = length;
        this.encoding = encoding;
      }
      decode(stream, parent) {
        let length, pos;
        if (this.length != null) {
          length = utils.resolveLength(this.length, stream, parent);
        } else {
          let buffer;
          ({ buffer, length, pos } = stream);
          while (pos < length && buffer[pos] !== 0) {
            ++pos;
          }
          length = pos - stream.pos;
        }
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent, parent) || "ascii";
        }
        const string = stream.readString(length, encoding);
        if (this.length == null && stream.pos < stream.length) {
          stream.pos++;
        }
        return string;
      }
      size(val, parent) {
        if (!val) {
          return utils.resolveLength(this.length, null, parent);
        }
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        }
        if (encoding === "utf16be") {
          encoding = "utf16le";
        }
        let size = Buffer.byteLength(val, encoding);
        if (this.length instanceof NumberT) {
          size += this.length.size();
        }
        if (this.length == null) {
          size++;
        }
        return size;
      }
      encode(stream, val, parent) {
        let { encoding } = this;
        if (typeof encoding === "function") {
          encoding = encoding.call(parent != null ? parent.val : void 0, parent != null ? parent.val : void 0) || "ascii";
        }
        if (this.length instanceof NumberT) {
          this.length.encode(stream, Buffer.byteLength(val, encoding));
        }
        stream.writeString(val, encoding);
        if (this.length == null) {
          return stream.writeUInt8(0);
        }
      }
    };
    module2.exports = StringT;
  }
});

// node_modules/restructure/src/Struct.js
var require_Struct = __commonJS({
  "node_modules/restructure/src/Struct.js"(exports2, module2) {
    var utils = require_utils();
    var Struct = class {
      constructor(fields = {}) {
        this.fields = fields;
      }
      decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        this._parseFields(stream, res, this.fields);
        if (this.process != null) {
          this.process.call(res, stream);
        }
        return res;
      }
      _setup(stream, parent, length) {
        const res = {};
        Object.defineProperties(res, {
          parent: { value: parent },
          _startOffset: { value: stream.pos },
          _currentOffset: { value: 0, writable: true },
          _length: { value: length }
        });
        return res;
      }
      _parseFields(stream, res, fields) {
        for (let key in fields) {
          var val;
          const type = fields[key];
          if (typeof type === "function") {
            val = type.call(res, res);
          } else {
            val = type.decode(stream, res);
          }
          if (val !== void 0) {
            if (val instanceof utils.PropertyDescriptor) {
              Object.defineProperty(res, key, val);
            } else {
              res[key] = val;
            }
          }
          res._currentOffset = stream.pos - res._startOffset;
        }
      }
      size(val, parent, includePointers) {
        if (val == null) {
          val = {};
        }
        if (includePointers == null) {
          includePointers = true;
        }
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        let size = 0;
        for (let key in this.fields) {
          const type = this.fields[key];
          if (type.size != null) {
            size += type.size(val[key], ctx);
          }
        }
        if (includePointers) {
          size += ctx.pointerSize;
        }
        return size;
      }
      encode(stream, val, parent) {
        let type;
        if (this.preEncode != null) {
          this.preEncode.call(val, stream);
        }
        const ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        for (let key in this.fields) {
          type = this.fields[key];
          if (type.encode != null) {
            type.encode(stream, val[key], ctx);
          }
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          const ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
      }
    };
    module2.exports = Struct;
  }
});

// node_modules/restructure/src/VersionedStruct.js
var require_VersionedStruct = __commonJS({
  "node_modules/restructure/src/VersionedStruct.js"(exports2, module2) {
    var Struct = require_Struct();
    var getPath = (object, pathArray) => {
      return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object);
    };
    var VersionedStruct = class _VersionedStruct extends Struct {
      constructor(type, versions = {}) {
        super();
        this.type = type;
        this.versions = versions;
        if (typeof type === "string") {
          this.versionPath = type.split(".");
        }
      }
      decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        if (typeof this.type === "string") {
          res.version = getPath(parent, this.versionPath);
        } else {
          res.version = this.type.decode(stream);
        }
        if (this.versions.header) {
          this._parseFields(stream, res, this.versions.header);
        }
        const fields = this.versions[res.version];
        if (fields == null) {
          throw new Error(`Unknown version ${res.version}`);
        }
        if (fields instanceof _VersionedStruct) {
          return fields.decode(stream, parent);
        }
        this._parseFields(stream, res, fields);
        if (this.process != null) {
          this.process.call(res, stream);
        }
        return res;
      }
      size(val, parent, includePointers = true) {
        let key, type;
        if (!val) {
          throw new Error("Not a fixed size");
        }
        const ctx = {
          parent,
          val,
          pointerSize: 0
        };
        let size = 0;
        if (typeof this.type !== "string") {
          size += this.type.size(val.version, ctx);
        }
        if (this.versions.header) {
          for (key in this.versions.header) {
            type = this.versions.header[key];
            if (type.size != null) {
              size += type.size(val[key], ctx);
            }
          }
        }
        const fields = this.versions[val.version];
        if (fields == null) {
          throw new Error(`Unknown version ${val.version}`);
        }
        for (key in fields) {
          type = fields[key];
          if (type.size != null) {
            size += type.size(val[key], ctx);
          }
        }
        if (includePointers) {
          size += ctx.pointerSize;
        }
        return size;
      }
      encode(stream, val, parent) {
        let key, type;
        if (this.preEncode != null) {
          this.preEncode.call(val, stream);
        }
        const ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        if (typeof this.type !== "string") {
          this.type.encode(stream, val.version);
        }
        if (this.versions.header) {
          for (key in this.versions.header) {
            type = this.versions.header[key];
            if (type.encode != null) {
              type.encode(stream, val[key], ctx);
            }
          }
        }
        const fields = this.versions[val.version];
        for (key in fields) {
          type = fields[key];
          if (type.encode != null) {
            type.encode(stream, val[key], ctx);
          }
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          const ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
      }
    };
    module2.exports = VersionedStruct;
  }
});

// node_modules/restructure/src/Pointer.js
var require_Pointer = __commonJS({
  "node_modules/restructure/src/Pointer.js"(exports2) {
    var utils = require_utils();
    var Pointer = class {
      constructor(offsetType, type, options = {}) {
        this.offsetType = offsetType;
        this.type = type;
        this.options = options;
        if (this.type === "void") {
          this.type = null;
        }
        if (this.options.type == null) {
          this.options.type = "local";
        }
        if (this.options.allowNull == null) {
          this.options.allowNull = true;
        }
        if (this.options.nullValue == null) {
          this.options.nullValue = 0;
        }
        if (this.options.lazy == null) {
          this.options.lazy = false;
        }
        if (this.options.relativeTo) {
          if (typeof this.options.relativeTo !== "function") {
            throw new Error("relativeTo option must be a function");
          }
          this.relativeToGetter = options.relativeTo;
        }
      }
      decode(stream, ctx) {
        const offset = this.offsetType.decode(stream, ctx);
        if (offset === this.options.nullValue && this.options.allowNull) {
          return null;
        }
        let relative;
        switch (this.options.type) {
          case "local":
            relative = ctx._startOffset;
            break;
          case "immediate":
            relative = stream.pos - this.offsetType.size();
            break;
          case "parent":
            relative = ctx.parent._startOffset;
            break;
          default:
            var c = ctx;
            while (c.parent) {
              c = c.parent;
            }
            relative = c._startOffset || 0;
        }
        if (this.options.relativeTo) {
          relative += this.relativeToGetter(ctx);
        }
        const ptr = offset + relative;
        if (this.type != null) {
          let val = null;
          const decodeValue = () => {
            if (val != null) {
              return val;
            }
            const { pos } = stream;
            stream.pos = ptr;
            val = this.type.decode(stream, ctx);
            stream.pos = pos;
            return val;
          };
          if (this.options.lazy) {
            return new utils.PropertyDescriptor({
              get: decodeValue
            });
          }
          return decodeValue();
        } else {
          return ptr;
        }
      }
      size(val, ctx) {
        const parent = ctx;
        switch (this.options.type) {
          case "local":
          case "immediate":
            break;
          case "parent":
            ctx = ctx.parent;
            break;
          default:
            while (ctx.parent) {
              ctx = ctx.parent;
            }
        }
        let { type } = this;
        if (type == null) {
          if (!(val instanceof VoidPointer)) {
            throw new Error("Must be a VoidPointer");
          }
          ({ type } = val);
          val = val.value;
        }
        if (val && ctx) {
          ctx.pointerSize += type.size(val, parent);
        }
        return this.offsetType.size();
      }
      encode(stream, val, ctx) {
        let relative;
        const parent = ctx;
        if (val == null) {
          this.offsetType.encode(stream, this.options.nullValue);
          return;
        }
        switch (this.options.type) {
          case "local":
            relative = ctx.startOffset;
            break;
          case "immediate":
            relative = stream.pos + this.offsetType.size(val, parent);
            break;
          case "parent":
            ctx = ctx.parent;
            relative = ctx.startOffset;
            break;
          default:
            relative = 0;
            while (ctx.parent) {
              ctx = ctx.parent;
            }
        }
        if (this.options.relativeTo) {
          relative += this.relativeToGetter(parent.val);
        }
        this.offsetType.encode(stream, ctx.pointerOffset - relative);
        let { type } = this;
        if (type == null) {
          if (!(val instanceof VoidPointer)) {
            throw new Error("Must be a VoidPointer");
          }
          ({ type } = val);
          val = val.value;
        }
        ctx.pointers.push({
          type,
          val,
          parent
        });
        return ctx.pointerOffset += type.size(val, parent);
      }
    };
    var VoidPointer = class {
      constructor(type, value) {
        this.type = type;
        this.value = value;
      }
    };
    exports2.Pointer = Pointer;
    exports2.VoidPointer = VoidPointer;
  }
});

// node_modules/restructure/index.js
var require_restructure = __commonJS({
  "node_modules/restructure/index.js"(exports2) {
    exports2.EncodeStream = require_EncodeStream();
    exports2.DecodeStream = require_DecodeStream();
    exports2.Array = require_Array();
    exports2.LazyArray = require_LazyArray();
    exports2.Bitfield = require_Bitfield();
    exports2.Boolean = require_Boolean();
    exports2.Buffer = require_Buffer();
    exports2.Enum = require_Enum();
    exports2.Optional = require_Optional();
    exports2.Reserved = require_Reserved();
    exports2.String = require_String();
    exports2.Struct = require_Struct();
    exports2.VersionedStruct = require_VersionedStruct();
    var utils = require_utils();
    var NumberT = require_Number();
    var Pointer = require_Pointer();
    Object.assign(exports2, utils, NumberT, Pointer);
  }
});

// node_modules/@swc/helpers/lib/_apply_decorated_descriptor.js
var require_apply_decorated_descriptor = __commonJS({
  "node_modules/@swc/helpers/lib/_apply_decorated_descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _applyDecoratedDescriptor;
    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
      var desc1 = {};
      Object["keys"](descriptor).forEach(function(key) {
        desc1[key] = descriptor[key];
      });
      desc1.enumerable = !!desc1.enumerable;
      desc1.configurable = !!desc1.configurable;
      if ("value" in desc1 || desc1.initializer) {
        desc1.writable = true;
      }
      desc1 = decorators.slice().reverse().reduce(function(desc, decorator) {
        return decorator ? decorator(target, property, desc) || desc : desc;
      }, desc1);
      var hasAccessor = Object.prototype.hasOwnProperty.call(desc1, "get") || Object.prototype.hasOwnProperty.call(desc1, "set");
      if (context && desc1.initializer !== void 0 && !hasAccessor) {
        desc1.value = desc1.initializer ? desc1.initializer.call(context) : void 0;
        desc1.initializer = void 0;
      }
      if (hasAccessor) {
        delete desc1.writable;
        delete desc1.initializer;
        delete desc1.value;
      }
      if (desc1.initializer === void 0) {
        Object["defineProperty"](target, property, desc1);
        desc1 = null;
      }
      return desc1;
    }
  }
});

// node_modules/@swc/helpers/lib/_array_like_to_array.js
var require_array_like_to_array = __commonJS({
  "node_modules/@swc/helpers/lib/_array_like_to_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _arrayLikeToArray;
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
  }
});

// node_modules/@swc/helpers/lib/_array_with_holes.js
var require_array_with_holes = __commonJS({
  "node_modules/@swc/helpers/lib/_array_with_holes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _arrayWithHoles;
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
  }
});

// node_modules/@swc/helpers/lib/_array_without_holes.js
var require_array_without_holes = __commonJS({
  "node_modules/@swc/helpers/lib/_array_without_holes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _arrayWithoutHoles;
    var _arrayLikeToArray = _interopRequireDefault(require_array_like_to_array());
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return (0, _arrayLikeToArray).default(arr);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_assert_this_initialized.js
var require_assert_this_initialized = __commonJS({
  "node_modules/@swc/helpers/lib/_assert_this_initialized.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _assertThisInitialized;
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
  }
});

// node_modules/@swc/helpers/lib/_await_value.js
var require_await_value = __commonJS({
  "node_modules/@swc/helpers/lib/_await_value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _AwaitValue;
    function _AwaitValue(value) {
      this.wrapped = value;
    }
  }
});

// node_modules/@swc/helpers/lib/_async_generator.js
var require_async_generator = __commonJS({
  "node_modules/@swc/helpers/lib/_async_generator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = AsyncGenerator;
    var _awaitValue = _interopRequireDefault(require_await_value());
    function AsyncGenerator(gen) {
      var front, back;
      function send(key, arg) {
        return new Promise(function(resolve, reject) {
          var request = {
            key,
            arg,
            resolve,
            reject,
            next: null
          };
          if (back) {
            back = back.next = request;
          } else {
            front = back = request;
            resume(key, arg);
          }
        });
      }
      function resume(key, arg1) {
        try {
          var result = gen[key](arg1);
          var value = result.value;
          var wrappedAwait = value instanceof _awaitValue.default;
          Promise.resolve(wrappedAwait ? value.wrapped : value).then(function(arg) {
            if (wrappedAwait) {
              resume("next", arg);
              return;
            }
            settle(result.done ? "return" : "normal", arg);
          }, function(err) {
            resume("throw", err);
          });
        } catch (err) {
          settle("throw", err);
        }
      }
      function settle(type, value) {
        switch (type) {
          case "return":
            front.resolve({
              value,
              done: true
            });
            break;
          case "throw":
            front.reject(value);
            break;
          default:
            front.resolve({
              value,
              done: false
            });
            break;
        }
        front = front.next;
        if (front) {
          resume(front.key, front.arg);
        } else {
          back = null;
        }
      }
      this._invoke = send;
      if (typeof gen.return !== "function") {
        this.return = void 0;
      }
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    if (typeof Symbol === "function" && Symbol.asyncIterator) {
      AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
        return this;
      };
    }
    AsyncGenerator.prototype.next = function(arg) {
      return this._invoke("next", arg);
    };
    AsyncGenerator.prototype.throw = function(arg) {
      return this._invoke("throw", arg);
    };
    AsyncGenerator.prototype.return = function(arg) {
      return this._invoke("return", arg);
    };
  }
});

// node_modules/@swc/helpers/lib/_async_generator_delegate.js
var require_async_generator_delegate = __commonJS({
  "node_modules/@swc/helpers/lib/_async_generator_delegate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _asyncGeneratorDelegate;
    function _asyncGeneratorDelegate(inner, awaitWrap) {
      var iter = {}, waiting = false;
      function pump(key, value) {
        waiting = true;
        value = new Promise(function(resolve) {
          resolve(inner[key](value));
        });
        return {
          done: false,
          value: awaitWrap(value)
        };
      }
      if (typeof Symbol === "function" && Symbol.iterator) {
        iter[Symbol.iterator] = function() {
          return this;
        };
      }
      iter.next = function(value) {
        if (waiting) {
          waiting = false;
          return value;
        }
        return pump("next", value);
      };
      if (typeof inner.throw === "function") {
        iter.throw = function(value) {
          if (waiting) {
            waiting = false;
            throw value;
          }
          return pump("throw", value);
        };
      }
      if (typeof inner.return === "function") {
        iter.return = function(value) {
          return pump("return", value);
        };
      }
      return iter;
    }
  }
});

// node_modules/@swc/helpers/lib/_async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/@swc/helpers/lib/_async_iterator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _asyncIterator;
    function _asyncIterator(iterable) {
      var method;
      if (typeof Symbol === "function") {
        if (Symbol.asyncIterator) {
          method = iterable[Symbol.asyncIterator];
          if (method != null)
            return method.call(iterable);
        }
        if (Symbol.iterator) {
          method = iterable[Symbol.iterator];
          if (method != null)
            return method.call(iterable);
        }
      }
      throw new TypeError("Object is not async iterable");
    }
  }
});

// node_modules/@swc/helpers/lib/_async_to_generator.js
var require_async_to_generator = __commonJS({
  "node_modules/@swc/helpers/lib/_async_to_generator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _asyncToGenerator;
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_await_async_generator.js
var require_await_async_generator = __commonJS({
  "node_modules/@swc/helpers/lib/_await_async_generator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _awaitAsyncGenerator;
    var _awaitValue = _interopRequireDefault(require_await_value());
    function _awaitAsyncGenerator(value) {
      return new _awaitValue.default(value);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_check_private_redeclaration.js
var require_check_private_redeclaration = __commonJS({
  "node_modules/@swc/helpers/lib/_check_private_redeclaration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _checkPrivateRedeclaration;
    function _checkPrivateRedeclaration(obj, privateCollection) {
      if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_apply_descriptor_destructure.js
var require_class_apply_descriptor_destructure = __commonJS({
  "node_modules/@swc/helpers/lib/_class_apply_descriptor_destructure.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classApplyDescriptorDestructureSet;
    function _classApplyDescriptorDestructureSet(receiver, descriptor) {
      if (descriptor.set) {
        if (!("__destrObj" in descriptor)) {
          descriptor.__destrObj = {
            set value(v) {
              descriptor.set.call(receiver, v);
            }
          };
        }
        return descriptor.__destrObj;
      } else {
        if (!descriptor.writable) {
          throw new TypeError("attempted to set read only private field");
        }
        return descriptor;
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_apply_descriptor_get.js
var require_class_apply_descriptor_get = __commonJS({
  "node_modules/@swc/helpers/lib/_class_apply_descriptor_get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classApplyDescriptorGet;
    function _classApplyDescriptorGet(receiver, descriptor) {
      if (descriptor.get) {
        return descriptor.get.call(receiver);
      }
      return descriptor.value;
    }
  }
});

// node_modules/@swc/helpers/lib/_class_apply_descriptor_set.js
var require_class_apply_descriptor_set = __commonJS({
  "node_modules/@swc/helpers/lib/_class_apply_descriptor_set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classApplyDescriptorSet;
    function _classApplyDescriptorSet(receiver, descriptor, value) {
      if (descriptor.set) {
        descriptor.set.call(receiver, value);
      } else {
        if (!descriptor.writable) {
          throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_call_check.js
var require_class_call_check = __commonJS({
  "node_modules/@swc/helpers/lib/_class_call_check.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classCallCheck;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_check_private_static_field_descriptor.js
var require_class_check_private_static_field_descriptor = __commonJS({
  "node_modules/@swc/helpers/lib/_class_check_private_static_field_descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classCheckPrivateStaticFieldDescriptor;
    function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
      if (descriptor === void 0) {
        throw new TypeError("attempted to " + action + " private static field before its declaration");
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_check_private_static_access.js
var require_class_check_private_static_access = __commonJS({
  "node_modules/@swc/helpers/lib/_class_check_private_static_access.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classCheckPrivateStaticAccess;
    function _classCheckPrivateStaticAccess(receiver, classConstructor) {
      if (receiver !== classConstructor) {
        throw new TypeError("Private static access of wrong provenance");
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_class_name_tdz_error.js
var require_class_name_tdz_error = __commonJS({
  "node_modules/@swc/helpers/lib/_class_name_tdz_error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classNameTDZError;
    function _classNameTDZError(name) {
      throw new Error('Class "' + name + '" cannot be referenced in computed property keys.');
    }
  }
});

// node_modules/@swc/helpers/lib/_class_extract_field_descriptor.js
var require_class_extract_field_descriptor = __commonJS({
  "node_modules/@swc/helpers/lib/_class_extract_field_descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classExtractFieldDescriptor;
    function _classExtractFieldDescriptor(receiver, privateMap, action) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
      }
      return privateMap.get(receiver);
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_destructure.js
var require_class_private_field_destructure = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_destructure.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldDestructureSet;
    var _classExtractFieldDescriptor = _interopRequireDefault(require_class_extract_field_descriptor());
    var _classApplyDescriptorDestructure = _interopRequireDefault(require_class_apply_descriptor_destructure());
    function _classPrivateFieldDestructureSet(receiver, privateMap) {
      var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, "set");
      return (0, _classApplyDescriptorDestructure).default(receiver, descriptor);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_get.js
var require_class_private_field_get = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldGet;
    var _classExtractFieldDescriptor = _interopRequireDefault(require_class_extract_field_descriptor());
    var _classApplyDescriptorGet = _interopRequireDefault(require_class_apply_descriptor_get());
    function _classPrivateFieldGet(receiver, privateMap) {
      var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, "get");
      return (0, _classApplyDescriptorGet).default(receiver, descriptor);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_init.js
var require_class_private_field_init = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_init.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldInit;
    var _checkPrivateRedeclaration = _interopRequireDefault(require_check_private_redeclaration());
    function _classPrivateFieldInit(obj, privateMap, value) {
      (0, _checkPrivateRedeclaration).default(obj, privateMap);
      privateMap.set(obj, value);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_loose_base.js
var require_class_private_field_loose_base = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_loose_base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldBase;
    function _classPrivateFieldBase(receiver, privateKey) {
      if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
      }
      return receiver;
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_loose_key.js
var require_class_private_field_loose_key = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_loose_key.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldLooseKey;
    function _classPrivateFieldLooseKey(name) {
      return "__private_" + id++ + "_" + name;
    }
    var id = 0;
  }
});

// node_modules/@swc/helpers/lib/_class_private_field_set.js
var require_class_private_field_set = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_field_set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateFieldSet;
    var _classExtractFieldDescriptor = _interopRequireDefault(require_class_extract_field_descriptor());
    var _classApplyDescriptorSet = _interopRequireDefault(require_class_apply_descriptor_set());
    function _classPrivateFieldSet(receiver, privateMap, value) {
      var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, "set");
      (0, _classApplyDescriptorSet).default(receiver, descriptor, value);
      return value;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_method_get.js
var require_class_private_method_get = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_method_get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateMethodGet;
    function _classPrivateMethodGet(receiver, privateSet, fn) {
      if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return fn;
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_method_init.js
var require_class_private_method_init = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_method_init.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateMethodInit;
    var _checkPrivateRedeclaration = _interopRequireDefault(require_check_private_redeclaration());
    function _classPrivateMethodInit(obj, privateSet) {
      (0, _checkPrivateRedeclaration).default(obj, privateSet);
      privateSet.add(obj);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_private_method_set.js
var require_class_private_method_set = __commonJS({
  "node_modules/@swc/helpers/lib/_class_private_method_set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classPrivateMethodSet;
    function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  }
});

// node_modules/@swc/helpers/lib/_class_static_private_field_destructure.js
var require_class_static_private_field_destructure = __commonJS({
  "node_modules/@swc/helpers/lib/_class_static_private_field_destructure.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classStaticPrivateFieldDestructureSet;
    var _classCheckPrivateStaticAccess = _interopRequireDefault(require_class_check_private_static_access());
    var _classApplyDescriptorDestructure = _interopRequireDefault(require_class_apply_descriptor_destructure());
    function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
      (0, _classCheckPrivateStaticAccess).default(receiver, classConstructor);
      (0, _classCheckPrivateStaticAccess).default(descriptor, "set");
      return (0, _classApplyDescriptorDestructure).default(receiver, descriptor);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_static_private_field_spec_get.js
var require_class_static_private_field_spec_get = __commonJS({
  "node_modules/@swc/helpers/lib/_class_static_private_field_spec_get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classStaticPrivateFieldSpecGet;
    var _classCheckPrivateStaticAccess = _interopRequireDefault(require_class_check_private_static_access());
    var _classApplyDescriptorGet = _interopRequireDefault(require_class_apply_descriptor_get());
    function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
      (0, _classCheckPrivateStaticAccess).default(receiver, classConstructor);
      (0, _classCheckPrivateStaticAccess).default(descriptor, "get");
      return (0, _classApplyDescriptorGet).default(receiver, descriptor);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_class_static_private_field_spec_set.js
var require_class_static_private_field_spec_set = __commonJS({
  "node_modules/@swc/helpers/lib/_class_static_private_field_spec_set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _classStaticPrivateFieldSpecSet;
    var _classCheckPrivateStaticAccess = _interopRequireDefault(require_class_check_private_static_access());
    var _classApplyDescriptorSet = _interopRequireDefault(require_class_apply_descriptor_set());
    function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
      (0, _classCheckPrivateStaticAccess).default(receiver, classConstructor);
      (0, _classCheckPrivateStaticAccess).default(descriptor, "set");
      (0, _classApplyDescriptorSet).default(receiver, descriptor, value);
      return value;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_set_prototype_of.js
var require_set_prototype_of = __commonJS({
  "node_modules/@swc/helpers/lib/_set_prototype_of.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _setPrototypeOf;
    function _setPrototypeOf(o, p) {
      return setPrototypeOf(o, p);
    }
    function setPrototypeOf(o1, p1) {
      setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf2(o, p) {
        o.__proto__ = p;
        return o;
      };
      return setPrototypeOf(o1, p1);
    }
  }
});

// node_modules/@swc/helpers/lib/_construct.js
var require_construct = __commonJS({
  "node_modules/@swc/helpers/lib/_construct.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _construct;
    var _setPrototypeOf = _interopRequireDefault(require_set_prototype_of());
    function _construct(Parent, args, Class) {
      return construct.apply(null, arguments);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function construct(Parent1, args1, Class1) {
      if (isNativeReflectConstruct()) {
        construct = Reflect.construct;
      } else {
        construct = function construct2(Parent, args, Class) {
          var a = [
            null
          ];
          a.push.apply(a, args);
          var Constructor = Function.bind.apply(Parent, a);
          var instance = new Constructor();
          if (Class)
            (0, _setPrototypeOf).default(instance, Class.prototype);
          return instance;
        };
      }
      return construct.apply(null, arguments);
    }
  }
});

// node_modules/@swc/helpers/lib/_create_class.js
var require_create_class = __commonJS({
  "node_modules/@swc/helpers/lib/_create_class.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _createClass;
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_is_native_reflect_construct.js
var require_is_native_reflect_construct = __commonJS({
  "node_modules/@swc/helpers/lib/_is_native_reflect_construct.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _isNativeReflectConstruct;
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_get_prototype_of.js
var require_get_prototype_of = __commonJS({
  "node_modules/@swc/helpers/lib/_get_prototype_of.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _getPrototypeOf;
    function _getPrototypeOf(o) {
      return getPrototypeOf(o);
    }
    function getPrototypeOf(o1) {
      getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf2(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return getPrototypeOf(o1);
    }
  }
});

// node_modules/@swc/helpers/lib/_type_of.js
var require_type_of = __commonJS({
  "node_modules/@swc/helpers/lib/_type_of.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _typeof2;
    function _typeof2(obj) {
      "@swc/helpers - typeof";
      return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
    }
  }
});

// node_modules/@swc/helpers/lib/_possible_constructor_return.js
var require_possible_constructor_return = __commonJS({
  "node_modules/@swc/helpers/lib/_possible_constructor_return.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _possibleConstructorReturn;
    var _assertThisInitialized = _interopRequireDefault(require_assert_this_initialized());
    var _typeOf = _interopRequireDefault(require_type_of());
    function _possibleConstructorReturn(self2, call) {
      if (call && ((0, _typeOf).default(call) === "object" || typeof call === "function")) {
        return call;
      }
      return (0, _assertThisInitialized).default(self2);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_create_super.js
var require_create_super = __commonJS({
  "node_modules/@swc/helpers/lib/_create_super.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _createSuper;
    var _isNativeReflectConstruct = _interopRequireDefault(require_is_native_reflect_construct());
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of());
    var _possibleConstructorReturn = _interopRequireDefault(require_possible_constructor_return());
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = (0, _isNativeReflectConstruct).default();
      return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf).default(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = (0, _getPrototypeOf).default(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn).default(this, result);
      };
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_iterable_to_array.js
var require_iterable_to_array = __commonJS({
  "node_modules/@swc/helpers/lib/_iterable_to_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _iterableToArray;
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
  }
});

// node_modules/@swc/helpers/lib/_non_iterable_rest.js
var require_non_iterable_rest = __commonJS({
  "node_modules/@swc/helpers/lib/_non_iterable_rest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _nonIterableRest;
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
  }
});

// node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js
var require_unsupported_iterable_to_array = __commonJS({
  "node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _unsupportedIterableToArray;
    var _arrayLikeToArray = _interopRequireDefault(require_array_like_to_array());
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return (0, _arrayLikeToArray).default(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return (0, _arrayLikeToArray).default(o, minLen);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_to_array.js
var require_to_array = __commonJS({
  "node_modules/@swc/helpers/lib/_to_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _toArray;
    var _arrayWithHoles = _interopRequireDefault(require_array_with_holes());
    var _iterableToArray = _interopRequireDefault(require_iterable_to_array());
    var _nonIterableRest = _interopRequireDefault(require_non_iterable_rest());
    var _unsupportedIterableToArray = _interopRequireDefault(require_unsupported_iterable_to_array());
    function _toArray(arr) {
      return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr, i) || (0, _nonIterableRest).default();
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_to_primitive.js
var require_to_primitive = __commonJS({
  "node_modules/@swc/helpers/lib/_to_primitive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _toPrimitive;
    var _typeOf = _interopRequireDefault(require_type_of());
    function _toPrimitive(input, hint) {
      if ((0, _typeOf).default(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if ((0, _typeOf).default(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_to_property_key.js
var require_to_property_key = __commonJS({
  "node_modules/@swc/helpers/lib/_to_property_key.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _toPropertyKey;
    var _typeOf = _interopRequireDefault(require_type_of());
    var _toPrimitive = _interopRequireDefault(require_to_primitive());
    function _toPropertyKey(arg) {
      var key = (0, _toPrimitive).default(arg, "string");
      return (0, _typeOf).default(key) === "symbol" ? key : String(key);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_decorate.js
var require_decorate = __commonJS({
  "node_modules/@swc/helpers/lib/_decorate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _decorate;
    var _toArray = _interopRequireDefault(require_to_array());
    var _toPropertyKey = _interopRequireDefault(require_to_property_key());
    function _decorate(decorators, factory, superClass) {
      var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
      }, superClass);
      var decorated = _decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
      _initializeClassElements(r.F, decorated.elements);
      return _runClassFinishers(r.F, decorated.finishers);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function _createElementDescriptor(def) {
      var key = (0, _toPropertyKey).default(def.key);
      var descriptor;
      if (def.kind === "method") {
        descriptor = {
          value: def.value,
          writable: true,
          configurable: true,
          enumerable: false
        };
        Object.defineProperty(def.value, "name", {
          value: _typeof(key) === "symbol" ? "" : key,
          configurable: true
        });
      } else if (def.kind === "get") {
        descriptor = {
          get: def.value,
          configurable: true,
          enumerable: false
        };
      } else if (def.kind === "set") {
        descriptor = {
          set: def.value,
          configurable: true,
          enumerable: false
        };
      } else if (def.kind === "field") {
        descriptor = {
          configurable: true,
          writable: true,
          enumerable: true
        };
      }
      var element = {
        kind: def.kind === "field" ? "field" : "method",
        key,
        placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
        descriptor
      };
      if (def.decorators)
        element.decorators = def.decorators;
      if (def.kind === "field")
        element.initializer = def.value;
      return element;
    }
    function _coalesceGetterSetter(element, other) {
      if (element.descriptor.get !== void 0) {
        other.descriptor.get = element.descriptor.get;
      } else {
        other.descriptor.set = element.descriptor.set;
      }
    }
    function _coalesceClassElements(elements) {
      var newElements = [];
      var isSameElement = function isSameElement2(other) {
        return other.kind === "method" && other.key === element.key && other.placement === element.placement;
      };
      for (var i2 = 0; i2 < elements.length; i2++) {
        var element = elements[i2];
        var other1;
        if (element.kind === "method" && (other1 = newElements.find(isSameElement))) {
          if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other1.descriptor)) {
            if (_hasDecorators(element) || _hasDecorators(other1)) {
              throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
            }
            other1.descriptor = element.descriptor;
          } else {
            if (_hasDecorators(element)) {
              if (_hasDecorators(other1)) {
                throw new ReferenceError("Decorators can't be placed on different accessors with for the same property (" + element.key + ").");
              }
              other1.decorators = element.decorators;
            }
            _coalesceGetterSetter(element, other1);
          }
        } else {
          newElements.push(element);
        }
      }
      return newElements;
    }
    function _hasDecorators(element) {
      return element.decorators && element.decorators.length;
    }
    function _isDataDescriptor(desc) {
      return desc !== void 0 && !(desc.value === void 0 && desc.writable === void 0);
    }
    function _initializeClassElements(F, elements) {
      var proto = F.prototype;
      [
        "method",
        "field"
      ].forEach(function(kind) {
        elements.forEach(function(element) {
          var placement = element.placement;
          if (element.kind === kind && (placement === "static" || placement === "prototype")) {
            var receiver = placement === "static" ? F : proto;
            _defineClassElement(receiver, element);
          }
        });
      });
    }
    function _initializeInstanceElements(O, elements) {
      [
        "method",
        "field"
      ].forEach(function(kind) {
        elements.forEach(function(element) {
          if (element.kind === kind && element.placement === "own") {
            _defineClassElement(O, element);
          }
        });
      });
    }
    function _defineClassElement(receiver, element) {
      var descriptor = element.descriptor;
      if (element.kind === "field") {
        var initializer = element.initializer;
        descriptor = {
          enumerable: descriptor.enumerable,
          writable: descriptor.writable,
          configurable: descriptor.configurable,
          value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
      }
      Object.defineProperty(receiver, element.key, descriptor);
    }
    function _decorateClass(elements, decorators) {
      var newElements = [];
      var finishers = [];
      var placements = {
        static: [],
        prototype: [],
        own: []
      };
      elements.forEach(function(element) {
        _addElementPlacement(element, placements);
      });
      elements.forEach(function(element) {
        if (!_hasDecorators(element))
          return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
      });
      if (!decorators) {
        return {
          elements: newElements,
          finishers
        };
      }
      var result = _decorateConstructor(newElements, decorators);
      finishers.push.apply(finishers, result.finishers);
      result.finishers = finishers;
      return result;
    }
    function _addElementPlacement(element, placements, silent) {
      var keys = placements[element.placement];
      if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError("Duplicated element (" + element.key + ")");
      }
      keys.push(element.key);
    }
    function _decorateElement(element, placements) {
      var extras = [];
      var finishers = [];
      for (var decorators = element.decorators, i2 = decorators.length - 1; i2 >= 0; i2--) {
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras((0, decorators[i2])(elementObject) || elementObject);
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
          finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
          for (var j = 0; j < newExtras.length; j++) {
            _addElementPlacement(newExtras[j], placements);
          }
          extras.push.apply(extras, newExtras);
        }
      }
      return {
        element,
        finishers,
        extras
      };
    }
    function _decorateConstructor(elements, decorators) {
      var finishers = [];
      for (var i2 = decorators.length - 1; i2 >= 0; i2--) {
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor((0, decorators[i2])(obj) || obj);
        if (elementsAndFinisher.finisher !== void 0) {
          finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== void 0) {
          elements = elementsAndFinisher.elements;
          for (var j = 0; j < elements.length - 1; j++) {
            for (var k = j + 1; k < elements.length; k++) {
              if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {
                throw new TypeError("Duplicated element (" + elements[j].key + ")");
              }
            }
          }
        }
      }
      return {
        elements,
        finishers
      };
    }
    function _fromElementDescriptor(element) {
      var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
      };
      var desc = {
        value: "Descriptor",
        configurable: true
      };
      Object.defineProperty(obj, Symbol.toStringTag, desc);
      if (element.kind === "field")
        obj.initializer = element.initializer;
      return obj;
    }
    function _toElementDescriptors(elementObjects) {
      if (elementObjects === void 0)
        return;
      return (0, _toArray).default(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, "finisher", "An element descriptor");
        _disallowProperty(elementObject, "extras", "An element descriptor");
        return element;
      });
    }
    function _toElementDescriptor(elementObject) {
      var kind = String(elementObject.kind);
      if (kind !== "method" && kind !== "field") {
        throw new TypeError(`An element descriptor's .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "` + kind + '"');
      }
      var key = (0, _toPropertyKey).default(elementObject.key);
      var placement = String(elementObject.placement);
      if (placement !== "static" && placement !== "prototype" && placement !== "own") {
        throw new TypeError(`An element descriptor's .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "` + placement + '"');
      }
      var descriptor = elementObject.descriptor;
      _disallowProperty(elementObject, "elements", "An element descriptor");
      var element = {
        kind,
        key,
        placement,
        descriptor: Object.assign({}, descriptor)
      };
      if (kind !== "field") {
        _disallowProperty(elementObject, "initializer", "A method descriptor");
      } else {
        _disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
        element.initializer = elementObject.initializer;
      }
      return element;
    }
    function _toElementFinisherExtras(elementObject) {
      var element = _toElementDescriptor(elementObject);
      var finisher = _optionalCallableProperty(elementObject, "finisher");
      var extras = _toElementDescriptors(elementObject.extras);
      return {
        element,
        finisher,
        extras
      };
    }
    function _fromClassDescriptor(elements) {
      var obj = {
        kind: "class",
        elements: elements.map(_fromElementDescriptor)
      };
      var desc = {
        value: "Descriptor",
        configurable: true
      };
      Object.defineProperty(obj, Symbol.toStringTag, desc);
      return obj;
    }
    function _toClassDescriptor(obj) {
      var kind = String(obj.kind);
      if (kind !== "class") {
        throw new TypeError(`A class descriptor's .kind property must be "class", but a decorator created a class descriptor with .kind "` + kind + '"');
      }
      _disallowProperty(obj, "key", "A class descriptor");
      _disallowProperty(obj, "placement", "A class descriptor");
      _disallowProperty(obj, "descriptor", "A class descriptor");
      _disallowProperty(obj, "initializer", "A class descriptor");
      _disallowProperty(obj, "extras", "A class descriptor");
      var finisher = _optionalCallableProperty(obj, "finisher");
      var elements = _toElementDescriptors(obj.elements);
      return {
        elements,
        finisher
      };
    }
    function _disallowProperty(obj, name, objectType) {
      if (obj[name] !== void 0) {
        throw new TypeError(objectType + " can't have a ." + name + " property.");
      }
    }
    function _optionalCallableProperty(obj, name) {
      var value = obj[name];
      if (value !== void 0 && typeof value !== "function") {
        throw new TypeError("Expected '" + name + "' to be a function");
      }
      return value;
    }
    function _runClassFinishers(constructor, finishers) {
      for (var i2 = 0; i2 < finishers.length; i2++) {
        var newConstructor = (0, finishers[i2])(constructor);
        if (newConstructor !== void 0) {
          if (typeof newConstructor !== "function") {
            throw new TypeError("Finishers must return a constructor.");
          }
          constructor = newConstructor;
        }
      }
      return constructor;
    }
  }
});

// node_modules/@swc/helpers/lib/_defaults.js
var require_defaults = __commonJS({
  "node_modules/@swc/helpers/lib/_defaults.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _defaults;
    function _defaults(obj, defaults) {
      var keys = Object.getOwnPropertyNames(defaults);
      for (var i2 = 0; i2 < keys.length; i2++) {
        var key = keys[i2];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === void 0) {
          Object.defineProperty(obj, key, value);
        }
      }
      return obj;
    }
  }
});

// node_modules/@swc/helpers/lib/_define_enumerable_properties.js
var require_define_enumerable_properties = __commonJS({
  "node_modules/@swc/helpers/lib/_define_enumerable_properties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _defineEnumerableProperties;
    function _defineEnumerableProperties(obj, descs) {
      for (var key in descs) {
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc)
          desc.writable = true;
        Object.defineProperty(obj, key, desc);
      }
      if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for (var i2 = 0; i2 < objectSymbols.length; i2++) {
          var sym = objectSymbols[i2];
          var desc = descs[sym];
          desc.configurable = desc.enumerable = true;
          if ("value" in desc)
            desc.writable = true;
          Object.defineProperty(obj, sym, desc);
        }
      }
      return obj;
    }
  }
});

// node_modules/@swc/helpers/lib/_define_property.js
var require_define_property = __commonJS({
  "node_modules/@swc/helpers/lib/_define_property.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _defineProperty;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
  }
});

// node_modules/@swc/helpers/lib/_extends.js
var require_extends = __commonJS({
  "node_modules/@swc/helpers/lib/_extends.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _extends;
    function _extends() {
      return extends_.apply(this, arguments);
    }
    function extends_() {
      extends_ = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return extends_.apply(this, arguments);
    }
  }
});

// node_modules/@swc/helpers/lib/_super_prop_base.js
var require_super_prop_base = __commonJS({
  "node_modules/@swc/helpers/lib/_super_prop_base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _superPropBase;
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of());
    function _superPropBase(object, property) {
      while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = (0, _getPrototypeOf).default(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_get.js
var require_get = __commonJS({
  "node_modules/@swc/helpers/lib/_get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _get;
    var _superPropBase = _interopRequireDefault(require_super_prop_base());
    function _get(target, property, receiver) {
      return get(target, property, receiver);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function get(target1, property1, receiver1) {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        get = Reflect.get;
      } else {
        get = function get2(target, property, receiver) {
          var base = (0, _superPropBase).default(target, property);
          if (!base)
            return;
          var desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.get) {
            return desc.get.call(receiver || target);
          }
          return desc.value;
        };
      }
      return get(target1, property1, receiver1);
    }
  }
});

// node_modules/@swc/helpers/lib/_inherits.js
var require_inherits = __commonJS({
  "node_modules/@swc/helpers/lib/_inherits.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _inherits;
    var _setPrototypeOf = _interopRequireDefault(require_set_prototype_of());
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        (0, _setPrototypeOf).default(subClass, superClass);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_inherits_loose.js
var require_inherits_loose = __commonJS({
  "node_modules/@swc/helpers/lib/_inherits_loose.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _inheritsLoose;
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
  }
});

// node_modules/@swc/helpers/lib/_initializer_define_property.js
var require_initializer_define_property = __commonJS({
  "node_modules/@swc/helpers/lib/_initializer_define_property.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _initializerDefineProperty;
    function _initializerDefineProperty(target, property, descriptor, context) {
      if (!descriptor)
        return;
      Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
      });
    }
  }
});

// node_modules/@swc/helpers/lib/_initializer_warning_helper.js
var require_initializer_warning_helper = __commonJS({
  "node_modules/@swc/helpers/lib/_initializer_warning_helper.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _initializerWarningHelper;
    function _initializerWarningHelper(descriptor, context) {
      throw new Error("Decorating class property failed. Please ensure that proposal-class-properties is enabled and set to use loose mode. To use proposal-class-properties in spec mode with decorators, wait for the next major version of decorators in stage 2.");
    }
  }
});

// node_modules/@swc/helpers/lib/_instanceof.js
var require_instanceof = __commonJS({
  "node_modules/@swc/helpers/lib/_instanceof.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _instanceof;
    function _instanceof(left, right) {
      if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
      } else {
        return left instanceof right;
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_interop_require_default.js
var require_interop_require_default = __commonJS({
  "node_modules/@swc/helpers/lib/_interop_require_default.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _interopRequireDefault;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_interop_require_wildcard.js
var require_interop_require_wildcard = __commonJS({
  "node_modules/@swc/helpers/lib/_interop_require_wildcard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _interopRequireWildcard;
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function() {
        return cache;
      };
      return cache;
    }
  }
});

// node_modules/@swc/helpers/lib/_is_native_function.js
var require_is_native_function = __commonJS({
  "node_modules/@swc/helpers/lib/_is_native_function.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _isNativeFunction;
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
  }
});

// node_modules/@swc/helpers/lib/_iterable_to_array_limit.js
var require_iterable_to_array_limit = __commonJS({
  "node_modules/@swc/helpers/lib/_iterable_to_array_limit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _iterableToArrayLimit;
    function _iterableToArrayLimit(arr, i2) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  }
});

// node_modules/@swc/helpers/lib/_iterable_to_array_limit_loose.js
var require_iterable_to_array_limit_loose = __commonJS({
  "node_modules/@swc/helpers/lib/_iterable_to_array_limit_loose.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _iterableToArrayLimitLoose;
    function _iterableToArrayLimitLoose(arr, i2) {
      var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
      if (_i == null)
        return;
      var _arr = [];
      for (_i = _i.call(arr), _step; !(_step = _i.next()).done; ) {
        _arr.push(_step.value);
        if (i2 && _arr.length === i2)
          break;
      }
      return _arr;
    }
  }
});

// node_modules/@swc/helpers/lib/_jsx.js
var require_jsx = __commonJS({
  "node_modules/@swc/helpers/lib/_jsx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _createRawReactElement;
    function _createRawReactElement(type, props, key, children) {
      if (!REACT_ELEMENT_TYPE) {
        REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
      }
      var defaultProps = type && type.defaultProps;
      var childrenLength = arguments.length - 3;
      if (!props && childrenLength !== 0) {
        props = {
          children: void 0
        };
      }
      if (props && defaultProps) {
        for (var propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
      } else if (!props) {
        props = defaultProps || {};
      }
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = new Array(childrenLength);
        for (var i2 = 0; i2 < childrenLength; i2++) {
          childArray[i2] = arguments[i2 + 3];
        }
        props.children = childArray;
      }
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key: key === void 0 ? null : "" + key,
        ref: null,
        props,
        _owner: null
      };
    }
    var REACT_ELEMENT_TYPE;
  }
});

// node_modules/@swc/helpers/lib/_new_arrow_check.js
var require_new_arrow_check = __commonJS({
  "node_modules/@swc/helpers/lib/_new_arrow_check.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _newArrowCheck;
    function _newArrowCheck(innerThis, boundThis) {
      if (innerThis !== boundThis) {
        throw new TypeError("Cannot instantiate an arrow function");
      }
    }
  }
});

// node_modules/@swc/helpers/lib/_non_iterable_spread.js
var require_non_iterable_spread = __commonJS({
  "node_modules/@swc/helpers/lib/_non_iterable_spread.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _nonIterableSpread;
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
  }
});

// node_modules/@swc/helpers/lib/_object_spread.js
var require_object_spread = __commonJS({
  "node_modules/@swc/helpers/lib/_object_spread.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _objectSpread;
    var _defineProperty = _interopRequireDefault(require_define_property());
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          (0, _defineProperty).default(target, key, source[key]);
        });
      }
      return target;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_object_spread_props.js
var require_object_spread_props = __commonJS({
  "node_modules/@swc/helpers/lib/_object_spread_props.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _objectSpreadProps;
    function _objectSpreadProps(target, source) {
      source = source != null ? source : {};
      if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
  }
});

// node_modules/@swc/helpers/lib/_object_without_properties_loose.js
var require_object_without_properties_loose = __commonJS({
  "node_modules/@swc/helpers/lib/_object_without_properties_loose.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _objectWithoutPropertiesLoose;
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
  }
});

// node_modules/@swc/helpers/lib/_object_without_properties.js
var require_object_without_properties = __commonJS({
  "node_modules/@swc/helpers/lib/_object_without_properties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _objectWithoutProperties;
    var _objectWithoutPropertiesLoose = _interopRequireDefault(require_object_without_properties_loose());
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = (0, _objectWithoutPropertiesLoose).default(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_read_only_error.js
var require_read_only_error = __commonJS({
  "node_modules/@swc/helpers/lib/_read_only_error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _readOnlyError;
    function _readOnlyError(name) {
      throw new Error('"' + name + '" is read-only');
    }
  }
});

// node_modules/@swc/helpers/lib/_set.js
var require_set = __commonJS({
  "node_modules/@swc/helpers/lib/_set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _set;
    var _defineProperty = _interopRequireDefault(require_define_property());
    var _superPropBase = _interopRequireDefault(require_super_prop_base());
    function _set(target, property, value, receiver, isStrict) {
      var s = set(target, property, value, receiver || target);
      if (!s && isStrict) {
        throw new Error("failed to set property");
      }
      return value;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function set(target1, property1, value1, receiver1) {
      if (typeof Reflect !== "undefined" && Reflect.set) {
        set = Reflect.set;
      } else {
        set = function set2(target, property, value, receiver) {
          var base = (0, _superPropBase).default(target, property);
          var desc;
          if (base) {
            desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.set) {
              desc.set.call(receiver, value);
              return true;
            } else if (!desc.writable) {
              return false;
            }
          }
          desc = Object.getOwnPropertyDescriptor(receiver, property);
          if (desc) {
            if (!desc.writable) {
              return false;
            }
            desc.value = value;
            Object.defineProperty(receiver, property, desc);
          } else {
            (0, _defineProperty).default(receiver, property, value);
          }
          return true;
        };
      }
      return set(target1, property1, value1, receiver1);
    }
  }
});

// node_modules/@swc/helpers/lib/_skip_first_generator_next.js
var require_skip_first_generator_next = __commonJS({
  "node_modules/@swc/helpers/lib/_skip_first_generator_next.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _skipFirstGeneratorNext;
    function _skipFirstGeneratorNext(fn) {
      return function() {
        var it = fn.apply(this, arguments);
        it.next();
        return it;
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_sliced_to_array.js
var require_sliced_to_array = __commonJS({
  "node_modules/@swc/helpers/lib/_sliced_to_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _slicedToArray;
    var _arrayWithHoles = _interopRequireDefault(require_array_with_holes());
    var _iterableToArray = _interopRequireDefault(require_iterable_to_array());
    var _nonIterableRest = _interopRequireDefault(require_non_iterable_rest());
    var _unsupportedIterableToArray = _interopRequireDefault(require_unsupported_iterable_to_array());
    function _slicedToArray(arr, i2) {
      return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr, i2) || (0, _unsupportedIterableToArray).default(arr, i2) || (0, _nonIterableRest).default();
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_sliced_to_array_loose.js
var require_sliced_to_array_loose = __commonJS({
  "node_modules/@swc/helpers/lib/_sliced_to_array_loose.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _slicedToArrayLoose;
    var _arrayWithHoles = _interopRequireDefault(require_array_with_holes());
    var _iterableToArrayLimitLoose = _interopRequireDefault(require_iterable_to_array_limit_loose());
    var _nonIterableRest = _interopRequireDefault(require_non_iterable_rest());
    var _unsupportedIterableToArray = _interopRequireDefault(require_unsupported_iterable_to_array());
    function _slicedToArrayLoose(arr, i2) {
      return (0, _arrayWithHoles).default(arr) || (0, _iterableToArrayLimitLoose).default(arr, i2) || (0, _unsupportedIterableToArray).default(arr, i2) || (0, _nonIterableRest).default();
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_tagged_template_literal.js
var require_tagged_template_literal = __commonJS({
  "node_modules/@swc/helpers/lib/_tagged_template_literal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _taggedTemplateLiteral;
    function _taggedTemplateLiteral(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }
      return Object.freeze(Object.defineProperties(strings, {
        raw: {
          value: Object.freeze(raw)
        }
      }));
    }
  }
});

// node_modules/@swc/helpers/lib/_tagged_template_literal_loose.js
var require_tagged_template_literal_loose = __commonJS({
  "node_modules/@swc/helpers/lib/_tagged_template_literal_loose.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _taggedTemplateLiteralLoose;
    function _taggedTemplateLiteralLoose(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }
      strings.raw = raw;
      return strings;
    }
  }
});

// node_modules/@swc/helpers/lib/_throw.js
var require_throw = __commonJS({
  "node_modules/@swc/helpers/lib/_throw.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _throw;
    function _throw(e) {
      throw e;
    }
  }
});

// node_modules/@swc/helpers/lib/_to_consumable_array.js
var require_to_consumable_array = __commonJS({
  "node_modules/@swc/helpers/lib/_to_consumable_array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _toConsumableArray;
    var _arrayWithoutHoles = _interopRequireDefault(require_array_without_holes());
    var _iterableToArray = _interopRequireDefault(require_iterable_to_array());
    var _nonIterableSpread = _interopRequireDefault(require_non_iterable_spread());
    var _unsupportedIterableToArray = _interopRequireDefault(require_unsupported_iterable_to_array());
    function _toConsumableArray(arr) {
      return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr) || (0, _nonIterableSpread).default();
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_wrap_async_generator.js
var require_wrap_async_generator = __commonJS({
  "node_modules/@swc/helpers/lib/_wrap_async_generator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _wrapAsyncGenerator;
    var _asyncGenerator = _interopRequireDefault(require_async_generator());
    function _wrapAsyncGenerator(fn) {
      return function() {
        return new _asyncGenerator.default(fn.apply(this, arguments));
      };
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/@swc/helpers/lib/_wrap_native_super.js
var require_wrap_native_super = __commonJS({
  "node_modules/@swc/helpers/lib/_wrap_native_super.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _wrapNativeSuper;
    var _construct = _interopRequireDefault(require_construct());
    var _isNativeFunction = _interopRequireDefault(require_is_native_function());
    var _getPrototypeOf = _interopRequireDefault(require_get_prototype_of());
    var _setPrototypeOf = _interopRequireDefault(require_set_prototype_of());
    function _wrapNativeSuper(Class) {
      return wrapNativeSuper(Class);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function wrapNativeSuper(Class1) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      wrapNativeSuper = function wrapNativeSuper2(Class) {
        if (Class === null || !(0, _isNativeFunction).default(Class))
          return Class;
        if (typeof Class !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class))
            return _cache.get(Class);
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
          return (0, _construct).default(Class, arguments, (0, _getPrototypeOf).default(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        return (0, _setPrototypeOf).default(Wrapper, Class);
      };
      return wrapNativeSuper(Class1);
    }
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s); i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2]))
        t[p[i2]] = s[p[i2]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i2 = decorators.length - 1; i2 >= 0; i2--)
      if (d = decorators[i2])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i2 = decorators.length - 1; i2 >= 0; i2--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i2])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i2 = 0; i2 < initializers.length; i2++) {
    value = useValue ? initializers[i2].call(thisArg, value) : initializers[i2].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i2 = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i2 >= o.length)
          o = void 0;
        return { value: o && o[i2++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read(arguments[i2]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
    s += arguments[i2].length;
  for (var r = Array(s), k = 0, i2 = 0; i2 < il; i2++)
    for (var a = arguments[i2], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l = from.length, ar; i2 < l; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i2, q = [];
  return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2;
  function verb(n) {
    if (g[n])
      i2[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i2, p;
  return i2 = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i2[Symbol.iterator] = function() {
    return this;
  }, i2;
  function verb(n, f) {
    i2[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i2;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
    return this;
  }, i2);
  function verb(n) {
    i2[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
          s = arguments[i2];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/@swc/helpers/lib/index.js
var require_lib = __commonJS({
  "node_modules/@swc/helpers/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "applyDecoratedDescriptor", {
      enumerable: true,
      get: function() {
        return _applyDecoratedDescriptor.default;
      }
    });
    Object.defineProperty(exports2, "arrayLikeToArray", {
      enumerable: true,
      get: function() {
        return _arrayLikeToArray.default;
      }
    });
    Object.defineProperty(exports2, "arrayWithHoles", {
      enumerable: true,
      get: function() {
        return _arrayWithHoles.default;
      }
    });
    Object.defineProperty(exports2, "arrayWithoutHoles", {
      enumerable: true,
      get: function() {
        return _arrayWithoutHoles.default;
      }
    });
    Object.defineProperty(exports2, "assertThisInitialized", {
      enumerable: true,
      get: function() {
        return _assertThisInitialized.default;
      }
    });
    Object.defineProperty(exports2, "asyncGenerator", {
      enumerable: true,
      get: function() {
        return _asyncGenerator.default;
      }
    });
    Object.defineProperty(exports2, "asyncGeneratorDelegate", {
      enumerable: true,
      get: function() {
        return _asyncGeneratorDelegate.default;
      }
    });
    Object.defineProperty(exports2, "asyncIterator", {
      enumerable: true,
      get: function() {
        return _asyncIterator.default;
      }
    });
    Object.defineProperty(exports2, "asyncToGenerator", {
      enumerable: true,
      get: function() {
        return _asyncToGenerator.default;
      }
    });
    Object.defineProperty(exports2, "awaitAsyncGenerator", {
      enumerable: true,
      get: function() {
        return _awaitAsyncGenerator.default;
      }
    });
    Object.defineProperty(exports2, "awaitValue", {
      enumerable: true,
      get: function() {
        return _awaitValue.default;
      }
    });
    Object.defineProperty(exports2, "checkPrivateRedeclaration", {
      enumerable: true,
      get: function() {
        return _checkPrivateRedeclaration.default;
      }
    });
    Object.defineProperty(exports2, "classApplyDescriptorDestructureSet", {
      enumerable: true,
      get: function() {
        return _classApplyDescriptorDestructure.default;
      }
    });
    Object.defineProperty(exports2, "classApplyDescriptorGet", {
      enumerable: true,
      get: function() {
        return _classApplyDescriptorGet.default;
      }
    });
    Object.defineProperty(exports2, "classApplyDescriptorSet", {
      enumerable: true,
      get: function() {
        return _classApplyDescriptorSet.default;
      }
    });
    Object.defineProperty(exports2, "classCallCheck", {
      enumerable: true,
      get: function() {
        return _classCallCheck.default;
      }
    });
    Object.defineProperty(exports2, "classCheckPrivateStaticFieldDescriptor", {
      enumerable: true,
      get: function() {
        return _classCheckPrivateStaticFieldDescriptor.default;
      }
    });
    Object.defineProperty(exports2, "classCheckPrivateStaticAccess", {
      enumerable: true,
      get: function() {
        return _classCheckPrivateStaticAccess.default;
      }
    });
    Object.defineProperty(exports2, "classNameTDZError", {
      enumerable: true,
      get: function() {
        return _classNameTdzError.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldDestructureSet", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldDestructure.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldGet", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldGet.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldInit", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldInit.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldLooseBase", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldLooseBase.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldLooseKey", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldLooseKey.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateFieldSet", {
      enumerable: true,
      get: function() {
        return _classPrivateFieldSet.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateMethodGet", {
      enumerable: true,
      get: function() {
        return _classPrivateMethodGet.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateMethodInit", {
      enumerable: true,
      get: function() {
        return _classPrivateMethodInit.default;
      }
    });
    Object.defineProperty(exports2, "classPrivateMethodSet", {
      enumerable: true,
      get: function() {
        return _classPrivateMethodSet.default;
      }
    });
    Object.defineProperty(exports2, "classStaticPrivateFieldDestructureSet", {
      enumerable: true,
      get: function() {
        return _classStaticPrivateFieldDestructure.default;
      }
    });
    Object.defineProperty(exports2, "classStaticPrivateFieldSpecGet", {
      enumerable: true,
      get: function() {
        return _classStaticPrivateFieldSpecGet.default;
      }
    });
    Object.defineProperty(exports2, "classStaticPrivateFieldSpecSet", {
      enumerable: true,
      get: function() {
        return _classStaticPrivateFieldSpecSet.default;
      }
    });
    Object.defineProperty(exports2, "construct", {
      enumerable: true,
      get: function() {
        return _construct.default;
      }
    });
    Object.defineProperty(exports2, "createClass", {
      enumerable: true,
      get: function() {
        return _createClass.default;
      }
    });
    Object.defineProperty(exports2, "createSuper", {
      enumerable: true,
      get: function() {
        return _createSuper.default;
      }
    });
    Object.defineProperty(exports2, "decorate", {
      enumerable: true,
      get: function() {
        return _decorate.default;
      }
    });
    Object.defineProperty(exports2, "defaults", {
      enumerable: true,
      get: function() {
        return _defaults.default;
      }
    });
    Object.defineProperty(exports2, "defineEnumerableProperties", {
      enumerable: true,
      get: function() {
        return _defineEnumerableProperties.default;
      }
    });
    Object.defineProperty(exports2, "defineProperty", {
      enumerable: true,
      get: function() {
        return _defineProperty.default;
      }
    });
    Object.defineProperty(exports2, "extends", {
      enumerable: true,
      get: function() {
        return _extends.default;
      }
    });
    Object.defineProperty(exports2, "get", {
      enumerable: true,
      get: function() {
        return _get.default;
      }
    });
    Object.defineProperty(exports2, "getPrototypeOf", {
      enumerable: true,
      get: function() {
        return _getPrototypeOf.default;
      }
    });
    Object.defineProperty(exports2, "inherits", {
      enumerable: true,
      get: function() {
        return _inherits.default;
      }
    });
    Object.defineProperty(exports2, "inheritsLoose", {
      enumerable: true,
      get: function() {
        return _inheritsLoose.default;
      }
    });
    Object.defineProperty(exports2, "initializerDefineProperty", {
      enumerable: true,
      get: function() {
        return _initializerDefineProperty.default;
      }
    });
    Object.defineProperty(exports2, "initializerWarningHelper", {
      enumerable: true,
      get: function() {
        return _initializerWarningHelper.default;
      }
    });
    Object.defineProperty(exports2, "_instanceof", {
      enumerable: true,
      get: function() {
        return _instanceof.default;
      }
    });
    Object.defineProperty(exports2, "interopRequireDefault", {
      enumerable: true,
      get: function() {
        return _interopRequireDefault.default;
      }
    });
    Object.defineProperty(exports2, "interopRequireWildcard", {
      enumerable: true,
      get: function() {
        return _interopRequireWildcard.default;
      }
    });
    Object.defineProperty(exports2, "isNativeFunction", {
      enumerable: true,
      get: function() {
        return _isNativeFunction.default;
      }
    });
    Object.defineProperty(exports2, "isNativeReflectConstruct", {
      enumerable: true,
      get: function() {
        return _isNativeReflectConstruct.default;
      }
    });
    Object.defineProperty(exports2, "iterableToArray", {
      enumerable: true,
      get: function() {
        return _iterableToArray.default;
      }
    });
    Object.defineProperty(exports2, "iterableToArrayLimit", {
      enumerable: true,
      get: function() {
        return _iterableToArrayLimit.default;
      }
    });
    Object.defineProperty(exports2, "iterableToArrayLimitLoose", {
      enumerable: true,
      get: function() {
        return _iterableToArrayLimitLoose.default;
      }
    });
    Object.defineProperty(exports2, "jsx", {
      enumerable: true,
      get: function() {
        return _jsx.default;
      }
    });
    Object.defineProperty(exports2, "newArrowCheck", {
      enumerable: true,
      get: function() {
        return _newArrowCheck.default;
      }
    });
    Object.defineProperty(exports2, "nonIterableRest", {
      enumerable: true,
      get: function() {
        return _nonIterableRest.default;
      }
    });
    Object.defineProperty(exports2, "nonIterableSpread", {
      enumerable: true,
      get: function() {
        return _nonIterableSpread.default;
      }
    });
    Object.defineProperty(exports2, "objectSpread", {
      enumerable: true,
      get: function() {
        return _objectSpread.default;
      }
    });
    Object.defineProperty(exports2, "objectSpreadProps", {
      enumerable: true,
      get: function() {
        return _objectSpreadProps.default;
      }
    });
    Object.defineProperty(exports2, "objectWithoutProperties", {
      enumerable: true,
      get: function() {
        return _objectWithoutProperties.default;
      }
    });
    Object.defineProperty(exports2, "objectWithoutPropertiesLoose", {
      enumerable: true,
      get: function() {
        return _objectWithoutPropertiesLoose.default;
      }
    });
    Object.defineProperty(exports2, "possibleConstructorReturn", {
      enumerable: true,
      get: function() {
        return _possibleConstructorReturn.default;
      }
    });
    Object.defineProperty(exports2, "readOnlyError", {
      enumerable: true,
      get: function() {
        return _readOnlyError.default;
      }
    });
    Object.defineProperty(exports2, "set", {
      enumerable: true,
      get: function() {
        return _set.default;
      }
    });
    Object.defineProperty(exports2, "setPrototypeOf", {
      enumerable: true,
      get: function() {
        return _setPrototypeOf.default;
      }
    });
    Object.defineProperty(exports2, "skipFirstGeneratorNext", {
      enumerable: true,
      get: function() {
        return _skipFirstGeneratorNext.default;
      }
    });
    Object.defineProperty(exports2, "slicedToArray", {
      enumerable: true,
      get: function() {
        return _slicedToArray.default;
      }
    });
    Object.defineProperty(exports2, "slicedToArrayLoose", {
      enumerable: true,
      get: function() {
        return _slicedToArrayLoose.default;
      }
    });
    Object.defineProperty(exports2, "superPropBase", {
      enumerable: true,
      get: function() {
        return _superPropBase.default;
      }
    });
    Object.defineProperty(exports2, "taggedTemplateLiteral", {
      enumerable: true,
      get: function() {
        return _taggedTemplateLiteral.default;
      }
    });
    Object.defineProperty(exports2, "taggedTemplateLiteralLoose", {
      enumerable: true,
      get: function() {
        return _taggedTemplateLiteralLoose.default;
      }
    });
    Object.defineProperty(exports2, "_throw", {
      enumerable: true,
      get: function() {
        return _throw.default;
      }
    });
    Object.defineProperty(exports2, "toArray", {
      enumerable: true,
      get: function() {
        return _toArray.default;
      }
    });
    Object.defineProperty(exports2, "toConsumableArray", {
      enumerable: true,
      get: function() {
        return _toConsumableArray.default;
      }
    });
    Object.defineProperty(exports2, "toPrimitive", {
      enumerable: true,
      get: function() {
        return _toPrimitive.default;
      }
    });
    Object.defineProperty(exports2, "toPropertyKey", {
      enumerable: true,
      get: function() {
        return _toPropertyKey.default;
      }
    });
    Object.defineProperty(exports2, "typeOf", {
      enumerable: true,
      get: function() {
        return _typeOf.default;
      }
    });
    Object.defineProperty(exports2, "unsupportedIterableToArray", {
      enumerable: true,
      get: function() {
        return _unsupportedIterableToArray.default;
      }
    });
    Object.defineProperty(exports2, "wrapAsyncGenerator", {
      enumerable: true,
      get: function() {
        return _wrapAsyncGenerator.default;
      }
    });
    Object.defineProperty(exports2, "wrapNativeSuper", {
      enumerable: true,
      get: function() {
        return _wrapNativeSuper.default;
      }
    });
    Object.defineProperty(exports2, "__decorate", {
      enumerable: true,
      get: function() {
        return _tslib.__decorate;
      }
    });
    Object.defineProperty(exports2, "__metadata", {
      enumerable: true,
      get: function() {
        return _tslib.__metadata;
      }
    });
    Object.defineProperty(exports2, "__param", {
      enumerable: true,
      get: function() {
        return _tslib.__param;
      }
    });
    var _applyDecoratedDescriptor = _interopRequireDefault1(require_apply_decorated_descriptor());
    var _arrayLikeToArray = _interopRequireDefault1(require_array_like_to_array());
    var _arrayWithHoles = _interopRequireDefault1(require_array_with_holes());
    var _arrayWithoutHoles = _interopRequireDefault1(require_array_without_holes());
    var _assertThisInitialized = _interopRequireDefault1(require_assert_this_initialized());
    var _asyncGenerator = _interopRequireDefault1(require_async_generator());
    var _asyncGeneratorDelegate = _interopRequireDefault1(require_async_generator_delegate());
    var _asyncIterator = _interopRequireDefault1(require_async_iterator());
    var _asyncToGenerator = _interopRequireDefault1(require_async_to_generator());
    var _awaitAsyncGenerator = _interopRequireDefault1(require_await_async_generator());
    var _awaitValue = _interopRequireDefault1(require_await_value());
    var _checkPrivateRedeclaration = _interopRequireDefault1(require_check_private_redeclaration());
    var _classApplyDescriptorDestructure = _interopRequireDefault1(require_class_apply_descriptor_destructure());
    var _classApplyDescriptorGet = _interopRequireDefault1(require_class_apply_descriptor_get());
    var _classApplyDescriptorSet = _interopRequireDefault1(require_class_apply_descriptor_set());
    var _classCallCheck = _interopRequireDefault1(require_class_call_check());
    var _classCheckPrivateStaticFieldDescriptor = _interopRequireDefault1(require_class_check_private_static_field_descriptor());
    var _classCheckPrivateStaticAccess = _interopRequireDefault1(require_class_check_private_static_access());
    var _classNameTdzError = _interopRequireDefault1(require_class_name_tdz_error());
    var _classPrivateFieldDestructure = _interopRequireDefault1(require_class_private_field_destructure());
    var _classPrivateFieldGet = _interopRequireDefault1(require_class_private_field_get());
    var _classPrivateFieldInit = _interopRequireDefault1(require_class_private_field_init());
    var _classPrivateFieldLooseBase = _interopRequireDefault1(require_class_private_field_loose_base());
    var _classPrivateFieldLooseKey = _interopRequireDefault1(require_class_private_field_loose_key());
    var _classPrivateFieldSet = _interopRequireDefault1(require_class_private_field_set());
    var _classPrivateMethodGet = _interopRequireDefault1(require_class_private_method_get());
    var _classPrivateMethodInit = _interopRequireDefault1(require_class_private_method_init());
    var _classPrivateMethodSet = _interopRequireDefault1(require_class_private_method_set());
    var _classStaticPrivateFieldDestructure = _interopRequireDefault1(require_class_static_private_field_destructure());
    var _classStaticPrivateFieldSpecGet = _interopRequireDefault1(require_class_static_private_field_spec_get());
    var _classStaticPrivateFieldSpecSet = _interopRequireDefault1(require_class_static_private_field_spec_set());
    var _construct = _interopRequireDefault1(require_construct());
    var _createClass = _interopRequireDefault1(require_create_class());
    var _createSuper = _interopRequireDefault1(require_create_super());
    var _decorate = _interopRequireDefault1(require_decorate());
    var _defaults = _interopRequireDefault1(require_defaults());
    var _defineEnumerableProperties = _interopRequireDefault1(require_define_enumerable_properties());
    var _defineProperty = _interopRequireDefault1(require_define_property());
    var _extends = _interopRequireDefault1(require_extends());
    var _get = _interopRequireDefault1(require_get());
    var _getPrototypeOf = _interopRequireDefault1(require_get_prototype_of());
    var _inherits = _interopRequireDefault1(require_inherits());
    var _inheritsLoose = _interopRequireDefault1(require_inherits_loose());
    var _initializerDefineProperty = _interopRequireDefault1(require_initializer_define_property());
    var _initializerWarningHelper = _interopRequireDefault1(require_initializer_warning_helper());
    var _instanceof = _interopRequireDefault1(require_instanceof());
    var _interopRequireDefault = _interopRequireDefault1(require_interop_require_default());
    var _interopRequireWildcard = _interopRequireDefault1(require_interop_require_wildcard());
    var _isNativeFunction = _interopRequireDefault1(require_is_native_function());
    var _isNativeReflectConstruct = _interopRequireDefault1(require_is_native_reflect_construct());
    var _iterableToArray = _interopRequireDefault1(require_iterable_to_array());
    var _iterableToArrayLimit = _interopRequireDefault1(require_iterable_to_array_limit());
    var _iterableToArrayLimitLoose = _interopRequireDefault1(require_iterable_to_array_limit_loose());
    var _jsx = _interopRequireDefault1(require_jsx());
    var _newArrowCheck = _interopRequireDefault1(require_new_arrow_check());
    var _nonIterableRest = _interopRequireDefault1(require_non_iterable_rest());
    var _nonIterableSpread = _interopRequireDefault1(require_non_iterable_spread());
    var _objectSpread = _interopRequireDefault1(require_object_spread());
    var _objectSpreadProps = _interopRequireDefault1(require_object_spread_props());
    var _objectWithoutProperties = _interopRequireDefault1(require_object_without_properties());
    var _objectWithoutPropertiesLoose = _interopRequireDefault1(require_object_without_properties_loose());
    var _possibleConstructorReturn = _interopRequireDefault1(require_possible_constructor_return());
    var _readOnlyError = _interopRequireDefault1(require_read_only_error());
    var _set = _interopRequireDefault1(require_set());
    var _setPrototypeOf = _interopRequireDefault1(require_set_prototype_of());
    var _skipFirstGeneratorNext = _interopRequireDefault1(require_skip_first_generator_next());
    var _slicedToArray = _interopRequireDefault1(require_sliced_to_array());
    var _slicedToArrayLoose = _interopRequireDefault1(require_sliced_to_array_loose());
    var _superPropBase = _interopRequireDefault1(require_super_prop_base());
    var _taggedTemplateLiteral = _interopRequireDefault1(require_tagged_template_literal());
    var _taggedTemplateLiteralLoose = _interopRequireDefault1(require_tagged_template_literal_loose());
    var _throw = _interopRequireDefault1(require_throw());
    var _toArray = _interopRequireDefault1(require_to_array());
    var _toConsumableArray = _interopRequireDefault1(require_to_consumable_array());
    var _toPrimitive = _interopRequireDefault1(require_to_primitive());
    var _toPropertyKey = _interopRequireDefault1(require_to_property_key());
    var _typeOf = _interopRequireDefault1(require_type_of());
    var _unsupportedIterableToArray = _interopRequireDefault1(require_unsupported_iterable_to_array());
    var _wrapAsyncGenerator = _interopRequireDefault1(require_wrap_async_generator());
    var _wrapNativeSuper = _interopRequireDefault1(require_wrap_native_super());
    var _tslib = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    function _interopRequireDefault1(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i2 = 0; i2 < object.length; ++i2) {
            theKeys.push(String(i2));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports2, module2) {
    "use strict";
    var test = {
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i2 = 0; i2 < a.length; i2 += 1) {
        arr[i2] = a[i2];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i2 = offset || 0, j = 0; i2 < arrLike.length; i2 += 1, j += 1) {
        arr[j] = arrLike[i2];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i2 = 0; i2 < arr.length; i2 += 1) {
        str += arr[i2];
        if (i2 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs[i2] = "$" + i2;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation2();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i2 = 0; i2 < props.length; i2 += 1) {
        defineProperty(object, props[i2], map[props[i2]], predicates[props[i2]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module2.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/object.assign/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object.assign/implementation.js"(exports2, module2) {
    "use strict";
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module2.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = toObject(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = toObject(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var nextKey = keys[i2];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object.assign/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation3();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i2 = 0; i2 < letters.length; ++i2) {
        map[letters[i2]] = letters[i2];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module2.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// node_modules/object.assign/shim.js
var require_shim = __commonJS({
  "node_modules/object.assign/shim.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill();
    module2.exports = function shimAssign() {
      var polyfill = getPolyfill();
      define2(
        Object,
        { assign: polyfill },
        { assign: function() {
          return Object.assign !== polyfill;
        } }
      );
      return polyfill;
    };
  }
});

// node_modules/object.assign/index.js
var require_object = __commonJS({
  "node_modules/object.assign/index.js"(exports2, module2) {
    "use strict";
    var defineProperties = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind.apply(getPolyfill());
    var bound = function assign(target, source1) {
      return polyfill(Object, arguments);
    };
    defineProperties(bound, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = bound;
  }
});

// node_modules/functions-have-names/index.js
var require_functions_have_names = __commonJS({
  "node_modules/functions-have-names/index.js"(exports2, module2) {
    "use strict";
    var functionsHaveNames = function functionsHaveNames2() {
      return typeof function f() {
      }.name === "string";
    };
    var gOPD = Object.getOwnPropertyDescriptor;
    if (gOPD) {
      try {
        gOPD([], "length");
      } catch (e) {
        gOPD = null;
      }
    }
    functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
      if (!functionsHaveNames() || !gOPD) {
        return false;
      }
      var desc = gOPD(function() {
      }, "name");
      return !!desc && !!desc.configurable;
    };
    var $bind = Function.prototype.bind;
    functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
      return functionsHaveNames() && typeof $bind === "function" && function f() {
      }.bind().name !== "";
    };
    module2.exports = functionsHaveNames;
  }
});

// node_modules/set-function-name/index.js
var require_set_function_name = __commonJS({
  "node_modules/set-function-name/index.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var functionsHaveConfigurableNames = require_functions_have_names().functionsHaveConfigurableNames();
    var $TypeError = TypeError;
    module2.exports = function setFunctionName(fn, name) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      if (!loose || functionsHaveConfigurableNames) {
        if (hasDescriptors) {
          define2(fn, "name", name, true, true);
        } else {
          define2(fn, "name", name);
        }
      }
      return fn;
    };
  }
});

// node_modules/regexp.prototype.flags/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/regexp.prototype.flags/implementation.js"(exports2, module2) {
    "use strict";
    var setFunctionName = require_set_function_name();
    var $TypeError = require_type();
    var $Object = Object;
    module2.exports = setFunctionName(function flags() {
      if (this == null || this !== $Object(this)) {
        throw new $TypeError("RegExp.prototype.flags getter called on non-object");
      }
      var result = "";
      if (this.hasIndices) {
        result += "d";
      }
      if (this.global) {
        result += "g";
      }
      if (this.ignoreCase) {
        result += "i";
      }
      if (this.multiline) {
        result += "m";
      }
      if (this.dotAll) {
        result += "s";
      }
      if (this.unicode) {
        result += "u";
      }
      if (this.unicodeSets) {
        result += "v";
      }
      if (this.sticky) {
        result += "y";
      }
      return result;
    }, "get flags", true);
  }
});

// node_modules/regexp.prototype.flags/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/regexp.prototype.flags/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation4();
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var $gOPD = Object.getOwnPropertyDescriptor;
    module2.exports = function getPolyfill() {
      if (supportsDescriptors && /a/mig.flags === "gim") {
        var descriptor = $gOPD(RegExp.prototype, "flags");
        if (descriptor && typeof descriptor.get === "function" && typeof RegExp.prototype.dotAll === "boolean" && typeof RegExp.prototype.hasIndices === "boolean") {
          var calls = "";
          var o = {};
          Object.defineProperty(o, "hasIndices", {
            get: function() {
              calls += "d";
            }
          });
          Object.defineProperty(o, "sticky", {
            get: function() {
              calls += "y";
            }
          });
          if (calls === "dy") {
            return descriptor.get;
          }
        }
      }
      return implementation;
    };
  }
});

// node_modules/regexp.prototype.flags/shim.js
var require_shim2 = __commonJS({
  "node_modules/regexp.prototype.flags/shim.js"(exports2, module2) {
    "use strict";
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var getPolyfill = require_polyfill2();
    var gOPD = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto = Object.getPrototypeOf;
    var regex = /a/;
    module2.exports = function shimFlags() {
      if (!supportsDescriptors || !getProto) {
        throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
      }
      var polyfill = getPolyfill();
      var proto = getProto(regex);
      var descriptor = gOPD(proto, "flags");
      if (!descriptor || descriptor.get !== polyfill) {
        defineProperty(proto, "flags", {
          configurable: true,
          enumerable: false,
          get: polyfill
        });
      }
      return polyfill;
    };
  }
});

// node_modules/regexp.prototype.flags/index.js
var require_regexp_prototype = __commonJS({
  "node_modules/regexp.prototype.flags/index.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var flagsBound = callBind(getPolyfill());
    define2(flagsBound, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = flagsBound;
  }
});

// node_modules/es-get-iterator/node.js
var require_node = __commonJS({
  "node_modules/es-get-iterator/node.js"(exports2, module2) {
    "use strict";
    var $iterator = Symbol.iterator;
    module2.exports = function getIterator(iterable) {
      if (iterable != null && typeof iterable[$iterator] !== "undefined") {
        return iterable[$iterator]();
      }
    };
  }
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "node_modules/object-inspect/util.inspect.js"(exports2, module2) {
    module2.exports = require("util").inspect;
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports2, module2) {
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i2 = 0; i2 < attrs.length; i2++) {
          s += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        if (xs[i2] === x) {
          return i2;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i2 = 0; i2 < xs.length; i2++) {
        if (indexOf(xs[i2], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i2 = 0; i2 < obj.length; i2++) {
          xs[i2] = has(obj, i2) ? inspect(obj[i2], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          // eslint-disable-line no-param-reassign
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/object-is/implementation.js
var require_implementation5 = __commonJS({
  "node_modules/object-is/implementation.js"(exports2, module2) {
    "use strict";
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/object-is/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation5();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/object-is/shim.js
var require_shim3 = __commonJS({
  "node_modules/object-is/shim.js"(exports2, module2) {
    "use strict";
    var getPolyfill = require_polyfill3();
    var define2 = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation5();
    var getPolyfill = require_polyfill3();
    var shim = require_shim3();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports2, module2) {
    "use strict";
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/is-arguments/index.js"(exports2, module2) {
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module2.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/deep-equal/node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/deep-equal/node_modules/isarray/index.js"(exports2, module2) {
    var toString = {}.toString;
    module2.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/is-array-buffer/index.js
var require_is_array_buffer = __commonJS({
  "node_modules/is-array-buffer/index.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var GetIntrinsic = require_get_intrinsic();
    var $ArrayBuffer = GetIntrinsic("%ArrayBuffer%", true);
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var $toString = callBound("Object.prototype.toString");
    var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
    var $abSlice = !!abSlice && callBind(abSlice);
    module2.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        if ($byteLength) {
          $byteLength(obj);
        } else {
          $abSlice(obj, 0);
        }
        return true;
      } catch (e) {
        return false;
      }
    } : $ArrayBuffer ? function isArrayBuffer(obj) {
      return $toString(obj) === "[object ArrayBuffer]";
    } : function isArrayBuffer(obj) {
      return false;
    };
  }
});

// node_modules/is-date-object/index.js
var require_is_date_object = __commonJS({
  "node_modules/is-date-object/index.js"(exports2, module2) {
    "use strict";
    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
      try {
        getDay.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var dateClass = "[object Date]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isDateObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
    };
  }
});

// node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "node_modules/is-regex/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var has;
    var $exec;
    var isRegexMarker;
    var badStringifier;
    if (hasToStringTag) {
      has = callBound("Object.prototype.hasOwnProperty");
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
    }
    var throwRegexMarker;
    var $toString = callBound("Object.prototype.toString");
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = "[object RegExp]";
    module2.exports = hasToStringTag ? function isRegex(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var descriptor = gOPD(value, "lastIndex");
      var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(value, badStringifier);
      } catch (e) {
        return e === isRegexMarker;
      }
    } : function isRegex(value) {
      if (!value || typeof value !== "object" && typeof value !== "function") {
        return false;
      }
      return $toString(value) === regexClass;
    };
  }
});

// node_modules/is-shared-array-buffer/index.js
var require_is_shared_array_buffer = __commonJS({
  "node_modules/is-shared-array-buffer/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_callBound();
    var $byteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    module2.exports = $byteLength ? function isSharedArrayBuffer(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      try {
        $byteLength(obj);
        return true;
      } catch (e) {
        return false;
      }
    } : function isSharedArrayBuffer(obj) {
      return false;
    };
  }
});

// node_modules/is-string/index.js
var require_is_string = __commonJS({
  "node_modules/is-string/index.js"(exports2, module2) {
    "use strict";
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject2(value) {
      try {
        strValue.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = "[object String]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isString(value) {
      if (typeof value === "string") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;
    };
  }
});

// node_modules/is-number-object/index.js
var require_is_number_object = __commonJS({
  "node_modules/is-number-object/index.js"(exports2, module2) {
    "use strict";
    var numToStr = Number.prototype.toString;
    var tryNumberObject = function tryNumberObject2(value) {
      try {
        numToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var numClass = "[object Number]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isNumberObject(value) {
      if (typeof value === "number") {
        return true;
      }
      if (typeof value !== "object") {
        return false;
      }
      return hasToStringTag ? tryNumberObject(value) : toStr.call(value) === numClass;
    };
  }
});

// node_modules/is-boolean-object/index.js
var require_is_boolean_object = __commonJS({
  "node_modules/is-boolean-object/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_callBound();
    var $boolToStr = callBound("Boolean.prototype.toString");
    var $toString = callBound("Object.prototype.toString");
    var tryBooleanObject = function booleanBrandCheck(value) {
      try {
        $boolToStr(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var boolClass = "[object Boolean]";
    var hasToStringTag = require_shams2()();
    module2.exports = function isBoolean(value) {
      if (typeof value === "boolean") {
        return true;
      }
      if (value === null || typeof value !== "object") {
        return false;
      }
      return hasToStringTag && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString(value) === boolClass;
    };
  }
});

// node_modules/is-symbol/index.js
var require_is_symbol = __commonJS({
  "node_modules/is-symbol/index.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    var hasSymbols = require_has_symbols()();
    if (hasSymbols) {
      symToStr = Symbol.prototype.toString;
      symStringRegex = /^Symbol\(.*\)$/;
      isSymbolObject = function isRealSymbolObject(value) {
        if (typeof value.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value));
      };
      module2.exports = function isSymbol(value) {
        if (typeof value === "symbol") {
          return true;
        }
        if (toStr.call(value) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value);
        } catch (e) {
          return false;
        }
      };
    } else {
      module2.exports = function isSymbol(value) {
        return false;
      };
    }
    var symToStr;
    var symStringRegex;
    var isSymbolObject;
  }
});

// node_modules/has-bigints/index.js
var require_has_bigints = __commonJS({
  "node_modules/has-bigints/index.js"(exports2, module2) {
    "use strict";
    var $BigInt = typeof BigInt !== "undefined" && BigInt;
    module2.exports = function hasNativeBigInts() {
      return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
    };
  }
});

// node_modules/is-bigint/index.js
var require_is_bigint = __commonJS({
  "node_modules/is-bigint/index.js"(exports2, module2) {
    "use strict";
    var hasBigInts = require_has_bigints()();
    if (hasBigInts) {
      bigIntValueOf = BigInt.prototype.valueOf;
      tryBigInt = function tryBigIntObject(value) {
        try {
          bigIntValueOf.call(value);
          return true;
        } catch (e) {
        }
        return false;
      };
      module2.exports = function isBigInt(value) {
        if (value === null || typeof value === "undefined" || typeof value === "boolean" || typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "function") {
          return false;
        }
        if (typeof value === "bigint") {
          return true;
        }
        return tryBigInt(value);
      };
    } else {
      module2.exports = function isBigInt(value) {
        return false;
      };
    }
    var bigIntValueOf;
    var tryBigInt;
  }
});

// node_modules/which-boxed-primitive/index.js
var require_which_boxed_primitive = __commonJS({
  "node_modules/which-boxed-primitive/index.js"(exports2, module2) {
    "use strict";
    var isString = require_is_string();
    var isNumber = require_is_number_object();
    var isBoolean = require_is_boolean_object();
    var isSymbol = require_is_symbol();
    var isBigInt = require_is_bigint();
    module2.exports = function whichBoxedPrimitive(value) {
      if (value == null || typeof value !== "object" && typeof value !== "function") {
        return null;
      }
      if (isString(value)) {
        return "String";
      }
      if (isNumber(value)) {
        return "Number";
      }
      if (isBoolean(value)) {
        return "Boolean";
      }
      if (isSymbol(value)) {
        return "Symbol";
      }
      if (isBigInt(value)) {
        return "BigInt";
      }
    };
  }
});

// node_modules/is-map/index.js
var require_is_map = __commonJS({
  "node_modules/is-map/index.js"(exports2, module2) {
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Map) {
      exported = function isMap(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isMap(x) {
        return false;
      };
    }
    module2.exports = exported || function isMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x);
        if ($setHas) {
          try {
            $setHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Map;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-set/index.js
var require_is_set = __commonJS({
  "node_modules/is-set/index.js"(exports2, module2) {
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Set) {
      exported = function isSet(x) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$setHas) {
      exported = function isSet(x) {
        return false;
      };
    }
    module2.exports = exported || function isSet(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $setHas.call(x);
        if ($mapHas) {
          try {
            $mapHas.call(x);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $Set;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-weakmap/index.js
var require_is_weakmap = __commonJS({
  "node_modules/is-weakmap/index.js"(exports2, module2) {
    "use strict";
    var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
    var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
    var exported;
    if (!$WeakMap) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
    var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isWeakMap(x) {
        return false;
      };
    }
    module2.exports = exported || function isWeakMap(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      try {
        $mapHas.call(x, $mapHas);
        if ($setHas) {
          try {
            $setHas.call(x, $setHas);
          } catch (e) {
            return true;
          }
        }
        return x instanceof $WeakMap;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-weakset/index.js
var require_is_weakset = __commonJS({
  "node_modules/is-weakset/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var $WeakSet = GetIntrinsic("%WeakSet%", true);
    var $setHas = callBound("WeakSet.prototype.has", true);
    if ($setHas) {
      $mapHas = callBound("WeakMap.prototype.has", true);
      module2.exports = function isWeakSet(x) {
        if (!x || typeof x !== "object") {
          return false;
        }
        try {
          $setHas(x, $setHas);
          if ($mapHas) {
            try {
              $mapHas(x, $mapHas);
            } catch (e) {
              return true;
            }
          }
          return x instanceof $WeakSet;
        } catch (e) {
        }
        return false;
      };
    } else {
      module2.exports = function isWeakSet(x) {
        return false;
      };
    }
    var $mapHas;
  }
});

// node_modules/which-collection/index.js
var require_which_collection = __commonJS({
  "node_modules/which-collection/index.js"(exports2, module2) {
    "use strict";
    var isMap = require_is_map();
    var isSet = require_is_set();
    var isWeakMap = require_is_weakmap();
    var isWeakSet = require_is_weakset();
    module2.exports = function whichCollection(value) {
      if (value && typeof value === "object") {
        if (isMap(value)) {
          return "Map";
        }
        if (isSet(value)) {
          return "Set";
        }
        if (isWeakMap(value)) {
          return "WeakMap";
        }
        if (isWeakSet(value)) {
          return "WeakSet";
        }
      }
      return false;
    };
  }
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/is-callable/index.js"(exports2, module2) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module2.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/for-each/index.js
var require_for_each = __commonJS({
  "node_modules/for-each/index.js"(exports2, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i2 = 0, len = array.length; i2 < len; i2++) {
        if (hasOwnProperty.call(array, i2)) {
          if (receiver == null) {
            iterator(array[i2], i2, array);
          } else {
            iterator.call(receiver, array[i2], i2, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i2 = 0, len = string.length; i2 < len; i2++) {
        if (receiver == null) {
          iterator(string.charAt(i2), i2, string);
        } else {
          iterator.call(receiver, string.charAt(i2), i2, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    var forEach = function forEach2(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr.call(list) === "[object Array]") {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
    module2.exports = forEach;
  }
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/available-typed-arrays/index.js"(exports2, module2) {
    "use strict";
    var possibleNames = [
      "BigInt64Array",
      "BigUint64Array",
      "Float32Array",
      "Float64Array",
      "Int16Array",
      "Int32Array",
      "Int8Array",
      "Uint16Array",
      "Uint32Array",
      "Uint8Array",
      "Uint8ClampedArray"
    ];
    var g = typeof globalThis === "undefined" ? global : globalThis;
    module2.exports = function availableTypedArrays() {
      var out = [];
      for (var i2 = 0; i2 < possibleNames.length; i2++) {
        if (typeof g[possibleNames[i2]] === "function") {
          out[out.length] = possibleNames[i2];
        }
      }
      return out;
    };
  }
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/which-typed-array/index.js"(exports2, module2) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var getPrototypeOf = Object.getPrototypeOf;
    var $indexOf = callBound("Array.prototype.indexOf", true) || /** @type {(array: readonly unknown[], value: unknown) => keyof array} */
    function indexOf(array, value) {
      for (var i2 = 0; i2 < array.length; i2 += 1) {
        if (array[i2] === value) {
          return i2;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      });
    } else {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache["$" + typedArray] = callBind(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, typeof cache>} */
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = $slice(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${TypedArrayName}`) => void} */
        function(getter, name) {
          if (!found) {
            try {
              getter(value);
              found = $slice(name, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    module2.exports = function whichTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD) {
        return null;
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/array-buffer-byte-length/index.js
var require_array_buffer_byte_length = __commonJS({
  "node_modules/array-buffer-byte-length/index.js"(exports2, module2) {
    "use strict";
    var callBound = require_callBound();
    var $byteLength = callBound("ArrayBuffer.prototype.byteLength", true);
    var isArrayBuffer = require_is_array_buffer();
    module2.exports = function byteLength(ab) {
      if (!isArrayBuffer(ab)) {
        return NaN;
      }
      return $byteLength ? $byteLength(ab) : ab.byteLength;
    };
  }
});

// node_modules/deep-equal/index.js
var require_deep_equal = __commonJS({
  "node_modules/deep-equal/index.js"(exports2, module2) {
    "use strict";
    var assign = require_object();
    var callBound = require_callBound();
    var flags = require_regexp_prototype();
    var GetIntrinsic = require_get_intrinsic();
    var getIterator = require_node();
    var getSideChannel = require_side_channel();
    var is = require_object_is();
    var isArguments = require_is_arguments();
    var isArray = require_isarray();
    var isArrayBuffer = require_is_array_buffer();
    var isDate = require_is_date_object();
    var isRegex = require_is_regex();
    var isSharedArrayBuffer = require_is_shared_array_buffer();
    var objectKeys = require_object_keys();
    var whichBoxedPrimitive = require_which_boxed_primitive();
    var whichCollection = require_which_collection();
    var whichTypedArray = require_which_typed_array();
    var byteLength = require_array_buffer_byte_length();
    var sabByteLength = callBound("SharedArrayBuffer.prototype.byteLength", true);
    var $getTime = callBound("Date.prototype.getTime");
    var gPO = Object.getPrototypeOf;
    var $objToString = callBound("Object.prototype.toString");
    var $Set = GetIntrinsic("%Set%", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSize = callBound("Map.prototype.size", true);
    var $setAdd = callBound("Set.prototype.add", true);
    var $setDelete = callBound("Set.prototype.delete", true);
    var $setHas = callBound("Set.prototype.has", true);
    var $setSize = callBound("Set.prototype.size", true);
    function setHasEqualElement(set, val1, opts, channel) {
      var i2 = getIterator(set);
      var result;
      while ((result = i2.next()) && !result.done) {
        if (internalDeepEqual(val1, result.value, opts, channel)) {
          $setDelete(set, result.value);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      if (typeof prim === "undefined") {
        return null;
      }
      if (typeof prim === "object") {
        return void 0;
      }
      if (typeof prim === "symbol") {
        return false;
      }
      if (typeof prim === "string" || typeof prim === "number") {
        return +prim === +prim;
      }
      return true;
    }
    function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = $mapGet(b, altValue);
      var looseOpts = assign({}, opts, { strict: false });
      if (typeof curB === "undefined" && !$mapHas(b, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
        return false;
      }
      return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      return $setHas(b, altValue) && !$setHas(a, altValue);
    }
    function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
      var i2 = getIterator(set);
      var result;
      var key2;
      while ((result = i2.next()) && !result.done) {
        key2 = result.value;
        if (
          // eslint-disable-next-line no-use-before-define
          internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
        ) {
          $setDelete(set, key2);
          return true;
        }
      }
      return false;
    }
    function internalDeepEqual(actual, expected, options, channel) {
      var opts = options || {};
      if (opts.strict ? is(actual, expected) : actual === expected) {
        return true;
      }
      var actualBoxed = whichBoxedPrimitive(actual);
      var expectedBoxed = whichBoxedPrimitive(expected);
      if (actualBoxed !== expectedBoxed) {
        return false;
      }
      if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
        return opts.strict ? is(actual, expected) : actual == expected;
      }
      var hasActual = channel.has(actual);
      var hasExpected = channel.has(expected);
      var sentinel;
      if (hasActual && hasExpected) {
        if (channel.get(actual) === channel.get(expected)) {
          return true;
        }
      } else {
        sentinel = {};
      }
      if (!hasActual) {
        channel.set(actual, sentinel);
      }
      if (!hasExpected) {
        channel.set(expected, sentinel);
      }
      return objEquiv(actual, expected, opts, channel);
    }
    function isBuffer(x) {
      if (!x || typeof x !== "object" || typeof x.length !== "number") {
        return false;
      }
      if (typeof x.copy !== "function" || typeof x.slice !== "function") {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== "number") {
        return false;
      }
      return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
    }
    function setEquiv(a, b, opts, channel) {
      if ($setSize(a) !== $setSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      while ((resultA = iA.next()) && !resultA.done) {
        if (resultA.value && typeof resultA.value === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        } else if (!$setHas(b, resultA.value)) {
          if (opts.strict) {
            return false;
          }
          if (!setMightHaveLoosePrim(a, b, resultA.value)) {
            return false;
          }
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          if (resultB.value && typeof resultB.value === "object") {
            if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
              return false;
            }
          } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function mapEquiv(a, b, opts, channel) {
      if ($mapSize(a) !== $mapSize(b)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b);
      var resultA;
      var resultB;
      var set;
      var key;
      var item1;
      var item2;
      while ((resultA = iA.next()) && !resultA.done) {
        key = resultA.value[0];
        item1 = resultA.value[1];
        if (key && typeof key === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, key);
        } else {
          item2 = $mapGet(b, key);
          if (typeof item2 === "undefined" && !$mapHas(b, key) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict) {
              return false;
            }
            if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
              return false;
            }
            if (!set) {
              set = new $Set();
            }
            $setAdd(set, key);
          }
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          key = resultB.value[0];
          item2 = resultB.value[1];
          if (key && typeof key === "object") {
            if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
              return false;
            }
          } else if (!opts.strict && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel)) && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function objEquiv(a, b, opts, channel) {
      var i2, key;
      if (typeof a !== typeof b) {
        return false;
      }
      if (a == null || b == null) {
        return false;
      }
      if ($objToString(a) !== $objToString(b)) {
        return false;
      }
      if (isArguments(a) !== isArguments(b)) {
        return false;
      }
      var aIsArray = isArray(a);
      var bIsArray = isArray(b);
      if (aIsArray !== bIsArray) {
        return false;
      }
      var aIsError = a instanceof Error;
      var bIsError = b instanceof Error;
      if (aIsError !== bIsError) {
        return false;
      }
      if (aIsError || bIsError) {
        if (a.name !== b.name || a.message !== b.message) {
          return false;
        }
      }
      var aIsRegex = isRegex(a);
      var bIsRegex = isRegex(b);
      if (aIsRegex !== bIsRegex) {
        return false;
      }
      if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
        return false;
      }
      var aIsDate = isDate(a);
      var bIsDate = isDate(b);
      if (aIsDate !== bIsDate) {
        return false;
      }
      if (aIsDate || bIsDate) {
        if ($getTime(a) !== $getTime(b)) {
          return false;
        }
      }
      if (opts.strict && gPO && gPO(a) !== gPO(b)) {
        return false;
      }
      var aWhich = whichTypedArray(a);
      var bWhich = whichTypedArray(b);
      if (aWhich !== bWhich) {
        return false;
      }
      if (aWhich || bWhich) {
        if (a.length !== b.length) {
          return false;
        }
        for (i2 = 0; i2 < a.length; i2++) {
          if (a[i2] !== b[i2]) {
            return false;
          }
        }
        return true;
      }
      var aIsBuffer = isBuffer(a);
      var bIsBuffer = isBuffer(b);
      if (aIsBuffer !== bIsBuffer) {
        return false;
      }
      if (aIsBuffer || bIsBuffer) {
        if (a.length !== b.length) {
          return false;
        }
        for (i2 = 0; i2 < a.length; i2++) {
          if (a[i2] !== b[i2]) {
            return false;
          }
        }
        return true;
      }
      var aIsArrayBuffer = isArrayBuffer(a);
      var bIsArrayBuffer = isArrayBuffer(b);
      if (aIsArrayBuffer !== bIsArrayBuffer) {
        return false;
      }
      if (aIsArrayBuffer || bIsArrayBuffer) {
        if (byteLength(a) !== byteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      var aIsSAB = isSharedArrayBuffer(a);
      var bIsSAB = isSharedArrayBuffer(b);
      if (aIsSAB !== bIsSAB) {
        return false;
      }
      if (aIsSAB || bIsSAB) {
        if (sabByteLength(a) !== sabByteLength(b)) {
          return false;
        }
        return typeof Uint8Array === "function" && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
      }
      if (typeof a !== typeof b) {
        return false;
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b);
      if (ka.length !== kb.length) {
        return false;
      }
      ka.sort();
      kb.sort();
      for (i2 = ka.length - 1; i2 >= 0; i2--) {
        if (ka[i2] != kb[i2]) {
          return false;
        }
      }
      for (i2 = ka.length - 1; i2 >= 0; i2--) {
        key = ka[i2];
        if (!internalDeepEqual(a[key], b[key], opts, channel)) {
          return false;
        }
      }
      var aCollection = whichCollection(a);
      var bCollection = whichCollection(b);
      if (aCollection !== bCollection) {
        return false;
      }
      if (aCollection === "Set" || bCollection === "Set") {
        return setEquiv(a, b, opts, channel);
      }
      if (aCollection === "Map") {
        return mapEquiv(a, b, opts, channel);
      }
      return true;
    }
    module2.exports = function deepEqual(a, b, opts) {
      return internalDeepEqual(a, b, opts, getSideChannel());
    };
  }
});

// node_modules/fontkit/iconv-lite.cjs
var require_iconv_lite = __commonJS({
  "node_modules/fontkit/iconv-lite.cjs"(exports2, module2) {
    try {
      module2.exports = require("iconv-lite");
    } catch (err) {
    }
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    var i2;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/tiny-inflate/index.js
var require_tiny_inflate = __commonJS({
  "node_modules/tiny-inflate/index.js"(exports2, module2) {
    var TINF_OK = 0;
    var TINF_DATA_ERROR = -3;
    function Tree() {
      this.table = new Uint16Array(16);
      this.trans = new Uint16Array(288);
    }
    function Data(source, dest) {
      this.source = source;
      this.sourceIndex = 0;
      this.tag = 0;
      this.bitcount = 0;
      this.dest = dest;
      this.destLen = 0;
      this.ltree = new Tree();
      this.dtree = new Tree();
    }
    var sltree = new Tree();
    var sdtree = new Tree();
    var length_bits = new Uint8Array(30);
    var length_base = new Uint16Array(30);
    var dist_bits = new Uint8Array(30);
    var dist_base = new Uint16Array(30);
    var clcidx = new Uint8Array([
      16,
      17,
      18,
      0,
      8,
      7,
      9,
      6,
      10,
      5,
      11,
      4,
      12,
      3,
      13,
      2,
      14,
      1,
      15
    ]);
    var code_tree = new Tree();
    var lengths = new Uint8Array(288 + 32);
    function tinf_build_bits_base(bits, base, delta, first) {
      var i2, sum;
      for (i2 = 0; i2 < delta; ++i2)
        bits[i2] = 0;
      for (i2 = 0; i2 < 30 - delta; ++i2)
        bits[i2 + delta] = i2 / delta | 0;
      for (sum = first, i2 = 0; i2 < 30; ++i2) {
        base[i2] = sum;
        sum += 1 << bits[i2];
      }
    }
    function tinf_build_fixed_trees(lt, dt) {
      var i2;
      for (i2 = 0; i2 < 7; ++i2)
        lt.table[i2] = 0;
      lt.table[7] = 24;
      lt.table[8] = 152;
      lt.table[9] = 112;
      for (i2 = 0; i2 < 24; ++i2)
        lt.trans[i2] = 256 + i2;
      for (i2 = 0; i2 < 144; ++i2)
        lt.trans[24 + i2] = i2;
      for (i2 = 0; i2 < 8; ++i2)
        lt.trans[24 + 144 + i2] = 280 + i2;
      for (i2 = 0; i2 < 112; ++i2)
        lt.trans[24 + 144 + 8 + i2] = 144 + i2;
      for (i2 = 0; i2 < 5; ++i2)
        dt.table[i2] = 0;
      dt.table[5] = 32;
      for (i2 = 0; i2 < 32; ++i2)
        dt.trans[i2] = i2;
    }
    var offs = new Uint16Array(16);
    function tinf_build_tree(t, lengths2, off, num) {
      var i2, sum;
      for (i2 = 0; i2 < 16; ++i2)
        t.table[i2] = 0;
      for (i2 = 0; i2 < num; ++i2)
        t.table[lengths2[off + i2]]++;
      t.table[0] = 0;
      for (sum = 0, i2 = 0; i2 < 16; ++i2) {
        offs[i2] = sum;
        sum += t.table[i2];
      }
      for (i2 = 0; i2 < num; ++i2) {
        if (lengths2[off + i2])
          t.trans[offs[lengths2[off + i2]]++] = i2;
      }
    }
    function tinf_getbit(d) {
      if (!d.bitcount--) {
        d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
      }
      var bit = d.tag & 1;
      d.tag >>>= 1;
      return bit;
    }
    function tinf_read_bits(d, num, base) {
      if (!num)
        return base;
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var val = d.tag & 65535 >>> 16 - num;
      d.tag >>>= num;
      d.bitcount -= num;
      return val + base;
    }
    function tinf_decode_symbol(d, t) {
      while (d.bitcount < 24) {
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
      }
      var sum = 0, cur = 0, len = 0;
      var tag = d.tag;
      do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;
        sum += t.table[len];
        cur -= t.table[len];
      } while (cur >= 0);
      d.tag = tag;
      d.bitcount -= len;
      return t.trans[sum + cur];
    }
    function tinf_decode_trees(d, lt, dt) {
      var hlit, hdist, hclen;
      var i2, num, length;
      hlit = tinf_read_bits(d, 5, 257);
      hdist = tinf_read_bits(d, 5, 1);
      hclen = tinf_read_bits(d, 4, 4);
      for (i2 = 0; i2 < 19; ++i2)
        lengths[i2] = 0;
      for (i2 = 0; i2 < hclen; ++i2) {
        var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i2]] = clen;
      }
      tinf_build_tree(code_tree, lengths, 0, 19);
      for (num = 0; num < hlit + hdist; ) {
        var sym = tinf_decode_symbol(d, code_tree);
        switch (sym) {
          case 16:
            var prev = lengths[num - 1];
            for (length = tinf_read_bits(d, 2, 3); length; --length) {
              lengths[num++] = prev;
            }
            break;
          case 17:
            for (length = tinf_read_bits(d, 3, 3); length; --length) {
              lengths[num++] = 0;
            }
            break;
          case 18:
            for (length = tinf_read_bits(d, 7, 11); length; --length) {
              lengths[num++] = 0;
            }
            break;
          default:
            lengths[num++] = sym;
            break;
        }
      }
      tinf_build_tree(lt, lengths, 0, hlit);
      tinf_build_tree(dt, lengths, hlit, hdist);
    }
    function tinf_inflate_block_data(d, lt, dt) {
      while (1) {
        var sym = tinf_decode_symbol(d, lt);
        if (sym === 256) {
          return TINF_OK;
        }
        if (sym < 256) {
          d.dest[d.destLen++] = sym;
        } else {
          var length, dist, offs2;
          var i2;
          sym -= 257;
          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
          dist = tinf_decode_symbol(d, dt);
          offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
          for (i2 = offs2; i2 < offs2 + length; ++i2) {
            d.dest[d.destLen++] = d.dest[i2];
          }
        }
      }
    }
    function tinf_inflate_uncompressed_block(d) {
      var length, invlength;
      var i2;
      while (d.bitcount > 8) {
        d.sourceIndex--;
        d.bitcount -= 8;
      }
      length = d.source[d.sourceIndex + 1];
      length = 256 * length + d.source[d.sourceIndex];
      invlength = d.source[d.sourceIndex + 3];
      invlength = 256 * invlength + d.source[d.sourceIndex + 2];
      if (length !== (~invlength & 65535))
        return TINF_DATA_ERROR;
      d.sourceIndex += 4;
      for (i2 = length; i2; --i2)
        d.dest[d.destLen++] = d.source[d.sourceIndex++];
      d.bitcount = 0;
      return TINF_OK;
    }
    function tinf_uncompress(source, dest) {
      var d = new Data(source, dest);
      var bfinal, btype, res;
      do {
        bfinal = tinf_getbit(d);
        btype = tinf_read_bits(d, 2, 0);
        switch (btype) {
          case 0:
            res = tinf_inflate_uncompressed_block(d);
            break;
          case 1:
            res = tinf_inflate_block_data(d, sltree, sdtree);
            break;
          case 2:
            tinf_decode_trees(d, d.ltree, d.dtree);
            res = tinf_inflate_block_data(d, d.ltree, d.dtree);
            break;
          default:
            res = TINF_DATA_ERROR;
        }
        if (res !== TINF_OK)
          throw new Error("Data error");
      } while (!bfinal);
      if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === "function")
          return d.dest.slice(0, d.destLen);
        else
          return d.dest.subarray(0, d.destLen);
      }
      return d.dest;
    }
    tinf_build_fixed_trees(sltree, sdtree);
    tinf_build_bits_base(length_bits, length_base, 4, 3);
    tinf_build_bits_base(dist_bits, dist_base, 2, 1);
    length_bits[28] = 0;
    length_base[28] = 258;
    module2.exports = tinf_uncompress;
  }
});

// node_modules/unicode-trie/swap.js
var require_swap = __commonJS({
  "node_modules/unicode-trie/swap.js"(exports2, module2) {
    var isBigEndian = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18;
    var swap = (b, n, m) => {
      let i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    };
    var swap32 = (array) => {
      const len = array.length;
      for (let i2 = 0; i2 < len; i2 += 4) {
        swap(array, i2, i2 + 3);
        swap(array, i2 + 1, i2 + 2);
      }
    };
    var swap32LE = (array) => {
      if (isBigEndian) {
        swap32(array);
      }
    };
    module2.exports = {
      swap32LE
    };
  }
});

// node_modules/unicode-trie/index.js
var require_unicode_trie = __commonJS({
  "node_modules/unicode-trie/index.js"(exports2, module2) {
    var inflate = require_tiny_inflate();
    var { swap32LE } = require_swap();
    var SHIFT_1 = 6 + 5;
    var SHIFT_2 = 5;
    var SHIFT_1_2 = SHIFT_1 - SHIFT_2;
    var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;
    var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
    var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
    var INDEX_SHIFT = 2;
    var DATA_BLOCK_LENGTH = 1 << SHIFT_2;
    var DATA_MASK = DATA_BLOCK_LENGTH - 1;
    var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;
    var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;
    var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
    var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
    var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;
    var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
    var DATA_GRANULARITY = 1 << INDEX_SHIFT;
    var UnicodeTrie = class {
      constructor(data) {
        const isBuffer = typeof data.readUInt32BE === "function" && typeof data.slice === "function";
        if (isBuffer || data instanceof Uint8Array) {
          let uncompressedLength;
          if (isBuffer) {
            this.highStart = data.readUInt32LE(0);
            this.errorValue = data.readUInt32LE(4);
            uncompressedLength = data.readUInt32LE(8);
            data = data.slice(12);
          } else {
            const view = new DataView(data.buffer);
            this.highStart = view.getUint32(0, true);
            this.errorValue = view.getUint32(4, true);
            uncompressedLength = view.getUint32(8, true);
            data = data.subarray(12);
          }
          data = inflate(data, new Uint8Array(uncompressedLength));
          data = inflate(data, new Uint8Array(uncompressedLength));
          swap32LE(data);
          this.data = new Uint32Array(data.buffer);
        } else {
          ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
        }
      }
      get(codePoint) {
        let index;
        if (codePoint < 0 || codePoint > 1114111) {
          return this.errorValue;
        }
        if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {
          index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint <= 65535) {
          index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        if (codePoint < this.highStart) {
          index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
          index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
          index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
          return this.data[index];
        }
        return this.data[this.data.length - DATA_GRANULARITY];
      }
    };
    module2.exports = UnicodeTrie;
  }
});

// node_modules/unicode-properties/dist/main.cjs
var require_main = __commonJS({
  "node_modules/unicode-properties/dist/main.cjs"(exports2, module2) {
    var $c5L0i$base64js = require_base64_js();
    var $c5L0i$unicodetrie = require_unicode_trie();
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    function $parcel$defineInteropFlag(a) {
      Object.defineProperty(a, "__esModule", { value: true, configurable: true });
    }
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    $parcel$defineInteropFlag(module2.exports);
    $parcel$export(module2.exports, "getCategory", () => $43d7963e56408b24$export$410364bbb673ddbc);
    $parcel$export(module2.exports, "getCombiningClass", () => $43d7963e56408b24$export$c03b919c6651ed55);
    $parcel$export(module2.exports, "getScript", () => $43d7963e56408b24$export$941569448d136665);
    $parcel$export(module2.exports, "getEastAsianWidth", () => $43d7963e56408b24$export$92f6187db8ca6d26);
    $parcel$export(module2.exports, "getNumericValue", () => $43d7963e56408b24$export$7d1258ebb7625a0d);
    $parcel$export(module2.exports, "isAlphabetic", () => $43d7963e56408b24$export$52c8ea63abd07594);
    $parcel$export(module2.exports, "isDigit", () => $43d7963e56408b24$export$727d9dbc4fbb948f);
    $parcel$export(module2.exports, "isPunctuation", () => $43d7963e56408b24$export$a5b49f4dc6a07d2c);
    $parcel$export(module2.exports, "isLowerCase", () => $43d7963e56408b24$export$7b6804e8df61fcf5);
    $parcel$export(module2.exports, "isUpperCase", () => $43d7963e56408b24$export$aebd617640818cda);
    $parcel$export(module2.exports, "isTitleCase", () => $43d7963e56408b24$export$de8b4ee23b2cf823);
    $parcel$export(module2.exports, "isWhiteSpace", () => $43d7963e56408b24$export$3c52dd84024ae72c);
    $parcel$export(module2.exports, "isBaseForm", () => $43d7963e56408b24$export$a11bdcffe109e74b);
    $parcel$export(module2.exports, "isMark", () => $43d7963e56408b24$export$e33ad6871e762338);
    $parcel$export(module2.exports, "default", () => $43d7963e56408b24$export$2e2bcd8739ae039);
    var $29668e65f2091c2c$exports = {};
    $29668e65f2091c2c$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
    var $43d7963e56408b24$var$trie = new (0, $parcel$interopDefault($c5L0i$unicodetrie))((0, $parcel$interopDefault($c5L0i$base64js)).toByteArray(""));
    var $43d7963e56408b24$var$log2 = Math.log2 || ((n) => Math.log(n) / Math.LN2);
    var $43d7963e56408b24$var$bits = (n) => $43d7963e56408b24$var$log2(n) + 1 | 0;
    var $43d7963e56408b24$var$CATEGORY_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).categories.length - 1);
    var $43d7963e56408b24$var$COMBINING_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses.length - 1);
    var $43d7963e56408b24$var$SCRIPT_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts.length - 1);
    var $43d7963e56408b24$var$EAW_BITS = $43d7963e56408b24$var$bits((0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw.length - 1);
    var $43d7963e56408b24$var$NUMBER_BITS = 10;
    var $43d7963e56408b24$var$CATEGORY_SHIFT = $43d7963e56408b24$var$COMBINING_BITS + $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$COMBINING_SHIFT = $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$SCRIPT_SHIFT = $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$EAW_SHIFT = $43d7963e56408b24$var$NUMBER_BITS;
    var $43d7963e56408b24$var$CATEGORY_MASK = (1 << $43d7963e56408b24$var$CATEGORY_BITS) - 1;
    var $43d7963e56408b24$var$COMBINING_MASK = (1 << $43d7963e56408b24$var$COMBINING_BITS) - 1;
    var $43d7963e56408b24$var$SCRIPT_MASK = (1 << $43d7963e56408b24$var$SCRIPT_BITS) - 1;
    var $43d7963e56408b24$var$EAW_MASK = (1 << $43d7963e56408b24$var$EAW_BITS) - 1;
    var $43d7963e56408b24$var$NUMBER_MASK = (1 << $43d7963e56408b24$var$NUMBER_BITS) - 1;
    function $43d7963e56408b24$export$410364bbb673ddbc(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).categories[val >> $43d7963e56408b24$var$CATEGORY_SHIFT & $43d7963e56408b24$var$CATEGORY_MASK];
    }
    function $43d7963e56408b24$export$c03b919c6651ed55(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses[val >> $43d7963e56408b24$var$COMBINING_SHIFT & $43d7963e56408b24$var$COMBINING_MASK];
    }
    function $43d7963e56408b24$export$941569448d136665(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts[val >> $43d7963e56408b24$var$SCRIPT_SHIFT & $43d7963e56408b24$var$SCRIPT_MASK];
    }
    function $43d7963e56408b24$export$92f6187db8ca6d26(codePoint) {
      const val = $43d7963e56408b24$var$trie.get(codePoint);
      return (0, /* @__PURE__ */ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw[val >> $43d7963e56408b24$var$EAW_SHIFT & $43d7963e56408b24$var$EAW_MASK];
    }
    function $43d7963e56408b24$export$7d1258ebb7625a0d(codePoint) {
      let val = $43d7963e56408b24$var$trie.get(codePoint);
      let num = val & $43d7963e56408b24$var$NUMBER_MASK;
      if (num === 0)
        return null;
      else if (num <= 50)
        return num - 1;
      else if (num < 480) {
        const numerator = (num >> 4) - 12;
        const denominator = (num & 15) + 1;
        return numerator / denominator;
      } else if (num < 768) {
        val = (num >> 5) - 14;
        let exp = (num & 31) + 2;
        while (exp > 0) {
          val *= 10;
          exp--;
        }
        return val;
      } else {
        val = (num >> 2) - 191;
        let exp = (num & 3) + 1;
        while (exp > 0) {
          val *= 60;
          exp--;
        }
        return val;
      }
    }
    function $43d7963e56408b24$export$52c8ea63abd07594(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
    }
    function $43d7963e56408b24$export$727d9dbc4fbb948f(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Nd";
    }
    function $43d7963e56408b24$export$a5b49f4dc6a07d2c(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
    }
    function $43d7963e56408b24$export$7b6804e8df61fcf5(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Ll";
    }
    function $43d7963e56408b24$export$aebd617640818cda(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lu";
    }
    function $43d7963e56408b24$export$de8b4ee23b2cf823(codePoint) {
      return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lt";
    }
    function $43d7963e56408b24$export$3c52dd84024ae72c(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Zs" || category === "Zl" || category === "Zp";
    }
    function $43d7963e56408b24$export$a11bdcffe109e74b(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
    }
    function $43d7963e56408b24$export$e33ad6871e762338(codePoint) {
      const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
      return category === "Mn" || category === "Me" || category === "Mc";
    }
    var $43d7963e56408b24$export$2e2bcd8739ae039 = {
      getCategory: $43d7963e56408b24$export$410364bbb673ddbc,
      getCombiningClass: $43d7963e56408b24$export$c03b919c6651ed55,
      getScript: $43d7963e56408b24$export$941569448d136665,
      getEastAsianWidth: $43d7963e56408b24$export$92f6187db8ca6d26,
      getNumericValue: $43d7963e56408b24$export$7d1258ebb7625a0d,
      isAlphabetic: $43d7963e56408b24$export$52c8ea63abd07594,
      isDigit: $43d7963e56408b24$export$727d9dbc4fbb948f,
      isPunctuation: $43d7963e56408b24$export$a5b49f4dc6a07d2c,
      isLowerCase: $43d7963e56408b24$export$7b6804e8df61fcf5,
      isUpperCase: $43d7963e56408b24$export$aebd617640818cda,
      isTitleCase: $43d7963e56408b24$export$de8b4ee23b2cf823,
      isWhiteSpace: $43d7963e56408b24$export$3c52dd84024ae72c,
      isBaseForm: $43d7963e56408b24$export$a11bdcffe109e74b,
      isMark: $43d7963e56408b24$export$e33ad6871e762338
    };
  }
});

// node_modules/dfa/index.js
var require_dfa = __commonJS({
  "node_modules/dfa/index.js"(exports2, module2) {
    "use strict";
    var INITIAL_STATE = 1;
    var FAIL_STATE = 0;
    var StateMachine = class {
      constructor(dfa) {
        this.stateTable = dfa.stateTable;
        this.accepting = dfa.accepting;
        this.tags = dfa.tags;
      }
      /**
       * Returns an iterable object that yields pattern matches over the input sequence.
       * Matches are of the form [startIndex, endIndex, tags].
       */
      match(str) {
        var self2 = this;
        return {
          *[Symbol.iterator]() {
            var state = INITIAL_STATE;
            var startRun = null;
            var lastAccepting = null;
            var lastState = null;
            for (var p = 0; p < str.length; p++) {
              var c = str[p];
              lastState = state;
              state = self2.stateTable[state][c];
              if (state === FAIL_STATE) {
                if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                  yield [startRun, lastAccepting, self2.tags[lastState]];
                }
                state = self2.stateTable[INITIAL_STATE][c];
                startRun = null;
              }
              if (state !== FAIL_STATE && startRun == null) {
                startRun = p;
              }
              if (self2.accepting[state]) {
                lastAccepting = p;
              }
              if (state === FAIL_STATE) {
                state = INITIAL_STATE;
              }
            }
            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
              yield [startRun, lastAccepting, self2.tags[state]];
            }
          }
        };
      }
      /**
       * For each match over the input sequence, action functions matching
       * the tag definitions in the input pattern are called with the startIndex,
       * endIndex, and sub-match sequence.
       */
      apply(str, actions) {
        for (var [start, end, tags] of this.match(str)) {
          for (var tag of tags) {
            if (typeof actions[tag] === "function") {
              actions[tag](start, end, str.slice(start, end + 1));
            }
          }
        }
      }
    };
    module2.exports = StateMachine;
  }
});

// node_modules/clone/clone.js
var require_clone = __commonJS({
  "node_modules/clone/clone.js"(exports2, module2) {
    var clone = function() {
      "use strict";
      function _instanceof(obj, type) {
        return type != null && obj instanceof type;
      }
      var nativeMap;
      try {
        nativeMap = Map;
      } catch (_) {
        nativeMap = function() {
        };
      }
      var nativeSet;
      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function() {
        };
      }
      var nativePromise;
      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function() {
        };
      }
      function clone2(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === "object") {
          depth = circular.depth;
          prototype = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        }
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined")
          circular = true;
        if (typeof depth == "undefined")
          depth = Infinity;
        function _clone(parent2, depth2) {
          if (parent2 === null)
            return null;
          if (depth2 === 0)
            return parent2;
          var child;
          var proto;
          if (typeof parent2 != "object") {
            return parent2;
          }
          if (_instanceof(parent2, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent2, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent2, nativePromise)) {
            child = new nativePromise(function(resolve, reject) {
              parent2.then(function(value) {
                resolve(_clone(value, depth2 - 1));
              }, function(err) {
                reject(_clone(err, depth2 - 1));
              });
            });
          } else if (clone2.__isArray(parent2)) {
            child = [];
          } else if (clone2.__isRegExp(parent2)) {
            child = new RegExp(parent2.source, __getRegExpFlags(parent2));
            if (parent2.lastIndex)
              child.lastIndex = parent2.lastIndex;
          } else if (clone2.__isDate(parent2)) {
            child = new Date(parent2.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent2)) {
            if (Buffer.allocUnsafe) {
              child = Buffer.allocUnsafe(parent2.length);
            } else {
              child = new Buffer(parent2.length);
            }
            parent2.copy(child);
            return child;
          } else if (_instanceof(parent2, Error)) {
            child = Object.create(parent2);
          } else {
            if (typeof prototype == "undefined") {
              proto = Object.getPrototypeOf(parent2);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype);
              proto = prototype;
            }
          }
          if (circular) {
            var index = allParents.indexOf(parent2);
            if (index != -1) {
              return allChildren[index];
            }
            allParents.push(parent2);
            allChildren.push(child);
          }
          if (_instanceof(parent2, nativeMap)) {
            parent2.forEach(function(value, key) {
              var keyChild = _clone(key, depth2 - 1);
              var valueChild = _clone(value, depth2 - 1);
              child.set(keyChild, valueChild);
            });
          }
          if (_instanceof(parent2, nativeSet)) {
            parent2.forEach(function(value) {
              var entryChild = _clone(value, depth2 - 1);
              child.add(entryChild);
            });
          }
          for (var i2 in parent2) {
            var attrs;
            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i2);
            }
            if (attrs && attrs.set == null) {
              continue;
            }
            child[i2] = _clone(parent2[i2], depth2 - 1);
          }
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(parent2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              var symbol = symbols[i2];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }
              child[symbol] = _clone(parent2[symbol], depth2 - 1);
              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol, {
                  enumerable: false
                });
              }
            }
          }
          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent2);
            for (var i2 = 0; i2 < allPropertyNames.length; i2++) {
              var propertyName = allPropertyNames[i2];
              var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
              if (descriptor && descriptor.enumerable) {
                continue;
              }
              child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }
          return child;
        }
        return _clone(parent, depth);
      }
      clone2.clonePrototype = function clonePrototype(parent) {
        if (parent === null)
          return null;
        var c = function() {
        };
        c.prototype = parent;
        return new c();
      };
      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }
      clone2.__objToStr = __objToStr;
      function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
      }
      clone2.__isDate = __isDate;
      function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
      }
      clone2.__isArray = __isArray;
      function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
      }
      clone2.__isRegExp = __isRegExp;
      function __getRegExpFlags(re) {
        var flags = "";
        if (re.global)
          flags += "g";
        if (re.ignoreCase)
          flags += "i";
        if (re.multiline)
          flags += "m";
        return flags;
      }
      clone2.__getRegExpFlags = __getRegExpFlags;
      return clone2;
    }();
    if (typeof module2 === "object" && module2.exports) {
      module2.exports = clone;
    }
  }
});

// node_modules/brotli/dec/streams.js
var require_streams = __commonJS({
  "node_modules/brotli/dec/streams.js"(exports2) {
    function BrotliInput(buffer) {
      this.buffer = buffer;
      this.pos = 0;
    }
    BrotliInput.prototype.read = function(buf, i2, count) {
      if (this.pos + count > this.buffer.length) {
        count = this.buffer.length - this.pos;
      }
      for (var p = 0; p < count; p++)
        buf[i2 + p] = this.buffer[this.pos + p];
      this.pos += count;
      return count;
    };
    exports2.BrotliInput = BrotliInput;
    function BrotliOutput(buf) {
      this.buffer = buf;
      this.pos = 0;
    }
    BrotliOutput.prototype.write = function(buf, count) {
      if (this.pos + count > this.buffer.length)
        throw new Error("Output buffer is not large enough");
      this.buffer.set(buf.subarray(0, count), this.pos);
      this.pos += count;
      return count;
    };
    exports2.BrotliOutput = BrotliOutput;
  }
});

// node_modules/brotli/dec/bit_reader.js
var require_bit_reader = __commonJS({
  "node_modules/brotli/dec/bit_reader.js"(exports2, module2) {
    var BROTLI_READ_SIZE = 4096;
    var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
    var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
    var kBitMask = new Uint32Array([
      0,
      1,
      3,
      7,
      15,
      31,
      63,
      127,
      255,
      511,
      1023,
      2047,
      4095,
      8191,
      16383,
      32767,
      65535,
      131071,
      262143,
      524287,
      1048575,
      2097151,
      4194303,
      8388607,
      16777215
    ]);
    function BrotliBitReader(input) {
      this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
      this.input_ = input;
      this.reset();
    }
    BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
    BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
    BrotliBitReader.prototype.reset = function() {
      this.buf_ptr_ = 0;
      this.val_ = 0;
      this.pos_ = 0;
      this.bit_pos_ = 0;
      this.bit_end_pos_ = 0;
      this.eos_ = 0;
      this.readMoreInput();
      for (var i2 = 0; i2 < 4; i2++) {
        this.val_ |= this.buf_[this.pos_] << 8 * i2;
        ++this.pos_;
      }
      return this.bit_end_pos_ > 0;
    };
    BrotliBitReader.prototype.readMoreInput = function() {
      if (this.bit_end_pos_ > 256) {
        return;
      } else if (this.eos_) {
        if (this.bit_pos_ > this.bit_end_pos_)
          throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
      } else {
        var dst = this.buf_ptr_;
        var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
        if (bytes_read < 0) {
          throw new Error("Unexpected end of input");
        }
        if (bytes_read < BROTLI_READ_SIZE) {
          this.eos_ = 1;
          for (var p = 0; p < 32; p++)
            this.buf_[dst + bytes_read + p] = 0;
        }
        if (dst === 0) {
          for (var p = 0; p < 32; p++)
            this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
          this.buf_ptr_ = BROTLI_READ_SIZE;
        } else {
          this.buf_ptr_ = 0;
        }
        this.bit_end_pos_ += bytes_read << 3;
      }
    };
    BrotliBitReader.prototype.fillBitWindow = function() {
      while (this.bit_pos_ >= 8) {
        this.val_ >>>= 8;
        this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
        ++this.pos_;
        this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
        this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
      }
    };
    BrotliBitReader.prototype.readBits = function(n_bits) {
      if (32 - this.bit_pos_ < n_bits) {
        this.fillBitWindow();
      }
      var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
      this.bit_pos_ += n_bits;
      return val;
    };
    module2.exports = BrotliBitReader;
  }
});

// node_modules/brotli/dec/dictionary-data.js
var require_dictionary_data = __commonJS({
  "node_modules/brotli/dec/dictionary-data.js"(exports2) {
    exports2.dictionary = new Uint8Array([
      116,
      105,
      109,
      101,
      100,
      111,
      119,
      110,
      108,
      105,
      102,
      101,
      108,
      101,
      102,
      116,
      98,
      97,
      99,
      107,
      99,
      111,
      100,
      101,
      100,
      97,
      116,
      97,
      115,
      104,
      111,
      119,
      111,
      110,
      108,
      121,
      115,
      105,
      116,
      101,
      99,
      105,
      116,
      121,
      111,
      112,
      101,
      110,
      106,
      117,
      115,
      116,
      108,
      105,
      107,
      101,
      102,
      114,
      101,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      120,
      116,
      121,
      101,
      97,
      114,
      111,
      118,
      101,
      114,
      98,
      111,
      100,
      121,
      108,
      111,
      118,
      101,
      102,
      111,
      114,
      109,
      98,
      111,
      111,
      107,
      112,
      108,
      97,
      121,
      108,
      105,
      118,
      101,
      108,
      105,
      110,
      101,
      104,
      101,
      108,
      112,
      104,
      111,
      109,
      101,
      115,
      105,
      100,
      101,
      109,
      111,
      114,
      101,
      119,
      111,
      114,
      100,
      108,
      111,
      110,
      103,
      116,
      104,
      101,
      109,
      118,
      105,
      101,
      119,
      102,
      105,
      110,
      100,
      112,
      97,
      103,
      101,
      100,
      97,
      121,
      115,
      102,
      117,
      108,
      108,
      104,
      101,
      97,
      100,
      116,
      101,
      114,
      109,
      101,
      97,
      99,
      104,
      97,
      114,
      101,
      97,
      102,
      114,
      111,
      109,
      116,
      114,
      117,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      117,
      112,
      111,
      110,
      104,
      105,
      103,
      104,
      100,
      97,
      116,
      101,
      108,
      97,
      110,
      100,
      110,
      101,
      119,
      115,
      101,
      118,
      101,
      110,
      110,
      101,
      120,
      116,
      99,
      97,
      115,
      101,
      98,
      111,
      116,
      104,
      112,
      111,
      115,
      116,
      117,
      115,
      101,
      100,
      109,
      97,
      100,
      101,
      104,
      97,
      110,
      100,
      104,
      101,
      114,
      101,
      119,
      104,
      97,
      116,
      110,
      97,
      109,
      101,
      76,
      105,
      110,
      107,
      98,
      108,
      111,
      103,
      115,
      105,
      122,
      101,
      98,
      97,
      115,
      101,
      104,
      101,
      108,
      100,
      109,
      97,
      107,
      101,
      109,
      97,
      105,
      110,
      117,
      115,
      101,
      114,
      39,
      41,
      32,
      43,
      104,
      111,
      108,
      100,
      101,
      110,
      100,
      115,
      119,
      105,
      116,
      104,
      78,
      101,
      119,
      115,
      114,
      101,
      97,
      100,
      119,
      101,
      114,
      101,
      115,
      105,
      103,
      110,
      116,
      97,
      107,
      101,
      104,
      97,
      118,
      101,
      103,
      97,
      109,
      101,
      115,
      101,
      101,
      110,
      99,
      97,
      108,
      108,
      112,
      97,
      116,
      104,
      119,
      101,
      108,
      108,
      112,
      108,
      117,
      115,
      109,
      101,
      110,
      117,
      102,
      105,
      108,
      109,
      112,
      97,
      114,
      116,
      106,
      111,
      105,
      110,
      116,
      104,
      105,
      115,
      108,
      105,
      115,
      116,
      103,
      111,
      111,
      100,
      110,
      101,
      101,
      100,
      119,
      97,
      121,
      115,
      119,
      101,
      115,
      116,
      106,
      111,
      98,
      115,
      109,
      105,
      110,
      100,
      97,
      108,
      115,
      111,
      108,
      111,
      103,
      111,
      114,
      105,
      99,
      104,
      117,
      115,
      101,
      115,
      108,
      97,
      115,
      116,
      116,
      101,
      97,
      109,
      97,
      114,
      109,
      121,
      102,
      111,
      111,
      100,
      107,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      101,
      97,
      115,
      116,
      119,
      97,
      114,
      100,
      98,
      101,
      115,
      116,
      102,
      105,
      114,
      101,
      80,
      97,
      103,
      101,
      107,
      110,
      111,
      119,
      97,
      119,
      97,
      121,
      46,
      112,
      110,
      103,
      109,
      111,
      118,
      101,
      116,
      104,
      97,
      110,
      108,
      111,
      97,
      100,
      103,
      105,
      118,
      101,
      115,
      101,
      108,
      102,
      110,
      111,
      116,
      101,
      109,
      117,
      99,
      104,
      102,
      101,
      101,
      100,
      109,
      97,
      110,
      121,
      114,
      111,
      99,
      107,
      105,
      99,
      111,
      110,
      111,
      110,
      99,
      101,
      108,
      111,
      111,
      107,
      104,
      105,
      100,
      101,
      100,
      105,
      101,
      100,
      72,
      111,
      109,
      101,
      114,
      117,
      108,
      101,
      104,
      111,
      115,
      116,
      97,
      106,
      97,
      120,
      105,
      110,
      102,
      111,
      99,
      108,
      117,
      98,
      108,
      97,
      119,
      115,
      108,
      101,
      115,
      115,
      104,
      97,
      108,
      102,
      115,
      111,
      109,
      101,
      115,
      117,
      99,
      104,
      122,
      111,
      110,
      101,
      49,
      48,
      48,
      37,
      111,
      110,
      101,
      115,
      99,
      97,
      114,
      101,
      84,
      105,
      109,
      101,
      114,
      97,
      99,
      101,
      98,
      108,
      117,
      101,
      102,
      111,
      117,
      114,
      119,
      101,
      101,
      107,
      102,
      97,
      99,
      101,
      104,
      111,
      112,
      101,
      103,
      97,
      118,
      101,
      104,
      97,
      114,
      100,
      108,
      111,
      115,
      116,
      119,
      104,
      101,
      110,
      112,
      97,
      114,
      107,
      107,
      101,
      112,
      116,
      112,
      97,
      115,
      115,
      115,
      104,
      105,
      112,
      114,
      111,
      111,
      109,
      72,
      84,
      77,
      76,
      112,
      108,
      97,
      110,
      84,
      121,
      112,
      101,
      100,
      111,
      110,
      101,
      115,
      97,
      118,
      101,
      107,
      101,
      101,
      112,
      102,
      108,
      97,
      103,
      108,
      105,
      110,
      107,
      115,
      111,
      108,
      100,
      102,
      105,
      118,
      101,
      116,
      111,
      111,
      107,
      114,
      97,
      116,
      101,
      116,
      111,
      119,
      110,
      106,
      117,
      109,
      112,
      116,
      104,
      117,
      115,
      100,
      97,
      114,
      107,
      99,
      97,
      114,
      100,
      102,
      105,
      108,
      101,
      102,
      101,
      97,
      114,
      115,
      116,
      97,
      121,
      107,
      105,
      108,
      108,
      116,
      104,
      97,
      116,
      102,
      97,
      108,
      108,
      97,
      117,
      116,
      111,
      101,
      118,
      101,
      114,
      46,
      99,
      111,
      109,
      116,
      97,
      108,
      107,
      115,
      104,
      111,
      112,
      118,
      111,
      116,
      101,
      100,
      101,
      101,
      112,
      109,
      111,
      100,
      101,
      114,
      101,
      115,
      116,
      116,
      117,
      114,
      110,
      98,
      111,
      114,
      110,
      98,
      97,
      110,
      100,
      102,
      101,
      108,
      108,
      114,
      111,
      115,
      101,
      117,
      114,
      108,
      40,
      115,
      107,
      105,
      110,
      114,
      111,
      108,
      101,
      99,
      111,
      109,
      101,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      115,
      109,
      101,
      101,
      116,
      103,
      111,
      108,
      100,
      46,
      106,
      112,
      103,
      105,
      116,
      101,
      109,
      118,
      97,
      114,
      121,
      102,
      101,
      108,
      116,
      116,
      104,
      101,
      110,
      115,
      101,
      110,
      100,
      100,
      114,
      111,
      112,
      86,
      105,
      101,
      119,
      99,
      111,
      112,
      121,
      49,
      46,
      48,
      34,
      60,
      47,
      97,
      62,
      115,
      116,
      111,
      112,
      101,
      108,
      115,
      101,
      108,
      105,
      101,
      115,
      116,
      111,
      117,
      114,
      112,
      97,
      99,
      107,
      46,
      103,
      105,
      102,
      112,
      97,
      115,
      116,
      99,
      115,
      115,
      63,
      103,
      114,
      97,
      121,
      109,
      101,
      97,
      110,
      38,
      103,
      116,
      59,
      114,
      105,
      100,
      101,
      115,
      104,
      111,
      116,
      108,
      97,
      116,
      101,
      115,
      97,
      105,
      100,
      114,
      111,
      97,
      100,
      118,
      97,
      114,
      32,
      102,
      101,
      101,
      108,
      106,
      111,
      104,
      110,
      114,
      105,
      99,
      107,
      112,
      111,
      114,
      116,
      102,
      97,
      115,
      116,
      39,
      85,
      65,
      45,
      100,
      101,
      97,
      100,
      60,
      47,
      98,
      62,
      112,
      111,
      111,
      114,
      98,
      105,
      108,
      108,
      116,
      121,
      112,
      101,
      85,
      46,
      83,
      46,
      119,
      111,
      111,
      100,
      109,
      117,
      115,
      116,
      50,
      112,
      120,
      59,
      73,
      110,
      102,
      111,
      114,
      97,
      110,
      107,
      119,
      105,
      100,
      101,
      119,
      97,
      110,
      116,
      119,
      97,
      108,
      108,
      108,
      101,
      97,
      100,
      91,
      48,
      93,
      59,
      112,
      97,
      117,
      108,
      119,
      97,
      118,
      101,
      115,
      117,
      114,
      101,
      36,
      40,
      39,
      35,
      119,
      97,
      105,
      116,
      109,
      97,
      115,
      115,
      97,
      114,
      109,
      115,
      103,
      111,
      101,
      115,
      103,
      97,
      105,
      110,
      108,
      97,
      110,
      103,
      112,
      97,
      105,
      100,
      33,
      45,
      45,
      32,
      108,
      111,
      99,
      107,
      117,
      110,
      105,
      116,
      114,
      111,
      111,
      116,
      119,
      97,
      108,
      107,
      102,
      105,
      114,
      109,
      119,
      105,
      102,
      101,
      120,
      109,
      108,
      34,
      115,
      111,
      110,
      103,
      116,
      101,
      115,
      116,
      50,
      48,
      112,
      120,
      107,
      105,
      110,
      100,
      114,
      111,
      119,
      115,
      116,
      111,
      111,
      108,
      102,
      111,
      110,
      116,
      109,
      97,
      105,
      108,
      115,
      97,
      102,
      101,
      115,
      116,
      97,
      114,
      109,
      97,
      112,
      115,
      99,
      111,
      114,
      101,
      114,
      97,
      105,
      110,
      102,
      108,
      111,
      119,
      98,
      97,
      98,
      121,
      115,
      112,
      97,
      110,
      115,
      97,
      121,
      115,
      52,
      112,
      120,
      59,
      54,
      112,
      120,
      59,
      97,
      114,
      116,
      115,
      102,
      111,
      111,
      116,
      114,
      101,
      97,
      108,
      119,
      105,
      107,
      105,
      104,
      101,
      97,
      116,
      115,
      116,
      101,
      112,
      116,
      114,
      105,
      112,
      111,
      114,
      103,
      47,
      108,
      97,
      107,
      101,
      119,
      101,
      97,
      107,
      116,
      111,
      108,
      100,
      70,
      111,
      114,
      109,
      99,
      97,
      115,
      116,
      102,
      97,
      110,
      115,
      98,
      97,
      110,
      107,
      118,
      101,
      114,
      121,
      114,
      117,
      110,
      115,
      106,
      117,
      108,
      121,
      116,
      97,
      115,
      107,
      49,
      112,
      120,
      59,
      103,
      111,
      97,
      108,
      103,
      114,
      101,
      119,
      115,
      108,
      111,
      119,
      101,
      100,
      103,
      101,
      105,
      100,
      61,
      34,
      115,
      101,
      116,
      115,
      53,
      112,
      120,
      59,
      46,
      106,
      115,
      63,
      52,
      48,
      112,
      120,
      105,
      102,
      32,
      40,
      115,
      111,
      111,
      110,
      115,
      101,
      97,
      116,
      110,
      111,
      110,
      101,
      116,
      117,
      98,
      101,
      122,
      101,
      114,
      111,
      115,
      101,
      110,
      116,
      114,
      101,
      101,
      100,
      102,
      97,
      99,
      116,
      105,
      110,
      116,
      111,
      103,
      105,
      102,
      116,
      104,
      97,
      114,
      109,
      49,
      56,
      112,
      120,
      99,
      97,
      109,
      101,
      104,
      105,
      108,
      108,
      98,
      111,
      108,
      100,
      122,
      111,
      111,
      109,
      118,
      111,
      105,
      100,
      101,
      97,
      115,
      121,
      114,
      105,
      110,
      103,
      102,
      105,
      108,
      108,
      112,
      101,
      97,
      107,
      105,
      110,
      105,
      116,
      99,
      111,
      115,
      116,
      51,
      112,
      120,
      59,
      106,
      97,
      99,
      107,
      116,
      97,
      103,
      115,
      98,
      105,
      116,
      115,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      116,
      107,
      110,
      101,
      119,
      110,
      101,
      97,
      114,
      60,
      33,
      45,
      45,
      103,
      114,
      111,
      119,
      74,
      83,
      79,
      78,
      100,
      117,
      116,
      121,
      78,
      97,
      109,
      101,
      115,
      97,
      108,
      101,
      121,
      111,
      117,
      32,
      108,
      111,
      116,
      115,
      112,
      97,
      105,
      110,
      106,
      97,
      122,
      122,
      99,
      111,
      108,
      100,
      101,
      121,
      101,
      115,
      102,
      105,
      115,
      104,
      119,
      119,
      119,
      46,
      114,
      105,
      115,
      107,
      116,
      97,
      98,
      115,
      112,
      114,
      101,
      118,
      49,
      48,
      112,
      120,
      114,
      105,
      115,
      101,
      50,
      53,
      112,
      120,
      66,
      108,
      117,
      101,
      100,
      105,
      110,
      103,
      51,
      48,
      48,
      44,
      98,
      97,
      108,
      108,
      102,
      111,
      114,
      100,
      101,
      97,
      114,
      110,
      119,
      105,
      108,
      100,
      98,
      111,
      120,
      46,
      102,
      97,
      105,
      114,
      108,
      97,
      99,
      107,
      118,
      101,
      114,
      115,
      112,
      97,
      105,
      114,
      106,
      117,
      110,
      101,
      116,
      101,
      99,
      104,
      105,
      102,
      40,
      33,
      112,
      105,
      99,
      107,
      101,
      118,
      105,
      108,
      36,
      40,
      34,
      35,
      119,
      97,
      114,
      109,
      108,
      111,
      114,
      100,
      100,
      111,
      101,
      115,
      112,
      117,
      108,
      108,
      44,
      48,
      48,
      48,
      105,
      100,
      101,
      97,
      100,
      114,
      97,
      119,
      104,
      117,
      103,
      101,
      115,
      112,
      111,
      116,
      102,
      117,
      110,
      100,
      98,
      117,
      114,
      110,
      104,
      114,
      101,
      102,
      99,
      101,
      108,
      108,
      107,
      101,
      121,
      115,
      116,
      105,
      99,
      107,
      104,
      111,
      117,
      114,
      108,
      111,
      115,
      115,
      102,
      117,
      101,
      108,
      49,
      50,
      112,
      120,
      115,
      117,
      105,
      116,
      100,
      101,
      97,
      108,
      82,
      83,
      83,
      34,
      97,
      103,
      101,
      100,
      103,
      114,
      101,
      121,
      71,
      69,
      84,
      34,
      101,
      97,
      115,
      101,
      97,
      105,
      109,
      115,
      103,
      105,
      114,
      108,
      97,
      105,
      100,
      115,
      56,
      112,
      120,
      59,
      110,
      97,
      118,
      121,
      103,
      114,
      105,
      100,
      116,
      105,
      112,
      115,
      35,
      57,
      57,
      57,
      119,
      97,
      114,
      115,
      108,
      97,
      100,
      121,
      99,
      97,
      114,
      115,
      41,
      59,
      32,
      125,
      112,
      104,
      112,
      63,
      104,
      101,
      108,
      108,
      116,
      97,
      108,
      108,
      119,
      104,
      111,
      109,
      122,
      104,
      58,
      229,
      42,
      47,
      13,
      10,
      32,
      49,
      48,
      48,
      104,
      97,
      108,
      108,
      46,
      10,
      10,
      65,
      55,
      112,
      120,
      59,
      112,
      117,
      115,
      104,
      99,
      104,
      97,
      116,
      48,
      112,
      120,
      59,
      99,
      114,
      101,
      119,
      42,
      47,
      60,
      47,
      104,
      97,
      115,
      104,
      55,
      53,
      112,
      120,
      102,
      108,
      97,
      116,
      114,
      97,
      114,
      101,
      32,
      38,
      38,
      32,
      116,
      101,
      108,
      108,
      99,
      97,
      109,
      112,
      111,
      110,
      116,
      111,
      108,
      97,
      105,
      100,
      109,
      105,
      115,
      115,
      115,
      107,
      105,
      112,
      116,
      101,
      110,
      116,
      102,
      105,
      110,
      101,
      109,
      97,
      108,
      101,
      103,
      101,
      116,
      115,
      112,
      108,
      111,
      116,
      52,
      48,
      48,
      44,
      13,
      10,
      13,
      10,
      99,
      111,
      111,
      108,
      102,
      101,
      101,
      116,
      46,
      112,
      104,
      112,
      60,
      98,
      114,
      62,
      101,
      114,
      105,
      99,
      109,
      111,
      115,
      116,
      103,
      117,
      105,
      100,
      98,
      101,
      108,
      108,
      100,
      101,
      115,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      116,
      104,
      97,
      116,
      111,
      109,
      47,
      105,
      109,
      103,
      38,
      35,
      56,
      50,
      108,
      117,
      99,
      107,
      99,
      101,
      110,
      116,
      48,
      48,
      48,
      59,
      116,
      105,
      110,
      121,
      103,
      111,
      110,
      101,
      104,
      116,
      109,
      108,
      115,
      101,
      108,
      108,
      100,
      114,
      117,
      103,
      70,
      82,
      69,
      69,
      110,
      111,
      100,
      101,
      110,
      105,
      99,
      107,
      63,
      105,
      100,
      61,
      108,
      111,
      115,
      101,
      110,
      117,
      108,
      108,
      118,
      97,
      115,
      116,
      119,
      105,
      110,
      100,
      82,
      83,
      83,
      32,
      119,
      101,
      97,
      114,
      114,
      101,
      108,
      121,
      98,
      101,
      101,
      110,
      115,
      97,
      109,
      101,
      100,
      117,
      107,
      101,
      110,
      97,
      115,
      97,
      99,
      97,
      112,
      101,
      119,
      105,
      115,
      104,
      103,
      117,
      108,
      102,
      84,
      50,
      51,
      58,
      104,
      105,
      116,
      115,
      115,
      108,
      111,
      116,
      103,
      97,
      116,
      101,
      107,
      105,
      99,
      107,
      98,
      108,
      117,
      114,
      116,
      104,
      101,
      121,
      49,
      53,
      112,
      120,
      39,
      39,
      41,
      59,
      41,
      59,
      34,
      62,
      109,
      115,
      105,
      101,
      119,
      105,
      110,
      115,
      98,
      105,
      114,
      100,
      115,
      111,
      114,
      116,
      98,
      101,
      116,
      97,
      115,
      101,
      101,
      107,
      84,
      49,
      56,
      58,
      111,
      114,
      100,
      115,
      116,
      114,
      101,
      101,
      109,
      97,
      108,
      108,
      54,
      48,
      112,
      120,
      102,
      97,
      114,
      109,
      226,
      128,
      153,
      115,
      98,
      111,
      121,
      115,
      91,
      48,
      93,
      46,
      39,
      41,
      59,
      34,
      80,
      79,
      83,
      84,
      98,
      101,
      97,
      114,
      107,
      105,
      100,
      115,
      41,
      59,
      125,
      125,
      109,
      97,
      114,
      121,
      116,
      101,
      110,
      100,
      40,
      85,
      75,
      41,
      113,
      117,
      97,
      100,
      122,
      104,
      58,
      230,
      45,
      115,
      105,
      122,
      45,
      45,
      45,
      45,
      112,
      114,
      111,
      112,
      39,
      41,
      59,
      13,
      108,
      105,
      102,
      116,
      84,
      49,
      57,
      58,
      118,
      105,
      99,
      101,
      97,
      110,
      100,
      121,
      100,
      101,
      98,
      116,
      62,
      82,
      83,
      83,
      112,
      111,
      111,
      108,
      110,
      101,
      99,
      107,
      98,
      108,
      111,
      119,
      84,
      49,
      54,
      58,
      100,
      111,
      111,
      114,
      101,
      118,
      97,
      108,
      84,
      49,
      55,
      58,
      108,
      101,
      116,
      115,
      102,
      97,
      105,
      108,
      111,
      114,
      97,
      108,
      112,
      111,
      108,
      108,
      110,
      111,
      118,
      97,
      99,
      111,
      108,
      115,
      103,
      101,
      110,
      101,
      32,
      226,
      128,
      148,
      115,
      111,
      102,
      116,
      114,
      111,
      109,
      101,
      116,
      105,
      108,
      108,
      114,
      111,
      115,
      115,
      60,
      104,
      51,
      62,
      112,
      111,
      117,
      114,
      102,
      97,
      100,
      101,
      112,
      105,
      110,
      107,
      60,
      116,
      114,
      62,
      109,
      105,
      110,
      105,
      41,
      124,
      33,
      40,
      109,
      105,
      110,
      101,
      122,
      104,
      58,
      232,
      98,
      97,
      114,
      115,
      104,
      101,
      97,
      114,
      48,
      48,
      41,
      59,
      109,
      105,
      108,
      107,
      32,
      45,
      45,
      62,
      105,
      114,
      111,
      110,
      102,
      114,
      101,
      100,
      100,
      105,
      115,
      107,
      119,
      101,
      110,
      116,
      115,
      111,
      105,
      108,
      112,
      117,
      116,
      115,
      47,
      106,
      115,
      47,
      104,
      111,
      108,
      121,
      84,
      50,
      50,
      58,
      73,
      83,
      66,
      78,
      84,
      50,
      48,
      58,
      97,
      100,
      97,
      109,
      115,
      101,
      101,
      115,
      60,
      104,
      50,
      62,
      106,
      115,
      111,
      110,
      39,
      44,
      32,
      39,
      99,
      111,
      110,
      116,
      84,
      50,
      49,
      58,
      32,
      82,
      83,
      83,
      108,
      111,
      111,
      112,
      97,
      115,
      105,
      97,
      109,
      111,
      111,
      110,
      60,
      47,
      112,
      62,
      115,
      111,
      117,
      108,
      76,
      73,
      78,
      69,
      102,
      111,
      114,
      116,
      99,
      97,
      114,
      116,
      84,
      49,
      52,
      58,
      60,
      104,
      49,
      62,
      56,
      48,
      112,
      120,
      33,
      45,
      45,
      60,
      57,
      112,
      120,
      59,
      84,
      48,
      52,
      58,
      109,
      105,
      107,
      101,
      58,
      52,
      54,
      90,
      110,
      105,
      99,
      101,
      105,
      110,
      99,
      104,
      89,
      111,
      114,
      107,
      114,
      105,
      99,
      101,
      122,
      104,
      58,
      228,
      39,
      41,
      41,
      59,
      112,
      117,
      114,
      101,
      109,
      97,
      103,
      101,
      112,
      97,
      114,
      97,
      116,
      111,
      110,
      101,
      98,
      111,
      110,
      100,
      58,
      51,
      55,
      90,
      95,
      111,
      102,
      95,
      39,
      93,
      41,
      59,
      48,
      48,
      48,
      44,
      122,
      104,
      58,
      231,
      116,
      97,
      110,
      107,
      121,
      97,
      114,
      100,
      98,
      111,
      119,
      108,
      98,
      117,
      115,
      104,
      58,
      53,
      54,
      90,
      74,
      97,
      118,
      97,
      51,
      48,
      112,
      120,
      10,
      124,
      125,
      10,
      37,
      67,
      51,
      37,
      58,
      51,
      52,
      90,
      106,
      101,
      102,
      102,
      69,
      88,
      80,
      73,
      99,
      97,
      115,
      104,
      118,
      105,
      115,
      97,
      103,
      111,
      108,
      102,
      115,
      110,
      111,
      119,
      122,
      104,
      58,
      233,
      113,
      117,
      101,
      114,
      46,
      99,
      115,
      115,
      115,
      105,
      99,
      107,
      109,
      101,
      97,
      116,
      109,
      105,
      110,
      46,
      98,
      105,
      110,
      100,
      100,
      101,
      108,
      108,
      104,
      105,
      114,
      101,
      112,
      105,
      99,
      115,
      114,
      101,
      110,
      116,
      58,
      51,
      54,
      90,
      72,
      84,
      84,
      80,
      45,
      50,
      48,
      49,
      102,
      111,
      116,
      111,
      119,
      111,
      108,
      102,
      69,
      78,
      68,
      32,
      120,
      98,
      111,
      120,
      58,
      53,
      52,
      90,
      66,
      79,
      68,
      89,
      100,
      105,
      99,
      107,
      59,
      10,
      125,
      10,
      101,
      120,
      105,
      116,
      58,
      51,
      53,
      90,
      118,
      97,
      114,
      115,
      98,
      101,
      97,
      116,
      39,
      125,
      41,
      59,
      100,
      105,
      101,
      116,
      57,
      57,
      57,
      59,
      97,
      110,
      110,
      101,
      125,
      125,
      60,
      47,
      91,
      105,
      93,
      46,
      76,
      97,
      110,
      103,
      107,
      109,
      194,
      178,
      119,
      105,
      114,
      101,
      116,
      111,
      121,
      115,
      97,
      100,
      100,
      115,
      115,
      101,
      97,
      108,
      97,
      108,
      101,
      120,
      59,
      10,
      9,
      125,
      101,
      99,
      104,
      111,
      110,
      105,
      110,
      101,
      46,
      111,
      114,
      103,
      48,
      48,
      53,
      41,
      116,
      111,
      110,
      121,
      106,
      101,
      119,
      115,
      115,
      97,
      110,
      100,
      108,
      101,
      103,
      115,
      114,
      111,
      111,
      102,
      48,
      48,
      48,
      41,
      32,
      50,
      48,
      48,
      119,
      105,
      110,
      101,
      103,
      101,
      97,
      114,
      100,
      111,
      103,
      115,
      98,
      111,
      111,
      116,
      103,
      97,
      114,
      121,
      99,
      117,
      116,
      115,
      116,
      121,
      108,
      101,
      116,
      101,
      109,
      112,
      116,
      105,
      111,
      110,
      46,
      120,
      109,
      108,
      99,
      111,
      99,
      107,
      103,
      97,
      110,
      103,
      36,
      40,
      39,
      46,
      53,
      48,
      112,
      120,
      80,
      104,
      46,
      68,
      109,
      105,
      115,
      99,
      97,
      108,
      97,
      110,
      108,
      111,
      97,
      110,
      100,
      101,
      115,
      107,
      109,
      105,
      108,
      101,
      114,
      121,
      97,
      110,
      117,
      110,
      105,
      120,
      100,
      105,
      115,
      99,
      41,
      59,
      125,
      10,
      100,
      117,
      115,
      116,
      99,
      108,
      105,
      112,
      41,
      46,
      10,
      10,
      55,
      48,
      112,
      120,
      45,
      50,
      48,
      48,
      68,
      86,
      68,
      115,
      55,
      93,
      62,
      60,
      116,
      97,
      112,
      101,
      100,
      101,
      109,
      111,
      105,
      43,
      43,
      41,
      119,
      97,
      103,
      101,
      101,
      117,
      114,
      111,
      112,
      104,
      105,
      108,
      111,
      112,
      116,
      115,
      104,
      111,
      108,
      101,
      70,
      65,
      81,
      115,
      97,
      115,
      105,
      110,
      45,
      50,
      54,
      84,
      108,
      97,
      98,
      115,
      112,
      101,
      116,
      115,
      85,
      82,
      76,
      32,
      98,
      117,
      108,
      107,
      99,
      111,
      111,
      107,
      59,
      125,
      13,
      10,
      72,
      69,
      65,
      68,
      91,
      48,
      93,
      41,
      97,
      98,
      98,
      114,
      106,
      117,
      97,
      110,
      40,
      49,
      57,
      56,
      108,
      101,
      115,
      104,
      116,
      119,
      105,
      110,
      60,
      47,
      105,
      62,
      115,
      111,
      110,
      121,
      103,
      117,
      121,
      115,
      102,
      117,
      99,
      107,
      112,
      105,
      112,
      101,
      124,
      45,
      10,
      33,
      48,
      48,
      50,
      41,
      110,
      100,
      111,
      119,
      91,
      49,
      93,
      59,
      91,
      93,
      59,
      10,
      76,
      111,
      103,
      32,
      115,
      97,
      108,
      116,
      13,
      10,
      9,
      9,
      98,
      97,
      110,
      103,
      116,
      114,
      105,
      109,
      98,
      97,
      116,
      104,
      41,
      123,
      13,
      10,
      48,
      48,
      112,
      120,
      10,
      125,
      41,
      59,
      107,
      111,
      58,
      236,
      102,
      101,
      101,
      115,
      97,
      100,
      62,
      13,
      115,
      58,
      47,
      47,
      32,
      91,
      93,
      59,
      116,
      111,
      108,
      108,
      112,
      108,
      117,
      103,
      40,
      41,
      123,
      10,
      123,
      13,
      10,
      32,
      46,
      106,
      115,
      39,
      50,
      48,
      48,
      112,
      100,
      117,
      97,
      108,
      98,
      111,
      97,
      116,
      46,
      74,
      80,
      71,
      41,
      59,
      10,
      125,
      113,
      117,
      111,
      116,
      41,
      59,
      10,
      10,
      39,
      41,
      59,
      10,
      13,
      10,
      125,
      13,
      50,
      48,
      49,
      52,
      50,
      48,
      49,
      53,
      50,
      48,
      49,
      54,
      50,
      48,
      49,
      55,
      50,
      48,
      49,
      56,
      50,
      48,
      49,
      57,
      50,
      48,
      50,
      48,
      50,
      48,
      50,
      49,
      50,
      48,
      50,
      50,
      50,
      48,
      50,
      51,
      50,
      48,
      50,
      52,
      50,
      48,
      50,
      53,
      50,
      48,
      50,
      54,
      50,
      48,
      50,
      55,
      50,
      48,
      50,
      56,
      50,
      48,
      50,
      57,
      50,
      48,
      51,
      48,
      50,
      48,
      51,
      49,
      50,
      48,
      51,
      50,
      50,
      48,
      51,
      51,
      50,
      48,
      51,
      52,
      50,
      48,
      51,
      53,
      50,
      48,
      51,
      54,
      50,
      48,
      51,
      55,
      50,
      48,
      49,
      51,
      50,
      48,
      49,
      50,
      50,
      48,
      49,
      49,
      50,
      48,
      49,
      48,
      50,
      48,
      48,
      57,
      50,
      48,
      48,
      56,
      50,
      48,
      48,
      55,
      50,
      48,
      48,
      54,
      50,
      48,
      48,
      53,
      50,
      48,
      48,
      52,
      50,
      48,
      48,
      51,
      50,
      48,
      48,
      50,
      50,
      48,
      48,
      49,
      50,
      48,
      48,
      48,
      49,
      57,
      57,
      57,
      49,
      57,
      57,
      56,
      49,
      57,
      57,
      55,
      49,
      57,
      57,
      54,
      49,
      57,
      57,
      53,
      49,
      57,
      57,
      52,
      49,
      57,
      57,
      51,
      49,
      57,
      57,
      50,
      49,
      57,
      57,
      49,
      49,
      57,
      57,
      48,
      49,
      57,
      56,
      57,
      49,
      57,
      56,
      56,
      49,
      57,
      56,
      55,
      49,
      57,
      56,
      54,
      49,
      57,
      56,
      53,
      49,
      57,
      56,
      52,
      49,
      57,
      56,
      51,
      49,
      57,
      56,
      50,
      49,
      57,
      56,
      49,
      49,
      57,
      56,
      48,
      49,
      57,
      55,
      57,
      49,
      57,
      55,
      56,
      49,
      57,
      55,
      55,
      49,
      57,
      55,
      54,
      49,
      57,
      55,
      53,
      49,
      57,
      55,
      52,
      49,
      57,
      55,
      51,
      49,
      57,
      55,
      50,
      49,
      57,
      55,
      49,
      49,
      57,
      55,
      48,
      49,
      57,
      54,
      57,
      49,
      57,
      54,
      56,
      49,
      57,
      54,
      55,
      49,
      57,
      54,
      54,
      49,
      57,
      54,
      53,
      49,
      57,
      54,
      52,
      49,
      57,
      54,
      51,
      49,
      57,
      54,
      50,
      49,
      57,
      54,
      49,
      49,
      57,
      54,
      48,
      49,
      57,
      53,
      57,
      49,
      57,
      53,
      56,
      49,
      57,
      53,
      55,
      49,
      57,
      53,
      54,
      49,
      57,
      53,
      53,
      49,
      57,
      53,
      52,
      49,
      57,
      53,
      51,
      49,
      57,
      53,
      50,
      49,
      57,
      53,
      49,
      49,
      57,
      53,
      48,
      49,
      48,
      48,
      48,
      49,
      48,
      50,
      52,
      49,
      51,
      57,
      52,
      48,
      48,
      48,
      48,
      57,
      57,
      57,
      57,
      99,
      111,
      109,
      111,
      109,
      195,
      161,
      115,
      101,
      115,
      116,
      101,
      101,
      115,
      116,
      97,
      112,
      101,
      114,
      111,
      116,
      111,
      100,
      111,
      104,
      97,
      99,
      101,
      99,
      97,
      100,
      97,
      97,
      195,
      177,
      111,
      98,
      105,
      101,
      110,
      100,
      195,
      173,
      97,
      97,
      115,
      195,
      173,
      118,
      105,
      100,
      97,
      99,
      97,
      115,
      111,
      111,
      116,
      114,
      111,
      102,
      111,
      114,
      111,
      115,
      111,
      108,
      111,
      111,
      116,
      114,
      97,
      99,
      117,
      97,
      108,
      100,
      105,
      106,
      111,
      115,
      105,
      100,
      111,
      103,
      114,
      97,
      110,
      116,
      105,
      112,
      111,
      116,
      101,
      109,
      97,
      100,
      101,
      98,
      101,
      97,
      108,
      103,
      111,
      113,
      117,
      195,
      169,
      101,
      115,
      116,
      111,
      110,
      97,
      100,
      97,
      116,
      114,
      101,
      115,
      112,
      111,
      99,
      111,
      99,
      97,
      115,
      97,
      98,
      97,
      106,
      111,
      116,
      111,
      100,
      97,
      115,
      105,
      110,
      111,
      97,
      103,
      117,
      97,
      112,
      117,
      101,
      115,
      117,
      110,
      111,
      115,
      97,
      110,
      116,
      101,
      100,
      105,
      99,
      101,
      108,
      117,
      105,
      115,
      101,
      108,
      108,
      97,
      109,
      97,
      121,
      111,
      122,
      111,
      110,
      97,
      97,
      109,
      111,
      114,
      112,
      105,
      115,
      111,
      111,
      98,
      114,
      97,
      99,
      108,
      105,
      99,
      101,
      108,
      108,
      111,
      100,
      105,
      111,
      115,
      104,
      111,
      114,
      97,
      99,
      97,
      115,
      105,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      190,
      208,
      188,
      209,
      128,
      208,
      176,
      209,
      128,
      209,
      131,
      209,
      130,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      184,
      209,
      133,
      208,
      157,
      208,
      176,
      208,
      181,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      188,
      209,
      139,
      208,
      146,
      209,
      139,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      157,
      208,
      190,
      208,
      190,
      208,
      177,
      208,
      159,
      208,
      190,
      208,
      187,
      208,
      184,
      208,
      189,
      208,
      184,
      208,
      160,
      208,
      164,
      208,
      157,
      208,
      181,
      208,
      156,
      209,
      139,
      209,
      130,
      209,
      139,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      180,
      208,
      176,
      208,
      151,
      208,
      176,
      208,
      148,
      208,
      176,
      208,
      157,
      209,
      131,
      208,
      158,
      208,
      177,
      209,
      130,
      208,
      181,
      208,
      152,
      208,
      183,
      208,
      181,
      208,
      185,
      208,
      189,
      209,
      131,
      208,
      188,
      208,
      188,
      208,
      162,
      209,
      139,
      209,
      131,
      208,
      182,
      217,
      129,
      217,
      138,
      216,
      163,
      217,
      134,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      131,
      217,
      132,
      216,
      163,
      217,
      136,
      216,
      177,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      129,
      217,
      137,
      217,
      135,
      217,
      136,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      131,
      216,
      167,
      217,
      136,
      217,
      132,
      217,
      135,
      216,
      168,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      165,
      217,
      134,
      217,
      135,
      217,
      138,
      216,
      163,
      217,
      138,
      217,
      130,
      216,
      175,
      217,
      135,
      217,
      132,
      216,
      171,
      217,
      133,
      216,
      168,
      217,
      135,
      217,
      132,
      217,
      136,
      217,
      132,
      217,
      138,
      216,
      168,
      217,
      132,
      216,
      167,
      217,
      138,
      216,
      168,
      217,
      131,
      216,
      180,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      163,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      168,
      217,
      138,
      217,
      132,
      217,
      134,
      216,
      173,
      216,
      168,
      217,
      135,
      217,
      133,
      217,
      133,
      216,
      180,
      217,
      136,
      216,
      180,
      102,
      105,
      114,
      115,
      116,
      118,
      105,
      100,
      101,
      111,
      108,
      105,
      103,
      104,
      116,
      119,
      111,
      114,
      108,
      100,
      109,
      101,
      100,
      105,
      97,
      119,
      104,
      105,
      116,
      101,
      99,
      108,
      111,
      115,
      101,
      98,
      108,
      97,
      99,
      107,
      114,
      105,
      103,
      104,
      116,
      115,
      109,
      97,
      108,
      108,
      98,
      111,
      111,
      107,
      115,
      112,
      108,
      97,
      99,
      101,
      109,
      117,
      115,
      105,
      99,
      102,
      105,
      101,
      108,
      100,
      111,
      114,
      100,
      101,
      114,
      112,
      111,
      105,
      110,
      116,
      118,
      97,
      108,
      117,
      101,
      108,
      101,
      118,
      101,
      108,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      97,
      114,
      100,
      104,
      111,
      117,
      115,
      101,
      103,
      114,
      111,
      117,
      112,
      119,
      111,
      114,
      107,
      115,
      121,
      101,
      97,
      114,
      115,
      115,
      116,
      97,
      116,
      101,
      116,
      111,
      100,
      97,
      121,
      119,
      97,
      116,
      101,
      114,
      115,
      116,
      97,
      114,
      116,
      115,
      116,
      121,
      108,
      101,
      100,
      101,
      97,
      116,
      104,
      112,
      111,
      119,
      101,
      114,
      112,
      104,
      111,
      110,
      101,
      110,
      105,
      103,
      104,
      116,
      101,
      114,
      114,
      111,
      114,
      105,
      110,
      112,
      117,
      116,
      97,
      98,
      111,
      117,
      116,
      116,
      101,
      114,
      109,
      115,
      116,
      105,
      116,
      108,
      101,
      116,
      111,
      111,
      108,
      115,
      101,
      118,
      101,
      110,
      116,
      108,
      111,
      99,
      97,
      108,
      116,
      105,
      109,
      101,
      115,
      108,
      97,
      114,
      103,
      101,
      119,
      111,
      114,
      100,
      115,
      103,
      97,
      109,
      101,
      115,
      115,
      104,
      111,
      114,
      116,
      115,
      112,
      97,
      99,
      101,
      102,
      111,
      99,
      117,
      115,
      99,
      108,
      101,
      97,
      114,
      109,
      111,
      100,
      101,
      108,
      98,
      108,
      111,
      99,
      107,
      103,
      117,
      105,
      100,
      101,
      114,
      97,
      100,
      105,
      111,
      115,
      104,
      97,
      114,
      101,
      119,
      111,
      109,
      101,
      110,
      97,
      103,
      97,
      105,
      110,
      109,
      111,
      110,
      101,
      121,
      105,
      109,
      97,
      103,
      101,
      110,
      97,
      109,
      101,
      115,
      121,
      111,
      117,
      110,
      103,
      108,
      105,
      110,
      101,
      115,
      108,
      97,
      116,
      101,
      114,
      99,
      111,
      108,
      111,
      114,
      103,
      114,
      101,
      101,
      110,
      102,
      114,
      111,
      110,
      116,
      38,
      97,
      109,
      112,
      59,
      119,
      97,
      116,
      99,
      104,
      102,
      111,
      114,
      99,
      101,
      112,
      114,
      105,
      99,
      101,
      114,
      117,
      108,
      101,
      115,
      98,
      101,
      103,
      105,
      110,
      97,
      102,
      116,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      115,
      115,
      117,
      101,
      97,
      114,
      101,
      97,
      115,
      98,
      101,
      108,
      111,
      119,
      105,
      110,
      100,
      101,
      120,
      116,
      111,
      116,
      97,
      108,
      104,
      111,
      117,
      114,
      115,
      108,
      97,
      98,
      101,
      108,
      112,
      114,
      105,
      110,
      116,
      112,
      114,
      101,
      115,
      115,
      98,
      117,
      105,
      108,
      116,
      108,
      105,
      110,
      107,
      115,
      115,
      112,
      101,
      101,
      100,
      115,
      116,
      117,
      100,
      121,
      116,
      114,
      97,
      100,
      101,
      102,
      111,
      117,
      110,
      100,
      115,
      101,
      110,
      115,
      101,
      117,
      110,
      100,
      101,
      114,
      115,
      104,
      111,
      119,
      110,
      102,
      111,
      114,
      109,
      115,
      114,
      97,
      110,
      103,
      101,
      97,
      100,
      100,
      101,
      100,
      115,
      116,
      105,
      108,
      108,
      109,
      111,
      118,
      101,
      100,
      116,
      97,
      107,
      101,
      110,
      97,
      98,
      111,
      118,
      101,
      102,
      108,
      97,
      115,
      104,
      102,
      105,
      120,
      101,
      100,
      111,
      102,
      116,
      101,
      110,
      111,
      116,
      104,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      99,
      104,
      101,
      99,
      107,
      108,
      101,
      103,
      97,
      108,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      115,
      113,
      117,
      105,
      99,
      107,
      115,
      104,
      97,
      112,
      101,
      104,
      117,
      109,
      97,
      110,
      101,
      120,
      105,
      115,
      116,
      103,
      111,
      105,
      110,
      103,
      109,
      111,
      118,
      105,
      101,
      116,
      104,
      105,
      114,
      100,
      98,
      97,
      115,
      105,
      99,
      112,
      101,
      97,
      99,
      101,
      115,
      116,
      97,
      103,
      101,
      119,
      105,
      100,
      116,
      104,
      108,
      111,
      103,
      105,
      110,
      105,
      100,
      101,
      97,
      115,
      119,
      114,
      111,
      116,
      101,
      112,
      97,
      103,
      101,
      115,
      117,
      115,
      101,
      114,
      115,
      100,
      114,
      105,
      118,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      114,
      101,
      97,
      107,
      115,
      111,
      117,
      116,
      104,
      118,
      111,
      105,
      99,
      101,
      115,
      105,
      116,
      101,
      115,
      109,
      111,
      110,
      116,
      104,
      119,
      104,
      101,
      114,
      101,
      98,
      117,
      105,
      108,
      100,
      119,
      104,
      105,
      99,
      104,
      101,
      97,
      114,
      116,
      104,
      102,
      111,
      114,
      117,
      109,
      116,
      104,
      114,
      101,
      101,
      115,
      112,
      111,
      114,
      116,
      112,
      97,
      114,
      116,
      121,
      67,
      108,
      105,
      99,
      107,
      108,
      111,
      119,
      101,
      114,
      108,
      105,
      118,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      121,
      101,
      114,
      101,
      110,
      116,
      114,
      121,
      115,
      116,
      111,
      114,
      121,
      117,
      115,
      97,
      103,
      101,
      115,
      111,
      117,
      110,
      100,
      99,
      111,
      117,
      114,
      116,
      121,
      111,
      117,
      114,
      32,
      98,
      105,
      114,
      116,
      104,
      112,
      111,
      112,
      117,
      112,
      116,
      121,
      112,
      101,
      115,
      97,
      112,
      112,
      108,
      121,
      73,
      109,
      97,
      103,
      101,
      98,
      101,
      105,
      110,
      103,
      117,
      112,
      112,
      101,
      114,
      110,
      111,
      116,
      101,
      115,
      101,
      118,
      101,
      114,
      121,
      115,
      104,
      111,
      119,
      115,
      109,
      101,
      97,
      110,
      115,
      101,
      120,
      116,
      114,
      97,
      109,
      97,
      116,
      99,
      104,
      116,
      114,
      97,
      99,
      107,
      107,
      110,
      111,
      119,
      110,
      101,
      97,
      114,
      108,
      121,
      98,
      101,
      103,
      97,
      110,
      115,
      117,
      112,
      101,
      114,
      112,
      97,
      112,
      101,
      114,
      110,
      111,
      114,
      116,
      104,
      108,
      101,
      97,
      114,
      110,
      103,
      105,
      118,
      101,
      110,
      110,
      97,
      109,
      101,
      100,
      101,
      110,
      100,
      101,
      100,
      84,
      101,
      114,
      109,
      115,
      112,
      97,
      114,
      116,
      115,
      71,
      114,
      111,
      117,
      112,
      98,
      114,
      97,
      110,
      100,
      117,
      115,
      105,
      110,
      103,
      119,
      111,
      109,
      97,
      110,
      102,
      97,
      108,
      115,
      101,
      114,
      101,
      97,
      100,
      121,
      97,
      117,
      100,
      105,
      111,
      116,
      97,
      107,
      101,
      115,
      119,
      104,
      105,
      108,
      101,
      46,
      99,
      111,
      109,
      47,
      108,
      105,
      118,
      101,
      100,
      99,
      97,
      115,
      101,
      115,
      100,
      97,
      105,
      108,
      121,
      99,
      104,
      105,
      108,
      100,
      103,
      114,
      101,
      97,
      116,
      106,
      117,
      100,
      103,
      101,
      116,
      104,
      111,
      115,
      101,
      117,
      110,
      105,
      116,
      115,
      110,
      101,
      118,
      101,
      114,
      98,
      114,
      111,
      97,
      100,
      99,
      111,
      97,
      115,
      116,
      99,
      111,
      118,
      101,
      114,
      97,
      112,
      112,
      108,
      101,
      102,
      105,
      108,
      101,
      115,
      99,
      121,
      99,
      108,
      101,
      115,
      99,
      101,
      110,
      101,
      112,
      108,
      97,
      110,
      115,
      99,
      108,
      105,
      99,
      107,
      119,
      114,
      105,
      116,
      101,
      113,
      117,
      101,
      101,
      110,
      112,
      105,
      101,
      99,
      101,
      101,
      109,
      97,
      105,
      108,
      102,
      114,
      97,
      109,
      101,
      111,
      108,
      100,
      101,
      114,
      112,
      104,
      111,
      116,
      111,
      108,
      105,
      109,
      105,
      116,
      99,
      97,
      99,
      104,
      101,
      99,
      105,
      118,
      105,
      108,
      115,
      99,
      97,
      108,
      101,
      101,
      110,
      116,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      116,
      104,
      101,
      114,
      101,
      116,
      111,
      117,
      99,
      104,
      98,
      111,
      117,
      110,
      100,
      114,
      111,
      121,
      97,
      108,
      97,
      115,
      107,
      101,
      100,
      119,
      104,
      111,
      108,
      101,
      115,
      105,
      110,
      99,
      101,
      115,
      116,
      111,
      99,
      107,
      32,
      110,
      97,
      109,
      101,
      102,
      97,
      105,
      116,
      104,
      104,
      101,
      97,
      114,
      116,
      101,
      109,
      112,
      116,
      121,
      111,
      102,
      102,
      101,
      114,
      115,
      99,
      111,
      112,
      101,
      111,
      119,
      110,
      101,
      100,
      109,
      105,
      103,
      104,
      116,
      97,
      108,
      98,
      117,
      109,
      116,
      104,
      105,
      110,
      107,
      98,
      108,
      111,
      111,
      100,
      97,
      114,
      114,
      97,
      121,
      109,
      97,
      106,
      111,
      114,
      116,
      114,
      117,
      115,
      116,
      99,
      97,
      110,
      111,
      110,
      117,
      110,
      105,
      111,
      110,
      99,
      111,
      117,
      110,
      116,
      118,
      97,
      108,
      105,
      100,
      115,
      116,
      111,
      110,
      101,
      83,
      116,
      121,
      108,
      101,
      76,
      111,
      103,
      105,
      110,
      104,
      97,
      112,
      112,
      121,
      111,
      99,
      99,
      117,
      114,
      108,
      101,
      102,
      116,
      58,
      102,
      114,
      101,
      115,
      104,
      113,
      117,
      105,
      116,
      101,
      102,
      105,
      108,
      109,
      115,
      103,
      114,
      97,
      100,
      101,
      110,
      101,
      101,
      100,
      115,
      117,
      114,
      98,
      97,
      110,
      102,
      105,
      103,
      104,
      116,
      98,
      97,
      115,
      105,
      115,
      104,
      111,
      118,
      101,
      114,
      97,
      117,
      116,
      111,
      59,
      114,
      111,
      117,
      116,
      101,
      46,
      104,
      116,
      109,
      108,
      109,
      105,
      120,
      101,
      100,
      102,
      105,
      110,
      97,
      108,
      89,
      111,
      117,
      114,
      32,
      115,
      108,
      105,
      100,
      101,
      116,
      111,
      112,
      105,
      99,
      98,
      114,
      111,
      119,
      110,
      97,
      108,
      111,
      110,
      101,
      100,
      114,
      97,
      119,
      110,
      115,
      112,
      108,
      105,
      116,
      114,
      101,
      97,
      99,
      104,
      82,
      105,
      103,
      104,
      116,
      100,
      97,
      116,
      101,
      115,
      109,
      97,
      114,
      99,
      104,
      113,
      117,
      111,
      116,
      101,
      103,
      111,
      111,
      100,
      115,
      76,
      105,
      110,
      107,
      115,
      100,
      111,
      117,
      98,
      116,
      97,
      115,
      121,
      110,
      99,
      116,
      104,
      117,
      109,
      98,
      97,
      108,
      108,
      111,
      119,
      99,
      104,
      105,
      101,
      102,
      121,
      111,
      117,
      116,
      104,
      110,
      111,
      118,
      101,
      108,
      49,
      48,
      112,
      120,
      59,
      115,
      101,
      114,
      118,
      101,
      117,
      110,
      116,
      105,
      108,
      104,
      97,
      110,
      100,
      115,
      67,
      104,
      101,
      99,
      107,
      83,
      112,
      97,
      99,
      101,
      113,
      117,
      101,
      114,
      121,
      106,
      97,
      109,
      101,
      115,
      101,
      113,
      117,
      97,
      108,
      116,
      119,
      105,
      99,
      101,
      48,
      44,
      48,
      48,
      48,
      83,
      116,
      97,
      114,
      116,
      112,
      97,
      110,
      101,
      108,
      115,
      111,
      110,
      103,
      115,
      114,
      111,
      117,
      110,
      100,
      101,
      105,
      103,
      104,
      116,
      115,
      104,
      105,
      102,
      116,
      119,
      111,
      114,
      116,
      104,
      112,
      111,
      115,
      116,
      115,
      108,
      101,
      97,
      100,
      115,
      119,
      101,
      101,
      107,
      115,
      97,
      118,
      111,
      105,
      100,
      116,
      104,
      101,
      115,
      101,
      109,
      105,
      108,
      101,
      115,
      112,
      108,
      97,
      110,
      101,
      115,
      109,
      97,
      114,
      116,
      97,
      108,
      112,
      104,
      97,
      112,
      108,
      97,
      110,
      116,
      109,
      97,
      114,
      107,
      115,
      114,
      97,
      116,
      101,
      115,
      112,
      108,
      97,
      121,
      115,
      99,
      108,
      97,
      105,
      109,
      115,
      97,
      108,
      101,
      115,
      116,
      101,
      120,
      116,
      115,
      115,
      116,
      97,
      114,
      115,
      119,
      114,
      111,
      110,
      103,
      60,
      47,
      104,
      51,
      62,
      116,
      104,
      105,
      110,
      103,
      46,
      111,
      114,
      103,
      47,
      109,
      117,
      108,
      116,
      105,
      104,
      101,
      97,
      114,
      100,
      80,
      111,
      119,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      116,
      111,
      107,
      101,
      110,
      115,
      111,
      108,
      105,
      100,
      40,
      116,
      104,
      105,
      115,
      98,
      114,
      105,
      110,
      103,
      115,
      104,
      105,
      112,
      115,
      115,
      116,
      97,
      102,
      102,
      116,
      114,
      105,
      101,
      100,
      99,
      97,
      108,
      108,
      115,
      102,
      117,
      108,
      108,
      121,
      102,
      97,
      99,
      116,
      115,
      97,
      103,
      101,
      110,
      116,
      84,
      104,
      105,
      115,
      32,
      47,
      47,
      45,
      45,
      62,
      97,
      100,
      109,
      105,
      110,
      101,
      103,
      121,
      112,
      116,
      69,
      118,
      101,
      110,
      116,
      49,
      53,
      112,
      120,
      59,
      69,
      109,
      97,
      105,
      108,
      116,
      114,
      117,
      101,
      34,
      99,
      114,
      111,
      115,
      115,
      115,
      112,
      101,
      110,
      116,
      98,
      108,
      111,
      103,
      115,
      98,
      111,
      120,
      34,
      62,
      110,
      111,
      116,
      101,
      100,
      108,
      101,
      97,
      118,
      101,
      99,
      104,
      105,
      110,
      97,
      115,
      105,
      122,
      101,
      115,
      103,
      117,
      101,
      115,
      116,
      60,
      47,
      104,
      52,
      62,
      114,
      111,
      98,
      111,
      116,
      104,
      101,
      97,
      118,
      121,
      116,
      114,
      117,
      101,
      44,
      115,
      101,
      118,
      101,
      110,
      103,
      114,
      97,
      110,
      100,
      99,
      114,
      105,
      109,
      101,
      115,
      105,
      103,
      110,
      115,
      97,
      119,
      97,
      114,
      101,
      100,
      97,
      110,
      99,
      101,
      112,
      104,
      97,
      115,
      101,
      62,
      60,
      33,
      45,
      45,
      101,
      110,
      95,
      85,
      83,
      38,
      35,
      51,
      57,
      59,
      50,
      48,
      48,
      112,
      120,
      95,
      110,
      97,
      109,
      101,
      108,
      97,
      116,
      105,
      110,
      101,
      110,
      106,
      111,
      121,
      97,
      106,
      97,
      120,
      46,
      97,
      116,
      105,
      111,
      110,
      115,
      109,
      105,
      116,
      104,
      85,
      46,
      83,
      46,
      32,
      104,
      111,
      108,
      100,
      115,
      112,
      101,
      116,
      101,
      114,
      105,
      110,
      100,
      105,
      97,
      110,
      97,
      118,
      34,
      62,
      99,
      104,
      97,
      105,
      110,
      115,
      99,
      111,
      114,
      101,
      99,
      111,
      109,
      101,
      115,
      100,
      111,
      105,
      110,
      103,
      112,
      114,
      105,
      111,
      114,
      83,
      104,
      97,
      114,
      101,
      49,
      57,
      57,
      48,
      115,
      114,
      111,
      109,
      97,
      110,
      108,
      105,
      115,
      116,
      115,
      106,
      97,
      112,
      97,
      110,
      102,
      97,
      108,
      108,
      115,
      116,
      114,
      105,
      97,
      108,
      111,
      119,
      110,
      101,
      114,
      97,
      103,
      114,
      101,
      101,
      60,
      47,
      104,
      50,
      62,
      97,
      98,
      117,
      115,
      101,
      97,
      108,
      101,
      114,
      116,
      111,
      112,
      101,
      114,
      97,
      34,
      45,
      47,
      47,
      87,
      99,
      97,
      114,
      100,
      115,
      104,
      105,
      108,
      108,
      115,
      116,
      101,
      97,
      109,
      115,
      80,
      104,
      111,
      116,
      111,
      116,
      114,
      117,
      116,
      104,
      99,
      108,
      101,
      97,
      110,
      46,
      112,
      104,
      112,
      63,
      115,
      97,
      105,
      110,
      116,
      109,
      101,
      116,
      97,
      108,
      108,
      111,
      117,
      105,
      115,
      109,
      101,
      97,
      110,
      116,
      112,
      114,
      111,
      111,
      102,
      98,
      114,
      105,
      101,
      102,
      114,
      111,
      119,
      34,
      62,
      103,
      101,
      110,
      114,
      101,
      116,
      114,
      117,
      99,
      107,
      108,
      111,
      111,
      107,
      115,
      86,
      97,
      108,
      117,
      101,
      70,
      114,
      97,
      109,
      101,
      46,
      110,
      101,
      116,
      47,
      45,
      45,
      62,
      10,
      60,
      116,
      114,
      121,
      32,
      123,
      10,
      118,
      97,
      114,
      32,
      109,
      97,
      107,
      101,
      115,
      99,
      111,
      115,
      116,
      115,
      112,
      108,
      97,
      105,
      110,
      97,
      100,
      117,
      108,
      116,
      113,
      117,
      101,
      115,
      116,
      116,
      114,
      97,
      105,
      110,
      108,
      97,
      98,
      111,
      114,
      104,
      101,
      108,
      112,
      115,
      99,
      97,
      117,
      115,
      101,
      109,
      97,
      103,
      105,
      99,
      109,
      111,
      116,
      111,
      114,
      116,
      104,
      101,
      105,
      114,
      50,
      53,
      48,
      112,
      120,
      108,
      101,
      97,
      115,
      116,
      115,
      116,
      101,
      112,
      115,
      67,
      111,
      117,
      110,
      116,
      99,
      111,
      117,
      108,
      100,
      103,
      108,
      97,
      115,
      115,
      115,
      105,
      100,
      101,
      115,
      102,
      117,
      110,
      100,
      115,
      104,
      111,
      116,
      101,
      108,
      97,
      119,
      97,
      114,
      100,
      109,
      111,
      117,
      116,
      104,
      109,
      111,
      118,
      101,
      115,
      112,
      97,
      114,
      105,
      115,
      103,
      105,
      118,
      101,
      115,
      100,
      117,
      116,
      99,
      104,
      116,
      101,
      120,
      97,
      115,
      102,
      114,
      117,
      105,
      116,
      110,
      117,
      108,
      108,
      44,
      124,
      124,
      91,
      93,
      59,
      116,
      111,
      112,
      34,
      62,
      10,
      60,
      33,
      45,
      45,
      80,
      79,
      83,
      84,
      34,
      111,
      99,
      101,
      97,
      110,
      60,
      98,
      114,
      47,
      62,
      102,
      108,
      111,
      111,
      114,
      115,
      112,
      101,
      97,
      107,
      100,
      101,
      112,
      116,
      104,
      32,
      115,
      105,
      122,
      101,
      98,
      97,
      110,
      107,
      115,
      99,
      97,
      116,
      99,
      104,
      99,
      104,
      97,
      114,
      116,
      50,
      48,
      112,
      120,
      59,
      97,
      108,
      105,
      103,
      110,
      100,
      101,
      97,
      108,
      115,
      119,
      111,
      117,
      108,
      100,
      53,
      48,
      112,
      120,
      59,
      117,
      114,
      108,
      61,
      34,
      112,
      97,
      114,
      107,
      115,
      109,
      111,
      117,
      115,
      101,
      77,
      111,
      115,
      116,
      32,
      46,
      46,
      46,
      60,
      47,
      97,
      109,
      111,
      110,
      103,
      98,
      114,
      97,
      105,
      110,
      98,
      111,
      100,
      121,
      32,
      110,
      111,
      110,
      101,
      59,
      98,
      97,
      115,
      101,
      100,
      99,
      97,
      114,
      114,
      121,
      100,
      114,
      97,
      102,
      116,
      114,
      101,
      102,
      101,
      114,
      112,
      97,
      103,
      101,
      95,
      104,
      111,
      109,
      101,
      46,
      109,
      101,
      116,
      101,
      114,
      100,
      101,
      108,
      97,
      121,
      100,
      114,
      101,
      97,
      109,
      112,
      114,
      111,
      118,
      101,
      106,
      111,
      105,
      110,
      116,
      60,
      47,
      116,
      114,
      62,
      100,
      114,
      117,
      103,
      115,
      60,
      33,
      45,
      45,
      32,
      97,
      112,
      114,
      105,
      108,
      105,
      100,
      101,
      97,
      108,
      97,
      108,
      108,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      102,
      111,
      114,
      116,
      104,
      99,
      111,
      100,
      101,
      115,
      108,
      111,
      103,
      105,
      99,
      86,
      105,
      101,
      119,
      32,
      115,
      101,
      101,
      109,
      115,
      98,
      108,
      97,
      110,
      107,
      112,
      111,
      114,
      116,
      115,
      32,
      40,
      50,
      48,
      48,
      115,
      97,
      118,
      101,
      100,
      95,
      108,
      105,
      110,
      107,
      103,
      111,
      97,
      108,
      115,
      103,
      114,
      97,
      110,
      116,
      103,
      114,
      101,
      101,
      107,
      104,
      111,
      109,
      101,
      115,
      114,
      105,
      110,
      103,
      115,
      114,
      97,
      116,
      101,
      100,
      51,
      48,
      112,
      120,
      59,
      119,
      104,
      111,
      115,
      101,
      112,
      97,
      114,
      115,
      101,
      40,
      41,
      59,
      34,
      32,
      66,
      108,
      111,
      99,
      107,
      108,
      105,
      110,
      117,
      120,
      106,
      111,
      110,
      101,
      115,
      112,
      105,
      120,
      101,
      108,
      39,
      41,
      59,
      34,
      62,
      41,
      59,
      105,
      102,
      40,
      45,
      108,
      101,
      102,
      116,
      100,
      97,
      118,
      105,
      100,
      104,
      111,
      114,
      115,
      101,
      70,
      111,
      99,
      117,
      115,
      114,
      97,
      105,
      115,
      101,
      98,
      111,
      120,
      101,
      115,
      84,
      114,
      97,
      99,
      107,
      101,
      109,
      101,
      110,
      116,
      60,
      47,
      101,
      109,
      62,
      98,
      97,
      114,
      34,
      62,
      46,
      115,
      114,
      99,
      61,
      116,
      111,
      119,
      101,
      114,
      97,
      108,
      116,
      61,
      34,
      99,
      97,
      98,
      108,
      101,
      104,
      101,
      110,
      114,
      121,
      50,
      52,
      112,
      120,
      59,
      115,
      101,
      116,
      117,
      112,
      105,
      116,
      97,
      108,
      121,
      115,
      104,
      97,
      114,
      112,
      109,
      105,
      110,
      111,
      114,
      116,
      97,
      115,
      116,
      101,
      119,
      97,
      110,
      116,
      115,
      116,
      104,
      105,
      115,
      46,
      114,
      101,
      115,
      101,
      116,
      119,
      104,
      101,
      101,
      108,
      103,
      105,
      114,
      108,
      115,
      47,
      99,
      115,
      115,
      47,
      49,
      48,
      48,
      37,
      59,
      99,
      108,
      117,
      98,
      115,
      115,
      116,
      117,
      102,
      102,
      98,
      105,
      98,
      108,
      101,
      118,
      111,
      116,
      101,
      115,
      32,
      49,
      48,
      48,
      48,
      107,
      111,
      114,
      101,
      97,
      125,
      41,
      59,
      13,
      10,
      98,
      97,
      110,
      100,
      115,
      113,
      117,
      101,
      117,
      101,
      61,
      32,
      123,
      125,
      59,
      56,
      48,
      112,
      120,
      59,
      99,
      107,
      105,
      110,
      103,
      123,
      13,
      10,
      9,
      9,
      97,
      104,
      101,
      97,
      100,
      99,
      108,
      111,
      99,
      107,
      105,
      114,
      105,
      115,
      104,
      108,
      105,
      107,
      101,
      32,
      114,
      97,
      116,
      105,
      111,
      115,
      116,
      97,
      116,
      115,
      70,
      111,
      114,
      109,
      34,
      121,
      97,
      104,
      111,
      111,
      41,
      91,
      48,
      93,
      59,
      65,
      98,
      111,
      117,
      116,
      102,
      105,
      110,
      100,
      115,
      60,
      47,
      104,
      49,
      62,
      100,
      101,
      98,
      117,
      103,
      116,
      97,
      115,
      107,
      115,
      85,
      82,
      76,
      32,
      61,
      99,
      101,
      108,
      108,
      115,
      125,
      41,
      40,
      41,
      59,
      49,
      50,
      112,
      120,
      59,
      112,
      114,
      105,
      109,
      101,
      116,
      101,
      108,
      108,
      115,
      116,
      117,
      114,
      110,
      115,
      48,
      120,
      54,
      48,
      48,
      46,
      106,
      112,
      103,
      34,
      115,
      112,
      97,
      105,
      110,
      98,
      101,
      97,
      99,
      104,
      116,
      97,
      120,
      101,
      115,
      109,
      105,
      99,
      114,
      111,
      97,
      110,
      103,
      101,
      108,
      45,
      45,
      62,
      60,
      47,
      103,
      105,
      102,
      116,
      115,
      115,
      116,
      101,
      118,
      101,
      45,
      108,
      105,
      110,
      107,
      98,
      111,
      100,
      121,
      46,
      125,
      41,
      59,
      10,
      9,
      109,
      111,
      117,
      110,
      116,
      32,
      40,
      49,
      57,
      57,
      70,
      65,
      81,
      60,
      47,
      114,
      111,
      103,
      101,
      114,
      102,
      114,
      97,
      110,
      107,
      67,
      108,
      97,
      115,
      115,
      50,
      56,
      112,
      120,
      59,
      102,
      101,
      101,
      100,
      115,
      60,
      104,
      49,
      62,
      60,
      115,
      99,
      111,
      116,
      116,
      116,
      101,
      115,
      116,
      115,
      50,
      50,
      112,
      120,
      59,
      100,
      114,
      105,
      110,
      107,
      41,
      32,
      124,
      124,
      32,
      108,
      101,
      119,
      105,
      115,
      115,
      104,
      97,
      108,
      108,
      35,
      48,
      51,
      57,
      59,
      32,
      102,
      111,
      114,
      32,
      108,
      111,
      118,
      101,
      100,
      119,
      97,
      115,
      116,
      101,
      48,
      48,
      112,
      120,
      59,
      106,
      97,
      58,
      227,
      130,
      115,
      105,
      109,
      111,
      110,
      60,
      102,
      111,
      110,
      116,
      114,
      101,
      112,
      108,
      121,
      109,
      101,
      101,
      116,
      115,
      117,
      110,
      116,
      101,
      114,
      99,
      104,
      101,
      97,
      112,
      116,
      105,
      103,
      104,
      116,
      66,
      114,
      97,
      110,
      100,
      41,
      32,
      33,
      61,
      32,
      100,
      114,
      101,
      115,
      115,
      99,
      108,
      105,
      112,
      115,
      114,
      111,
      111,
      109,
      115,
      111,
      110,
      107,
      101,
      121,
      109,
      111,
      98,
      105,
      108,
      109,
      97,
      105,
      110,
      46,
      78,
      97,
      109,
      101,
      32,
      112,
      108,
      97,
      116,
      101,
      102,
      117,
      110,
      110,
      121,
      116,
      114,
      101,
      101,
      115,
      99,
      111,
      109,
      47,
      34,
      49,
      46,
      106,
      112,
      103,
      119,
      109,
      111,
      100,
      101,
      112,
      97,
      114,
      97,
      109,
      83,
      84,
      65,
      82,
      84,
      108,
      101,
      102,
      116,
      32,
      105,
      100,
      100,
      101,
      110,
      44,
      32,
      50,
      48,
      49,
      41,
      59,
      10,
      125,
      10,
      102,
      111,
      114,
      109,
      46,
      118,
      105,
      114,
      117,
      115,
      99,
      104,
      97,
      105,
      114,
      116,
      114,
      97,
      110,
      115,
      119,
      111,
      114,
      115,
      116,
      80,
      97,
      103,
      101,
      115,
      105,
      116,
      105,
      111,
      110,
      112,
      97,
      116,
      99,
      104,
      60,
      33,
      45,
      45,
      10,
      111,
      45,
      99,
      97,
      99,
      102,
      105,
      114,
      109,
      115,
      116,
      111,
      117,
      114,
      115,
      44,
      48,
      48,
      48,
      32,
      97,
      115,
      105,
      97,
      110,
      105,
      43,
      43,
      41,
      123,
      97,
      100,
      111,
      98,
      101,
      39,
      41,
      91,
      48,
      93,
      105,
      100,
      61,
      49,
      48,
      98,
      111,
      116,
      104,
      59,
      109,
      101,
      110,
      117,
      32,
      46,
      50,
      46,
      109,
      105,
      46,
      112,
      110,
      103,
      34,
      107,
      101,
      118,
      105,
      110,
      99,
      111,
      97,
      99,
      104,
      67,
      104,
      105,
      108,
      100,
      98,
      114,
      117,
      99,
      101,
      50,
      46,
      106,
      112,
      103,
      85,
      82,
      76,
      41,
      43,
      46,
      106,
      112,
      103,
      124,
      115,
      117,
      105,
      116,
      101,
      115,
      108,
      105,
      99,
      101,
      104,
      97,
      114,
      114,
      121,
      49,
      50,
      48,
      34,
      32,
      115,
      119,
      101,
      101,
      116,
      116,
      114,
      62,
      13,
      10,
      110,
      97,
      109,
      101,
      61,
      100,
      105,
      101,
      103,
      111,
      112,
      97,
      103,
      101,
      32,
      115,
      119,
      105,
      115,
      115,
      45,
      45,
      62,
      10,
      10,
      35,
      102,
      102,
      102,
      59,
      34,
      62,
      76,
      111,
      103,
      46,
      99,
      111,
      109,
      34,
      116,
      114,
      101,
      97,
      116,
      115,
      104,
      101,
      101,
      116,
      41,
      32,
      38,
      38,
      32,
      49,
      52,
      112,
      120,
      59,
      115,
      108,
      101,
      101,
      112,
      110,
      116,
      101,
      110,
      116,
      102,
      105,
      108,
      101,
      100,
      106,
      97,
      58,
      227,
      131,
      105,
      100,
      61,
      34,
      99,
      78,
      97,
      109,
      101,
      34,
      119,
      111,
      114,
      115,
      101,
      115,
      104,
      111,
      116,
      115,
      45,
      98,
      111,
      120,
      45,
      100,
      101,
      108,
      116,
      97,
      10,
      38,
      108,
      116,
      59,
      98,
      101,
      97,
      114,
      115,
      58,
      52,
      56,
      90,
      60,
      100,
      97,
      116,
      97,
      45,
      114,
      117,
      114,
      97,
      108,
      60,
      47,
      97,
      62,
      32,
      115,
      112,
      101,
      110,
      100,
      98,
      97,
      107,
      101,
      114,
      115,
      104,
      111,
      112,
      115,
      61,
      32,
      34,
      34,
      59,
      112,
      104,
      112,
      34,
      62,
      99,
      116,
      105,
      111,
      110,
      49,
      51,
      112,
      120,
      59,
      98,
      114,
      105,
      97,
      110,
      104,
      101,
      108,
      108,
      111,
      115,
      105,
      122,
      101,
      61,
      111,
      61,
      37,
      50,
      70,
      32,
      106,
      111,
      105,
      110,
      109,
      97,
      121,
      98,
      101,
      60,
      105,
      109,
      103,
      32,
      105,
      109,
      103,
      34,
      62,
      44,
      32,
      102,
      106,
      115,
      105,
      109,
      103,
      34,
      32,
      34,
      41,
      91,
      48,
      93,
      77,
      84,
      111,
      112,
      66,
      84,
      121,
      112,
      101,
      34,
      110,
      101,
      119,
      108,
      121,
      68,
      97,
      110,
      115,
      107,
      99,
      122,
      101,
      99,
      104,
      116,
      114,
      97,
      105,
      108,
      107,
      110,
      111,
      119,
      115,
      60,
      47,
      104,
      53,
      62,
      102,
      97,
      113,
      34,
      62,
      122,
      104,
      45,
      99,
      110,
      49,
      48,
      41,
      59,
      10,
      45,
      49,
      34,
      41,
      59,
      116,
      121,
      112,
      101,
      61,
      98,
      108,
      117,
      101,
      115,
      116,
      114,
      117,
      108,
      121,
      100,
      97,
      118,
      105,
      115,
      46,
      106,
      115,
      39,
      59,
      62,
      13,
      10,
      60,
      33,
      115,
      116,
      101,
      101,
      108,
      32,
      121,
      111,
      117,
      32,
      104,
      50,
      62,
      13,
      10,
      102,
      111,
      114,
      109,
      32,
      106,
      101,
      115,
      117,
      115,
      49,
      48,
      48,
      37,
      32,
      109,
      101,
      110,
      117,
      46,
      13,
      10,
      9,
      13,
      10,
      119,
      97,
      108,
      101,
      115,
      114,
      105,
      115,
      107,
      115,
      117,
      109,
      101,
      110,
      116,
      100,
      100,
      105,
      110,
      103,
      98,
      45,
      108,
      105,
      107,
      116,
      101,
      97,
      99,
      104,
      103,
      105,
      102,
      34,
      32,
      118,
      101,
      103,
      97,
      115,
      100,
      97,
      110,
      115,
      107,
      101,
      101,
      115,
      116,
      105,
      115,
      104,
      113,
      105,
      112,
      115,
      117,
      111,
      109,
      105,
      115,
      111,
      98,
      114,
      101,
      100,
      101,
      115,
      100,
      101,
      101,
      110,
      116,
      114,
      101,
      116,
      111,
      100,
      111,
      115,
      112,
      117,
      101,
      100,
      101,
      97,
      195,
      177,
      111,
      115,
      101,
      115,
      116,
      195,
      161,
      116,
      105,
      101,
      110,
      101,
      104,
      97,
      115,
      116,
      97,
      111,
      116,
      114,
      111,
      115,
      112,
      97,
      114,
      116,
      101,
      100,
      111,
      110,
      100,
      101,
      110,
      117,
      101,
      118,
      111,
      104,
      97,
      99,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      109,
      105,
      115,
      109,
      111,
      109,
      101,
      106,
      111,
      114,
      109,
      117,
      110,
      100,
      111,
      97,
      113,
      117,
      195,
      173,
      100,
      195,
      173,
      97,
      115,
      115,
      195,
      179,
      108,
      111,
      97,
      121,
      117,
      100,
      97,
      102,
      101,
      99,
      104,
      97,
      116,
      111,
      100,
      97,
      115,
      116,
      97,
      110,
      116,
      111,
      109,
      101,
      110,
      111,
      115,
      100,
      97,
      116,
      111,
      115,
      111,
      116,
      114,
      97,
      115,
      115,
      105,
      116,
      105,
      111,
      109,
      117,
      99,
      104,
      111,
      97,
      104,
      111,
      114,
      97,
      108,
      117,
      103,
      97,
      114,
      109,
      97,
      121,
      111,
      114,
      101,
      115,
      116,
      111,
      115,
      104,
      111,
      114,
      97,
      115,
      116,
      101,
      110,
      101,
      114,
      97,
      110,
      116,
      101,
      115,
      102,
      111,
      116,
      111,
      115,
      101,
      115,
      116,
      97,
      115,
      112,
      97,
      195,
      173,
      115,
      110,
      117,
      101,
      118,
      97,
      115,
      97,
      108,
      117,
      100,
      102,
      111,
      114,
      111,
      115,
      109,
      101,
      100,
      105,
      111,
      113,
      117,
      105,
      101,
      110,
      109,
      101,
      115,
      101,
      115,
      112,
      111,
      100,
      101,
      114,
      99,
      104,
      105,
      108,
      101,
      115,
      101,
      114,
      195,
      161,
      118,
      101,
      99,
      101,
      115,
      100,
      101,
      99,
      105,
      114,
      106,
      111,
      115,
      195,
      169,
      101,
      115,
      116,
      97,
      114,
      118,
      101,
      110,
      116,
      97,
      103,
      114,
      117,
      112,
      111,
      104,
      101,
      99,
      104,
      111,
      101,
      108,
      108,
      111,
      115,
      116,
      101,
      110,
      103,
      111,
      97,
      109,
      105,
      103,
      111,
      99,
      111,
      115,
      97,
      115,
      110,
      105,
      118,
      101,
      108,
      103,
      101,
      110,
      116,
      101,
      109,
      105,
      115,
      109,
      97,
      97,
      105,
      114,
      101,
      115,
      106,
      117,
      108,
      105,
      111,
      116,
      101,
      109,
      97,
      115,
      104,
      97,
      99,
      105,
      97,
      102,
      97,
      118,
      111,
      114,
      106,
      117,
      110,
      105,
      111,
      108,
      105,
      98,
      114,
      101,
      112,
      117,
      110,
      116,
      111,
      98,
      117,
      101,
      110,
      111,
      97,
      117,
      116,
      111,
      114,
      97,
      98,
      114,
      105,
      108,
      98,
      117,
      101,
      110,
      97,
      116,
      101,
      120,
      116,
      111,
      109,
      97,
      114,
      122,
      111,
      115,
      97,
      98,
      101,
      114,
      108,
      105,
      115,
      116,
      97,
      108,
      117,
      101,
      103,
      111,
      99,
      195,
      179,
      109,
      111,
      101,
      110,
      101,
      114,
      111,
      106,
      117,
      101,
      103,
      111,
      112,
      101,
      114,
      195,
      186,
      104,
      97,
      98,
      101,
      114,
      101,
      115,
      116,
      111,
      121,
      110,
      117,
      110,
      99,
      97,
      109,
      117,
      106,
      101,
      114,
      118,
      97,
      108,
      111,
      114,
      102,
      117,
      101,
      114,
      97,
      108,
      105,
      98,
      114,
      111,
      103,
      117,
      115,
      116,
      97,
      105,
      103,
      117,
      97,
      108,
      118,
      111,
      116,
      111,
      115,
      99,
      97,
      115,
      111,
      115,
      103,
      117,
      195,
      173,
      97,
      112,
      117,
      101,
      100,
      111,
      115,
      111,
      109,
      111,
      115,
      97,
      118,
      105,
      115,
      111,
      117,
      115,
      116,
      101,
      100,
      100,
      101,
      98,
      101,
      110,
      110,
      111,
      99,
      104,
      101,
      98,
      117,
      115,
      99,
      97,
      102,
      97,
      108,
      116,
      97,
      101,
      117,
      114,
      111,
      115,
      115,
      101,
      114,
      105,
      101,
      100,
      105,
      99,
      104,
      111,
      99,
      117,
      114,
      115,
      111,
      99,
      108,
      97,
      118,
      101,
      99,
      97,
      115,
      97,
      115,
      108,
      101,
      195,
      179,
      110,
      112,
      108,
      97,
      122,
      111,
      108,
      97,
      114,
      103,
      111,
      111,
      98,
      114,
      97,
      115,
      118,
      105,
      115,
      116,
      97,
      97,
      112,
      111,
      121,
      111,
      106,
      117,
      110,
      116,
      111,
      116,
      114,
      97,
      116,
      97,
      118,
      105,
      115,
      116,
      111,
      99,
      114,
      101,
      97,
      114,
      99,
      97,
      109,
      112,
      111,
      104,
      101,
      109,
      111,
      115,
      99,
      105,
      110,
      99,
      111,
      99,
      97,
      114,
      103,
      111,
      112,
      105,
      115,
      111,
      115,
      111,
      114,
      100,
      101,
      110,
      104,
      97,
      99,
      101,
      110,
      195,
      161,
      114,
      101,
      97,
      100,
      105,
      115,
      99,
      111,
      112,
      101,
      100,
      114,
      111,
      99,
      101,
      114,
      99,
      97,
      112,
      117,
      101,
      100,
      97,
      112,
      97,
      112,
      101,
      108,
      109,
      101,
      110,
      111,
      114,
      195,
      186,
      116,
      105,
      108,
      99,
      108,
      97,
      114,
      111,
      106,
      111,
      114,
      103,
      101,
      99,
      97,
      108,
      108,
      101,
      112,
      111,
      110,
      101,
      114,
      116,
      97,
      114,
      100,
      101,
      110,
      97,
      100,
      105,
      101,
      109,
      97,
      114,
      99,
      97,
      115,
      105,
      103,
      117,
      101,
      101,
      108,
      108,
      97,
      115,
      115,
      105,
      103,
      108,
      111,
      99,
      111,
      99,
      104,
      101,
      109,
      111,
      116,
      111,
      115,
      109,
      97,
      100,
      114,
      101,
      99,
      108,
      97,
      115,
      101,
      114,
      101,
      115,
      116,
      111,
      110,
      105,
      195,
      177,
      111,
      113,
      117,
      101,
      100,
      97,
      112,
      97,
      115,
      97,
      114,
      98,
      97,
      110,
      99,
      111,
      104,
      105,
      106,
      111,
      115,
      118,
      105,
      97,
      106,
      101,
      112,
      97,
      98,
      108,
      111,
      195,
      169,
      115,
      116,
      101,
      118,
      105,
      101,
      110,
      101,
      114,
      101,
      105,
      110,
      111,
      100,
      101,
      106,
      97,
      114,
      102,
      111,
      110,
      100,
      111,
      99,
      97,
      110,
      97,
      108,
      110,
      111,
      114,
      116,
      101,
      108,
      101,
      116,
      114,
      97,
      99,
      97,
      117,
      115,
      97,
      116,
      111,
      109,
      97,
      114,
      109,
      97,
      110,
      111,
      115,
      108,
      117,
      110,
      101,
      115,
      97,
      117,
      116,
      111,
      115,
      118,
      105,
      108,
      108,
      97,
      118,
      101,
      110,
      100,
      111,
      112,
      101,
      115,
      97,
      114,
      116,
      105,
      112,
      111,
      115,
      116,
      101,
      110,
      103,
      97,
      109,
      97,
      114,
      99,
      111,
      108,
      108,
      101,
      118,
      97,
      112,
      97,
      100,
      114,
      101,
      117,
      110,
      105,
      100,
      111,
      118,
      97,
      109,
      111,
      115,
      122,
      111,
      110,
      97,
      115,
      97,
      109,
      98,
      111,
      115,
      98,
      97,
      110,
      100,
      97,
      109,
      97,
      114,
      105,
      97,
      97,
      98,
      117,
      115,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      117,
      98,
      105,
      114,
      114,
      105,
      111,
      106,
      97,
      118,
      105,
      118,
      105,
      114,
      103,
      114,
      97,
      100,
      111,
      99,
      104,
      105,
      99,
      97,
      97,
      108,
      108,
      195,
      173,
      106,
      111,
      118,
      101,
      110,
      100,
      105,
      99,
      104,
      97,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      108,
      101,
      115,
      115,
      97,
      108,
      105,
      114,
      115,
      117,
      101,
      108,
      111,
      112,
      101,
      115,
      111,
      115,
      102,
      105,
      110,
      101,
      115,
      108,
      108,
      97,
      109,
      97,
      98,
      117,
      115,
      99,
      111,
      195,
      169,
      115,
      116,
      97,
      108,
      108,
      101,
      103,
      97,
      110,
      101,
      103,
      114,
      111,
      112,
      108,
      97,
      122,
      97,
      104,
      117,
      109,
      111,
      114,
      112,
      97,
      103,
      97,
      114,
      106,
      117,
      110,
      116,
      97,
      100,
      111,
      98,
      108,
      101,
      105,
      115,
      108,
      97,
      115,
      98,
      111,
      108,
      115,
      97,
      98,
      97,
      195,
      177,
      111,
      104,
      97,
      98,
      108,
      97,
      108,
      117,
      99,
      104,
      97,
      195,
      129,
      114,
      101,
      97,
      100,
      105,
      99,
      101,
      110,
      106,
      117,
      103,
      97,
      114,
      110,
      111,
      116,
      97,
      115,
      118,
      97,
      108,
      108,
      101,
      97,
      108,
      108,
      195,
      161,
      99,
      97,
      114,
      103,
      97,
      100,
      111,
      108,
      111,
      114,
      97,
      98,
      97,
      106,
      111,
      101,
      115,
      116,
      195,
      169,
      103,
      117,
      115,
      116,
      111,
      109,
      101,
      110,
      116,
      101,
      109,
      97,
      114,
      105,
      111,
      102,
      105,
      114,
      109,
      97,
      99,
      111,
      115,
      116,
      111,
      102,
      105,
      99,
      104,
      97,
      112,
      108,
      97,
      116,
      97,
      104,
      111,
      103,
      97,
      114,
      97,
      114,
      116,
      101,
      115,
      108,
      101,
      121,
      101,
      115,
      97,
      113,
      117,
      101,
      108,
      109,
      117,
      115,
      101,
      111,
      98,
      97,
      115,
      101,
      115,
      112,
      111,
      99,
      111,
      115,
      109,
      105,
      116,
      97,
      100,
      99,
      105,
      101,
      108,
      111,
      99,
      104,
      105,
      99,
      111,
      109,
      105,
      101,
      100,
      111,
      103,
      97,
      110,
      97,
      114,
      115,
      97,
      110,
      116,
      111,
      101,
      116,
      97,
      112,
      97,
      100,
      101,
      98,
      101,
      115,
      112,
      108,
      97,
      121,
      97,
      114,
      101,
      100,
      101,
      115,
      115,
      105,
      101,
      116,
      101,
      99,
      111,
      114,
      116,
      101,
      99,
      111,
      114,
      101,
      97,
      100,
      117,
      100,
      97,
      115,
      100,
      101,
      115,
      101,
      111,
      118,
      105,
      101,
      106,
      111,
      100,
      101,
      115,
      101,
      97,
      97,
      103,
      117,
      97,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      111,
      109,
      97,
      105,
      110,
      99,
      111,
      109,
      109,
      111,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      101,
      118,
      101,
      110,
      116,
      115,
      109,
      97,
      115,
      116,
      101,
      114,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      99,
      116,
      105,
      111,
      110,
      98,
      97,
      110,
      110,
      101,
      114,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      103,
      108,
      111,
      98,
      97,
      108,
      109,
      101,
      100,
      105,
      117,
      109,
      102,
      105,
      108,
      116,
      101,
      114,
      110,
      117,
      109,
      98,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      112,
      117,
      98,
      108,
      105,
      99,
      115,
      99,
      114,
      101,
      101,
      110,
      99,
      104,
      111,
      111,
      115,
      101,
      110,
      111,
      114,
      109,
      97,
      108,
      116,
      114,
      97,
      118,
      101,
      108,
      105,
      115,
      115,
      117,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      112,
      114,
      105,
      110,
      103,
      109,
      111,
      100,
      117,
      108,
      101,
      109,
      111,
      98,
      105,
      108,
      101,
      115,
      119,
      105,
      116,
      99,
      104,
      112,
      104,
      111,
      116,
      111,
      115,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      103,
      105,
      111,
      110,
      105,
      116,
      115,
      101,
      108,
      102,
      115,
      111,
      99,
      105,
      97,
      108,
      97,
      99,
      116,
      105,
      118,
      101,
      99,
      111,
      108,
      117,
      109,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      116,
      105,
      116,
      108,
      101,
      62,
      101,
      105,
      116,
      104,
      101,
      114,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      97,
      109,
      105,
      108,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      97,
      121,
      111,
      117,
      116,
      97,
      117,
      116,
      104,
      111,
      114,
      99,
      114,
      101,
      97,
      116,
      101,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      117,
      109,
      109,
      101,
      114,
      115,
      101,
      114,
      118,
      101,
      114,
      112,
      108,
      97,
      121,
      101,
      100,
      112,
      108,
      97,
      121,
      101,
      114,
      101,
      120,
      112,
      97,
      110,
      100,
      112,
      111,
      108,
      105,
      99,
      121,
      102,
      111,
      114,
      109,
      97,
      116,
      100,
      111,
      117,
      98,
      108,
      101,
      112,
      111,
      105,
      110,
      116,
      115,
      115,
      101,
      114,
      105,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      108,
      105,
      118,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      109,
      111,
      110,
      116,
      104,
      115,
      102,
      111,
      114,
      99,
      101,
      115,
      117,
      110,
      105,
      113,
      117,
      101,
      119,
      101,
      105,
      103,
      104,
      116,
      112,
      101,
      111,
      112,
      108,
      101,
      101,
      110,
      101,
      114,
      103,
      121,
      110,
      97,
      116,
      117,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      102,
      105,
      103,
      117,
      114,
      101,
      104,
      97,
      118,
      105,
      110,
      103,
      99,
      117,
      115,
      116,
      111,
      109,
      111,
      102,
      102,
      115,
      101,
      116,
      108,
      101,
      116,
      116,
      101,
      114,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      117,
      98,
      109,
      105,
      116,
      114,
      101,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      112,
      115,
      117,
      112,
      108,
      111,
      97,
      100,
      104,
      101,
      97,
      108,
      116,
      104,
      109,
      101,
      116,
      104,
      111,
      100,
      118,
      105,
      100,
      101,
      111,
      115,
      115,
      99,
      104,
      111,
      111,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      115,
      104,
      97,
      100,
      111,
      119,
      100,
      101,
      98,
      97,
      116,
      101,
      118,
      97,
      108,
      117,
      101,
      115,
      79,
      98,
      106,
      101,
      99,
      116,
      111,
      116,
      104,
      101,
      114,
      115,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      101,
      97,
      103,
      117,
      101,
      99,
      104,
      114,
      111,
      109,
      101,
      115,
      105,
      109,
      112,
      108,
      101,
      110,
      111,
      116,
      105,
      99,
      101,
      115,
      104,
      97,
      114,
      101,
      100,
      101,
      110,
      100,
      105,
      110,
      103,
      115,
      101,
      97,
      115,
      111,
      110,
      114,
      101,
      112,
      111,
      114,
      116,
      111,
      110,
      108,
      105,
      110,
      101,
      115,
      113,
      117,
      97,
      114,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      105,
      109,
      97,
      103,
      101,
      115,
      101,
      110,
      97,
      98,
      108,
      101,
      109,
      111,
      118,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      115,
      116,
      119,
      105,
      110,
      116,
      101,
      114,
      70,
      114,
      97,
      110,
      99,
      101,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      114,
      101,
      112,
      101,
      97,
      116,
      76,
      111,
      110,
      100,
      111,
      110,
      100,
      101,
      116,
      97,
      105,
      108,
      102,
      111,
      114,
      109,
      101,
      100,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      101,
      99,
      117,
      114,
      101,
      112,
      97,
      115,
      115,
      101,
      100,
      116,
      111,
      103,
      103,
      108,
      101,
      112,
      108,
      97,
      99,
      101,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      116,
      97,
      116,
      105,
      99,
      99,
      105,
      116,
      105,
      101,
      115,
      115,
      116,
      114,
      101,
      97,
      109,
      121,
      101,
      108,
      108,
      111,
      119,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      116,
      114,
      101,
      101,
      116,
      102,
      108,
      105,
      103,
      104,
      116,
      104,
      105,
      100,
      100,
      101,
      110,
      105,
      110,
      102,
      111,
      34,
      62,
      111,
      112,
      101,
      110,
      101,
      100,
      117,
      115,
      101,
      102,
      117,
      108,
      118,
      97,
      108,
      108,
      101,
      121,
      99,
      97,
      117,
      115,
      101,
      115,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      101,
      99,
      114,
      101,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      100,
      97,
      109,
      97,
      103,
      101,
      115,
      112,
      111,
      114,
      116,
      115,
      101,
      120,
      99,
      101,
      112,
      116,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      105,
      110,
      103,
      115,
      101,
      102,
      102,
      101,
      99,
      116,
      102,
      105,
      101,
      108,
      100,
      115,
      115,
      116,
      97,
      116,
      101,
      115,
      111,
      102,
      102,
      105,
      99,
      101,
      118,
      105,
      115,
      117,
      97,
      108,
      101,
      100,
      105,
      116,
      111,
      114,
      118,
      111,
      108,
      117,
      109,
      101,
      82,
      101,
      112,
      111,
      114,
      116,
      109,
      117,
      115,
      101,
      117,
      109,
      109,
      111,
      118,
      105,
      101,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      97,
      99,
      99,
      101,
      115,
      115,
      109,
      111,
      115,
      116,
      108,
      121,
      109,
      111,
      116,
      104,
      101,
      114,
      34,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      114,
      107,
      101,
      116,
      103,
      114,
      111,
      117,
      110,
      100,
      99,
      104,
      97,
      110,
      99,
      101,
      115,
      117,
      114,
      118,
      101,
      121,
      98,
      101,
      102,
      111,
      114,
      101,
      115,
      121,
      109,
      98,
      111,
      108,
      109,
      111,
      109,
      101,
      110,
      116,
      115,
      112,
      101,
      101,
      99,
      104,
      109,
      111,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      105,
      100,
      101,
      109,
      97,
      116,
      116,
      101,
      114,
      67,
      101,
      110,
      116,
      101,
      114,
      111,
      98,
      106,
      101,
      99,
      116,
      101,
      120,
      105,
      115,
      116,
      115,
      109,
      105,
      100,
      100,
      108,
      101,
      69,
      117,
      114,
      111,
      112,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      108,
      101,
      103,
      97,
      99,
      121,
      109,
      97,
      110,
      110,
      101,
      114,
      101,
      110,
      111,
      117,
      103,
      104,
      99,
      97,
      114,
      101,
      101,
      114,
      97,
      110,
      115,
      119,
      101,
      114,
      111,
      114,
      105,
      103,
      105,
      110,
      112,
      111,
      114,
      116,
      97,
      108,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      97,
      110,
      100,
      111,
      109,
      99,
      108,
      111,
      115,
      101,
      100,
      116,
      111,
      112,
      105,
      99,
      115,
      99,
      111,
      109,
      105,
      110,
      103,
      102,
      97,
      116,
      104,
      101,
      114,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      112,
      108,
      121,
      114,
      97,
      105,
      115,
      101,
      100,
      101,
      115,
      99,
      97,
      112,
      101,
      99,
      104,
      111,
      115,
      101,
      110,
      99,
      104,
      117,
      114,
      99,
      104,
      100,
      101,
      102,
      105,
      110,
      101,
      114,
      101,
      97,
      115,
      111,
      110,
      99,
      111,
      114,
      110,
      101,
      114,
      111,
      117,
      116,
      112,
      117,
      116,
      109,
      101,
      109,
      111,
      114,
      121,
      105,
      102,
      114,
      97,
      109,
      101,
      112,
      111,
      108,
      105,
      99,
      101,
      109,
      111,
      100,
      101,
      108,
      115,
      78,
      117,
      109,
      98,
      101,
      114,
      100,
      117,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      115,
      115,
      116,
      121,
      108,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      108,
      105,
      115,
      116,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      105,
      108,
      118,
      101,
      114,
      109,
      97,
      114,
      103,
      105,
      110,
      100,
      101,
      108,
      101,
      116,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      98,
      114,
      111,
      119,
      115,
      101,
      108,
      105,
      109,
      105,
      116,
      115,
      71,
      108,
      111,
      98,
      97,
      108,
      115,
      105,
      110,
      103,
      108,
      101,
      119,
      105,
      100,
      103,
      101,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      98,
      117,
      100,
      103,
      101,
      116,
      110,
      111,
      119,
      114,
      97,
      112,
      99,
      114,
      101,
      100,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      97,
      102,
      101,
      116,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      112,
      105,
      114,
      105,
      116,
      45,
      115,
      116,
      121,
      108,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      109,
      97,
      107,
      105,
      110,
      103,
      110,
      101,
      101,
      100,
      101,
      100,
      114,
      117,
      115,
      115,
      105,
      97,
      112,
      108,
      101,
      97,
      115,
      101,
      101,
      120,
      116,
      101,
      110,
      116,
      83,
      99,
      114,
      105,
      112,
      116,
      98,
      114,
      111,
      107,
      101,
      110,
      97,
      108,
      108,
      111,
      119,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      102,
      97,
      99,
      116,
      111,
      114,
      109,
      101,
      109,
      98,
      101,
      114,
      45,
      98,
      97,
      115,
      101,
      100,
      116,
      104,
      101,
      111,
      114,
      121,
      99,
      111,
      110,
      102,
      105,
      103,
      97,
      114,
      111,
      117,
      110,
      100,
      119,
      111,
      114,
      107,
      101,
      100,
      104,
      101,
      108,
      112,
      101,
      100,
      67,
      104,
      117,
      114,
      99,
      104,
      105,
      109,
      112,
      97,
      99,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      97,
      108,
      119,
      97,
      121,
      115,
      108,
      111,
      103,
      111,
      34,
      32,
      98,
      111,
      116,
      116,
      111,
      109,
      108,
      105,
      115,
      116,
      34,
      62,
      41,
      123,
      118,
      97,
      114,
      32,
      112,
      114,
      101,
      102,
      105,
      120,
      111,
      114,
      97,
      110,
      103,
      101,
      72,
      101,
      97,
      100,
      101,
      114,
      46,
      112,
      117,
      115,
      104,
      40,
      99,
      111,
      117,
      112,
      108,
      101,
      103,
      97,
      114,
      100,
      101,
      110,
      98,
      114,
      105,
      100,
      103,
      101,
      108,
      97,
      117,
      110,
      99,
      104,
      82,
      101,
      118,
      105,
      101,
      119,
      116,
      97,
      107,
      105,
      110,
      103,
      118,
      105,
      115,
      105,
      111,
      110,
      108,
      105,
      116,
      116,
      108,
      101,
      100,
      97,
      116,
      105,
      110,
      103,
      66,
      117,
      116,
      116,
      111,
      110,
      98,
      101,
      97,
      117,
      116,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      102,
      111,
      114,
      103,
      111,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      97,
      110,
      99,
      104,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      108,
      111,
      97,
      100,
      101,
      100,
      67,
      104,
      97,
      110,
      103,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      114,
      105,
      110,
      103,
      114,
      101,
      108,
      111,
      97,
      100,
      77,
      111,
      98,
      105,
      108,
      101,
      105,
      110,
      99,
      111,
      109,
      101,
      115,
      117,
      112,
      112,
      108,
      121,
      83,
      111,
      117,
      114,
      99,
      101,
      111,
      114,
      100,
      101,
      114,
      115,
      118,
      105,
      101,
      119,
      101,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      99,
      111,
      117,
      114,
      115,
      101,
      65,
      98,
      111,
      117,
      116,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      60,
      104,
      116,
      109,
      108,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      109,
      97,
      122,
      111,
      110,
      109,
      111,
      100,
      101,
      114,
      110,
      97,
      100,
      118,
      105,
      99,
      101,
      105,
      110,
      60,
      47,
      97,
      62,
      58,
      32,
      84,
      104,
      101,
      32,
      100,
      105,
      97,
      108,
      111,
      103,
      104,
      111,
      117,
      115,
      101,
      115,
      66,
      69,
      71,
      73,
      78,
      32,
      77,
      101,
      120,
      105,
      99,
      111,
      115,
      116,
      97,
      114,
      116,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      104,
      101,
      105,
      103,
      104,
      116,
      97,
      100,
      100,
      105,
      110,
      103,
      73,
      115,
      108,
      97,
      110,
      100,
      97,
      115,
      115,
      101,
      116,
      115,
      69,
      109,
      112,
      105,
      114,
      101,
      83,
      99,
      104,
      111,
      111,
      108,
      101,
      102,
      102,
      111,
      114,
      116,
      100,
      105,
      114,
      101,
      99,
      116,
      110,
      101,
      97,
      114,
      108,
      121,
      109,
      97,
      110,
      117,
      97,
      108,
      83,
      101,
      108,
      101,
      99,
      116,
      46,
      10,
      10,
      79,
      110,
      101,
      106,
      111,
      105,
      110,
      101,
      100,
      109,
      101,
      110,
      117,
      34,
      62,
      80,
      104,
      105,
      108,
      105,
      112,
      97,
      119,
      97,
      114,
      100,
      115,
      104,
      97,
      110,
      100,
      108,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      79,
      102,
      102,
      105,
      99,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      115,
      107,
      105,
      108,
      108,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      83,
      112,
      111,
      114,
      116,
      115,
      100,
      101,
      103,
      114,
      101,
      101,
      119,
      101,
      101,
      107,
      108,
      121,
      32,
      40,
      101,
      46,
      103,
      46,
      98,
      101,
      104,
      105,
      110,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      108,
      111,
      103,
      103,
      101,
      100,
      117,
      110,
      105,
      116,
      101,
      100,
      60,
      47,
      98,
      62,
      60,
      47,
      98,
      101,
      103,
      105,
      110,
      115,
      112,
      108,
      97,
      110,
      116,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      114,
      116,
      105,
      115,
      116,
      105,
      115,
      115,
      117,
      101,
      100,
      51,
      48,
      48,
      112,
      120,
      124,
      99,
      97,
      110,
      97,
      100,
      97,
      97,
      103,
      101,
      110,
      99,
      121,
      115,
      99,
      104,
      101,
      109,
      101,
      114,
      101,
      109,
      97,
      105,
      110,
      66,
      114,
      97,
      122,
      105,
      108,
      115,
      97,
      109,
      112,
      108,
      101,
      108,
      111,
      103,
      111,
      34,
      62,
      98,
      101,
      121,
      111,
      110,
      100,
      45,
      115,
      99,
      97,
      108,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      101,
      114,
      118,
      101,
      100,
      109,
      97,
      114,
      105,
      110,
      101,
      70,
      111,
      111,
      116,
      101,
      114,
      99,
      97,
      109,
      101,
      114,
      97,
      60,
      47,
      104,
      49,
      62,
      10,
      95,
      102,
      111,
      114,
      109,
      34,
      108,
      101,
      97,
      118,
      101,
      115,
      115,
      116,
      114,
      101,
      115,
      115,
      34,
      32,
      47,
      62,
      13,
      10,
      46,
      103,
      105,
      102,
      34,
      32,
      111,
      110,
      108,
      111,
      97,
      100,
      108,
      111,
      97,
      100,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      115,
      105,
      115,
      116,
      101,
      114,
      115,
      117,
      114,
      118,
      105,
      118,
      108,
      105,
      115,
      116,
      101,
      110,
      102,
      101,
      109,
      97,
      108,
      101,
      68,
      101,
      115,
      105,
      103,
      110,
      115,
      105,
      122,
      101,
      61,
      34,
      97,
      112,
      112,
      101,
      97,
      108,
      116,
      101,
      120,
      116,
      34,
      62,
      108,
      101,
      118,
      101,
      108,
      115,
      116,
      104,
      97,
      110,
      107,
      115,
      104,
      105,
      103,
      104,
      101,
      114,
      102,
      111,
      114,
      99,
      101,
      100,
      97,
      110,
      105,
      109,
      97,
      108,
      97,
      110,
      121,
      111,
      110,
      101,
      65,
      102,
      114,
      105,
      99,
      97,
      97,
      103,
      114,
      101,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      80,
      101,
      111,
      112,
      108,
      101,
      60,
      98,
      114,
      32,
      47,
      62,
      119,
      111,
      110,
      100,
      101,
      114,
      112,
      114,
      105,
      99,
      101,
      115,
      116,
      117,
      114,
      110,
      101,
      100,
      124,
      124,
      32,
      123,
      125,
      59,
      109,
      97,
      105,
      110,
      34,
      62,
      105,
      110,
      108,
      105,
      110,
      101,
      115,
      117,
      110,
      100,
      97,
      121,
      119,
      114,
      97,
      112,
      34,
      62,
      102,
      97,
      105,
      108,
      101,
      100,
      99,
      101,
      110,
      115,
      117,
      115,
      109,
      105,
      110,
      117,
      116,
      101,
      98,
      101,
      97,
      99,
      111,
      110,
      113,
      117,
      111,
      116,
      101,
      115,
      49,
      53,
      48,
      112,
      120,
      124,
      101,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      109,
      111,
      116,
      101,
      101,
      109,
      97,
      105,
      108,
      34,
      108,
      105,
      110,
      107,
      101,
      100,
      114,
      105,
      103,
      104,
      116,
      59,
      115,
      105,
      103,
      110,
      97,
      108,
      102,
      111,
      114,
      109,
      97,
      108,
      49,
      46,
      104,
      116,
      109,
      108,
      115,
      105,
      103,
      110,
      117,
      112,
      112,
      114,
      105,
      110,
      99,
      101,
      102,
      108,
      111,
      97,
      116,
      58,
      46,
      112,
      110,
      103,
      34,
      32,
      102,
      111,
      114,
      117,
      109,
      46,
      65,
      99,
      99,
      101,
      115,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      115,
      111,
      117,
      110,
      100,
      115,
      101,
      120,
      116,
      101,
      110,
      100,
      72,
      101,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      100,
      101,
      114,
      85,
      84,
      70,
      45,
      56,
      34,
      38,
      97,
      109,
      112,
      59,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      46,
      32,
      87,
      105,
      116,
      104,
      115,
      116,
      117,
      100,
      105,
      111,
      111,
      119,
      110,
      101,
      114,
      115,
      109,
      97,
      110,
      97,
      103,
      101,
      112,
      114,
      111,
      102,
      105,
      116,
      106,
      81,
      117,
      101,
      114,
      121,
      97,
      110,
      110,
      117,
      97,
      108,
      112,
      97,
      114,
      97,
      109,
      115,
      98,
      111,
      117,
      103,
      104,
      116,
      102,
      97,
      109,
      111,
      117,
      115,
      103,
      111,
      111,
      103,
      108,
      101,
      108,
      111,
      110,
      103,
      101,
      114,
      105,
      43,
      43,
      41,
      32,
      123,
      105,
      115,
      114,
      97,
      101,
      108,
      115,
      97,
      121,
      105,
      110,
      103,
      100,
      101,
      99,
      105,
      100,
      101,
      104,
      111,
      109,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      101,
      110,
      115,
      117,
      114,
      101,
      98,
      114,
      97,
      110,
      99,
      104,
      112,
      105,
      101,
      99,
      101,
      115,
      98,
      108,
      111,
      99,
      107,
      59,
      115,
      116,
      97,
      116,
      101,
      100,
      116,
      111,
      112,
      34,
      62,
      60,
      114,
      97,
      99,
      105,
      110,
      103,
      114,
      101,
      115,
      105,
      122,
      101,
      45,
      45,
      38,
      103,
      116,
      59,
      112,
      97,
      99,
      105,
      116,
      121,
      115,
      101,
      120,
      117,
      97,
      108,
      98,
      117,
      114,
      101,
      97,
      117,
      46,
      106,
      112,
      103,
      34,
      32,
      49,
      48,
      44,
      48,
      48,
      48,
      111,
      98,
      116,
      97,
      105,
      110,
      116,
      105,
      116,
      108,
      101,
      115,
      97,
      109,
      111,
      117,
      110,
      116,
      44,
      32,
      73,
      110,
      99,
      46,
      99,
      111,
      109,
      101,
      100,
      121,
      109,
      101,
      110,
      117,
      34,
      32,
      108,
      121,
      114,
      105,
      99,
      115,
      116,
      111,
      100,
      97,
      121,
      46,
      105,
      110,
      100,
      101,
      101,
      100,
      99,
      111,
      117,
      110,
      116,
      121,
      95,
      108,
      111,
      103,
      111,
      46,
      70,
      97,
      109,
      105,
      108,
      121,
      108,
      111,
      111,
      107,
      101,
      100,
      77,
      97,
      114,
      107,
      101,
      116,
      108,
      115,
      101,
      32,
      105,
      102,
      80,
      108,
      97,
      121,
      101,
      114,
      116,
      117,
      114,
      107,
      101,
      121,
      41,
      59,
      118,
      97,
      114,
      32,
      102,
      111,
      114,
      101,
      115,
      116,
      103,
      105,
      118,
      105,
      110,
      103,
      101,
      114,
      114,
      111,
      114,
      115,
      68,
      111,
      109,
      97,
      105,
      110,
      125,
      101,
      108,
      115,
      101,
      123,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      108,
      111,
      103,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      108,
      111,
      103,
      105,
      110,
      46,
      102,
      97,
      115,
      116,
      101,
      114,
      97,
      103,
      101,
      110,
      116,
      115,
      60,
      98,
      111,
      100,
      121,
      32,
      49,
      48,
      112,
      120,
      32,
      48,
      112,
      114,
      97,
      103,
      109,
      97,
      102,
      114,
      105,
      100,
      97,
      121,
      106,
      117,
      110,
      105,
      111,
      114,
      100,
      111,
      108,
      108,
      97,
      114,
      112,
      108,
      97,
      99,
      101,
      100,
      99,
      111,
      118,
      101,
      114,
      115,
      112,
      108,
      117,
      103,
      105,
      110,
      53,
      44,
      48,
      48,
      48,
      32,
      112,
      97,
      103,
      101,
      34,
      62,
      98,
      111,
      115,
      116,
      111,
      110,
      46,
      116,
      101,
      115,
      116,
      40,
      97,
      118,
      97,
      116,
      97,
      114,
      116,
      101,
      115,
      116,
      101,
      100,
      95,
      99,
      111,
      117,
      110,
      116,
      102,
      111,
      114,
      117,
      109,
      115,
      115,
      99,
      104,
      101,
      109,
      97,
      105,
      110,
      100,
      101,
      120,
      44,
      102,
      105,
      108,
      108,
      101,
      100,
      115,
      104,
      97,
      114,
      101,
      115,
      114,
      101,
      97,
      100,
      101,
      114,
      97,
      108,
      101,
      114,
      116,
      40,
      97,
      112,
      112,
      101,
      97,
      114,
      83,
      117,
      98,
      109,
      105,
      116,
      108,
      105,
      110,
      101,
      34,
      62,
      98,
      111,
      100,
      121,
      34,
      62,
      10,
      42,
      32,
      84,
      104,
      101,
      84,
      104,
      111,
      117,
      103,
      104,
      115,
      101,
      101,
      105,
      110,
      103,
      106,
      101,
      114,
      115,
      101,
      121,
      78,
      101,
      119,
      115,
      60,
      47,
      118,
      101,
      114,
      105,
      102,
      121,
      101,
      120,
      112,
      101,
      114,
      116,
      105,
      110,
      106,
      117,
      114,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      67,
      111,
      111,
      107,
      105,
      101,
      83,
      84,
      65,
      82,
      84,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      95,
      105,
      109,
      97,
      103,
      101,
      116,
      104,
      114,
      101,
      97,
      100,
      110,
      97,
      116,
      105,
      118,
      101,
      112,
      111,
      99,
      107,
      101,
      116,
      98,
      111,
      120,
      34,
      62,
      10,
      83,
      121,
      115,
      116,
      101,
      109,
      32,
      68,
      97,
      118,
      105,
      100,
      99,
      97,
      110,
      99,
      101,
      114,
      116,
      97,
      98,
      108,
      101,
      115,
      112,
      114,
      111,
      118,
      101,
      100,
      65,
      112,
      114,
      105,
      108,
      32,
      114,
      101,
      97,
      108,
      108,
      121,
      100,
      114,
      105,
      118,
      101,
      114,
      105,
      116,
      101,
      109,
      34,
      62,
      109,
      111,
      114,
      101,
      34,
      62,
      98,
      111,
      97,
      114,
      100,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      97,
      109,
      112,
      117,
      115,
      102,
      105,
      114,
      115,
      116,
      32,
      124,
      124,
      32,
      91,
      93,
      59,
      109,
      101,
      100,
      105,
      97,
      46,
      103,
      117,
      105,
      116,
      97,
      114,
      102,
      105,
      110,
      105,
      115,
      104,
      119,
      105,
      100,
      116,
      104,
      58,
      115,
      104,
      111,
      119,
      101,
      100,
      79,
      116,
      104,
      101,
      114,
      32,
      46,
      112,
      104,
      112,
      34,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      108,
      97,
      121,
      101,
      114,
      115,
      119,
      105,
      108,
      115,
      111,
      110,
      115,
      116,
      111,
      114,
      101,
      115,
      114,
      101,
      108,
      105,
      101,
      102,
      115,
      119,
      101,
      100,
      101,
      110,
      67,
      117,
      115,
      116,
      111,
      109,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      121,
      111,
      117,
      114,
      32,
      83,
      116,
      114,
      105,
      110,
      103,
      10,
      10,
      87,
      104,
      105,
      108,
      116,
      97,
      121,
      108,
      111,
      114,
      99,
      108,
      101,
      97,
      114,
      58,
      114,
      101,
      115,
      111,
      114,
      116,
      102,
      114,
      101,
      110,
      99,
      104,
      116,
      104,
      111,
      117,
      103,
      104,
      34,
      41,
      32,
      43,
      32,
      34,
      60,
      98,
      111,
      100,
      121,
      62,
      98,
      117,
      121,
      105,
      110,
      103,
      98,
      114,
      97,
      110,
      100,
      115,
      77,
      101,
      109,
      98,
      101,
      114,
      110,
      97,
      109,
      101,
      34,
      62,
      111,
      112,
      112,
      105,
      110,
      103,
      115,
      101,
      99,
      116,
      111,
      114,
      53,
      112,
      120,
      59,
      34,
      62,
      118,
      115,
      112,
      97,
      99,
      101,
      112,
      111,
      115,
      116,
      101,
      114,
      109,
      97,
      106,
      111,
      114,
      32,
      99,
      111,
      102,
      102,
      101,
      101,
      109,
      97,
      114,
      116,
      105,
      110,
      109,
      97,
      116,
      117,
      114,
      101,
      104,
      97,
      112,
      112,
      101,
      110,
      60,
      47,
      110,
      97,
      118,
      62,
      107,
      97,
      110,
      115,
      97,
      115,
      108,
      105,
      110,
      107,
      34,
      62,
      73,
      109,
      97,
      103,
      101,
      115,
      61,
      102,
      97,
      108,
      115,
      101,
      119,
      104,
      105,
      108,
      101,
      32,
      104,
      115,
      112,
      97,
      99,
      101,
      48,
      38,
      97,
      109,
      112,
      59,
      32,
      10,
      10,
      73,
      110,
      32,
      32,
      112,
      111,
      119,
      101,
      114,
      80,
      111,
      108,
      115,
      107,
      105,
      45,
      99,
      111,
      108,
      111,
      114,
      106,
      111,
      114,
      100,
      97,
      110,
      66,
      111,
      116,
      116,
      111,
      109,
      83,
      116,
      97,
      114,
      116,
      32,
      45,
      99,
      111,
      117,
      110,
      116,
      50,
      46,
      104,
      116,
      109,
      108,
      110,
      101,
      119,
      115,
      34,
      62,
      48,
      49,
      46,
      106,
      112,
      103,
      79,
      110,
      108,
      105,
      110,
      101,
      45,
      114,
      105,
      103,
      104,
      116,
      109,
      105,
      108,
      108,
      101,
      114,
      115,
      101,
      110,
      105,
      111,
      114,
      73,
      83,
      66,
      78,
      32,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      103,
      117,
      105,
      100,
      101,
      115,
      118,
      97,
      108,
      117,
      101,
      41,
      101,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      97,
      105,
      114,
      46,
      120,
      109,
      108,
      34,
      32,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      46,
      104,
      116,
      109,
      108,
      45,
      98,
      108,
      111,
      99,
      107,
      114,
      101,
      103,
      69,
      120,
      112,
      58,
      104,
      111,
      118,
      101,
      114,
      119,
      105,
      116,
      104,
      105,
      110,
      118,
      105,
      114,
      103,
      105,
      110,
      112,
      104,
      111,
      110,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      117,
      115,
      105,
      110,
      103,
      32,
      10,
      9,
      118,
      97,
      114,
      32,
      62,
      39,
      41,
      59,
      10,
      9,
      60,
      47,
      116,
      100,
      62,
      10,
      60,
      47,
      116,
      114,
      62,
      10,
      98,
      97,
      104,
      97,
      115,
      97,
      98,
      114,
      97,
      115,
      105,
      108,
      103,
      97,
      108,
      101,
      103,
      111,
      109,
      97,
      103,
      121,
      97,
      114,
      112,
      111,
      108,
      115,
      107,
      105,
      115,
      114,
      112,
      115,
      107,
      105,
      216,
      177,
      216,
      175,
      217,
      136,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      231,
      185,
      129,
      233,
      171,
      148,
      228,
      191,
      161,
      230,
      129,
      175,
      228,
      184,
      173,
      229,
      155,
      189,
      230,
      136,
      145,
      228,
      187,
      172,
      228,
      184,
      128,
      228,
      184,
      170,
      229,
      133,
      172,
      229,
      143,
      184,
      231,
      174,
      161,
      231,
      144,
      134,
      232,
      174,
      186,
      229,
      157,
      155,
      229,
      143,
      175,
      228,
      187,
      165,
      230,
      156,
      141,
      229,
      138,
      161,
      230,
      151,
      182,
      233,
      151,
      180,
      228,
      184,
      170,
      228,
      186,
      186,
      228,
      186,
      167,
      229,
      147,
      129,
      232,
      135,
      170,
      229,
      183,
      177,
      228,
      188,
      129,
      228,
      184,
      154,
      230,
      159,
      165,
      231,
      156,
      139,
      229,
      183,
      165,
      228,
      189,
      156,
      232,
      129,
      148,
      231,
      179,
      187,
      230,
      178,
      161,
      230,
      156,
      137,
      231,
      189,
      145,
      231,
      171,
      153,
      230,
      137,
      128,
      230,
      156,
      137,
      232,
      175,
      132,
      232,
      174,
      186,
      228,
      184,
      173,
      229,
      191,
      131,
      230,
      150,
      135,
      231,
      171,
      160,
      231,
      148,
      168,
      230,
      136,
      183,
      233,
      166,
      150,
      233,
      161,
      181,
      228,
      189,
      156,
      232,
      128,
      133,
      230,
      138,
      128,
      230,
      156,
      175,
      233,
      151,
      174,
      233,
      162,
      152,
      231,
      155,
      184,
      229,
      133,
      179,
      228,
      184,
      139,
      232,
      189,
      189,
      230,
      144,
      156,
      231,
      180,
      162,
      228,
      189,
      191,
      231,
      148,
      168,
      232,
      189,
      175,
      228,
      187,
      182,
      229,
      156,
      168,
      231,
      186,
      191,
      228,
      184,
      187,
      233,
      162,
      152,
      232,
      181,
      132,
      230,
      150,
      153,
      232,
      167,
      134,
      233,
      162,
      145,
      229,
      155,
      158,
      229,
      164,
      141,
      230,
      179,
      168,
      229,
      134,
      140,
      231,
      189,
      145,
      231,
      187,
      156,
      230,
      148,
      182,
      232,
      151,
      143,
      229,
      134,
      133,
      229,
      174,
      185,
      230,
      142,
      168,
      232,
      141,
      144,
      229,
      184,
      130,
      229,
      156,
      186,
      230,
      182,
      136,
      230,
      129,
      175,
      231,
      169,
      186,
      233,
      151,
      180,
      229,
      143,
      145,
      229,
      184,
      131,
      228,
      187,
      128,
      228,
      185,
      136,
      229,
      165,
      189,
      229,
      143,
      139,
      231,
      148,
      159,
      230,
      180,
      187,
      229,
      155,
      190,
      231,
      137,
      135,
      229,
      143,
      145,
      229,
      177,
      149,
      229,
      166,
      130,
      230,
      158,
      156,
      230,
      137,
      139,
      230,
      156,
      186,
      230,
      150,
      176,
      233,
      151,
      187,
      230,
      156,
      128,
      230,
      150,
      176,
      230,
      150,
      185,
      229,
      188,
      143,
      229,
      140,
      151,
      228,
      186,
      172,
      230,
      143,
      144,
      228,
      190,
      155,
      229,
      133,
      179,
      228,
      186,
      142,
      230,
      155,
      180,
      229,
      164,
      154,
      232,
      191,
      153,
      228,
      184,
      170,
      231,
      179,
      187,
      231,
      187,
      159,
      231,
      159,
      165,
      233,
      129,
      147,
      230,
      184,
      184,
      230,
      136,
      143,
      229,
      185,
      191,
      229,
      145,
      138,
      229,
      133,
      182,
      228,
      187,
      150,
      229,
      143,
      145,
      232,
      161,
      168,
      229,
      174,
      137,
      229,
      133,
      168,
      231,
      172,
      172,
      228,
      184,
      128,
      228,
      188,
      154,
      229,
      145,
      152,
      232,
      191,
      155,
      232,
      161,
      140,
      231,
      130,
      185,
      229,
      135,
      187,
      231,
      137,
      136,
      230,
      157,
      131,
      231,
      148,
      181,
      229,
      173,
      144,
      228,
      184,
      150,
      231,
      149,
      140,
      232,
      174,
      190,
      232,
      174,
      161,
      229,
      133,
      141,
      232,
      180,
      185,
      230,
      149,
      153,
      232,
      130,
      178,
      229,
      138,
      160,
      229,
      133,
      165,
      230,
      180,
      187,
      229,
      138,
      168,
      228,
      187,
      150,
      228,
      187,
      172,
      229,
      149,
      134,
      229,
      147,
      129,
      229,
      141,
      154,
      229,
      174,
      162,
      231,
      142,
      176,
      229,
      156,
      168,
      228,
      184,
      138,
      230,
      181,
      183,
      229,
      166,
      130,
      228,
      189,
      149,
      229,
      183,
      178,
      231,
      187,
      143,
      231,
      149,
      153,
      232,
      168,
      128,
      232,
      175,
      166,
      231,
      187,
      134,
      231,
      164,
      190,
      229,
      140,
      186,
      231,
      153,
      187,
      229,
      189,
      149,
      230,
      156,
      172,
      231,
      171,
      153,
      233,
      156,
      128,
      232,
      166,
      129,
      228,
      187,
      183,
      230,
      160,
      188,
      230,
      148,
      175,
      230,
      140,
      129,
      229,
      155,
      189,
      233,
      153,
      133,
      233,
      147,
      190,
      230,
      142,
      165,
      229,
      155,
      189,
      229,
      174,
      182,
      229,
      187,
      186,
      232,
      174,
      190,
      230,
      156,
      139,
      229,
      143,
      139,
      233,
      152,
      133,
      232,
      175,
      187,
      230,
      179,
      149,
      229,
      190,
      139,
      228,
      189,
      141,
      231,
      189,
      174,
      231,
      187,
      143,
      230,
      181,
      142,
      233,
      128,
      137,
      230,
      139,
      169,
      232,
      191,
      153,
      230,
      160,
      183,
      229,
      189,
      147,
      229,
      137,
      141,
      229,
      136,
      134,
      231,
      177,
      187,
      230,
      142,
      146,
      232,
      161,
      140,
      229,
      155,
      160,
      228,
      184,
      186,
      228,
      186,
      164,
      230,
      152,
      147,
      230,
      156,
      128,
      229,
      144,
      142,
      233,
      159,
      179,
      228,
      185,
      144,
      228,
      184,
      141,
      232,
      131,
      189,
      233,
      128,
      154,
      232,
      191,
      135,
      232,
      161,
      140,
      228,
      184,
      154,
      231,
      167,
      145,
      230,
      138,
      128,
      229,
      143,
      175,
      232,
      131,
      189,
      232,
      174,
      190,
      229,
      164,
      135,
      229,
      144,
      136,
      228,
      189,
      156,
      229,
      164,
      167,
      229,
      174,
      182,
      231,
      164,
      190,
      228,
      188,
      154,
      231,
      160,
      148,
      231,
      169,
      182,
      228,
      184,
      147,
      228,
      184,
      154,
      229,
      133,
      168,
      233,
      131,
      168,
      233,
      161,
      185,
      231,
      155,
      174,
      232,
      191,
      153,
      233,
      135,
      140,
      232,
      191,
      152,
      230,
      152,
      175,
      229,
      188,
      128,
      229,
      167,
      139,
      230,
      131,
      133,
      229,
      134,
      181,
      231,
      148,
      181,
      232,
      132,
      145,
      230,
      150,
      135,
      228,
      187,
      182,
      229,
      147,
      129,
      231,
      137,
      140,
      229,
      184,
      174,
      229,
      138,
      169,
      230,
      150,
      135,
      229,
      140,
      150,
      232,
      181,
      132,
      230,
      186,
      144,
      229,
      164,
      167,
      229,
      173,
      166,
      229,
      173,
      166,
      228,
      185,
      160,
      229,
      156,
      176,
      229,
      157,
      128,
      230,
      181,
      143,
      232,
      167,
      136,
      230,
      138,
      149,
      232,
      181,
      132,
      229,
      183,
      165,
      231,
      168,
      139,
      232,
      166,
      129,
      230,
      177,
      130,
      230,
      128,
      142,
      228,
      185,
      136,
      230,
      151,
      182,
      229,
      128,
      153,
      229,
      138,
      159,
      232,
      131,
      189,
      228,
      184,
      187,
      232,
      166,
      129,
      231,
      155,
      174,
      229,
      137,
      141,
      232,
      181,
      132,
      232,
      174,
      175,
      229,
      159,
      142,
      229,
      184,
      130,
      230,
      150,
      185,
      230,
      179,
      149,
      231,
      148,
      181,
      229,
      189,
      177,
      230,
      139,
      155,
      232,
      129,
      152,
      229,
      163,
      176,
      230,
      152,
      142,
      228,
      187,
      187,
      228,
      189,
      149,
      229,
      129,
      165,
      229,
      186,
      183,
      230,
      149,
      176,
      230,
      141,
      174,
      231,
      190,
      142,
      229,
      155,
      189,
      230,
      177,
      189,
      232,
      189,
      166,
      228,
      187,
      139,
      231,
      187,
      141,
      228,
      189,
      134,
      230,
      152,
      175,
      228,
      186,
      164,
      230,
      181,
      129,
      231,
      148,
      159,
      228,
      186,
      167,
      230,
      137,
      128,
      228,
      187,
      165,
      231,
      148,
      181,
      232,
      175,
      157,
      230,
      152,
      190,
      231,
      164,
      186,
      228,
      184,
      128,
      228,
      186,
      155,
      229,
      141,
      149,
      228,
      189,
      141,
      228,
      186,
      186,
      229,
      145,
      152,
      229,
      136,
      134,
      230,
      158,
      144,
      229,
      156,
      176,
      229,
      155,
      190,
      230,
      151,
      133,
      230,
      184,
      184,
      229,
      183,
      165,
      229,
      133,
      183,
      229,
      173,
      166,
      231,
      148,
      159,
      231,
      179,
      187,
      229,
      136,
      151,
      231,
      189,
      145,
      229,
      143,
      139,
      229,
      184,
      150,
      229,
      173,
      144,
      229,
      175,
      134,
      231,
      160,
      129,
      233,
      162,
      145,
      233,
      129,
      147,
      230,
      142,
      167,
      229,
      136,
      182,
      229,
      156,
      176,
      229,
      140,
      186,
      229,
      159,
      186,
      230,
      156,
      172,
      229,
      133,
      168,
      229,
      155,
      189,
      231,
      189,
      145,
      228,
      184,
      138,
      233,
      135,
      141,
      232,
      166,
      129,
      231,
      172,
      172,
      228,
      186,
      140,
      229,
      150,
      156,
      230,
      172,
      162,
      232,
      191,
      155,
      229,
      133,
      165,
      229,
      143,
      139,
      230,
      131,
      133,
      232,
      191,
      153,
      228,
      186,
      155,
      232,
      128,
      131,
      232,
      175,
      149,
      229,
      143,
      145,
      231,
      142,
      176,
      229,
      159,
      185,
      232,
      174,
      173,
      228,
      187,
      165,
      228,
      184,
      138,
      230,
      148,
      191,
      229,
      186,
      156,
      230,
      136,
      144,
      228,
      184,
      186,
      231,
      142,
      175,
      229,
      162,
      131,
      233,
      166,
      153,
      230,
      184,
      175,
      229,
      144,
      140,
      230,
      151,
      182,
      229,
      168,
      177,
      228,
      185,
      144,
      229,
      143,
      145,
      233,
      128,
      129,
      228,
      184,
      128,
      229,
      174,
      154,
      229,
      188,
      128,
      229,
      143,
      145,
      228,
      189,
      156,
      229,
      147,
      129,
      230,
      160,
      135,
      229,
      135,
      134,
      230,
      172,
      162,
      232,
      191,
      142,
      232,
      167,
      163,
      229,
      134,
      179,
      229,
      156,
      176,
      230,
      150,
      185,
      228,
      184,
      128,
      228,
      184,
      139,
      228,
      187,
      165,
      229,
      143,
      138,
      232,
      180,
      163,
      228,
      187,
      187,
      230,
      136,
      150,
      232,
      128,
      133,
      229,
      174,
      162,
      230,
      136,
      183,
      228,
      187,
      163,
      232,
      161,
      168,
      231,
      167,
      175,
      229,
      136,
      134,
      229,
      165,
      179,
      228,
      186,
      186,
      230,
      149,
      176,
      231,
      160,
      129,
      233,
      148,
      128,
      229,
      148,
      174,
      229,
      135,
      186,
      231,
      142,
      176,
      231,
      166,
      187,
      231,
      186,
      191,
      229,
      186,
      148,
      231,
      148,
      168,
      229,
      136,
      151,
      232,
      161,
      168,
      228,
      184,
      141,
      229,
      144,
      140,
      231,
      188,
      150,
      232,
      190,
      145,
      231,
      187,
      159,
      232,
      174,
      161,
      230,
      159,
      165,
      232,
      175,
      162,
      228,
      184,
      141,
      232,
      166,
      129,
      230,
      156,
      137,
      229,
      133,
      179,
      230,
      156,
      186,
      230,
      158,
      132,
      229,
      190,
      136,
      229,
      164,
      154,
      230,
      146,
      173,
      230,
      148,
      190,
      231,
      187,
      132,
      231,
      187,
      135,
      230,
      148,
      191,
      231,
      173,
      150,
      231,
      155,
      180,
      230,
      142,
      165,
      232,
      131,
      189,
      229,
      138,
      155,
      230,
      157,
      165,
      230,
      186,
      144,
      230,
      153,
      130,
      233,
      150,
      147,
      231,
      156,
      139,
      229,
      136,
      176,
      231,
      131,
      173,
      233,
      151,
      168,
      229,
      133,
      179,
      233,
      148,
      174,
      228,
      184,
      147,
      229,
      140,
      186,
      233,
      157,
      158,
      229,
      184,
      184,
      232,
      139,
      177,
      232,
      175,
      173,
      231,
      153,
      190,
      229,
      186,
      166,
      229,
      184,
      140,
      230,
      156,
      155,
      231,
      190,
      142,
      229,
      165,
      179,
      230,
      175,
      148,
      232,
      190,
      131,
      231,
      159,
      165,
      232,
      175,
      134,
      232,
      167,
      132,
      229,
      174,
      154,
      229,
      187,
      186,
      232,
      174,
      174,
      233,
      131,
      168,
      233,
      151,
      168,
      230,
      132,
      143,
      232,
      167,
      129,
      231,
      178,
      190,
      229,
      189,
      169,
      230,
      151,
      165,
      230,
      156,
      172,
      230,
      143,
      144,
      233,
      171,
      152,
      229,
      143,
      145,
      232,
      168,
      128,
      230,
      150,
      185,
      233,
      157,
      162,
      229,
      159,
      186,
      233,
      135,
      145,
      229,
      164,
      132,
      231,
      144,
      134,
      230,
      157,
      131,
      233,
      153,
      144,
      229,
      189,
      177,
      231,
      137,
      135,
      233,
      147,
      182,
      232,
      161,
      140,
      232,
      191,
      152,
      230,
      156,
      137,
      229,
      136,
      134,
      228,
      186,
      171,
      231,
      137,
      169,
      229,
      147,
      129,
      231,
      187,
      143,
      232,
      144,
      165,
      230,
      183,
      187,
      229,
      138,
      160,
      228,
      184,
      147,
      229,
      174,
      182,
      232,
      191,
      153,
      231,
      167,
      141,
      232,
      175,
      157,
      233,
      162,
      152,
      232,
      181,
      183,
      230,
      157,
      165,
      228,
      184,
      154,
      229,
      138,
      161,
      229,
      133,
      172,
      229,
      145,
      138,
      232,
      174,
      176,
      229,
      189,
      149,
      231,
      174,
      128,
      228,
      187,
      139,
      232,
      180,
      168,
      233,
      135,
      143,
      231,
      148,
      183,
      228,
      186,
      186,
      229,
      189,
      177,
      229,
      147,
      141,
      229,
      188,
      149,
      231,
      148,
      168,
      230,
      138,
      165,
      229,
      145,
      138,
      233,
      131,
      168,
      229,
      136,
      134,
      229,
      191,
      171,
      233,
      128,
      159,
      229,
      146,
      168,
      232,
      175,
      162,
      230,
      151,
      182,
      229,
      176,
      154,
      230,
      179,
      168,
      230,
      132,
      143,
      231,
      148,
      179,
      232,
      175,
      183,
      229,
      173,
      166,
      230,
      160,
      161,
      229,
      186,
      148,
      232,
      175,
      165,
      229,
      142,
      134,
      229,
      143,
      178,
      229,
      143,
      170,
      230,
      152,
      175,
      232,
      191,
      148,
      229,
      155,
      158,
      232,
      180,
      173,
      228,
      185,
      176,
      229,
      144,
      141,
      231,
      167,
      176,
      228,
      184,
      186,
      228,
      186,
      134,
      230,
      136,
      144,
      229,
      138,
      159,
      232,
      175,
      180,
      230,
      152,
      142,
      228,
      190,
      155,
      229,
      186,
      148,
      229,
      173,
      169,
      229,
      173,
      144,
      228,
      184,
      147,
      233,
      162,
      152,
      231,
      168,
      139,
      229,
      186,
      143,
      228,
      184,
      128,
      232,
      136,
      172,
      230,
      156,
      131,
      229,
      147,
      161,
      229,
      143,
      170,
      230,
      156,
      137,
      229,
      133,
      182,
      229,
      174,
      131,
      228,
      191,
      157,
      230,
      138,
      164,
      232,
      128,
      140,
      228,
      184,
      148,
      228,
      187,
      138,
      229,
      164,
      169,
      231,
      170,
      151,
      229,
      143,
      163,
      229,
      138,
      168,
      230,
      128,
      129,
      231,
      138,
      182,
      230,
      128,
      129,
      231,
      137,
      185,
      229,
      136,
      171,
      232,
      174,
      164,
      228,
      184,
      186,
      229,
      191,
      133,
      233,
      161,
      187,
      230,
      155,
      180,
      230,
      150,
      176,
      229,
      176,
      143,
      232,
      175,
      180,
      230,
      136,
      145,
      229,
      128,
      145,
      228,
      189,
      156,
      228,
      184,
      186,
      229,
      170,
      146,
      228,
      189,
      147,
      229,
      140,
      133,
      230,
      139,
      172,
      233,
      130,
      163,
      228,
      185,
      136,
      228,
      184,
      128,
      230,
      160,
      183,
      229,
      155,
      189,
      229,
      134,
      133,
      230,
      152,
      175,
      229,
      144,
      166,
      230,
      160,
      185,
      230,
      141,
      174,
      231,
      148,
      181,
      232,
      167,
      134,
      229,
      173,
      166,
      233,
      153,
      162,
      229,
      133,
      183,
      230,
      156,
      137,
      232,
      191,
      135,
      231,
      168,
      139,
      231,
      148,
      177,
      228,
      186,
      142,
      228,
      186,
      186,
      230,
      137,
      141,
      229,
      135,
      186,
      230,
      157,
      165,
      228,
      184,
      141,
      232,
      191,
      135,
      230,
      173,
      163,
      229,
      156,
      168,
      230,
      152,
      142,
      230,
      152,
      159,
      230,
      149,
      133,
      228,
      186,
      139,
      229,
      133,
      179,
      231,
      179,
      187,
      230,
      160,
      135,
      233,
      162,
      152,
      229,
      149,
      134,
      229,
      138,
      161,
      232,
      190,
      147,
      229,
      133,
      165,
      228,
      184,
      128,
      231,
      155,
      180,
      229,
      159,
      186,
      231,
      161,
      128,
      230,
      149,
      153,
      229,
      173,
      166,
      228,
      186,
      134,
      232,
      167,
      163,
      229,
      187,
      186,
      231,
      173,
      145,
      231,
      187,
      147,
      230,
      158,
      156,
      229,
      133,
      168,
      231,
      144,
      131,
      233,
      128,
      154,
      231,
      159,
      165,
      232,
      174,
      161,
      229,
      136,
      146,
      229,
      175,
      185,
      228,
      186,
      142,
      232,
      137,
      186,
      230,
      156,
      175,
      231,
      155,
      184,
      229,
      134,
      140,
      229,
      143,
      145,
      231,
      148,
      159,
      231,
      156,
      159,
      231,
      154,
      132,
      229,
      187,
      186,
      231,
      171,
      139,
      231,
      173,
      137,
      231,
      186,
      167,
      231,
      177,
      187,
      229,
      158,
      139,
      231,
      187,
      143,
      233,
      170,
      140,
      229,
      174,
      158,
      231,
      142,
      176,
      229,
      136,
      182,
      228,
      189,
      156,
      230,
      157,
      165,
      232,
      135,
      170,
      230,
      160,
      135,
      231,
      173,
      190,
      228,
      187,
      165,
      228,
      184,
      139,
      229,
      142,
      159,
      229,
      136,
      155,
      230,
      151,
      160,
      230,
      179,
      149,
      229,
      133,
      182,
      228,
      184,
      173,
      229,
      128,
      139,
      228,
      186,
      186,
      228,
      184,
      128,
      229,
      136,
      135,
      230,
      140,
      135,
      229,
      141,
      151,
      229,
      133,
      179,
      233,
      151,
      173,
      233,
      155,
      134,
      229,
      155,
      162,
      231,
      172,
      172,
      228,
      184,
      137,
      229,
      133,
      179,
      230,
      179,
      168,
      229,
      155,
      160,
      230,
      173,
      164,
      231,
      133,
      167,
      231,
      137,
      135,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      149,
      134,
      228,
      184,
      154,
      229,
      185,
      191,
      229,
      183,
      158,
      230,
      151,
      165,
      230,
      156,
      159,
      233,
      171,
      152,
      231,
      186,
      167,
      230,
      156,
      128,
      232,
      191,
      145,
      231,
      187,
      188,
      229,
      144,
      136,
      232,
      161,
      168,
      231,
      164,
      186,
      228,
      184,
      147,
      232,
      190,
      145,
      232,
      161,
      140,
      228,
      184,
      186,
      228,
      186,
      164,
      233,
      128,
      154,
      232,
      175,
      132,
      228,
      187,
      183,
      232,
      167,
      137,
      229,
      190,
      151,
      231,
      178,
      190,
      229,
      141,
      142,
      229,
      174,
      182,
      229,
      186,
      173,
      229,
      174,
      140,
      230,
      136,
      144,
      230,
      132,
      159,
      232,
      167,
      137,
      229,
      174,
      137,
      232,
      163,
      133,
      229,
      190,
      151,
      229,
      136,
      176,
      233,
      130,
      174,
      228,
      187,
      182,
      229,
      136,
      182,
      229,
      186,
      166,
      233,
      163,
      159,
      229,
      147,
      129,
      232,
      153,
      189,
      231,
      132,
      182,
      232,
      189,
      172,
      232,
      189,
      189,
      230,
      138,
      165,
      228,
      187,
      183,
      232,
      174,
      176,
      232,
      128,
      133,
      230,
      150,
      185,
      230,
      161,
      136,
      232,
      161,
      140,
      230,
      148,
      191,
      228,
      186,
      186,
      230,
      176,
      145,
      231,
      148,
      168,
      229,
      147,
      129,
      228,
      184,
      156,
      232,
      165,
      191,
      230,
      143,
      144,
      229,
      135,
      186,
      233,
      133,
      146,
      229,
      186,
      151,
      231,
      132,
      182,
      229,
      144,
      142,
      228,
      187,
      152,
      230,
      172,
      190,
      231,
      131,
      173,
      231,
      130,
      185,
      228,
      187,
      165,
      229,
      137,
      141,
      229,
      174,
      140,
      229,
      133,
      168,
      229,
      143,
      145,
      229,
      184,
      150,
      232,
      174,
      190,
      231,
      189,
      174,
      233,
      162,
      134,
      229,
      175,
      188,
      229,
      183,
      165,
      228,
      184,
      154,
      229,
      140,
      187,
      233,
      153,
      162,
      231,
      156,
      139,
      231,
      156,
      139,
      231,
      187,
      143,
      229,
      133,
      184,
      229,
      142,
      159,
      229,
      155,
      160,
      229,
      185,
      179,
      229,
      143,
      176,
      229,
      144,
      132,
      231,
      167,
      141,
      229,
      162,
      158,
      229,
      138,
      160,
      230,
      157,
      144,
      230,
      150,
      153,
      230,
      150,
      176,
      229,
      162,
      158,
      228,
      185,
      139,
      229,
      144,
      142,
      232,
      129,
      140,
      228,
      184,
      154,
      230,
      149,
      136,
      230,
      158,
      156,
      228,
      187,
      138,
      229,
      185,
      180,
      232,
      174,
      186,
      230,
      150,
      135,
      230,
      136,
      145,
      229,
      155,
      189,
      229,
      145,
      138,
      232,
      175,
      137,
      231,
      137,
      136,
      228,
      184,
      187,
      228,
      191,
      174,
      230,
      148,
      185,
      229,
      143,
      130,
      228,
      184,
      142,
      230,
      137,
      147,
      229,
      141,
      176,
      229,
      191,
      171,
      228,
      185,
      144,
      230,
      156,
      186,
      230,
      162,
      176,
      232,
      167,
      130,
      231,
      130,
      185,
      229,
      173,
      152,
      229,
      156,
      168,
      231,
      178,
      190,
      231,
      165,
      158,
      232,
      142,
      183,
      229,
      190,
      151,
      229,
      136,
      169,
      231,
      148,
      168,
      231,
      187,
      167,
      231,
      187,
      173,
      228,
      189,
      160,
      228,
      187,
      172,
      232,
      191,
      153,
      228,
      185,
      136,
      230,
      168,
      161,
      229,
      188,
      143,
      232,
      175,
      173,
      232,
      168,
      128,
      232,
      131,
      189,
      229,
      164,
      159,
      233,
      155,
      133,
      232,
      153,
      142,
      230,
      147,
      141,
      228,
      189,
      156,
      233,
      163,
      142,
      230,
      160,
      188,
      228,
      184,
      128,
      232,
      181,
      183,
      231,
      167,
      145,
      229,
      173,
      166,
      228,
      189,
      147,
      232,
      130,
      178,
      231,
      159,
      173,
      228,
      191,
      161,
      230,
      157,
      161,
      228,
      187,
      182,
      230,
      178,
      187,
      231,
      150,
      151,
      232,
      191,
      144,
      229,
      138,
      168,
      228,
      186,
      167,
      228,
      184,
      154,
      228,
      188,
      154,
      232,
      174,
      174,
      229,
      175,
      188,
      232,
      136,
      170,
      229,
      133,
      136,
      231,
      148,
      159,
      232,
      129,
      148,
      231,
      155,
      159,
      229,
      143,
      175,
      230,
      152,
      175,
      229,
      149,
      143,
      233,
      161,
      140,
      231,
      187,
      147,
      230,
      158,
      132,
      228,
      189,
      156,
      231,
      148,
      168,
      232,
      176,
      131,
      230,
      159,
      165,
      232,
      179,
      135,
      230,
      150,
      153,
      232,
      135,
      170,
      229,
      138,
      168,
      232,
      180,
      159,
      232,
      180,
      163,
      229,
      134,
      156,
      228,
      184,
      154,
      232,
      174,
      191,
      233,
      151,
      174,
      229,
      174,
      158,
      230,
      150,
      189,
      230,
      142,
      165,
      229,
      143,
      151,
      232,
      174,
      168,
      232,
      174,
      186,
      233,
      130,
      163,
      228,
      184,
      170,
      229,
      143,
      141,
      233,
      166,
      136,
      229,
      138,
      160,
      229,
      188,
      186,
      229,
      165,
      179,
      230,
      128,
      167,
      232,
      140,
      131,
      229,
      155,
      180,
      230,
      156,
      141,
      229,
      139,
      153,
      228,
      188,
      145,
      233,
      151,
      178,
      228,
      187,
      138,
      230,
      151,
      165,
      229,
      174,
      162,
      230,
      156,
      141,
      232,
      167,
      128,
      231,
      156,
      139,
      229,
      143,
      130,
      229,
      138,
      160,
      231,
      154,
      132,
      232,
      175,
      157,
      228,
      184,
      128,
      231,
      130,
      185,
      228,
      191,
      157,
      232,
      175,
      129,
      229,
      155,
      190,
      228,
      185,
      166,
      230,
      156,
      137,
      230,
      149,
      136,
      230,
      181,
      139,
      232,
      175,
      149,
      231,
      167,
      187,
      229,
      138,
      168,
      230,
      137,
      141,
      232,
      131,
      189,
      229,
      134,
      179,
      229,
      174,
      154,
      232,
      130,
      161,
      231,
      165,
      168,
      228,
      184,
      141,
      230,
      150,
      173,
      233,
      156,
      128,
      230,
      177,
      130,
      228,
      184,
      141,
      229,
      190,
      151,
      229,
      138,
      158,
      230,
      179,
      149,
      228,
      185,
      139,
      233,
      151,
      180,
      233,
      135,
      135,
      231,
      148,
      168,
      232,
      144,
      165,
      233,
      148,
      128,
      230,
      138,
      149,
      232,
      175,
      137,
      231,
      155,
      174,
      230,
      160,
      135,
      231,
      136,
      177,
      230,
      131,
      133,
      230,
      145,
      132,
      229,
      189,
      177,
      230,
      156,
      137,
      228,
      186,
      155,
      232,
      164,
      135,
      232,
      163,
      189,
      230,
      150,
      135,
      229,
      173,
      166,
      230,
      156,
      186,
      228,
      188,
      154,
      230,
      149,
      176,
      229,
      173,
      151,
      232,
      163,
      133,
      228,
      191,
      174,
      232,
      180,
      173,
      231,
      137,
      169,
      229,
      134,
      156,
      230,
      157,
      145,
      229,
      133,
      168,
      233,
      157,
      162,
      231,
      178,
      190,
      229,
      147,
      129,
      229,
      133,
      182,
      229,
      174,
      158,
      228,
      186,
      139,
      230,
      131,
      133,
      230,
      176,
      180,
      229,
      185,
      179,
      230,
      143,
      144,
      231,
      164,
      186,
      228,
      184,
      138,
      229,
      184,
      130,
      232,
      176,
      162,
      232,
      176,
      162,
      230,
      153,
      174,
      233,
      128,
      154,
      230,
      149,
      153,
      229,
      184,
      136,
      228,
      184,
      138,
      228,
      188,
      160,
      231,
      177,
      187,
      229,
      136,
      171,
      230,
      173,
      140,
      230,
      155,
      178,
      230,
      139,
      165,
      230,
      156,
      137,
      229,
      136,
      155,
      230,
      150,
      176,
      233,
      133,
      141,
      228,
      187,
      182,
      229,
      143,
      170,
      232,
      166,
      129,
      230,
      151,
      182,
      228,
      187,
      163,
      232,
      179,
      135,
      232,
      168,
      138,
      232,
      190,
      190,
      229,
      136,
      176,
      228,
      186,
      186,
      231,
      148,
      159,
      232,
      174,
      162,
      233,
      152,
      133,
      232,
      128,
      129,
      229,
      184,
      136,
      229,
      177,
      149,
      231,
      164,
      186,
      229,
      191,
      131,
      231,
      144,
      134,
      232,
      180,
      180,
      229,
      173,
      144,
      231,
      182,
      178,
      231,
      171,
      153,
      228,
      184,
      187,
      233,
      161,
      140,
      232,
      135,
      170,
      231,
      132,
      182,
      231,
      186,
      167,
      229,
      136,
      171,
      231,
      174,
      128,
      229,
      141,
      149,
      230,
      148,
      185,
      233,
      157,
      169,
      233,
      130,
      163,
      228,
      186,
      155,
      230,
      157,
      165,
      232,
      175,
      180,
      230,
      137,
      147,
      229,
      188,
      128,
      228,
      187,
      163,
      231,
      160,
      129,
      229,
      136,
      160,
      233,
      153,
      164,
      232,
      175,
      129,
      229,
      136,
      184,
      232,
      138,
      130,
      231,
      155,
      174,
      233,
      135,
      141,
      231,
      130,
      185,
      230,
      172,
      161,
      230,
      149,
      184,
      229,
      164,
      154,
      229,
      176,
      145,
      232,
      167,
      132,
      229,
      136,
      146,
      232,
      181,
      132,
      233,
      135,
      145,
      230,
      137,
      190,
      229,
      136,
      176,
      228,
      187,
      165,
      229,
      144,
      142,
      229,
      164,
      167,
      229,
      133,
      168,
      228,
      184,
      187,
      233,
      161,
      181,
      230,
      156,
      128,
      228,
      189,
      179,
      229,
      155,
      158,
      231,
      173,
      148,
      229,
      164,
      169,
      228,
      184,
      139,
      228,
      191,
      157,
      233,
      154,
      156,
      231,
      142,
      176,
      228,
      187,
      163,
      230,
      163,
      128,
      230,
      159,
      165,
      230,
      138,
      149,
      231,
      165,
      168,
      229,
      176,
      143,
      230,
      151,
      182,
      230,
      178,
      146,
      230,
      156,
      137,
      230,
      173,
      163,
      229,
      184,
      184,
      231,
      148,
      154,
      232,
      135,
      179,
      228,
      187,
      163,
      231,
      144,
      134,
      231,
      155,
      174,
      229,
      189,
      149,
      229,
      133,
      172,
      229,
      188,
      128,
      229,
      164,
      141,
      229,
      136,
      182,
      233,
      135,
      145,
      232,
      158,
      141,
      229,
      185,
      184,
      231,
      166,
      143,
      231,
      137,
      136,
      230,
      156,
      172,
      229,
      189,
      162,
      230,
      136,
      144,
      229,
      135,
      134,
      229,
      164,
      135,
      232,
      161,
      140,
      230,
      131,
      133,
      229,
      155,
      158,
      229,
      136,
      176,
      230,
      128,
      157,
      230,
      131,
      179,
      230,
      128,
      142,
      230,
      160,
      183,
      229,
      141,
      143,
      232,
      174,
      174,
      232,
      174,
      164,
      232,
      175,
      129,
      230,
      156,
      128,
      229,
      165,
      189,
      228,
      186,
      167,
      231,
      148,
      159,
      230,
      140,
      137,
      231,
      133,
      167,
      230,
      156,
      141,
      232,
      163,
      133,
      229,
      185,
      191,
      228,
      184,
      156,
      229,
      138,
      168,
      230,
      188,
      171,
      233,
      135,
      135,
      232,
      180,
      173,
      230,
      150,
      176,
      230,
      137,
      139,
      231,
      187,
      132,
      229,
      155,
      190,
      233,
      157,
      162,
      230,
      157,
      191,
      229,
      143,
      130,
      232,
      128,
      131,
      230,
      148,
      191,
      230,
      178,
      187,
      229,
      174,
      185,
      230,
      152,
      147,
      229,
      164,
      169,
      229,
      156,
      176,
      229,
      138,
      170,
      229,
      138,
      155,
      228,
      186,
      186,
      228,
      187,
      172,
      229,
      141,
      135,
      231,
      186,
      167,
      233,
      128,
      159,
      229,
      186,
      166,
      228,
      186,
      186,
      231,
      137,
      169,
      232,
      176,
      131,
      230,
      149,
      180,
      230,
      181,
      129,
      232,
      161,
      140,
      233,
      128,
      160,
      230,
      136,
      144,
      230,
      150,
      135,
      229,
      173,
      151,
      233,
      159,
      169,
      229,
      155,
      189,
      232,
      180,
      184,
      230,
      152,
      147,
      229,
      188,
      128,
      229,
      177,
      149,
      231,
      155,
      184,
      233,
      151,
      156,
      232,
      161,
      168,
      231,
      142,
      176,
      229,
      189,
      177,
      232,
      167,
      134,
      229,
      166,
      130,
      230,
      173,
      164,
      231,
      190,
      142,
      229,
      174,
      185,
      229,
      164,
      167,
      229,
      176,
      143,
      230,
      138,
      165,
      233,
      129,
      147,
      230,
      157,
      161,
      230,
      172,
      190,
      229,
      191,
      131,
      230,
      131,
      133,
      232,
      174,
      184,
      229,
      164,
      154,
      230,
      179,
      149,
      232,
      167,
      132,
      229,
      174,
      182,
      229,
      177,
      133,
      228,
      185,
      166,
      229,
      186,
      151,
      232,
      191,
      158,
      230,
      142,
      165,
      231,
      171,
      139,
      229,
      141,
      179,
      228,
      184,
      190,
      230,
      138,
      165,
      230,
      138,
      128,
      229,
      183,
      167,
      229,
      165,
      165,
      232,
      191,
      144,
      231,
      153,
      187,
      229,
      133,
      165,
      228,
      187,
      165,
      230,
      157,
      165,
      231,
      144,
      134,
      232,
      174,
      186,
      228,
      186,
      139,
      228,
      187,
      182,
      232,
      135,
      170,
      231,
      148,
      177,
      228,
      184,
      173,
      229,
      141,
      142,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      166,
      136,
      229,
      166,
      136,
      231,
      156,
      159,
      230,
      173,
      163,
      228,
      184,
      141,
      233,
      148,
      153,
      229,
      133,
      168,
      230,
      150,
      135,
      229,
      144,
      136,
      229,
      144,
      140,
      228,
      187,
      183,
      229,
      128,
      188,
      229,
      136,
      171,
      228,
      186,
      186,
      231,
      155,
      145,
      231,
      157,
      163,
      229,
      133,
      183,
      228,
      189,
      147,
      228,
      184,
      150,
      231,
      186,
      170,
      229,
      155,
      162,
      233,
      152,
      159,
      229,
      136,
      155,
      228,
      184,
      154,
      230,
      137,
      191,
      230,
      139,
      133,
      229,
      162,
      158,
      233,
      149,
      191,
      230,
      156,
      137,
      228,
      186,
      186,
      228,
      191,
      157,
      230,
      140,
      129,
      229,
      149,
      134,
      229,
      174,
      182,
      231,
      187,
      180,
      228,
      191,
      174,
      229,
      143,
      176,
      230,
      185,
      190,
      229,
      183,
      166,
      229,
      143,
      179,
      232,
      130,
      161,
      228,
      187,
      189,
      231,
      173,
      148,
      230,
      161,
      136,
      229,
      174,
      158,
      233,
      153,
      133,
      231,
      148,
      181,
      228,
      191,
      161,
      231,
      187,
      143,
      231,
      144,
      134,
      231,
      148,
      159,
      229,
      145,
      189,
      229,
      174,
      163,
      228,
      188,
      160,
      228,
      187,
      187,
      229,
      138,
      161,
      230,
      173,
      163,
      229,
      188,
      143,
      231,
      137,
      185,
      232,
      137,
      178,
      228,
      184,
      139,
      230,
      157,
      165,
      229,
      141,
      143,
      228,
      188,
      154,
      229,
      143,
      170,
      232,
      131,
      189,
      229,
      189,
      147,
      231,
      132,
      182,
      233,
      135,
      141,
      230,
      150,
      176,
      229,
      133,
      167,
      229,
      174,
      185,
      230,
      140,
      135,
      229,
      175,
      188,
      232,
      191,
      144,
      232,
      161,
      140,
      230,
      151,
      165,
      229,
      191,
      151,
      232,
      179,
      163,
      229,
      174,
      182,
      232,
      182,
      133,
      232,
      191,
      135,
      229,
      156,
      159,
      229,
      156,
      176,
      230,
      181,
      153,
      230,
      177,
      159,
      230,
      148,
      175,
      228,
      187,
      152,
      230,
      142,
      168,
      229,
      135,
      186,
      231,
      171,
      153,
      233,
      149,
      191,
      230,
      157,
      173,
      229,
      183,
      158,
      230,
      137,
      167,
      232,
      161,
      140,
      229,
      136,
      182,
      233,
      128,
      160,
      228,
      185,
      139,
      228,
      184,
      128,
      230,
      142,
      168,
      229,
      185,
      191,
      231,
      142,
      176,
      229,
      156,
      186,
      230,
      143,
      143,
      232,
      191,
      176,
      229,
      143,
      152,
      229,
      140,
      150,
      228,
      188,
      160,
      231,
      187,
      159,
      230,
      173,
      140,
      230,
      137,
      139,
      228,
      191,
      157,
      233,
      153,
      169,
      232,
      175,
      190,
      231,
      168,
      139,
      229,
      140,
      187,
      231,
      150,
      151,
      231,
      187,
      143,
      232,
      191,
      135,
      232,
      191,
      135,
      229,
      142,
      187,
      228,
      185,
      139,
      229,
      137,
      141,
      230,
      148,
      182,
      229,
      133,
      165,
      229,
      185,
      180,
      229,
      186,
      166,
      230,
      157,
      130,
      229,
      191,
      151,
      231,
      190,
      142,
      228,
      184,
      189,
      230,
      156,
      128,
      233,
      171,
      152,
      231,
      153,
      187,
      233,
      153,
      134,
      230,
      156,
      170,
      230,
      157,
      165,
      229,
      138,
      160,
      229,
      183,
      165,
      229,
      133,
      141,
      232,
      180,
      163,
      230,
      149,
      153,
      231,
      168,
      139,
      231,
      137,
      136,
      229,
      157,
      151,
      232,
      186,
      171,
      228,
      189,
      147,
      233,
      135,
      141,
      229,
      186,
      134,
      229,
      135,
      186,
      229,
      148,
      174,
      230,
      136,
      144,
      230,
      156,
      172,
      229,
      189,
      162,
      229,
      188,
      143,
      229,
      156,
      159,
      232,
      177,
      134,
      229,
      135,
      186,
      229,
      131,
      185,
      228,
      184,
      156,
      230,
      150,
      185,
      233,
      130,
      174,
      231,
      174,
      177,
      229,
      141,
      151,
      228,
      186,
      172,
      230,
      177,
      130,
      232,
      129,
      140,
      229,
      143,
      150,
      229,
      190,
      151,
      232,
      129,
      140,
      228,
      189,
      141,
      231,
      155,
      184,
      228,
      191,
      161,
      233,
      161,
      181,
      233,
      157,
      162,
      229,
      136,
      134,
      233,
      146,
      159,
      231,
      189,
      145,
      233,
      161,
      181,
      231,
      161,
      174,
      229,
      174,
      154,
      229,
      155,
      190,
      228,
      190,
      139,
      231,
      189,
      145,
      229,
      157,
      128,
      231,
      167,
      175,
      230,
      158,
      129,
      233,
      148,
      153,
      232,
      175,
      175,
      231,
      155,
      174,
      231,
      154,
      132,
      229,
      174,
      157,
      232,
      180,
      157,
      230,
      156,
      186,
      229,
      133,
      179,
      233,
      163,
      142,
      233,
      153,
      169,
      230,
      142,
      136,
      230,
      157,
      131,
      231,
      151,
      133,
      230,
      175,
      146,
      229,
      174,
      160,
      231,
      137,
      169,
      233,
      153,
      164,
      228,
      186,
      134,
      232,
      169,
      149,
      232,
      171,
      150,
      231,
      150,
      190,
      231,
      151,
      133,
      229,
      143,
      138,
      230,
      151,
      182,
      230,
      177,
      130,
      232,
      180,
      173,
      231,
      171,
      153,
      231,
      130,
      185,
      229,
      132,
      191,
      231,
      171,
      165,
      230,
      175,
      143,
      229,
      164,
      169,
      228,
      184,
      173,
      229,
      164,
      174,
      232,
      174,
      164,
      232,
      175,
      134,
      230,
      175,
      143,
      228,
      184,
      170,
      229,
      164,
      169,
      230,
      180,
      165,
      229,
      173,
      151,
      228,
      189,
      147,
      229,
      143,
      176,
      231,
      129,
      163,
      231,
      187,
      180,
      230,
      138,
      164,
      230,
      156,
      172,
      233,
      161,
      181,
      228,
      184,
      170,
      230,
      128,
      167,
      229,
      174,
      152,
      230,
      150,
      185,
      229,
      184,
      184,
      232,
      167,
      129,
      231,
      155,
      184,
      230,
      156,
      186,
      230,
      136,
      152,
      231,
      149,
      165,
      229,
      186,
      148,
      229,
      189,
      147,
      229,
      190,
      139,
      229,
      184,
      136,
      230,
      150,
      185,
      228,
      190,
      191,
      230,
      160,
      161,
      229,
      155,
      173,
      232,
      130,
      161,
      229,
      184,
      130,
      230,
      136,
      191,
      229,
      177,
      139,
      230,
      160,
      143,
      231,
      155,
      174,
      229,
      145,
      152,
      229,
      183,
      165,
      229,
      175,
      188,
      232,
      135,
      180,
      231,
      170,
      129,
      231,
      132,
      182,
      233,
      129,
      147,
      229,
      133,
      183,
      230,
      156,
      172,
      231,
      189,
      145,
      231,
      187,
      147,
      229,
      144,
      136,
      230,
      161,
      163,
      230,
      161,
      136,
      229,
      138,
      179,
      229,
      138,
      168,
      229,
      143,
      166,
      229,
      164,
      150,
      231,
      190,
      142,
      229,
      133,
      131,
      229,
      188,
      149,
      232,
      181,
      183,
      230,
      148,
      185,
      229,
      143,
      152,
      231,
      172,
      172,
      229,
      155,
      155,
      228,
      188,
      154,
      232,
      174,
      161,
      232,
      170,
      170,
      230,
      152,
      142,
      233,
      154,
      144,
      231,
      167,
      129,
      229,
      174,
      157,
      229,
      174,
      157,
      232,
      167,
      132,
      232,
      140,
      131,
      230,
      182,
      136,
      232,
      180,
      185,
      229,
      133,
      177,
      229,
      144,
      140,
      229,
      191,
      152,
      232,
      174,
      176,
      228,
      189,
      147,
      231,
      179,
      187,
      229,
      184,
      166,
      230,
      157,
      165,
      229,
      144,
      141,
      229,
      173,
      151,
      231,
      153,
      188,
      232,
      161,
      168,
      229,
      188,
      128,
      230,
      148,
      190,
      229,
      138,
      160,
      231,
      155,
      159,
      229,
      143,
      151,
      229,
      136,
      176,
      228,
      186,
      140,
      230,
      137,
      139,
      229,
      164,
      167,
      233,
      135,
      143,
      230,
      136,
      144,
      228,
      186,
      186,
      230,
      149,
      176,
      233,
      135,
      143,
      229,
      133,
      177,
      228,
      186,
      171,
      229,
      140,
      186,
      229,
      159,
      159,
      229,
      165,
      179,
      229,
      173,
      169,
      229,
      142,
      159,
      229,
      136,
      153,
      230,
      137,
      128,
      229,
      156,
      168,
      231,
      187,
      147,
      230,
      157,
      159,
      233,
      128,
      154,
      228,
      191,
      161,
      232,
      182,
      133,
      231,
      186,
      167,
      233,
      133,
      141,
      231,
      189,
      174,
      229,
      189,
      147,
      230,
      151,
      182,
      228,
      188,
      152,
      231,
      167,
      128,
      230,
      128,
      167,
      230,
      132,
      159,
      230,
      136,
      191,
      228,
      186,
      167,
      233,
      129,
      138,
      230,
      136,
      178,
      229,
      135,
      186,
      229,
      143,
      163,
      230,
      143,
      144,
      228,
      186,
      164,
      229,
      176,
      177,
      228,
      184,
      154,
      228,
      191,
      157,
      229,
      129,
      165,
      231,
      168,
      139,
      229,
      186,
      166,
      229,
      143,
      130,
      230,
      149,
      176,
      228,
      186,
      139,
      228,
      184,
      154,
      230,
      149,
      180,
      228,
      184,
      170,
      229,
      177,
      177,
      228,
      184,
      156,
      230,
      131,
      133,
      230,
      132,
      159,
      231,
      137,
      185,
      230,
      174,
      138,
      229,
      136,
      134,
      233,
      161,
      158,
      230,
      144,
      156,
      229,
      176,
      139,
      229,
      177,
      158,
      228,
      186,
      142,
      233,
      151,
      168,
      230,
      136,
      183,
      232,
      180,
      162,
      229,
      138,
      161,
      229,
      163,
      176,
      233,
      159,
      179,
      229,
      143,
      138,
      229,
      133,
      182,
      232,
      180,
      162,
      231,
      187,
      143,
      229,
      157,
      154,
      230,
      140,
      129,
      229,
      185,
      178,
      233,
      131,
      168,
      230,
      136,
      144,
      231,
      171,
      139,
      229,
      136,
      169,
      231,
      155,
      138,
      232,
      128,
      131,
      232,
      153,
      145,
      230,
      136,
      144,
      233,
      131,
      189,
      229,
      140,
      133,
      232,
      163,
      133,
      231,
      148,
      168,
      230,
      136,
      182,
      230,
      175,
      148,
      232,
      181,
      155,
      230,
      150,
      135,
      230,
      152,
      142,
      230,
      139,
      155,
      229,
      149,
      134,
      229,
      174,
      140,
      230,
      149,
      180,
      231,
      156,
      159,
      230,
      152,
      175,
      231,
      156,
      188,
      231,
      157,
      155,
      228,
      188,
      153,
      228,
      188,
      180,
      229,
      168,
      129,
      230,
      156,
      155,
      233,
      162,
      134,
      229,
      159,
      159,
      229,
      141,
      171,
      231,
      148,
      159,
      228,
      188,
      152,
      230,
      131,
      160,
      232,
      171,
      150,
      229,
      163,
      135,
      229,
      133,
      172,
      229,
      133,
      177,
      232,
      137,
      175,
      229,
      165,
      189,
      229,
      133,
      133,
      229,
      136,
      134,
      231,
      172,
      166,
      229,
      144,
      136,
      233,
      153,
      132,
      228,
      187,
      182,
      231,
      137,
      185,
      231,
      130,
      185,
      228,
      184,
      141,
      229,
      143,
      175,
      232,
      139,
      177,
      230,
      150,
      135,
      232,
      181,
      132,
      228,
      186,
      167,
      230,
      160,
      185,
      230,
      156,
      172,
      230,
      152,
      142,
      230,
      152,
      190,
      229,
      175,
      134,
      231,
      162,
      188,
      229,
      133,
      172,
      228,
      188,
      151,
      230,
      176,
      145,
      230,
      151,
      143,
      230,
      155,
      180,
      229,
      138,
      160,
      228,
      186,
      171,
      229,
      143,
      151,
      229,
      144,
      140,
      229,
      173,
      166,
      229,
      144,
      175,
      229,
      138,
      168,
      233,
      128,
      130,
      229,
      144,
      136,
      229,
      142,
      159,
      230,
      157,
      165,
      233,
      151,
      174,
      231,
      173,
      148,
      230,
      156,
      172,
      230,
      150,
      135,
      231,
      190,
      142,
      233,
      163,
      159,
      231,
      187,
      191,
      232,
      137,
      178,
      231,
      168,
      179,
      229,
      174,
      154,
      231,
      187,
      136,
      228,
      186,
      142,
      231,
      148,
      159,
      231,
      137,
      169,
      228,
      190,
      155,
      230,
      177,
      130,
      230,
      144,
      156,
      231,
      139,
      144,
      229,
      138,
      155,
      233,
      135,
      143,
      228,
      184,
      165,
      233,
      135,
      141,
      230,
      176,
      184,
      232,
      191,
      156,
      229,
      134,
      153,
      231,
      156,
      159,
      230,
      156,
      137,
      233,
      153,
      144,
      231,
      171,
      158,
      228,
      186,
      137,
      229,
      175,
      185,
      232,
      177,
      161,
      232,
      180,
      185,
      231,
      148,
      168,
      228,
      184,
      141,
      229,
      165,
      189,
      231,
      187,
      157,
      229,
      175,
      185,
      229,
      141,
      129,
      229,
      136,
      134,
      228,
      191,
      131,
      232,
      191,
      155,
      231,
      130,
      185,
      232,
      175,
      132,
      229,
      189,
      177,
      233,
      159,
      179,
      228,
      188,
      152,
      229,
      138,
      191,
      228,
      184,
      141,
      229,
      176,
      145,
      230,
      172,
      163,
      232,
      181,
      143,
      229,
      185,
      182,
      228,
      184,
      148,
      230,
      156,
      137,
      231,
      130,
      185,
      230,
      150,
      185,
      229,
      144,
      145,
      229,
      133,
      168,
      230,
      150,
      176,
      228,
      191,
      161,
      231,
      148,
      168,
      232,
      174,
      190,
      230,
      150,
      189,
      229,
      189,
      162,
      232,
      177,
      161,
      232,
      181,
      132,
      230,
      160,
      188,
      231,
      170,
      129,
      231,
      160,
      180,
      233,
      154,
      143,
      231,
      157,
      128,
      233,
      135,
      141,
      229,
      164,
      167,
      228,
      186,
      142,
      230,
      152,
      175,
      230,
      175,
      149,
      228,
      184,
      154,
      230,
      153,
      186,
      232,
      131,
      189,
      229,
      140,
      150,
      229,
      183,
      165,
      229,
      174,
      140,
      231,
      190,
      142,
      229,
      149,
      134,
      229,
      159,
      142,
      231,
      187,
      159,
      228,
      184,
      128,
      229,
      135,
      186,
      231,
      137,
      136,
      230,
      137,
      147,
      233,
      128,
      160,
      231,
      148,
      162,
      229,
      147,
      129,
      230,
      166,
      130,
      229,
      134,
      181,
      231,
      148,
      168,
      228,
      186,
      142,
      228,
      191,
      157,
      231,
      149,
      153,
      229,
      155,
      160,
      231,
      180,
      160,
      228,
      184,
      173,
      229,
      156,
      139,
      229,
      173,
      152,
      229,
      130,
      168,
      232,
      180,
      180,
      229,
      155,
      190,
      230,
      156,
      128,
      230,
      132,
      155,
      233,
      149,
      191,
      230,
      156,
      159,
      229,
      143,
      163,
      228,
      187,
      183,
      231,
      144,
      134,
      232,
      180,
      162,
      229,
      159,
      186,
      229,
      156,
      176,
      229,
      174,
      137,
      230,
      142,
      146,
      230,
      173,
      166,
      230,
      177,
      137,
      233,
      135,
      140,
      233,
      157,
      162,
      229,
      136,
      155,
      229,
      187,
      186,
      229,
      164,
      169,
      231,
      169,
      186,
      233,
      166,
      150,
      229,
      133,
      136,
      229,
      174,
      140,
      229,
      150,
      132,
      233,
      169,
      177,
      229,
      138,
      168,
      228,
      184,
      139,
      233,
      157,
      162,
      228,
      184,
      141,
      229,
      134,
      141,
      232,
      175,
      154,
      228,
      191,
      161,
      230,
      132,
      143,
      228,
      185,
      137,
      233,
      152,
      179,
      229,
      133,
      137,
      232,
      139,
      177,
      229,
      155,
      189,
      230,
      188,
      130,
      228,
      186,
      174,
      229,
      134,
      155,
      228,
      186,
      139,
      231,
      142,
      169,
      229,
      174,
      182,
      231,
      190,
      164,
      228,
      188,
      151,
      229,
      134,
      156,
      230,
      176,
      145,
      229,
      141,
      179,
      229,
      143,
      175,
      229,
      144,
      141,
      231,
      168,
      177,
      229,
      174,
      182,
      229,
      133,
      183,
      229,
      138,
      168,
      231,
      148,
      187,
      230,
      131,
      179,
      229,
      136,
      176,
      230,
      179,
      168,
      230,
      152,
      142,
      229,
      176,
      143,
      229,
      173,
      166,
      230,
      128,
      167,
      232,
      131,
      189,
      232,
      128,
      131,
      231,
      160,
      148,
      231,
      161,
      172,
      228,
      187,
      182,
      232,
      167,
      130,
      231,
      156,
      139,
      230,
      184,
      133,
      230,
      165,
      154,
      230,
      144,
      158,
      231,
      172,
      145,
      233,
      166,
      150,
      233,
      160,
      129,
      233,
      187,
      132,
      233,
      135,
      145,
      233,
      128,
      130,
      231,
      148,
      168,
      230,
      177,
      159,
      232,
      139,
      143,
      231,
      156,
      159,
      229,
      174,
      158,
      228,
      184,
      187,
      231,
      174,
      161,
      233,
      152,
      182,
      230,
      174,
      181,
      232,
      168,
      187,
      229,
      134,
      138,
      231,
      191,
      187,
      232,
      175,
      145,
      230,
      157,
      131,
      229,
      136,
      169,
      229,
      129,
      154,
      229,
      165,
      189,
      228,
      188,
      188,
      228,
      185,
      142,
      233,
      128,
      154,
      232,
      174,
      175,
      230,
      150,
      189,
      229,
      183,
      165,
      231,
      139,
      128,
      230,
      133,
      139,
      228,
      185,
      159,
      232,
      174,
      184,
      231,
      142,
      175,
      228,
      191,
      157,
      229,
      159,
      185,
      229,
      133,
      187,
      230,
      166,
      130,
      229,
      191,
      181,
      229,
      164,
      167,
      229,
      158,
      139,
      230,
      156,
      186,
      231,
      165,
      168,
      231,
      144,
      134,
      232,
      167,
      163,
      229,
      140,
      191,
      229,
      144,
      141,
      99,
      117,
      97,
      110,
      100,
      111,
      101,
      110,
      118,
      105,
      97,
      114,
      109,
      97,
      100,
      114,
      105,
      100,
      98,
      117,
      115,
      99,
      97,
      114,
      105,
      110,
      105,
      99,
      105,
      111,
      116,
      105,
      101,
      109,
      112,
      111,
      112,
      111,
      114,
      113,
      117,
      101,
      99,
      117,
      101,
      110,
      116,
      97,
      101,
      115,
      116,
      97,
      100,
      111,
      112,
      117,
      101,
      100,
      101,
      110,
      106,
      117,
      101,
      103,
      111,
      115,
      99,
      111,
      110,
      116,
      114,
      97,
      101,
      115,
      116,
      195,
      161,
      110,
      110,
      111,
      109,
      98,
      114,
      101,
      116,
      105,
      101,
      110,
      101,
      110,
      112,
      101,
      114,
      102,
      105,
      108,
      109,
      97,
      110,
      101,
      114,
      97,
      97,
      109,
      105,
      103,
      111,
      115,
      99,
      105,
      117,
      100,
      97,
      100,
      99,
      101,
      110,
      116,
      114,
      111,
      97,
      117,
      110,
      113,
      117,
      101,
      112,
      117,
      101,
      100,
      101,
      115,
      100,
      101,
      110,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      101,
      103,
      195,
      186,
      110,
      98,
      117,
      101,
      110,
      111,
      115,
      118,
      111,
      108,
      118,
      101,
      114,
      112,
      117,
      110,
      116,
      111,
      115,
      115,
      101,
      109,
      97,
      110,
      97,
      104,
      97,
      98,
      195,
      173,
      97,
      97,
      103,
      111,
      115,
      116,
      111,
      110,
      117,
      101,
      118,
      111,
      115,
      117,
      110,
      105,
      100,
      111,
      115,
      99,
      97,
      114,
      108,
      111,
      115,
      101,
      113,
      117,
      105,
      112,
      111,
      110,
      105,
      195,
      177,
      111,
      115,
      109,
      117,
      99,
      104,
      111,
      115,
      97,
      108,
      103,
      117,
      110,
      97,
      99,
      111,
      114,
      114,
      101,
      111,
      105,
      109,
      97,
      103,
      101,
      110,
      112,
      97,
      114,
      116,
      105,
      114,
      97,
      114,
      114,
      105,
      98,
      97,
      109,
      97,
      114,
      195,
      173,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      101,
      109,
      112,
      108,
      101,
      111,
      118,
      101,
      114,
      100,
      97,
      100,
      99,
      97,
      109,
      98,
      105,
      111,
      109,
      117,
      99,
      104,
      97,
      115,
      102,
      117,
      101,
      114,
      111,
      110,
      112,
      97,
      115,
      97,
      100,
      111,
      108,
      195,
      173,
      110,
      101,
      97,
      112,
      97,
      114,
      101,
      99,
      101,
      110,
      117,
      101,
      118,
      97,
      115,
      99,
      117,
      114,
      115,
      111,
      115,
      101,
      115,
      116,
      97,
      98,
      97,
      113,
      117,
      105,
      101,
      114,
      111,
      108,
      105,
      98,
      114,
      111,
      115,
      99,
      117,
      97,
      110,
      116,
      111,
      97,
      99,
      99,
      101,
      115,
      111,
      109,
      105,
      103,
      117,
      101,
      108,
      118,
      97,
      114,
      105,
      111,
      115,
      99,
      117,
      97,
      116,
      114,
      111,
      116,
      105,
      101,
      110,
      101,
      115,
      103,
      114,
      117,
      112,
      111,
      115,
      115,
      101,
      114,
      195,
      161,
      110,
      101,
      117,
      114,
      111,
      112,
      97,
      109,
      101,
      100,
      105,
      111,
      115,
      102,
      114,
      101,
      110,
      116,
      101,
      97,
      99,
      101,
      114,
      99,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      111,
      102,
      101,
      114,
      116,
      97,
      99,
      111,
      99,
      104,
      101,
      115,
      109,
      111,
      100,
      101,
      108,
      111,
      105,
      116,
      97,
      108,
      105,
      97,
      108,
      101,
      116,
      114,
      97,
      115,
      97,
      108,
      103,
      195,
      186,
      110,
      99,
      111,
      109,
      112,
      114,
      97,
      99,
      117,
      97,
      108,
      101,
      115,
      101,
      120,
      105,
      115,
      116,
      101,
      99,
      117,
      101,
      114,
      112,
      111,
      115,
      105,
      101,
      110,
      100,
      111,
      112,
      114,
      101,
      110,
      115,
      97,
      108,
      108,
      101,
      103,
      97,
      114,
      118,
      105,
      97,
      106,
      101,
      115,
      100,
      105,
      110,
      101,
      114,
      111,
      109,
      117,
      114,
      99,
      105,
      97,
      112,
      111,
      100,
      114,
      195,
      161,
      112,
      117,
      101,
      115,
      116,
      111,
      100,
      105,
      97,
      114,
      105,
      111,
      112,
      117,
      101,
      98,
      108,
      111,
      113,
      117,
      105,
      101,
      114,
      101,
      109,
      97,
      110,
      117,
      101,
      108,
      112,
      114,
      111,
      112,
      105,
      111,
      99,
      114,
      105,
      115,
      105,
      115,
      99,
      105,
      101,
      114,
      116,
      111,
      115,
      101,
      103,
      117,
      114,
      111,
      109,
      117,
      101,
      114,
      116,
      101,
      102,
      117,
      101,
      110,
      116,
      101,
      99,
      101,
      114,
      114,
      97,
      114,
      103,
      114,
      97,
      110,
      100,
      101,
      101,
      102,
      101,
      99,
      116,
      111,
      112,
      97,
      114,
      116,
      101,
      115,
      109,
      101,
      100,
      105,
      100,
      97,
      112,
      114,
      111,
      112,
      105,
      97,
      111,
      102,
      114,
      101,
      99,
      101,
      116,
      105,
      101,
      114,
      114,
      97,
      101,
      45,
      109,
      97,
      105,
      108,
      118,
      97,
      114,
      105,
      97,
      115,
      102,
      111,
      114,
      109,
      97,
      115,
      102,
      117,
      116,
      117,
      114,
      111,
      111,
      98,
      106,
      101,
      116,
      111,
      115,
      101,
      103,
      117,
      105,
      114,
      114,
      105,
      101,
      115,
      103,
      111,
      110,
      111,
      114,
      109,
      97,
      115,
      109,
      105,
      115,
      109,
      111,
      115,
      195,
      186,
      110,
      105,
      99,
      111,
      99,
      97,
      109,
      105,
      110,
      111,
      115,
      105,
      116,
      105,
      111,
      115,
      114,
      97,
      122,
      195,
      179,
      110,
      100,
      101,
      98,
      105,
      100,
      111,
      112,
      114,
      117,
      101,
      98,
      97,
      116,
      111,
      108,
      101,
      100,
      111,
      116,
      101,
      110,
      195,
      173,
      97,
      106,
      101,
      115,
      195,
      186,
      115,
      101,
      115,
      112,
      101,
      114,
      111,
      99,
      111,
      99,
      105,
      110,
      97,
      111,
      114,
      105,
      103,
      101,
      110,
      116,
      105,
      101,
      110,
      100,
      97,
      99,
      105,
      101,
      110,
      116,
      111,
      99,
      195,
      161,
      100,
      105,
      122,
      104,
      97,
      98,
      108,
      97,
      114,
      115,
      101,
      114,
      195,
      173,
      97,
      108,
      97,
      116,
      105,
      110,
      97,
      102,
      117,
      101,
      114,
      122,
      97,
      101,
      115,
      116,
      105,
      108,
      111,
      103,
      117,
      101,
      114,
      114,
      97,
      101,
      110,
      116,
      114,
      97,
      114,
      195,
      169,
      120,
      105,
      116,
      111,
      108,
      195,
      179,
      112,
      101,
      122,
      97,
      103,
      101,
      110,
      100,
      97,
      118,
      195,
      173,
      100,
      101,
      111,
      101,
      118,
      105,
      116,
      97,
      114,
      112,
      97,
      103,
      105,
      110,
      97,
      109,
      101,
      116,
      114,
      111,
      115,
      106,
      97,
      118,
      105,
      101,
      114,
      112,
      97,
      100,
      114,
      101,
      115,
      102,
      195,
      161,
      99,
      105,
      108,
      99,
      97,
      98,
      101,
      122,
      97,
      195,
      161,
      114,
      101,
      97,
      115,
      115,
      97,
      108,
      105,
      100,
      97,
      101,
      110,
      118,
      195,
      173,
      111,
      106,
      97,
      112,
      195,
      179,
      110,
      97,
      98,
      117,
      115,
      111,
      115,
      98,
      105,
      101,
      110,
      101,
      115,
      116,
      101,
      120,
      116,
      111,
      115,
      108,
      108,
      101,
      118,
      97,
      114,
      112,
      117,
      101,
      100,
      97,
      110,
      102,
      117,
      101,
      114,
      116,
      101,
      99,
      111,
      109,
      195,
      186,
      110,
      99,
      108,
      97,
      115,
      101,
      115,
      104,
      117,
      109,
      97,
      110,
      111,
      116,
      101,
      110,
      105,
      100,
      111,
      98,
      105,
      108,
      98,
      97,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      116,
      195,
      161,
      115,
      101,
      100,
      105,
      116,
      97,
      114,
      99,
      114,
      101,
      97,
      100,
      111,
      208,
      180,
      208,
      187,
      209,
      143,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      187,
      208,
      184,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      181,
      209,
      137,
      208,
      181,
      209,
      131,
      208,
      182,
      208,
      181,
      208,
      154,
      208,
      176,
      208,
      186,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      184,
      208,
      146,
      209,
      129,
      208,
      181,
      208,
      191,
      208,
      190,
      208,
      180,
      208,
      173,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      135,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      187,
      208,
      181,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      180,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      181,
      208,
      148,
      208,
      187,
      209,
      143,
      208,
      159,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      209,
      133,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      186,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      178,
      208,
      190,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      188,
      208,
      161,
      208,
      168,
      208,
      144,
      208,
      188,
      208,
      176,
      209,
      143,
      208,
      167,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      129,
      208,
      178,
      208,
      176,
      208,
      188,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      162,
      208,
      176,
      208,
      186,
      208,
      180,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      141,
      209,
      130,
      209,
      131,
      208,
      146,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      181,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      209,
      131,
      209,
      130,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      180,
      208,
      189,
      209,
      143,
      208,
      146,
      208,
      190,
      209,
      130,
      209,
      130,
      209,
      128,
      208,
      184,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      146,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      130,
      208,
      190,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      158,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      189,
      208,
      181,
      208,
      181,
      208,
      158,
      208,
      158,
      208,
      158,
      208,
      187,
      208,
      184,
      209,
      134,
      209,
      141,
      209,
      130,
      208,
      176,
      208,
      158,
      208,
      189,
      208,
      176,
      208,
      189,
      208,
      181,
      208,
      188,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      178,
      208,
      181,
      208,
      190,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      131,
      208,
      180,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      148,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      143,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      165,
      224,
      164,
      190,
      106,
      97,
      103,
      114,
      97,
      110,
      224,
      164,
      134,
      224,
      164,
      156,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      133,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      135,
      224,
      164,
      165,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      136,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      136,
      224,
      164,
      168,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      147,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      154,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      178,
      224,
      165,
      128,
      216,
      185,
      217,
      132,
      217,
      137,
      216,
      165,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      216,
      167,
      216,
      162,
      216,
      174,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      137,
      217,
      135,
      216,
      176,
      217,
      135,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      186,
      217,
      138,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      134,
      217,
      136,
      217,
      132,
      216,
      167,
      216,
      168,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      176,
      217,
      132,
      217,
      131,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      138,
      217,
      136,
      217,
      133,
      217,
      130,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      138,
      216,
      167,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      173,
      216,
      170,
      217,
      137,
      217,
      130,
      216,
      168,
      217,
      132,
      217,
      136,
      216,
      173,
      216,
      169,
      216,
      167,
      216,
      174,
      216,
      177,
      217,
      129,
      217,
      130,
      216,
      183,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      177,
      217,
      131,
      217,
      134,
      216,
      165,
      216,
      176,
      216,
      167,
      217,
      131,
      217,
      133,
      216,
      167,
      216,
      167,
      216,
      173,
      216,
      175,
      216,
      165,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      168,
      216,
      185,
      216,
      182,
      217,
      131,
      217,
      138,
      217,
      129,
      216,
      168,
      216,
      173,
      216,
      171,
      217,
      136,
      217,
      133,
      217,
      134,
      217,
      136,
      217,
      135,
      217,
      136,
      216,
      163,
      217,
      134,
      216,
      167,
      216,
      172,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      135,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      132,
      217,
      138,
      216,
      179,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      181,
      217,
      132,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      176,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      171,
      217,
      132,
      217,
      131,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      138,
      216,
      171,
      217,
      133,
      216,
      181,
      216,
      177,
      216,
      180,
      216,
      177,
      216,
      173,
      216,
      173,
      217,
      136,
      217,
      132,
      217,
      136,
      217,
      129,
      217,
      138,
      216,
      167,
      216,
      176,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      168,
      217,
      136,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      163,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      134,
      217,
      135,
      216,
      167,
      217,
      132,
      217,
      138,
      216,
      185,
      216,
      182,
      217,
      136,
      217,
      136,
      217,
      130,
      216,
      175,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      168,
      217,
      134,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      161,
      217,
      136,
      217,
      135,
      217,
      138,
      216,
      167,
      216,
      168,
      217,
      136,
      217,
      130,
      216,
      181,
      216,
      181,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      177,
      217,
      130,
      217,
      133,
      216,
      163,
      216,
      173,
      216,
      175,
      217,
      134,
      216,
      173,
      217,
      134,
      216,
      185,
      216,
      175,
      217,
      133,
      216,
      177,
      216,
      163,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      217,
      138,
      216,
      172,
      216,
      168,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      170,
      216,
      173,
      216,
      170,
      216,
      172,
      217,
      135,
      216,
      169,
      216,
      179,
      217,
      134,
      216,
      169,
      217,
      138,
      216,
      170,
      217,
      133,
      217,
      131,
      216,
      177,
      216,
      169,
      216,
      186,
      216,
      178,
      216,
      169,
      217,
      134,
      217,
      129,
      216,
      179,
      216,
      168,
      217,
      138,
      216,
      170,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      170,
      217,
      132,
      217,
      131,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      185,
      217,
      134,
      217,
      135,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      161,
      217,
      134,
      217,
      136,
      216,
      177,
      216,
      163,
      217,
      133,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      168,
      217,
      131,
      217,
      132,
      216,
      176,
      216,
      167,
      216,
      170,
      216,
      177,
      216,
      170,
      216,
      168,
      216,
      168,
      216,
      163,
      217,
      134,
      217,
      135,
      217,
      133,
      216,
      179,
      216,
      167,
      217,
      134,
      217,
      131,
      216,
      168,
      217,
      138,
      216,
      185,
      217,
      129,
      217,
      130,
      216,
      175,
      216,
      173,
      216,
      179,
      217,
      134,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      217,
      135,
      217,
      132,
      216,
      180,
      217,
      135,
      216,
      177,
      217,
      130,
      216,
      183,
      216,
      177,
      216,
      183,
      217,
      132,
      216,
      168,
      112,
      114,
      111,
      102,
      105,
      108,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      104,
      105,
      109,
      115,
      101,
      108,
      102,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      97,
      115,
      104,
      105,
      111,
      110,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      114,
      117,
      110,
      110,
      105,
      110,
      103,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      111,
      98,
      106,
      101,
      99,
      116,
      115,
      118,
      105,
      115,
      105,
      98,
      108,
      101,
      119,
      101,
      108,
      99,
      111,
      109,
      101,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      117,
      110,
      107,
      110,
      111,
      119,
      110,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      100,
      121,
      110,
      97,
      109,
      105,
      99,
      98,
      114,
      111,
      119,
      115,
      101,
      114,
      112,
      114,
      105,
      118,
      97,
      99,
      121,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      111,
      112,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      118,
      105,
      115,
      105,
      116,
      101,
      100,
      119,
      101,
      97,
      116,
      104,
      101,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      102,
      111,
      114,
      119,
      97,
      114,
      100,
      121,
      111,
      117,
      32,
      99,
      97,
      110,
      114,
      101,
      109,
      111,
      118,
      101,
      100,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      114,
      101,
      97,
      100,
      105,
      110,
      103,
      108,
      105,
      98,
      114,
      97,
      114,
      121,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      109,
      97,
      110,
      97,
      103,
      101,
      114,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      115,
      117,
      109,
      109,
      97,
      114,
      121,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      109,
      105,
      110,
      117,
      116,
      101,
      115,
      112,
      114,
      105,
      118,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      111,
      99,
      105,
      101,
      116,
      121,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      101,
      110,
      97,
      98,
      108,
      101,
      100,
      116,
      114,
      105,
      103,
      103,
      101,
      114,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      108,
      111,
      97,
      100,
      105,
      110,
      103,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      102,
      101,
      99,
      116,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      115,
      121,
      115,
      116,
      101,
      109,
      115,
      107,
      101,
      101,
      112,
      105,
      110,
      103,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      44,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      112,
      105,
      114,
      101,
      115,
      114,
      101,
      118,
      105,
      101,
      119,
      115,
      98,
      97,
      108,
      97,
      110,
      99,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      80,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      118,
      105,
      108,
      108,
      97,
      103,
      101,
      83,
      112,
      97,
      110,
      105,
      115,
      104,
      103,
      97,
      108,
      108,
      101,
      114,
      121,
      100,
      101,
      99,
      108,
      105,
      110,
      101,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      115,
      112,
      101,
      99,
      105,
      101,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      119,
      114,
      105,
      116,
      101,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      114,
      101,
      112,
      111,
      114,
      116,
      115,
      102,
      105,
      103,
      117,
      114,
      101,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      111,
      108,
      100,
      105,
      110,
      103,
      100,
      105,
      115,
      112,
      117,
      116,
      101,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      100,
      105,
      103,
      105,
      116,
      97,
      108,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      65,
      110,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      114,
      114,
      105,
      101,
      100,
      116,
      114,
      97,
      102,
      102,
      105,
      99,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      115,
      116,
      117,
      100,
      105,
      101,
      115,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      109,
      117,
      115,
      116,
      32,
      98,
      101,
      115,
      99,
      104,
      111,
      111,
      108,
      115,
      86,
      101,
      114,
      115,
      105,
      111,
      110,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      101,
      112,
      105,
      115,
      111,
      100,
      101,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      103,
      114,
      111,
      119,
      105,
      110,
      103,
      111,
      98,
      118,
      105,
      111,
      117,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      121,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      117,
      108,
      62,
      13,
      10,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      108,
      105,
      116,
      121,
      115,
      116,
      111,
      114,
      97,
      103,
      101,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      100,
      101,
      115,
      107,
      116,
      111,
      112,
      111,
      102,
      102,
      101,
      114,
      101,
      100,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      117,
      110,
      117,
      115,
      117,
      97,
      108,
      68,
      105,
      103,
      105,
      116,
      97,
      108,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      87,
      101,
      98,
      115,
      105,
      116,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      114,
      101,
      100,
      117,
      99,
      101,
      100,
      65,
      110,
      100,
      114,
      111,
      105,
      100,
      100,
      101,
      99,
      97,
      100,
      101,
      115,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      32,
      38,
      97,
      109,
      112,
      59,
      32,
      97,
      110,
      105,
      109,
      97,
      108,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      65,
      117,
      116,
      111,
      109,
      97,
      116,
      103,
      101,
      116,
      116,
      105,
      110,
      103,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      110,
      111,
      116,
      104,
      105,
      110,
      103,
      80,
      111,
      112,
      117,
      108,
      97,
      114,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      61,
      49,
      38,
      97,
      109,
      112,
      59,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      61,
      32,
      110,
      101,
      119,
      32,
      67,
      101,
      110,
      116,
      114,
      97,
      108,
      117,
      112,
      100,
      97,
      116,
      101,
      100,
      83,
      112,
      101,
      99,
      105,
      97,
      108,
      78,
      101,
      116,
      119,
      111,
      114,
      107,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      119,
      97,
      114,
      110,
      105,
      110,
      103,
      67,
      111,
      108,
      108,
      101,
      103,
      101,
      116,
      111,
      111,
      108,
      98,
      97,
      114,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      68,
      101,
      117,
      116,
      115,
      99,
      104,
      102,
      105,
      110,
      97,
      110,
      99,
      101,
      119,
      111,
      114,
      107,
      101,
      114,
      115,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      101,
      120,
      97,
      99,
      116,
      108,
      121,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      100,
      105,
      115,
      101,
      97,
      115,
      101,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      119,
      101,
      97,
      112,
      111,
      110,
      115,
      101,
      120,
      104,
      105,
      98,
      105,
      116,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      67,
      111,
      110,
      116,
      114,
      111,
      108,
      99,
      108,
      97,
      115,
      115,
      101,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      111,
      117,
      116,
      108,
      105,
      110,
      101,
      97,
      116,
      116,
      97,
      99,
      107,
      115,
      100,
      101,
      118,
      105,
      99,
      101,
      115,
      40,
      119,
      105,
      110,
      100,
      111,
      119,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      77,
      111,
      98,
      105,
      108,
      101,
      32,
      107,
      105,
      108,
      108,
      105,
      110,
      103,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      100,
      114,
      111,
      112,
      112,
      101,
      100,
      104,
      101,
      97,
      118,
      105,
      108,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      45,
      49,
      39,
      93,
      41,
      59,
      10,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      115,
      104,
      97,
      114,
      105,
      110,
      103,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      100,
      114,
      97,
      119,
      105,
      110,
      103,
      98,
      105,
      108,
      108,
      105,
      111,
      110,
      111,
      114,
      100,
      101,
      114,
      101,
      100,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      99,
      97,
      116,
      97,
      108,
      111,
      103,
      65,
      114,
      116,
      105,
      99,
      108,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      117,
      110,
      105,
      102,
      111,
      114,
      109,
      106,
      111,
      117,
      114,
      110,
      101,
      121,
      115,
      105,
      100,
      101,
      98,
      97,
      114,
      67,
      104,
      105,
      99,
      97,
      103,
      111,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      97,
      115,
      115,
      97,
      103,
      101,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      110,
      105,
      109,
      97,
      116,
      101,
      102,
      101,
      101,
      108,
      105,
      110,
      103,
      97,
      114,
      114,
      105,
      118,
      101,
      100,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      114,
      111,
      117,
      103,
      104,
      108,
      121,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      98,
      117,
      116,
      32,
      110,
      111,
      116,
      100,
      101,
      110,
      115,
      105,
      116,
      121,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      67,
      104,
      105,
      110,
      101,
      115,
      101,
      108,
      97,
      99,
      107,
      32,
      111,
      102,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      102,
      97,
      99,
      116,
      111,
      114,
      115,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      116,
      104,
      97,
      116,
      32,
      105,
      115,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      104,
      117,
      115,
      98,
      97,
      110,
      100,
      105,
      110,
      32,
      102,
      97,
      99,
      116,
      97,
      102,
      102,
      97,
      105,
      114,
      115,
      67,
      104,
      97,
      114,
      108,
      101,
      115,
      114,
      97,
      100,
      105,
      99,
      97,
      108,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      108,
      97,
      110,
      100,
      105,
      110,
      103,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      112,
      108,
      97,
      110,
      110,
      101,
      100,
      112,
      114,
      101,
      109,
      105,
      117,
      109,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      69,
      100,
      105,
      116,
      105,
      111,
      110,
      93,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      101,
      115,
      115,
      97,
      103,
      101,
      110,
      101,
      101,
      100,
      32,
      116,
      111,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      45,
      109,
      111,
      98,
      105,
      108,
      101,
      114,
      101,
      99,
      111,
      114,
      100,
      115,
      119,
      97,
      110,
      116,
      32,
      116,
      111,
      107,
      105,
      110,
      100,
      32,
      111,
      102,
      70,
      105,
      114,
      101,
      102,
      111,
      120,
      121,
      111,
      117,
      32,
      97,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      115,
      116,
      117,
      100,
      105,
      101,
      100,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      105,
      110,
      103,
      114,
      97,
      112,
      105,
      100,
      108,
      121,
      99,
      108,
      105,
      109,
      97,
      116,
      101,
      107,
      105,
      110,
      103,
      100,
      111,
      109,
      101,
      109,
      101,
      114,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      115,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      112,
      105,
      111,
      110,
      101,
      101,
      114,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      100,
      121,
      110,
      97,
      115,
      116,
      121,
      104,
      111,
      119,
      32,
      116,
      111,
      32,
      83,
      117,
      112,
      112,
      111,
      114,
      116,
      114,
      101,
      118,
      101,
      110,
      117,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      82,
      101,
      115,
      117,
      108,
      116,
      115,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      111,
      108,
      100,
      105,
      101,
      114,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      99,
      97,
      108,
      108,
      105,
      110,
      103,
      46,
      38,
      113,
      117,
      111,
      116,
      59,
      65,
      99,
      99,
      111,
      117,
      110,
      116,
      69,
      100,
      119,
      97,
      114,
      100,
      32,
      115,
      101,
      103,
      109,
      101,
      110,
      116,
      82,
      111,
      98,
      101,
      114,
      116,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      80,
      97,
      99,
      105,
      102,
      105,
      99,
      108,
      101,
      97,
      114,
      110,
      101,
      100,
      117,
      112,
      32,
      119,
      105,
      116,
      104,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      119,
      101,
      32,
      104,
      97,
      118,
      101,
      65,
      110,
      103,
      101,
      108,
      101,
      115,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      95,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      97,
      99,
      113,
      117,
      105,
      114,
      101,
      109,
      97,
      115,
      115,
      105,
      118,
      101,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      58,
      32,
      102,
      97,
      108,
      115,
      101,
      116,
      114,
      101,
      97,
      116,
      101,
      100,
      98,
      105,
      103,
      103,
      101,
      115,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      100,
      114,
      105,
      118,
      105,
      110,
      103,
      83,
      116,
      117,
      100,
      105,
      101,
      115,
      109,
      105,
      110,
      105,
      109,
      117,
      109,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      109,
      111,
      114,
      110,
      105,
      110,
      103,
      115,
      101,
      108,
      108,
      105,
      110,
      103,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      118,
      101,
      114,
      115,
      101,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      109,
      105,
      115,
      115,
      105,
      110,
      103,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      112,
      114,
      111,
      109,
      111,
      116,
      101,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      111,
      109,
      101,
      111,
      110,
      101,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      114,
      101,
      115,
      116,
      111,
      114,
      101,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      97,
      108,
      108,
      32,
      116,
      104,
      101,
      115,
      105,
      116,
      101,
      109,
      97,
      112,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      119,
      97,
      121,
      32,
      116,
      111,
      32,
      32,
      65,
      117,
      103,
      117,
      115,
      116,
      115,
      121,
      109,
      98,
      111,
      108,
      115,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      109,
      97,
      116,
      116,
      101,
      114,
      115,
      109,
      117,
      115,
      105,
      99,
      97,
      108,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      115,
      101,
      114,
      118,
      105,
      110,
      103,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      116,
      114,
      111,
      117,
      98,
      108,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      116,
      115,
      112,
      108,
      97,
      121,
      101,
      114,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      32,
      39,
      39,
      84,
      104,
      101,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      100,
      97,
      112,
      116,
      101,
      100,
      71,
      97,
      108,
      108,
      101,
      114,
      121,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      101,
      110,
      104,
      97,
      110,
      99,
      101,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      41,
      46,
      32,
      84,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      83,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      101,
      120,
      105,
      115,
      116,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      108,
      101,
      114,
      112,
      114,
      105,
      110,
      116,
      101,
      100,
      99,
      111,
      110,
      115,
      111,
      108,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      110,
      101,
      120,
      112,
      111,
      114,
      116,
      115,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      67,
      104,
      97,
      110,
      110,
      101,
      108,
      105,
      108,
      108,
      101,
      103,
      97,
      108,
      110,
      101,
      117,
      116,
      114,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      95,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      105,
      103,
      110,
      105,
      110,
      103,
      46,
      104,
      116,
      109,
      108,
      34,
      62,
      115,
      101,
      116,
      116,
      108,
      101,
      100,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      99,
      97,
      117,
      115,
      105,
      110,
      103,
      45,
      119,
      101,
      98,
      107,
      105,
      116,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      74,
      117,
      115,
      116,
      105,
      99,
      101,
      99,
      104,
      97,
      112,
      116,
      101,
      114,
      118,
      105,
      99,
      116,
      105,
      109,
      115,
      84,
      104,
      111,
      109,
      97,
      115,
      32,
      109,
      111,
      122,
      105,
      108,
      108,
      97,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      58,
      102,
      97,
      108,
      115,
      101,
      44,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      79,
      108,
      121,
      109,
      112,
      105,
      99,
      95,
      98,
      117,
      116,
      116,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      99,
      104,
      114,
      111,
      110,
      105,
      99,
      100,
      101,
      109,
      97,
      110,
      100,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      110,
      101,
      105,
      116,
      104,
      101,
      114,
      103,
      114,
      101,
      97,
      116,
      108,
      121,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      111,
      118,
      101,
      114,
      97,
      108,
      108,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      119,
      111,
      114,
      115,
      104,
      105,
      112,
      102,
      117,
      110,
      100,
      105,
      110,
      103,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      117,
      116,
      105,
      108,
      105,
      116,
      121,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      67,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      101,
      115,
      116,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      108,
      121,
      101,
      120,
      112,
      111,
      115,
      101,
      100,
      66,
      114,
      111,
      119,
      115,
      101,
      114,
      108,
      105,
      98,
      101,
      114,
      97,
      108,
      125,
      32,
      99,
      97,
      116,
      99,
      104,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      104,
      105,
      100,
      101,
      40,
      41,
      59,
      70,
      108,
      111,
      114,
      105,
      100,
      97,
      97,
      110,
      115,
      119,
      101,
      114,
      115,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      100,
      101,
      102,
      101,
      110,
      115,
      101,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      83,
      101,
      118,
      101,
      114,
      97,
      108,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      33,
      61,
      32,
      110,
      117,
      108,
      108,
      116,
      114,
      97,
      105,
      110,
      101,
      100,
      68,
      101,
      110,
      109,
      97,
      114,
      107,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      47,
      97,
      108,
      108,
      46,
      106,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      83,
      116,
      101,
      112,
      104,
      101,
      110,
      10,
      10,
      87,
      104,
      101,
      110,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      60,
      47,
      104,
      50,
      62,
      13,
      10,
      77,
      111,
      100,
      101,
      114,
      110,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      115,
      46,
      10,
      10,
      70,
      111,
      114,
      32,
      10,
      10,
      77,
      97,
      110,
      121,
      32,
      97,
      114,
      116,
      105,
      115,
      116,
      115,
      112,
      111,
      119,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      109,
      101,
      100,
      105,
      99,
      97,
      108,
      116,
      105,
      99,
      107,
      101,
      116,
      115,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      119,
      105,
      116,
      110,
      101,
      115,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      101,
      71,
      101,
      111,
      114,
      103,
      101,
      32,
      66,
      101,
      108,
      103,
      105,
      117,
      109,
      46,
      46,
      46,
      60,
      47,
      97,
      62,
      116,
      119,
      105,
      116,
      116,
      101,
      114,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      119,
      97,
      105,
      116,
      105,
      110,
      103,
      119,
      97,
      114,
      102,
      97,
      114,
      101,
      32,
      79,
      116,
      104,
      101,
      114,
      32,
      114,
      97,
      110,
      107,
      105,
      110,
      103,
      112,
      104,
      114,
      97,
      115,
      101,
      115,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      118,
      105,
      118,
      101,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      60,
      47,
      112,
      62,
      13,
      10,
      32,
      67,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      103,
      110,
      111,
      114,
      101,
      100,
      108,
      111,
      115,
      115,
      32,
      111,
      102,
      106,
      117,
      115,
      116,
      32,
      97,
      115,
      71,
      101,
      111,
      114,
      103,
      105,
      97,
      115,
      116,
      114,
      97,
      110,
      103,
      101,
      60,
      104,
      101,
      97,
      100,
      62,
      60,
      115,
      116,
      111,
      112,
      112,
      101,
      100,
      49,
      39,
      93,
      41,
      59,
      13,
      10,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      49,
      48,
      48,
      44,
      48,
      48,
      48,
      60,
      47,
      104,
      51,
      62,
      10,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      98,
      101,
      99,
      111,
      109,
      101,
      115,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      119,
      101,
      100,
      100,
      105,
      110,
      103,
      48,
      48,
      46,
      104,
      116,
      109,
      108,
      109,
      111,
      110,
      97,
      114,
      99,
      104,
      111,
      102,
      102,
      32,
      116,
      104,
      101,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      104,
      105,
      103,
      104,
      108,
      121,
      32,
      98,
      105,
      111,
      108,
      111,
      103,
      121,
      108,
      105,
      102,
      101,
      32,
      111,
      102,
      111,
      114,
      32,
      101,
      118,
      101,
      110,
      114,
      105,
      115,
      101,
      32,
      111,
      102,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      112,
      108,
      117,
      115,
      111,
      110,
      101,
      104,
      117,
      110,
      116,
      105,
      110,
      103,
      40,
      116,
      104,
      111,
      117,
      103,
      104,
      68,
      111,
      117,
      103,
      108,
      97,
      115,
      106,
      111,
      105,
      110,
      105,
      110,
      103,
      99,
      105,
      114,
      99,
      108,
      101,
      115,
      70,
      111,
      114,
      32,
      116,
      104,
      101,
      65,
      110,
      99,
      105,
      101,
      110,
      116,
      86,
      105,
      101,
      116,
      110,
      97,
      109,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      99,
      114,
      121,
      115,
      116,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      32,
      61,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      101,
      110,
      106,
      111,
      121,
      101,
      100,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      60,
      97,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      65,
      108,
      108,
      32,
      114,
      105,
      104,
      111,
      119,
      32,
      116,
      104,
      101,
      68,
      105,
      115,
      112,
      108,
      97,
      121,
      114,
      101,
      116,
      105,
      114,
      101,
      100,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      98,
      97,
      116,
      116,
      108,
      101,
      115,
      115,
      101,
      101,
      107,
      105,
      110,
      103,
      99,
      97,
      98,
      105,
      110,
      101,
      116,
      119,
      97,
      115,
      32,
      110,
      111,
      116,
      108,
      111,
      111,
      107,
      32,
      97,
      116,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      103,
      101,
      116,
      32,
      116,
      104,
      101,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      115,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      97,
      58,
      104,
      111,
      118,
      101,
      114,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      32,
      108,
      97,
      99,
      107,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      101,
      120,
      116,
      114,
      97,
      99,
      116,
      101,
      110,
      101,
      109,
      105,
      101,
      115,
      101,
      118,
      101,
      110,
      32,
      105,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      47,
      115,
      101,
      97,
      114,
      99,
      104,
      98,
      101,
      108,
      105,
      101,
      102,
      115,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      115,
      116,
      97,
      116,
      105,
      99,
      46,
      108,
      111,
      103,
      105,
      110,
      34,
      62,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      118,
      105,
      111,
      108,
      101,
      110,
      116,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      102,
      105,
      114,
      115,
      116,
      34,
      62,
      99,
      105,
      114,
      99,
      117,
      105,
      116,
      70,
      105,
      110,
      108,
      97,
      110,
      100,
      99,
      104,
      101,
      109,
      105,
      115,
      116,
      115,
      104,
      101,
      32,
      119,
      97,
      115,
      49,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      115,
      32,
      115,
      117,
      99,
      104,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      108,
      105,
      110,
      101,
      32,
      111,
      102,
      97,
      32,
      103,
      114,
      101,
      97,
      116,
      109,
      121,
      115,
      116,
      101,
      114,
      121,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      102,
      97,
      108,
      108,
      105,
      110,
      103,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      114,
      97,
      105,
      108,
      119,
      97,
      121,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      109,
      111,
      110,
      115,
      116,
      101,
      114,
      100,
      101,
      115,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      119,
      105,
      116,
      104,
      110,
      117,
      99,
      108,
      101,
      97,
      114,
      74,
      101,
      119,
      105,
      115,
      104,
      32,
      112,
      114,
      111,
      116,
      101,
      115,
      116,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      102,
      108,
      111,
      119,
      101,
      114,
      115,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      114,
      101,
      102,
      111,
      114,
      109,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      119,
      104,
      111,
      32,
      119,
      97,
      115,
      108,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      116,
      115,
      117,
      105,
      99,
      105,
      100,
      101,
      103,
      101,
      110,
      101,
      114,
      105,
      99,
      112,
      101,
      114,
      105,
      111,
      100,
      115,
      109,
      97,
      114,
      107,
      101,
      116,
      115,
      83,
      111,
      99,
      105,
      97,
      108,
      32,
      102,
      105,
      115,
      104,
      105,
      110,
      103,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      119,
      105,
      110,
      110,
      101,
      114,
      115,
      60,
      98,
      114,
      32,
      47,
      62,
      60,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      117,
      114,
      97,
      108,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      99,
      111,
      111,
      107,
      105,
      101,
      115,
      111,
      117,
      116,
      99,
      111,
      109,
      101,
      114,
      101,
      115,
      111,
      108,
      118,
      101,
      83,
      119,
      101,
      100,
      105,
      115,
      104,
      98,
      114,
      105,
      101,
      102,
      108,
      121,
      80,
      101,
      114,
      115,
      105,
      97,
      110,
      115,
      111,
      32,
      109,
      117,
      99,
      104,
      67,
      101,
      110,
      116,
      117,
      114,
      121,
      100,
      101,
      112,
      105,
      99,
      116,
      115,
      99,
      111,
      108,
      117,
      109,
      110,
      115,
      104,
      111,
      117,
      115,
      105,
      110,
      103,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      110,
      101,
      120,
      116,
      32,
      116,
      111,
      98,
      101,
      97,
      114,
      105,
      110,
      103,
      109,
      97,
      112,
      112,
      105,
      110,
      103,
      114,
      101,
      118,
      105,
      115,
      101,
      100,
      106,
      81,
      117,
      101,
      114,
      121,
      40,
      45,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      83,
      101,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      115,
      84,
      117,
      114,
      107,
      105,
      115,
      104,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      46,
      109,
      97,
      116,
      99,
      104,
      40,
      125,
      41,
      40,
      41,
      59,
      10,
      10,
      98,
      117,
      114,
      110,
      105,
      110,
      103,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      115,
      111,
      117,
      114,
      99,
      101,
      61,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      112,
      108,
      97,
      115,
      116,
      105,
      99,
      101,
      110,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      116,
      114,
      62,
      13,
      10,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      112,
      104,
      121,
      115,
      105,
      99,
      115,
      102,
      97,
      105,
      108,
      105,
      110,
      103,
      101,
      120,
      101,
      99,
      117,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      115,
      116,
      108,
      105,
      110,
      107,
      32,
      116,
      111,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      60,
      98,
      114,
      32,
      47,
      62,
      10,
      58,
      32,
      116,
      114,
      117,
      101,
      44,
      99,
      104,
      97,
      114,
      116,
      101,
      114,
      116,
      111,
      117,
      114,
      105,
      115,
      109,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      60,
      47,
      104,
      49,
      62,
      13,
      10,
      111,
      110,
      108,
      105,
      110,
      101,
      46,
      63,
      120,
      109,
      108,
      32,
      118,
      101,
      104,
      101,
      108,
      112,
      105,
      110,
      103,
      100,
      105,
      97,
      109,
      111,
      110,
      100,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      97,
      105,
      114,
      108,
      105,
      110,
      101,
      101,
      110,
      100,
      32,
      45,
      45,
      62,
      41,
      46,
      97,
      116,
      116,
      114,
      40,
      114,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      115,
      116,
      105,
      110,
      103,
      35,
      102,
      102,
      102,
      102,
      102,
      102,
      114,
      101,
      97,
      108,
      105,
      122,
      101,
      86,
      105,
      110,
      99,
      101,
      110,
      116,
      115,
      105,
      103,
      110,
      97,
      108,
      115,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      100,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      108,
      108,
      105,
      110,
      103,
      80,
      117,
      98,
      108,
      105,
      99,
      32,
      104,
      101,
      108,
      100,
      32,
      105,
      110,
      74,
      111,
      115,
      101,
      112,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      114,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      115,
      60,
      115,
      116,
      121,
      108,
      101,
      62,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      100,
      111,
      101,
      115,
      110,
      39,
      116,
      108,
      97,
      116,
      101,
      114,
      44,
      32,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      99,
      114,
      101,
      97,
      116,
      111,
      114,
      72,
      117,
      110,
      103,
      97,
      114,
      121,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      115,
      101,
      101,
      32,
      116,
      104,
      101,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      83,
      121,
      115,
      116,
      101,
      109,
      115,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      44,
      32,
      97,
      110,
      100,
      32,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      114,
      97,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      10,
      112,
      101,
      114,
      115,
      111,
      110,
      115,
      71,
      111,
      108,
      100,
      101,
      110,
      32,
      65,
      102,
      102,
      97,
      105,
      114,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      111,
      108,
      100,
      101,
      115,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      99,
      97,
      114,
      116,
      111,
      111,
      110,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      67,
      111,
      109,
      109,
      111,
      110,
      115,
      77,
      117,
      115,
      108,
      105,
      109,
      115,
      87,
      104,
      97,
      116,
      32,
      105,
      115,
      105,
      110,
      32,
      109,
      97,
      110,
      121,
      109,
      97,
      114,
      107,
      105,
      110,
      103,
      114,
      101,
      118,
      101,
      97,
      108,
      115,
      73,
      110,
      100,
      101,
      101,
      100,
      44,
      101,
      113,
      117,
      97,
      108,
      108,
      121,
      47,
      115,
      104,
      111,
      119,
      95,
      97,
      111,
      117,
      116,
      100,
      111,
      111,
      114,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      65,
      117,
      115,
      116,
      114,
      105,
      97,
      103,
      101,
      110,
      101,
      116,
      105,
      99,
      115,
      121,
      115,
      116,
      101,
      109,
      44,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      116,
      105,
      110,
      103,
      72,
      101,
      32,
      97,
      108,
      115,
      111,
      73,
      115,
      108,
      97,
      110,
      100,
      115,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      10,
      9,
      9,
      60,
      33,
      45,
      45,
      68,
      97,
      110,
      105,
      101,
      108,
      32,
      98,
      105,
      110,
      100,
      105,
      110,
      103,
      98,
      108,
      111,
      99,
      107,
      34,
      62,
      105,
      109,
      112,
      111,
      115,
      101,
      100,
      117,
      116,
      105,
      108,
      105,
      122,
      101,
      65,
      98,
      114,
      97,
      104,
      97,
      109,
      40,
      101,
      120,
      99,
      101,
      112,
      116,
      123,
      119,
      105,
      100,
      116,
      104,
      58,
      112,
      117,
      116,
      116,
      105,
      110,
      103,
      41,
      46,
      104,
      116,
      109,
      108,
      40,
      124,
      124,
      32,
      91,
      93,
      59,
      10,
      68,
      65,
      84,
      65,
      91,
      32,
      42,
      107,
      105,
      116,
      99,
      104,
      101,
      110,
      109,
      111,
      117,
      110,
      116,
      101,
      100,
      97,
      99,
      116,
      117,
      97,
      108,
      32,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      109,
      97,
      105,
      110,
      108,
      121,
      32,
      95,
      98,
      108,
      97,
      110,
      107,
      39,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      120,
      112,
      101,
      114,
      116,
      115,
      105,
      102,
      40,
      116,
      121,
      112,
      101,
      73,
      116,
      32,
      97,
      108,
      115,
      111,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      34,
      62,
      84,
      101,
      114,
      109,
      115,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      101,
      97,
      115,
      116,
      101,
      114,
      110,
      116,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      103,
      97,
      105,
      110,
      101,
      100,
      32,
      111,
      110,
      103,
      111,
      105,
      110,
      103,
      106,
      117,
      115,
      116,
      105,
      102,
      121,
      99,
      114,
      105,
      116,
      105,
      99,
      115,
      102,
      97,
      99,
      116,
      111,
      114,
      121,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      97,
      115,
      115,
      97,
      117,
      108,
      116,
      105,
      110,
      118,
      105,
      116,
      101,
      100,
      108,
      97,
      115,
      116,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      111,
      119,
      110,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      99,
      111,
      110,
      99,
      101,
      114,
      116,
      100,
      105,
      97,
      103,
      114,
      97,
      109,
      100,
      111,
      108,
      108,
      97,
      114,
      115,
      99,
      108,
      117,
      115,
      116,
      101,
      114,
      112,
      104,
      112,
      63,
      105,
      100,
      61,
      97,
      108,
      99,
      111,
      104,
      111,
      108,
      41,
      59,
      125,
      41,
      40,
      41,
      59,
      117,
      115,
      105,
      110,
      103,
      32,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      115,
      115,
      101,
      108,
      115,
      114,
      101,
      118,
      105,
      118,
      97,
      108,
      65,
      100,
      100,
      114,
      101,
      115,
      115,
      97,
      109,
      97,
      116,
      101,
      117,
      114,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      105,
      108,
      108,
      110,
      101,
      115,
      115,
      119,
      97,
      108,
      107,
      105,
      110,
      103,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      113,
      117,
      97,
      108,
      105,
      102,
      121,
      109,
      97,
      116,
      99,
      104,
      101,
      115,
      117,
      110,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      116,
      105,
      110,
      99,
      116,
      68,
      101,
      102,
      101,
      110,
      115,
      101,
      100,
      105,
      101,
      100,
      32,
      105,
      110,
      10,
      9,
      60,
      33,
      45,
      45,
      32,
      99,
      117,
      115,
      116,
      111,
      109,
      115,
      108,
      105,
      110,
      107,
      105,
      110,
      103,
      76,
      105,
      116,
      116,
      108,
      101,
      32,
      66,
      111,
      111,
      107,
      32,
      111,
      102,
      101,
      118,
      101,
      110,
      105,
      110,
      103,
      109,
      105,
      110,
      46,
      106,
      115,
      63,
      97,
      114,
      101,
      32,
      116,
      104,
      101,
      107,
      111,
      110,
      116,
      97,
      107,
      116,
      116,
      111,
      100,
      97,
      121,
      39,
      115,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      119,
      101,
      97,
      114,
      105,
      110,
      103,
      65,
      108,
      108,
      32,
      82,
      105,
      103,
      59,
      10,
      125,
      41,
      40,
      41,
      59,
      114,
      97,
      105,
      115,
      105,
      110,
      103,
      32,
      65,
      108,
      115,
      111,
      44,
      32,
      99,
      114,
      117,
      99,
      105,
      97,
      108,
      97,
      98,
      111,
      117,
      116,
      34,
      62,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      45,
      45,
      62,
      10,
      60,
      115,
      99,
      102,
      105,
      114,
      101,
      102,
      111,
      120,
      97,
      115,
      32,
      109,
      117,
      99,
      104,
      97,
      112,
      112,
      108,
      105,
      101,
      115,
      105,
      110,
      100,
      101,
      120,
      44,
      32,
      115,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      10,
      13,
      10,
      60,
      33,
      45,
      45,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      82,
      101,
      99,
      111,
      114,
      100,
      115,
      80,
      114,
      105,
      118,
      97,
      116,
      101,
      70,
      111,
      114,
      101,
      105,
      103,
      110,
      80,
      114,
      101,
      109,
      105,
      101,
      114,
      99,
      104,
      111,
      105,
      99,
      101,
      115,
      86,
      105,
      114,
      116,
      117,
      97,
      108,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      67,
      111,
      109,
      109,
      101,
      110,
      116,
      80,
      111,
      119,
      101,
      114,
      101,
      100,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      112,
      111,
      118,
      101,
      114,
      116,
      121,
      99,
      104,
      97,
      109,
      98,
      101,
      114,
      76,
      105,
      118,
      105,
      110,
      103,
      32,
      118,
      111,
      108,
      117,
      109,
      101,
      115,
      65,
      110,
      116,
      104,
      111,
      110,
      121,
      108,
      111,
      103,
      105,
      110,
      34,
      32,
      82,
      101,
      108,
      97,
      116,
      101,
      100,
      69,
      99,
      111,
      110,
      111,
      109,
      121,
      114,
      101,
      97,
      99,
      104,
      101,
      115,
      99,
      117,
      116,
      116,
      105,
      110,
      103,
      103,
      114,
      97,
      118,
      105,
      116,
      121,
      108,
      105,
      102,
      101,
      32,
      105,
      110,
      67,
      104,
      97,
      112,
      116,
      101,
      114,
      45,
      115,
      104,
      97,
      100,
      111,
      119,
      78,
      111,
      116,
      97,
      98,
      108,
      101,
      60,
      47,
      116,
      100,
      62,
      13,
      10,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      115,
      116,
      97,
      100,
      105,
      117,
      109,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      116,
      114,
      97,
      118,
      101,
      108,
      115,
      104,
      101,
      108,
      100,
      32,
      98,
      121,
      119,
      104,
      111,
      32,
      97,
      114,
      101,
      119,
      111,
      114,
      107,
      32,
      105,
      110,
      102,
      97,
      99,
      117,
      108,
      116,
      121,
      97,
      110,
      103,
      117,
      108,
      97,
      114,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      97,
      105,
      114,
      112,
      111,
      114,
      116,
      116,
      111,
      119,
      110,
      32,
      111,
      102,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      39,
      99,
      108,
      105,
      99,
      107,
      39,
      99,
      104,
      97,
      114,
      103,
      101,
      115,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      105,
      116,
      32,
      119,
      105,
      108,
      108,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      40,
      116,
      104,
      105,
      115,
      41,
      59,
      65,
      110,
      100,
      114,
      101,
      119,
      32,
      117,
      110,
      105,
      113,
      117,
      101,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      51,
      48,
      48,
      112,
      120,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      59,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      104,
      101,
      114,
      115,
      101,
      108,
      102,
      83,
      116,
      97,
      116,
      105,
      111,
      110,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      115,
      101,
      110,
      116,
      32,
      116,
      111,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      99,
      116,
      114,
      101,
      115,
      115,
      99,
      111,
      109,
      101,
      32,
      116,
      111,
      102,
      105,
      110,
      103,
      101,
      114,
      115,
      68,
      117,
      107,
      101,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      44,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      104,
      97,
      114,
      109,
      111,
      110,
      121,
      97,
      32,
      109,
      97,
      106,
      111,
      114,
      34,
      58,
      34,
      104,
      116,
      116,
      112,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      109,
      101,
      110,
      117,
      34,
      62,
      10,
      109,
      111,
      110,
      116,
      104,
      108,
      121,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      99,
      111,
      117,
      110,
      99,
      105,
      108,
      103,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      118,
      101,
      110,
      32,
      105,
      110,
      83,
      117,
      109,
      109,
      97,
      114,
      121,
      100,
      97,
      116,
      101,
      32,
      111,
      102,
      108,
      111,
      121,
      97,
      108,
      116,
      121,
      102,
      105,
      116,
      110,
      101,
      115,
      115,
      97,
      110,
      100,
      32,
      119,
      97,
      115,
      101,
      109,
      112,
      101,
      114,
      111,
      114,
      115,
      117,
      112,
      114,
      101,
      109,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      101,
      97,
      114,
      105,
      110,
      103,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      108,
      111,
      110,
      103,
      101,
      115,
      116,
      65,
      108,
      98,
      101,
      114,
      116,
      97,
      108,
      97,
      116,
      101,
      114,
      97,
      108,
      115,
      101,
      116,
      32,
      111,
      102,
      32,
      115,
      109,
      97,
      108,
      108,
      34,
      62,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      100,
      111,
      32,
      119,
      105,
      116,
      104,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      98,
      97,
      110,
      107,
      32,
      111,
      102,
      98,
      101,
      110,
      101,
      97,
      116,
      104,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      67,
      97,
      112,
      105,
      116,
      97,
      108,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      41,
      44,
      32,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      102,
      114,
      111,
      109,
      99,
      108,
      111,
      115,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      73,
      110,
      115,
      116,
      101,
      97,
      100,
      102,
      105,
      102,
      116,
      101,
      101,
      110,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      46,
      121,
      97,
      104,
      111,
      111,
      46,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      102,
      105,
      103,
      104,
      116,
      101,
      114,
      111,
      98,
      115,
      99,
      117,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      99,
      61,
      32,
      77,
      97,
      116,
      104,
      46,
      101,
      100,
      105,
      116,
      105,
      110,
      103,
      111,
      110,
      108,
      105,
      110,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      97,
      32,
      119,
      104,
      111,
      108,
      101,
      111,
      110,
      101,
      114,
      114,
      111,
      114,
      121,
      101,
      97,
      114,
      32,
      111,
      102,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      97,
      114,
      114,
      105,
      101,
      114,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      104,
      101,
      97,
      100,
      101,
      114,
      32,
      104,
      111,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      115,
      117,
      109,
      101,
      100,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      104,
      101,
      97,
      116,
      105,
      110,
      103,
      114,
      101,
      116,
      97,
      105,
      110,
      115,
      99,
      108,
      111,
      117,
      100,
      102,
      114,
      119,
      97,
      121,
      32,
      111,
      102,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      49,
      107,
      110,
      111,
      119,
      105,
      110,
      103,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      66,
      101,
      116,
      119,
      101,
      101,
      110,
      108,
      101,
      115,
      115,
      111,
      110,
      115,
      99,
      108,
      111,
      115,
      101,
      115,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      99,
      114,
      111,
      115,
      115,
      101,
      100,
      69,
      78,
      68,
      32,
      45,
      45,
      62,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      76,
      105,
      99,
      101,
      110,
      115,
      101,
      72,
      101,
      97,
      108,
      116,
      104,
      32,
      102,
      97,
      105,
      114,
      108,
      121,
      32,
      119,
      101,
      97,
      108,
      116,
      104,
      121,
      109,
      105,
      110,
      105,
      109,
      97,
      108,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      108,
      97,
      98,
      101,
      108,
      34,
      62,
      115,
      105,
      110,
      103,
      105,
      110,
      103,
      102,
      97,
      114,
      109,
      101,
      114,
      115,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      71,
      114,
      101,
      103,
      111,
      114,
      121,
      102,
      111,
      110,
      116,
      32,
      99,
      111,
      112,
      117,
      114,
      115,
      117,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      109,
      97,
      107,
      101,
      32,
      117,
      112,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      98,
      111,
      116,
      104,
      32,
      111,
      102,
      98,
      108,
      111,
      99,
      107,
      101,
      100,
      115,
      97,
      119,
      32,
      116,
      104,
      101,
      111,
      102,
      102,
      105,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      117,
      114,
      115,
      105,
      102,
      40,
      100,
      111,
      99,
      117,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      112,
      117,
      115,
      104,
      40,
      102,
      117,
      65,
      117,
      103,
      117,
      115,
      116,
      32,
      85,
      84,
      70,
      45,
      56,
      34,
      62,
      70,
      97,
      110,
      116,
      97,
      115,
      121,
      105,
      110,
      32,
      109,
      111,
      115,
      116,
      105,
      110,
      106,
      117,
      114,
      101,
      100,
      85,
      115,
      117,
      97,
      108,
      108,
      121,
      102,
      97,
      114,
      109,
      105,
      110,
      103,
      99,
      108,
      111,
      115,
      117,
      114,
      101,
      111,
      98,
      106,
      101,
      99,
      116,
      32,
      100,
      101,
      102,
      101,
      110,
      99,
      101,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      77,
      101,
      100,
      105,
      99,
      97,
      108,
      60,
      98,
      111,
      100,
      121,
      62,
      10,
      101,
      118,
      105,
      100,
      101,
      110,
      116,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      107,
      101,
      121,
      67,
      111,
      100,
      101,
      115,
      105,
      120,
      116,
      101,
      101,
      110,
      73,
      115,
      108,
      97,
      109,
      105,
      99,
      35,
      48,
      48,
      48,
      48,
      48,
      48,
      101,
      110,
      116,
      105,
      114,
      101,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      111,
      110,
      101,
      32,
      99,
      97,
      110,
      99,
      111,
      108,
      111,
      114,
      32,
      61,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      101,
      120,
      116,
      101,
      110,
      100,
      115,
      80,
      104,
      121,
      115,
      105,
      99,
      115,
      116,
      101,
      114,
      114,
      97,
      105,
      110,
      60,
      116,
      98,
      111,
      100,
      121,
      62,
      102,
      117,
      110,
      101,
      114,
      97,
      108,
      118,
      105,
      101,
      119,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      99,
      114,
      105,
      99,
      107,
      101,
      116,
      112,
      114,
      111,
      112,
      104,
      101,
      116,
      115,
      104,
      105,
      102,
      116,
      101,
      100,
      100,
      111,
      99,
      116,
      111,
      114,
      115,
      82,
      117,
      115,
      115,
      101,
      108,
      108,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      99,
      111,
      109,
      112,
      97,
      99,
      116,
      97,
      108,
      103,
      101,
      98,
      114,
      97,
      115,
      111,
      99,
      105,
      97,
      108,
      45,
      98,
      117,
      108,
      107,
      32,
      111,
      102,
      109,
      97,
      110,
      32,
      97,
      110,
      100,
      60,
      47,
      116,
      100,
      62,
      10,
      32,
      104,
      101,
      32,
      108,
      101,
      102,
      116,
      41,
      46,
      118,
      97,
      108,
      40,
      41,
      102,
      97,
      108,
      115,
      101,
      41,
      59,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      97,
      110,
      107,
      105,
      110,
      103,
      104,
      111,
      109,
      101,
      32,
      116,
      111,
      110,
      97,
      109,
      105,
      110,
      103,
      32,
      65,
      114,
      105,
      122,
      111,
      110,
      97,
      99,
      114,
      101,
      100,
      105,
      116,
      115,
      41,
      59,
      10,
      125,
      41,
      59,
      10,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      105,
      110,
      32,
      116,
      117,
      114,
      110,
      67,
      111,
      108,
      108,
      105,
      110,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      66,
      117,
      116,
      32,
      116,
      104,
      101,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      84,
      105,
      116,
      108,
      101,
      34,
      62,
      67,
      97,
      112,
      116,
      97,
      105,
      110,
      115,
      112,
      101,
      108,
      108,
      101,
      100,
      103,
      111,
      100,
      100,
      101,
      115,
      115,
      84,
      97,
      103,
      32,
      45,
      45,
      62,
      65,
      100,
      100,
      105,
      110,
      103,
      58,
      98,
      117,
      116,
      32,
      119,
      97,
      115,
      82,
      101,
      99,
      101,
      110,
      116,
      32,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      61,
      102,
      97,
      108,
      115,
      101,
      38,
      76,
      105,
      110,
      99,
      111,
      108,
      110,
      119,
      101,
      32,
      107,
      110,
      111,
      119,
      67,
      111,
      117,
      110,
      116,
      101,
      114,
      74,
      117,
      100,
      97,
      105,
      115,
      109,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      97,
      108,
      116,
      101,
      114,
      101,
      100,
      39,
      93,
      41,
      59,
      10,
      32,
      32,
      104,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      99,
      108,
      101,
      97,
      114,
      69,
      118,
      101,
      110,
      116,
      39,
      44,
      98,
      111,
      116,
      104,
      32,
      105,
      110,
      110,
      111,
      116,
      32,
      97,
      108,
      108,
      10,
      10,
      60,
      33,
      45,
      45,
      32,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      104,
      97,
      114,
      100,
      32,
      116,
      111,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      115,
      111,
      114,
      116,
      32,
      111,
      102,
      99,
      108,
      105,
      101,
      110,
      116,
      115,
      115,
      116,
      114,
      101,
      101,
      116,
      115,
      66,
      101,
      114,
      110,
      97,
      114,
      100,
      97,
      115,
      115,
      101,
      114,
      116,
      115,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      102,
      97,
      110,
      116,
      97,
      115,
      121,
      100,
      111,
      119,
      110,
      32,
      105,
      110,
      104,
      97,
      114,
      98,
      111,
      117,
      114,
      70,
      114,
      101,
      101,
      100,
      111,
      109,
      106,
      101,
      119,
      101,
      108,
      114,
      121,
      47,
      97,
      98,
      111,
      117,
      116,
      46,
      46,
      115,
      101,
      97,
      114,
      99,
      104,
      108,
      101,
      103,
      101,
      110,
      100,
      115,
      105,
      115,
      32,
      109,
      97,
      100,
      101,
      109,
      111,
      100,
      101,
      114,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      111,
      110,
      111,
      110,
      108,
      121,
      32,
      116,
      111,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      108,
      105,
      110,
      101,
      97,
      114,
      32,
      112,
      97,
      105,
      110,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      110,
      111,
      116,
      114,
      97,
      114,
      101,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      110,
      121,
      109,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      101,
      114,
      48,
      48,
      38,
      97,
      109,
      112,
      59,
      97,
      115,
      32,
      109,
      97,
      110,
      121,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      47,
      42,
      32,
      60,
      33,
      91,
      67,
      116,
      105,
      116,
      108,
      101,
      32,
      61,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      108,
      111,
      119,
      101,
      115,
      116,
      32,
      112,
      105,
      99,
      107,
      101,
      100,
      32,
      101,
      115,
      99,
      97,
      112,
      101,
      100,
      117,
      115,
      101,
      115,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      32,
      80,
      117,
      98,
      108,
      105,
      99,
      77,
      97,
      116,
      116,
      104,
      101,
      119,
      116,
      97,
      99,
      116,
      105,
      99,
      115,
      100,
      97,
      109,
      97,
      103,
      101,
      100,
      119,
      97,
      121,
      32,
      102,
      111,
      114,
      108,
      97,
      119,
      115,
      32,
      111,
      102,
      101,
      97,
      115,
      121,
      32,
      116,
      111,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      32,
      115,
      105,
      109,
      112,
      108,
      101,
      125,
      99,
      97,
      116,
      99,
      104,
      40,
      115,
      101,
      118,
      101,
      110,
      116,
      104,
      105,
      110,
      102,
      111,
      98,
      111,
      120,
      119,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      97,
      105,
      110,
      116,
      101,
      100,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      73,
      32,
      100,
      111,
      110,
      39,
      116,
      114,
      101,
      116,
      114,
      101,
      97,
      116,
      46,
      32,
      83,
      111,
      109,
      101,
      32,
      119,
      119,
      46,
      34,
      41,
      59,
      10,
      98,
      111,
      109,
      98,
      105,
      110,
      103,
      109,
      97,
      105,
      108,
      116,
      111,
      58,
      109,
      97,
      100,
      101,
      32,
      105,
      110,
      46,
      32,
      77,
      97,
      110,
      121,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      115,
      124,
      124,
      123,
      125,
      59,
      119,
      105,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      100,
      101,
      102,
      101,
      97,
      116,
      115,
      102,
      97,
      118,
      111,
      114,
      101,
      100,
      111,
      112,
      116,
      105,
      99,
      97,
      108,
      112,
      97,
      103,
      101,
      84,
      114,
      97,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      115,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      101,
      102,
      116,
      34,
      62,
      60,
      99,
      111,
      109,
      83,
      99,
      111,
      114,
      65,
      108,
      108,
      32,
      116,
      104,
      101,
      106,
      81,
      117,
      101,
      114,
      121,
      46,
      116,
      111,
      117,
      114,
      105,
      115,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      102,
      97,
      108,
      115,
      101,
      34,
      32,
      87,
      105,
      108,
      104,
      101,
      108,
      109,
      115,
      117,
      98,
      117,
      114,
      98,
      115,
      103,
      101,
      110,
      117,
      105,
      110,
      101,
      98,
      105,
      115,
      104,
      111,
      112,
      115,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      103,
      108,
      111,
      98,
      97,
      108,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      110,
      111,
      109,
      105,
      110,
      97,
      108,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      101,
      99,
      117,
      108,
      97,
      114,
      108,
      101,
      102,
      116,
      32,
      116,
      111,
      99,
      104,
      105,
      101,
      102,
      108,
      121,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      45,
      98,
      97,
      110,
      110,
      101,
      114,
      60,
      47,
      108,
      105,
      62,
      10,
      10,
      46,
      32,
      87,
      104,
      101,
      110,
      32,
      105,
      110,
      32,
      98,
      111,
      116,
      104,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      118,
      105,
      97,
      32,
      116,
      104,
      101,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      119,
      101,
      108,
      102,
      97,
      114,
      101,
      114,
      117,
      108,
      105,
      110,
      103,
      32,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      99,
      97,
      112,
      116,
      97,
      105,
      110,
      104,
      105,
      115,
      32,
      115,
      111,
      110,
      114,
      117,
      108,
      101,
      32,
      111,
      102,
      104,
      101,
      32,
      116,
      111,
      111,
      107,
      105,
      116,
      115,
      101,
      108,
      102,
      44,
      61,
      48,
      38,
      97,
      109,
      112,
      59,
      40,
      99,
      97,
      108,
      108,
      101,
      100,
      115,
      97,
      109,
      112,
      108,
      101,
      115,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      99,
      111,
      109,
      47,
      112,
      97,
      103,
      77,
      97,
      114,
      116,
      105,
      110,
      32,
      75,
      101,
      110,
      110,
      101,
      100,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      115,
      102,
      117,
      108,
      108,
      32,
      111,
      102,
      104,
      97,
      110,
      100,
      108,
      101,
      100,
      66,
      101,
      115,
      105,
      100,
      101,
      115,
      47,
      47,
      45,
      45,
      62,
      60,
      47,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      97,
      114,
      103,
      101,
      116,
      115,
      101,
      115,
      115,
      101,
      110,
      99,
      101,
      104,
      105,
      109,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      32,
      98,
      121,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      46,
      109,
      105,
      110,
      101,
      114,
      97,
      108,
      116,
      111,
      32,
      116,
      97,
      107,
      101,
      119,
      97,
      121,
      115,
      32,
      116,
      111,
      115,
      46,
      111,
      114,
      103,
      47,
      108,
      97,
      100,
      118,
      105,
      115,
      101,
      100,
      112,
      101,
      110,
      97,
      108,
      116,
      121,
      115,
      105,
      109,
      112,
      108,
      101,
      58,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      76,
      101,
      116,
      116,
      101,
      114,
      115,
      97,
      32,
      115,
      104,
      111,
      114,
      116,
      72,
      101,
      114,
      98,
      101,
      114,
      116,
      115,
      116,
      114,
      105,
      107,
      101,
      115,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      102,
      108,
      105,
      103,
      104,
      116,
      115,
      111,
      118,
      101,
      114,
      108,
      97,
      112,
      115,
      108,
      111,
      119,
      108,
      121,
      32,
      108,
      101,
      115,
      115,
      101,
      114,
      32,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      60,
      47,
      112,
      62,
      10,
      9,
      9,
      105,
      116,
      32,
      105,
      110,
      116,
      111,
      114,
      97,
      110,
      107,
      101,
      100,
      32,
      114,
      97,
      116,
      101,
      32,
      111,
      102,
      117,
      108,
      62,
      13,
      10,
      32,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      112,
      97,
      105,
      114,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      32,
      105,
      116,
      75,
      111,
      110,
      116,
      97,
      107,
      116,
      65,
      110,
      116,
      111,
      110,
      105,
      111,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      114,
      97,
      116,
      105,
      110,
      103,
      115,
      32,
      97,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      114,
      101,
      97,
      109,
      115,
      116,
      114,
      97,
      112,
      112,
      101,
      100,
      34,
      41,
      46,
      99,
      115,
      115,
      40,
      104,
      111,
      115,
      116,
      105,
      108,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      108,
      105,
      116,
      116,
      108,
      101,
      32,
      103,
      114,
      111,
      117,
      112,
      115,
      44,
      80,
      105,
      99,
      116,
      117,
      114,
      101,
      45,
      45,
      62,
      13,
      10,
      13,
      10,
      32,
      114,
      111,
      119,
      115,
      61,
      34,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      110,
      118,
      101,
      114,
      115,
      101,
      60,
      102,
      111,
      111,
      116,
      101,
      114,
      67,
      117,
      115,
      116,
      111,
      109,
      86,
      62,
      60,
      92,
      47,
      115,
      99,
      114,
      115,
      111,
      108,
      118,
      105,
      110,
      103,
      67,
      104,
      97,
      109,
      98,
      101,
      114,
      115,
      108,
      97,
      118,
      101,
      114,
      121,
      119,
      111,
      117,
      110,
      100,
      101,
      100,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      33,
      61,
      32,
      39,
      117,
      110,
      100,
      102,
      111,
      114,
      32,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      108,
      121,
      32,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      65,
      114,
      97,
      98,
      105,
      97,
      110,
      98,
      97,
      99,
      107,
      101,
      100,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      105,
      116,
      32,
      111,
      102,
      109,
      111,
      98,
      105,
      108,
      101,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      44,
      105,
      115,
      32,
      104,
      111,
      109,
      101,
      114,
      105,
      115,
      107,
      32,
      111,
      102,
      100,
      101,
      115,
      105,
      114,
      101,
      100,
      67,
      108,
      105,
      110,
      116,
      111,
      110,
      99,
      111,
      115,
      116,
      32,
      111,
      102,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      110,
      111,
      110,
      101,
      32,
      111,
      102,
      112,
      38,
      113,
      117,
      111,
      116,
      59,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      101,
      97,
      100,
      39,
      41,
      91,
      48,
      67,
      114,
      105,
      116,
      105,
      99,
      115,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      62,
      38,
      99,
      111,
      112,
      121,
      59,
      103,
      114,
      111,
      117,
      112,
      34,
      62,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      105,
      100,
      103,
      101,
      116,
      46,
      112,
      115,
      58,
      34,
      32,
      63,
      32,
      114,
      101,
      98,
      117,
      105,
      108,
      116,
      98,
      121,
      32,
      115,
      111,
      109,
      101,
      70,
      111,
      114,
      109,
      101,
      114,
      32,
      101,
      100,
      105,
      116,
      111,
      114,
      115,
      100,
      101,
      108,
      97,
      121,
      101,
      100,
      67,
      97,
      110,
      111,
      110,
      105,
      99,
      104,
      97,
      100,
      32,
      116,
      104,
      101,
      112,
      117,
      115,
      104,
      105,
      110,
      103,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      32,
      97,
      114,
      101,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      66,
      97,
      98,
      121,
      108,
      111,
      110,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      99,
      97,
      114,
      114,
      105,
      101,
      114,
      67,
      111,
      109,
      109,
      97,
      110,
      100,
      105,
      116,
      115,
      32,
      117,
      115,
      101,
      65,
      115,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      117,
      114,
      115,
      101,
      115,
      97,
      32,
      116,
      104,
      105,
      114,
      100,
      100,
      101,
      110,
      111,
      116,
      101,
      115,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      72,
      111,
      117,
      115,
      116,
      111,
      110,
      50,
      48,
      112,
      120,
      59,
      34,
      62,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      100,
      111,
      117,
      98,
      108,
      101,
      32,
      103,
      111,
      97,
      108,
      32,
      111,
      102,
      70,
      97,
      109,
      111,
      117,
      115,
      32,
      41,
      46,
      98,
      105,
      110,
      100,
      40,
      112,
      114,
      105,
      101,
      115,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      105,
      110,
      32,
      74,
      117,
      108,
      121,
      115,
      116,
      32,
      43,
      32,
      34,
      103,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      100,
      101,
      99,
      105,
      109,
      97,
      108,
      104,
      101,
      108,
      112,
      102,
      117,
      108,
      114,
      101,
      118,
      105,
      118,
      101,
      100,
      105,
      115,
      32,
      118,
      101,
      114,
      121,
      114,
      39,
      43,
      39,
      105,
      112,
      116,
      108,
      111,
      115,
      105,
      110,
      103,
      32,
      102,
      101,
      109,
      97,
      108,
      101,
      115,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      115,
      116,
      114,
      105,
      110,
      103,
      115,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      102,
      117,
      116,
      117,
      114,
      101,
      32,
      60,
      111,
      98,
      106,
      101,
      99,
      116,
      102,
      111,
      114,
      99,
      105,
      110,
      103,
      83,
      116,
      114,
      105,
      110,
      103,
      40,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      101,
      110,
      99,
      111,
      100,
      101,
      100,
      46,
      32,
      32,
      84,
      104,
      101,
      32,
      98,
      97,
      108,
      108,
      111,
      111,
      110,
      100,
      111,
      110,
      101,
      32,
      98,
      121,
      47,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      108,
      97,
      119,
      32,
      111,
      102,
      32,
      73,
      110,
      100,
      105,
      97,
      110,
      97,
      97,
      118,
      111,
      105,
      100,
      101,
      100,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      50,
      112,
      120,
      32,
      51,
      112,
      120,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      97,
      102,
      116,
      101,
      114,
      32,
      97,
      112,
      111,
      108,
      105,
      99,
      121,
      46,
      109,
      101,
      110,
      32,
      97,
      110,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      45,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      102,
      111,
      114,
      32,
      117,
      115,
      101,
      115,
      99,
      114,
      101,
      101,
      110,
      46,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      105,
      109,
      97,
      103,
      101,
      32,
      61,
      102,
      97,
      109,
      105,
      108,
      121,
      44,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      100,
      114,
      105,
      118,
      101,
      114,
      115,
      101,
      116,
      101,
      114,
      110,
      97,
      108,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      110,
      111,
      116,
      105,
      99,
      101,
      100,
      118,
      105,
      101,
      119,
      101,
      114,
      115,
      125,
      41,
      40,
      41,
      59,
      10,
      32,
      105,
      115,
      32,
      109,
      111,
      114,
      101,
      115,
      101,
      97,
      115,
      111,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      119,
      105,
      115,
      32,
      106,
      117,
      115,
      116,
      99,
      111,
      110,
      115,
      101,
      110,
      116,
      32,
      83,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      119,
      104,
      121,
      32,
      116,
      104,
      101,
      115,
      104,
      105,
      112,
      112,
      101,
      100,
      98,
      114,
      62,
      60,
      98,
      114,
      62,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      109,
      97,
      100,
      101,
      32,
      111,
      102,
      99,
      117,
      105,
      115,
      105,
      110,
      101,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      32,
      118,
      101,
      114,
      121,
      32,
      65,
      100,
      109,
      105,
      114,
      97,
      108,
      32,
      102,
      105,
      120,
      101,
      100,
      59,
      110,
      111,
      114,
      109,
      97,
      108,
      32,
      77,
      105,
      115,
      115,
      105,
      111,
      110,
      80,
      114,
      101,
      115,
      115,
      44,
      32,
      111,
      110,
      116,
      97,
      114,
      105,
      111,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      114,
      121,
      32,
      116,
      111,
      32,
      105,
      110,
      118,
      97,
      100,
      101,
      100,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      105,
      115,
      32,
      109,
      111,
      115,
      116,
      97,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      108,
      121,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      125,
      41,
      59,
      13,
      10,
      32,
      32,
      105,
      109,
      109,
      101,
      110,
      115,
      101,
      116,
      105,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      116,
      32,
      111,
      117,
      116,
      115,
      97,
      116,
      105,
      115,
      102,
      121,
      116,
      111,
      32,
      102,
      105,
      110,
      100,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      108,
      111,
      116,
      32,
      111,
      102,
      32,
      80,
      108,
      97,
      121,
      101,
      114,
      115,
      105,
      110,
      32,
      74,
      117,
      110,
      101,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      110,
      111,
      116,
      32,
      116,
      104,
      101,
      116,
      105,
      109,
      101,
      32,
      116,
      111,
      100,
      105,
      115,
      116,
      97,
      110,
      116,
      70,
      105,
      110,
      110,
      105,
      115,
      104,
      115,
      114,
      99,
      32,
      61,
      32,
      40,
      115,
      105,
      110,
      103,
      108,
      101,
      32,
      104,
      101,
      108,
      112,
      32,
      111,
      102,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      119,
      32,
      97,
      110,
      100,
      108,
      97,
      98,
      101,
      108,
      101,
      100,
      102,
      111,
      114,
      101,
      115,
      116,
      115,
      99,
      111,
      111,
      107,
      105,
      110,
      103,
      115,
      112,
      97,
      99,
      101,
      34,
      62,
      104,
      101,
      97,
      100,
      101,
      114,
      45,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      83,
      116,
      97,
      110,
      108,
      101,
      121,
      98,
      114,
      105,
      100,
      103,
      101,
      115,
      47,
      103,
      108,
      111,
      98,
      97,
      108,
      67,
      114,
      111,
      97,
      116,
      105,
      97,
      32,
      65,
      98,
      111,
      117,
      116,
      32,
      91,
      48,
      93,
      59,
      10,
      32,
      32,
      105,
      116,
      44,
      32,
      97,
      110,
      100,
      103,
      114,
      111,
      117,
      112,
      101,
      100,
      98,
      101,
      105,
      110,
      103,
      32,
      97,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      104,
      101,
      32,
      109,
      97,
      100,
      101,
      108,
      105,
      103,
      104,
      116,
      101,
      114,
      101,
      116,
      104,
      105,
      99,
      97,
      108,
      70,
      70,
      70,
      70,
      70,
      70,
      34,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      108,
      105,
      107,
      101,
      32,
      97,
      32,
      101,
      109,
      112,
      108,
      111,
      121,
      115,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      112,
      114,
      105,
      110,
      116,
      101,
      114,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      117,
      98,
      45,
      108,
      105,
      110,
      107,
      114,
      101,
      106,
      101,
      99,
      116,
      115,
      97,
      110,
      100,
      32,
      117,
      115,
      101,
      105,
      109,
      97,
      103,
      101,
      34,
      62,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      102,
      101,
      101,
      100,
      105,
      110,
      103,
      78,
      117,
      99,
      108,
      101,
      97,
      114,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      111,
      32,
      104,
      101,
      108,
      112,
      87,
      111,
      109,
      101,
      110,
      39,
      115,
      78,
      101,
      105,
      116,
      104,
      101,
      114,
      77,
      101,
      120,
      105,
      99,
      97,
      110,
      112,
      114,
      111,
      116,
      101,
      105,
      110,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      121,
      32,
      109,
      97,
      110,
      121,
      104,
      101,
      97,
      108,
      116,
      104,
      121,
      108,
      97,
      119,
      115,
      117,
      105,
      116,
      100,
      101,
      118,
      105,
      115,
      101,
      100,
      46,
      112,
      117,
      115,
      104,
      40,
      123,
      115,
      101,
      108,
      108,
      101,
      114,
      115,
      115,
      105,
      109,
      112,
      108,
      121,
      32,
      84,
      104,
      114,
      111,
      117,
      103,
      104,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      32,
      73,
      109,
      97,
      103,
      101,
      40,
      111,
      108,
      100,
      101,
      114,
      34,
      62,
      117,
      115,
      46,
      106,
      115,
      34,
      62,
      32,
      83,
      105,
      110,
      99,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      111,
      112,
      101,
      110,
      32,
      116,
      111,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      108,
      105,
      101,
      115,
      32,
      105,
      110,
      39,
      93,
      41,
      59,
      13,
      10,
      32,
      32,
      109,
      97,
      114,
      107,
      101,
      116,
      119,
      104,
      111,
      32,
      105,
      115,
      32,
      40,
      34,
      68,
      79,
      77,
      67,
      111,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      111,
      110,
      101,
      32,
      102,
      111,
      114,
      116,
      121,
      112,
      101,
      111,
      102,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      112,
      114,
      111,
      102,
      105,
      116,
      115,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      116,
      111,
      32,
      115,
      104,
      111,
      119,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      109,
      97,
      100,
      101,
      32,
      105,
      116,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      105,
      110,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      97,
      114,
      105,
      115,
      105,
      110,
      103,
      115,
      114,
      99,
      32,
      61,
      32,
      39,
      109,
      97,
      107,
      101,
      32,
      97,
      32,
      115,
      101,
      99,
      117,
      114,
      101,
      100,
      66,
      97,
      112,
      116,
      105,
      115,
      116,
      118,
      111,
      116,
      105,
      110,
      103,
      32,
      10,
      9,
      9,
      118,
      97,
      114,
      32,
      77,
      97,
      114,
      99,
      104,
      32,
      50,
      103,
      114,
      101,
      119,
      32,
      117,
      112,
      67,
      108,
      105,
      109,
      97,
      116,
      101,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      115,
      107,
      105,
      108,
      108,
      101,
      100,
      119,
      97,
      121,
      32,
      116,
      104,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      97,
      99,
      116,
      105,
      110,
      103,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      116,
      111,
      32,
      119,
      111,
      114,
      107,
      114,
      101,
      100,
      117,
      99,
      101,
      115,
      104,
      97,
      115,
      32,
      104,
      97,
      100,
      101,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      98,
      111,
      111,
      107,
      32,
      111,
      102,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      61,
      61,
      32,
      34,
      104,
      116,
      116,
      60,
      104,
      101,
      97,
      100,
      101,
      114,
      10,
      60,
      104,
      116,
      109,
      108,
      62,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      102,
      97,
      99,
      105,
      110,
      103,
      32,
      99,
      111,
      111,
      107,
      105,
      101,
      46,
      114,
      101,
      108,
      121,
      32,
      111,
      110,
      104,
      111,
      115,
      116,
      101,
      100,
      32,
      46,
      99,
      117,
      115,
      116,
      111,
      109,
      104,
      101,
      32,
      119,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      102,
      111,
      114,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      70,
      97,
      109,
      105,
      108,
      121,
      32,
      97,
      32,
      109,
      101,
      97,
      110,
      115,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      117,
      109,
      115,
      46,
      102,
      111,
      111,
      116,
      97,
      103,
      101,
      34,
      62,
      77,
      111,
      98,
      105,
      108,
      67,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      34,
      32,
      105,
      100,
      61,
      34,
      97,
      115,
      32,
      104,
      105,
      103,
      104,
      105,
      110,
      116,
      101,
      110,
      115,
      101,
      45,
      45,
      62,
      60,
      33,
      45,
      45,
      102,
      101,
      109,
      97,
      108,
      101,
      32,
      105,
      115,
      32,
      115,
      101,
      101,
      110,
      105,
      109,
      112,
      108,
      105,
      101,
      100,
      115,
      101,
      116,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      102,
      97,
      115,
      116,
      101,
      115,
      116,
      98,
      101,
      115,
      105,
      100,
      101,
      115,
      98,
      117,
      116,
      116,
      111,
      110,
      95,
      98,
      111,
      117,
      110,
      100,
      101,
      100,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      73,
      110,
      102,
      111,
      98,
      111,
      120,
      101,
      118,
      101,
      110,
      116,
      115,
      44,
      97,
      32,
      121,
      111,
      117,
      110,
      103,
      97,
      110,
      100,
      32,
      97,
      114,
      101,
      78,
      97,
      116,
      105,
      118,
      101,
      32,
      99,
      104,
      101,
      97,
      112,
      101,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      97,
      110,
      100,
      32,
      104,
      97,
      115,
      101,
      110,
      103,
      105,
      110,
      101,
      115,
      119,
      111,
      110,
      32,
      116,
      104,
      101,
      40,
      109,
      111,
      115,
      116,
      108,
      121,
      114,
      105,
      103,
      104,
      116,
      58,
      32,
      102,
      105,
      110,
      100,
      32,
      97,
      32,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      80,
      114,
      105,
      110,
      99,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      111,
      102,
      115,
      101,
      97,
      114,
      99,
      104,
      95,
      110,
      97,
      116,
      117,
      114,
      101,
      44,
      108,
      101,
      103,
      97,
      108,
      108,
      121,
      112,
      101,
      114,
      105,
      111,
      100,
      44,
      108,
      97,
      110,
      100,
      32,
      111,
      102,
      111,
      114,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      100,
      117,
      99,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      103,
      109,
      105,
      115,
      115,
      105,
      108,
      101,
      108,
      111,
      99,
      97,
      108,
      108,
      121,
      65,
      103,
      97,
      105,
      110,
      115,
      116,
      116,
      104,
      101,
      32,
      119,
      97,
      121,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      112,
      120,
      59,
      34,
      62,
      13,
      10,
      112,
      117,
      115,
      104,
      101,
      100,
      32,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      110,
      117,
      109,
      101,
      114,
      97,
      108,
      67,
      101,
      114,
      116,
      97,
      105,
      110,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      111,
      114,
      32,
      115,
      111,
      109,
      101,
      110,
      97,
      109,
      101,
      32,
      105,
      115,
      97,
      110,
      100,
      44,
      32,
      105,
      110,
      99,
      114,
      111,
      119,
      110,
      101,
      100,
      73,
      83,
      66,
      78,
      32,
      48,
      45,
      99,
      114,
      101,
      97,
      116,
      101,
      115,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      108,
      97,
      116,
      101,
      32,
      105,
      110,
      68,
      101,
      102,
      101,
      110,
      99,
      101,
      101,
      110,
      97,
      99,
      116,
      101,
      100,
      119,
      105,
      115,
      104,
      32,
      116,
      111,
      98,
      114,
      111,
      97,
      100,
      108,
      121,
      99,
      111,
      111,
      108,
      105,
      110,
      103,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      105,
      116,
      46,
      32,
      84,
      104,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      77,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      97,
      115,
      115,
      117,
      109,
      101,
      115,
      60,
      104,
      116,
      109,
      108,
      62,
      10,
      112,
      101,
      111,
      112,
      108,
      101,
      46,
      105,
      110,
      32,
      111,
      110,
      101,
      32,
      61,
      119,
      105,
      110,
      100,
      111,
      119,
      102,
      111,
      111,
      116,
      101,
      114,
      95,
      97,
      32,
      103,
      111,
      111,
      100,
      32,
      114,
      101,
      107,
      108,
      97,
      109,
      97,
      111,
      116,
      104,
      101,
      114,
      115,
      44,
      116,
      111,
      32,
      116,
      104,
      105,
      115,
      95,
      99,
      111,
      111,
      107,
      105,
      101,
      112,
      97,
      110,
      101,
      108,
      34,
      62,
      76,
      111,
      110,
      100,
      111,
      110,
      44,
      100,
      101,
      102,
      105,
      110,
      101,
      115,
      99,
      114,
      117,
      115,
      104,
      101,
      100,
      98,
      97,
      112,
      116,
      105,
      115,
      109,
      99,
      111,
      97,
      115,
      116,
      97,
      108,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      109,
      111,
      118,
      101,
      32,
      116,
      111,
      108,
      111,
      115,
      116,
      32,
      105,
      110,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      114,
      105,
      118,
      97,
      108,
      114,
      121,
      115,
      101,
      114,
      118,
      101,
      114,
      115,
      32,
      83,
      121,
      115,
      116,
      101,
      109,
      80,
      101,
      114,
      104,
      97,
      112,
      115,
      101,
      115,
      32,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      100,
      102,
      108,
      111,
      119,
      105,
      110,
      103,
      108,
      97,
      115,
      116,
      101,
      100,
      32,
      114,
      105,
      115,
      101,
      32,
      105,
      110,
      71,
      101,
      110,
      101,
      115,
      105,
      115,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      114,
      105,
      115,
      105,
      110,
      103,
      32,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      98,
      97,
      99,
      107,
      105,
      110,
      103,
      104,
      101,
      32,
      119,
      105,
      108,
      108,
      103,
      105,
      118,
      101,
      110,
      32,
      97,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      99,
      105,
      116,
      105,
      101,
      115,
      46,
      102,
      108,
      111,
      119,
      32,
      111,
      102,
      32,
      76,
      97,
      116,
      101,
      114,
      32,
      97,
      108,
      108,
      32,
      98,
      117,
      116,
      72,
      105,
      103,
      104,
      119,
      97,
      121,
      111,
      110,
      108,
      121,
      32,
      98,
      121,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      104,
      101,
      32,
      100,
      111,
      101,
      115,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      98,
      97,
      116,
      116,
      101,
      114,
      121,
      38,
      97,
      109,
      112,
      59,
      108,
      97,
      115,
      105,
      110,
      103,
      108,
      101,
      115,
      116,
      104,
      114,
      101,
      97,
      116,
      115,
      105,
      110,
      116,
      101,
      103,
      101,
      114,
      116,
      97,
      107,
      101,
      32,
      111,
      110,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      61,
      85,
      83,
      38,
      97,
      109,
      112,
      83,
      101,
      101,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      105,
      118,
      101,
      115,
      98,
      121,
      32,
      116,
      104,
      105,
      115,
      115,
      121,
      115,
      116,
      101,
      109,
      46,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      58,
      104,
      111,
      118,
      101,
      114,
      44,
      108,
      101,
      115,
      98,
      105,
      97,
      110,
      115,
      117,
      114,
      110,
      97,
      109,
      101,
      97,
      110,
      100,
      32,
      97,
      108,
      108,
      99,
      111,
      109,
      109,
      111,
      110,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      95,
      95,
      112,
      97,
      114,
      97,
      109,
      115,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      47,
      112,
      105,
      120,
      101,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      115,
      111,
      32,
      108,
      111,
      110,
      103,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      106,
      111,
      105,
      110,
      116,
      108,
      121,
      115,
      107,
      121,
      115,
      99,
      114,
      97,
      85,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      65,
      116,
      108,
      97,
      110,
      116,
      97,
      110,
      117,
      99,
      108,
      101,
      117,
      115,
      67,
      111,
      117,
      110,
      116,
      121,
      44,
      112,
      117,
      114,
      101,
      108,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      34,
      62,
      101,
      97,
      115,
      105,
      108,
      121,
      32,
      98,
      117,
      105,
      108,
      100,
      32,
      97,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      97,
      32,
      103,
      105,
      118,
      101,
      110,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      104,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      118,
      101,
      110,
      116,
      115,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      111,
      119,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      105,
      116,
      104,
      32,
      109,
      97,
      110,
      32,
      119,
      104,
      111,
      111,
      114,
      103,
      47,
      87,
      101,
      98,
      111,
      110,
      101,
      32,
      97,
      110,
      100,
      99,
      97,
      118,
      97,
      108,
      114,
      121,
      72,
      101,
      32,
      100,
      105,
      101,
      100,
      115,
      101,
      97,
      116,
      116,
      108,
      101,
      48,
      48,
      44,
      48,
      48,
      48,
      32,
      123,
      119,
      105,
      110,
      100,
      111,
      119,
      104,
      97,
      118,
      101,
      32,
      116,
      111,
      105,
      102,
      40,
      119,
      105,
      110,
      100,
      97,
      110,
      100,
      32,
      105,
      116,
      115,
      115,
      111,
      108,
      101,
      108,
      121,
      32,
      109,
      38,
      113,
      117,
      111,
      116,
      59,
      114,
      101,
      110,
      101,
      119,
      101,
      100,
      68,
      101,
      116,
      114,
      111,
      105,
      116,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      101,
      105,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      32,
      105,
      110,
      83,
      101,
      110,
      97,
      116,
      111,
      114,
      85,
      115,
      60,
      47,
      97,
      62,
      60,
      75,
      105,
      110,
      103,
      32,
      111,
      102,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      45,
      112,
      114,
      111,
      100,
      117,
      99,
      104,
      101,
      32,
      117,
      115,
      101,
      100,
      97,
      114,
      116,
      32,
      97,
      110,
      100,
      104,
      105,
      109,
      32,
      97,
      110,
      100,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      115,
      99,
      111,
      114,
      105,
      110,
      103,
      97,
      116,
      32,
      104,
      111,
      109,
      101,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      114,
      101,
      108,
      97,
      116,
      101,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      66,
      117,
      102,
      102,
      97,
      108,
      111,
      108,
      105,
      110,
      107,
      34,
      62,
      60,
      119,
      104,
      97,
      116,
      32,
      104,
      101,
      102,
      114,
      101,
      101,
      32,
      116,
      111,
      67,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      32,
      105,
      110,
      115,
      101,
      99,
      116,
      111,
      114,
      115,
      99,
      111,
      117,
      110,
      116,
      101,
      100,
      111,
      110,
      101,
      32,
      100,
      97,
      121,
      110,
      101,
      114,
      118,
      111,
      117,
      115,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      125,
      59,
      105,
      102,
      40,
      103,
      111,
      105,
      110,
      32,
      119,
      104,
      97,
      116,
      105,
      109,
      103,
      34,
      32,
      97,
      108,
      105,
      115,
      32,
      111,
      110,
      108,
      121,
      115,
      101,
      97,
      114,
      99,
      104,
      47,
      116,
      117,
      101,
      115,
      100,
      97,
      121,
      108,
      111,
      111,
      115,
      101,
      108,
      121,
      83,
      111,
      108,
      111,
      109,
      111,
      110,
      115,
      101,
      120,
      117,
      97,
      108,
      32,
      45,
      32,
      60,
      97,
      32,
      104,
      114,
      109,
      101,
      100,
      105,
      117,
      109,
      34,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      70,
      114,
      97,
      110,
      99,
      101,
      44,
      119,
      105,
      116,
      104,
      32,
      97,
      32,
      119,
      97,
      114,
      32,
      97,
      110,
      100,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      116,
      97,
      107,
      101,
      32,
      97,
      32,
      62,
      13,
      10,
      13,
      10,
      13,
      10,
      109,
      97,
      114,
      107,
      101,
      116,
      46,
      104,
      105,
      103,
      104,
      119,
      97,
      121,
      100,
      111,
      110,
      101,
      32,
      105,
      110,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      34,
      108,
      97,
      115,
      116,
      34,
      62,
      111,
      98,
      108,
      105,
      103,
      101,
      100,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      34,
      117,
      110,
      100,
      101,
      102,
      105,
      109,
      97,
      100,
      101,
      32,
      116,
      111,
      32,
      69,
      97,
      114,
      108,
      121,
      32,
      112,
      114,
      97,
      105,
      115,
      101,
      100,
      105,
      110,
      32,
      105,
      116,
      115,
      32,
      102,
      111,
      114,
      32,
      104,
      105,
      115,
      97,
      116,
      104,
      108,
      101,
      116,
      101,
      74,
      117,
      112,
      105,
      116,
      101,
      114,
      89,
      97,
      104,
      111,
      111,
      33,
      32,
      116,
      101,
      114,
      109,
      101,
      100,
      32,
      115,
      111,
      32,
      109,
      97,
      110,
      121,
      114,
      101,
      97,
      108,
      108,
      121,
      32,
      115,
      46,
      32,
      84,
      104,
      101,
      32,
      97,
      32,
      119,
      111,
      109,
      97,
      110,
      63,
      118,
      97,
      108,
      117,
      101,
      61,
      100,
      105,
      114,
      101,
      99,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      98,
      105,
      99,
      121,
      99,
      108,
      101,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      100,
      97,
      121,
      32,
      97,
      110,
      100,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      82,
      97,
      116,
      104,
      101,
      114,
      44,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      79,
      102,
      102,
      105,
      99,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      116,
      105,
      109,
      101,
      115,
      44,
      32,
      119,
      104,
      101,
      110,
      32,
      97,
      32,
      112,
      97,
      121,
      32,
      102,
      111,
      114,
      111,
      110,
      32,
      116,
      104,
      105,
      115,
      45,
      108,
      105,
      110,
      107,
      34,
      62,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      97,
      110,
      110,
      117,
      97,
      108,
      32,
      116,
      104,
      101,
      32,
      78,
      101,
      119,
      112,
      117,
      116,
      32,
      116,
      104,
      101,
      46,
      99,
      111,
      109,
      34,
      32,
      116,
      97,
      107,
      105,
      110,
      32,
      116,
      111,
      97,
      32,
      98,
      114,
      105,
      101,
      102,
      40,
      105,
      110,
      32,
      116,
      104,
      101,
      103,
      114,
      111,
      117,
      112,
      115,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      101,
      110,
      122,
      121,
      109,
      101,
      115,
      115,
      105,
      109,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      108,
      97,
      116,
      101,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      116,
      104,
      101,
      114,
      97,
      112,
      121,
      97,
      32,
      112,
      111,
      105,
      110,
      116,
      98,
      97,
      110,
      110,
      105,
      110,
      103,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      40,
      41,
      59,
      34,
      32,
      114,
      101,
      97,
      32,
      112,
      108,
      97,
      99,
      101,
      92,
      117,
      48,
      48,
      51,
      67,
      97,
      97,
      98,
      111,
      117,
      116,
      32,
      97,
      116,
      114,
      62,
      13,
      10,
      9,
      9,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      103,
      105,
      118,
      101,
      115,
      32,
      97,
      60,
      83,
      67,
      82,
      73,
      80,
      84,
      82,
      97,
      105,
      108,
      119,
      97,
      121,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      116,
      111,
      111,
      108,
      98,
      111,
      120,
      66,
      121,
      73,
      100,
      40,
      34,
      120,
      104,
      117,
      109,
      97,
      110,
      115,
      44,
      119,
      97,
      116,
      99,
      104,
      101,
      115,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      105,
      102,
      32,
      40,
      119,
      105,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      109,
      97,
      116,
      115,
      32,
      85,
      110,
      100,
      101,
      114,
      32,
      98,
      117,
      116,
      32,
      104,
      97,
      115,
      104,
      97,
      110,
      100,
      101,
      100,
      32,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      116,
      104,
      97,
      110,
      32,
      105,
      110,
      102,
      101,
      97,
      114,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      116,
      101,
      100,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      108,
      101,
      102,
      116,
      32,
      105,
      110,
      118,
      111,
      108,
      116,
      97,
      103,
      101,
      105,
      110,
      32,
      101,
      97,
      99,
      104,
      97,
      38,
      113,
      117,
      111,
      116,
      59,
      98,
      97,
      115,
      101,
      32,
      111,
      102,
      73,
      110,
      32,
      109,
      97,
      110,
      121,
      117,
      110,
      100,
      101,
      114,
      103,
      111,
      114,
      101,
      103,
      105,
      109,
      101,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      60,
      47,
      112,
      62,
      13,
      10,
      60,
      117,
      115,
      116,
      111,
      109,
      86,
      97,
      59,
      38,
      103,
      116,
      59,
      60,
      47,
      105,
      109,
      112,
      111,
      114,
      116,
      115,
      111,
      114,
      32,
      116,
      104,
      97,
      116,
      109,
      111,
      115,
      116,
      108,
      121,
      32,
      38,
      97,
      109,
      112,
      59,
      114,
      101,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      112,
      97,
      115,
      115,
      105,
      118,
      101,
      72,
      111,
      115,
      116,
      32,
      61,
      32,
      87,
      104,
      101,
      116,
      104,
      101,
      114,
      102,
      101,
      114,
      116,
      105,
      108,
      101,
      86,
      97,
      114,
      105,
      111,
      117,
      115,
      61,
      91,
      93,
      59,
      40,
      102,
      117,
      99,
      97,
      109,
      101,
      114,
      97,
      115,
      47,
      62,
      60,
      47,
      116,
      100,
      62,
      97,
      99,
      116,
      115,
      32,
      97,
      115,
      73,
      110,
      32,
      115,
      111,
      109,
      101,
      62,
      13,
      10,
      13,
      10,
      60,
      33,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      32,
      60,
      98,
      114,
      32,
      47,
      62,
      66,
      101,
      105,
      106,
      105,
      110,
      103,
      99,
      97,
      116,
      97,
      108,
      195,
      160,
      100,
      101,
      117,
      116,
      115,
      99,
      104,
      101,
      117,
      114,
      111,
      112,
      101,
      117,
      101,
      117,
      115,
      107,
      97,
      114,
      97,
      103,
      97,
      101,
      105,
      108,
      103,
      101,
      115,
      118,
      101,
      110,
      115,
      107,
      97,
      101,
      115,
      112,
      97,
      195,
      177,
      97,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      109,
      195,
      169,
      120,
      105,
      99,
      111,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      105,
      101,
      109,
      112,
      114,
      101,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      111,
      99,
      116,
      117,
      98,
      114,
      101,
      100,
      117,
      114,
      97,
      110,
      116,
      101,
      97,
      195,
      177,
      97,
      100,
      105,
      114,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      112,
      114,
      105,
      109,
      101,
      114,
      97,
      116,
      114,
      97,
      118,
      195,
      169,
      115,
      103,
      114,
      97,
      99,
      105,
      97,
      115,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      101,
      115,
      116,
      97,
      100,
      111,
      115,
      99,
      97,
      108,
      105,
      100,
      97,
      100,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      110,
      195,
      186,
      109,
      101,
      114,
      111,
      97,
      99,
      117,
      101,
      114,
      100,
      111,
      109,
      195,
      186,
      115,
      105,
      99,
      97,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      111,
      102,
      101,
      114,
      116,
      97,
      115,
      97,
      108,
      103,
      117,
      110,
      111,
      115,
      112,
      97,
      195,
      173,
      115,
      101,
      115,
      101,
      106,
      101,
      109,
      112,
      108,
      111,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      97,
      100,
      101,
      109,
      195,
      161,
      115,
      112,
      114,
      105,
      118,
      97,
      100,
      111,
      97,
      103,
      114,
      101,
      103,
      97,
      114,
      101,
      110,
      108,
      97,
      99,
      101,
      115,
      112,
      111,
      115,
      105,
      98,
      108,
      101,
      104,
      111,
      116,
      101,
      108,
      101,
      115,
      115,
      101,
      118,
      105,
      108,
      108,
      97,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      101,
      118,
      101,
      110,
      116,
      111,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      109,
      117,
      106,
      101,
      114,
      101,
      115,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      101,
      109,
      98,
      97,
      114,
      103,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      103,
      114,
      97,
      110,
      100,
      101,
      115,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      109,
      101,
      106,
      111,
      114,
      101,
      115,
      102,
      101,
      98,
      114,
      101,
      114,
      111,
      100,
      105,
      115,
      101,
      195,
      177,
      111,
      116,
      117,
      114,
      105,
      115,
      109,
      111,
      99,
      195,
      179,
      100,
      105,
      103,
      111,
      112,
      111,
      114,
      116,
      97,
      100,
      97,
      101,
      115,
      112,
      97,
      99,
      105,
      111,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      97,
      110,
      116,
      111,
      110,
      105,
      111,
      112,
      101,
      114,
      109,
      105,
      116,
      101,
      103,
      117,
      97,
      114,
      100,
      97,
      114,
      97,
      108,
      103,
      117,
      110,
      97,
      115,
      112,
      114,
      101,
      99,
      105,
      111,
      115,
      97,
      108,
      103,
      117,
      105,
      101,
      110,
      115,
      101,
      110,
      116,
      105,
      100,
      111,
      118,
      105,
      115,
      105,
      116,
      97,
      115,
      116,
      195,
      173,
      116,
      117,
      108,
      111,
      99,
      111,
      110,
      111,
      99,
      101,
      114,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      102,
      114,
      97,
      110,
      99,
      105,
      97,
      109,
      105,
      110,
      117,
      116,
      111,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      97,
      116,
      101,
      110,
      101,
      109,
      111,
      115,
      101,
      102,
      101,
      99,
      116,
      111,
      115,
      109,
      195,
      161,
      108,
      97,
      103,
      97,
      115,
      101,
      115,
      105,
      195,
      179,
      110,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      103,
      114,
      97,
      110,
      97,
      100,
      97,
      99,
      111,
      109,
      112,
      114,
      97,
      114,
      105,
      110,
      103,
      114,
      101,
      115,
      111,
      103,
      97,
      114,
      99,
      195,
      173,
      97,
      97,
      99,
      99,
      105,
      195,
      179,
      110,
      101,
      99,
      117,
      97,
      100,
      111,
      114,
      113,
      117,
      105,
      101,
      110,
      101,
      115,
      105,
      110,
      99,
      108,
      117,
      115,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      104,
      111,
      109,
      98,
      114,
      101,
      115,
      109,
      117,
      101,
      115,
      116,
      114,
      97,
      112,
      111,
      100,
      114,
      195,
      173,
      97,
      109,
      97,
      195,
      177,
      97,
      110,
      97,
      195,
      186,
      108,
      116,
      105,
      109,
      97,
      101,
      115,
      116,
      97,
      109,
      111,
      115,
      111,
      102,
      105,
      99,
      105,
      97,
      108,
      116,
      97,
      109,
      98,
      105,
      101,
      110,
      110,
      105,
      110,
      103,
      195,
      186,
      110,
      115,
      97,
      108,
      117,
      100,
      111,
      115,
      112,
      111,
      100,
      101,
      109,
      111,
      115,
      109,
      101,
      106,
      111,
      114,
      97,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      104,
      111,
      109,
      101,
      112,
      97,
      103,
      101,
      115,
      101,
      99,
      117,
      114,
      105,
      116,
      121,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      99,
      97,
      109,
      112,
      97,
      105,
      103,
      110,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      114,
      110,
      97,
      108,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      114,
      101,
      115,
      101,
      114,
      118,
      101,
      100,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      120,
      99,
      104,
      97,
      110,
      103,
      101,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      121,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      122,
      45,
      105,
      110,
      100,
      101,
      120,
      58,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      115,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      115,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      110,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      102,
      101,
      101,
      100,
      98,
      97,
      99,
      107,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      115,
      100,
      105,
      115,
      97,
      98,
      108,
      101,
      100,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      97,
      117,
      100,
      105,
      101,
      110,
      99,
      101,
      115,
      101,
      116,
      116,
      105,
      110,
      103,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      121,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      101,
      97,
      114,
      110,
      105,
      110,
      103,
      97,
      110,
      121,
      116,
      104,
      105,
      110,
      103,
      97,
      98,
      115,
      116,
      114,
      97,
      99,
      116,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      111,
      118,
      101,
      114,
      118,
      105,
      101,
      119,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      116,
      114,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      115,
      117,
      114,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      115,
      104,
      111,
      112,
      112,
      105,
      110,
      103,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      97,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      102,
      111,
      111,
      116,
      98,
      97,
      108,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      76,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      114,
      97,
      99,
      107,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      109,
      111,
      100,
      105,
      102,
      105,
      101,
      100,
      115,
      116,
      117,
      100,
      101,
      110,
      116,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      102,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      110,
      111,
      114,
      116,
      104,
      101,
      114,
      110,
      100,
      97,
      116,
      97,
      98,
      97,
      115,
      101,
      102,
      101,
      115,
      116,
      105,
      118,
      97,
      108,
      98,
      114,
      101,
      97,
      107,
      105,
      110,
      103,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      100,
      114,
      111,
      112,
      100,
      111,
      119,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      109,
      97,
      114,
      114,
      105,
      97,
      103,
      101,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      110,
      101,
      103,
      97,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      115,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      98,
      97,
      110,
      110,
      101,
      114,
      34,
      62,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      112,
      111,
      108,
      105,
      99,
      105,
      101,
      115,
      114,
      101,
      103,
      105,
      111,
      110,
      97,
      108,
      99,
      114,
      101,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      98,
      111,
      111,
      107,
      109,
      97,
      114,
      107,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      114,
      99,
      104,
      101,
      109,
      105,
      99,
      97,
      108,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      98,
      97,
      99,
      107,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      115,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      104,
      97,
      114,
      100,
      119,
      97,
      114,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      121,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      111,
      98,
      116,
      97,
      105,
      110,
      101,
      100,
      61,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      102,
      111,
      114,
      40,
      118,
      97,
      114,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      99,
      97,
      112,
      97,
      99,
      105,
      116,
      121,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      105,
      100,
      101,
      110,
      116,
      105,
      116,
      121,
      97,
      105,
      114,
      99,
      114,
      97,
      102,
      116,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      100,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      100,
      111,
      109,
      101,
      115,
      116,
      105,
      99,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      104,
      111,
      115,
      112,
      105,
      116,
      97,
      108,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      108,
      111,
      103,
      111,
      34,
      62,
      60,
      97,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      97,
      117,
      116,
      104,
      111,
      114,
      34,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      97,
      115,
      115,
      101,
      109,
      98,
      108,
      121,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      116,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      102,
      105,
      110,
      105,
      115,
      104,
      101,
      100,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      115,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      111,
      109,
      105,
      110,
      103,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      115,
      97,
      99,
      97,
      100,
      101,
      109,
      105,
      99,
      101,
      120,
      101,
      114,
      99,
      105,
      115,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      101,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      77,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      98,
      111,
      116,
      116,
      111,
      109,
      34,
      62,
      111,
      98,
      115,
      101,
      114,
      118,
      101,
      100,
      58,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      83,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      100,
      101,
      116,
      97,
      105,
      108,
      101,
      100,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      112,
      108,
      97,
      110,
      110,
      105,
      110,
      103,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      121,
      101,
      118,
      101,
      114,
      121,
      111,
      110,
      101,
      115,
      116,
      114,
      97,
      105,
      103,
      104,
      116,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      118,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      104,
      101,
      114,
      105,
      116,
      97,
      103,
      101,
      115,
      104,
      105,
      112,
      112,
      105,
      110,
      103,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      114,
      101,
      108,
      101,
      118,
      97,
      110,
      116,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      118,
      105,
      111,
      108,
      101,
      110,
      99,
      101,
      97,
      110,
      121,
      119,
      104,
      101,
      114,
      101,
      98,
      101,
      110,
      101,
      102,
      105,
      116,
      115,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      98,
      117,
      108,
      108,
      101,
      116,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      108,
      36,
      40,
      116,
      104,
      105,
      115,
      41,
      46,
      114,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      62,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      105,
      100,
      61,
      34,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      72,
      111,
      109,
      101,
      60,
      47,
      97,
      62,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      115,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      115,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      109,
      101,
      109,
      111,
      114,
      105,
      97,
      108,
      109,
      101,
      115,
      115,
      97,
      103,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      97,
      99,
      116,
      105,
      118,
      101,
      34,
      62,
      115,
      111,
      109,
      101,
      119,
      104,
      97,
      116,
      118,
      105,
      99,
      116,
      111,
      114,
      105,
      97,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      76,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      99,
      116,
      118,
      105,
      115,
      105,
      116,
      111,
      114,
      115,
      68,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      10,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      119,
      105,
      100,
      116,
      104,
      32,
      61,
      32,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      118,
      105,
      114,
      103,
      105,
      110,
      105,
      97,
      110,
      111,
      114,
      109,
      97,
      108,
      108,
      121,
      104,
      97,
      112,
      112,
      101,
      110,
      101,
      100,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      82,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      112,
      114,
      101,
      112,
      97,
      114,
      101,
      100,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      115,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      98,
      105,
      114,
      116,
      104,
      100,
      97,
      121,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      121,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      108,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      99,
      111,
      110,
      115,
      117,
      109,
      101,
      114,
      80,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      100,
      46,
      106,
      112,
      103,
      34,
      32,
      47,
      62,
      109,
      97,
      99,
      104,
      105,
      110,
      101,
      115,
      60,
      47,
      104,
      50,
      62,
      10,
      32,
      32,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      102,
      114,
      105,
      101,
      110,
      100,
      108,
      121,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      115,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      97,
      100,
      101,
      113,
      117,
      97,
      116,
      101,
      112,
      97,
      107,
      105,
      115,
      116,
      97,
      110,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      118,
      97,
      108,
      117,
      97,
      98,
      108,
      101,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      98,
      114,
      105,
      110,
      103,
      105,
      110,
      103,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      47,
      76,
      105,
      115,
      116,
      32,
      111,
      102,
      32,
      72,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      32,
      40,
      38,
      113,
      117,
      111,
      116,
      59,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      101,
      109,
      97,
      108,
      97,
      121,
      115,
      105,
      97,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      99,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      112,
      97,
      116,
      116,
      101,
      114,
      110,
      115,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      115,
      114,
      101,
      108,
      105,
      97,
      98,
      108,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      9,
      9,
      60,
      115,
      101,
      108,
      101,
      99,
      116,
      32,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      99,
      108,
      111,
      116,
      104,
      105,
      110,
      103,
      119,
      97,
      116,
      99,
      104,
      105,
      110,
      103,
      60,
      108,
      105,
      32,
      105,
      100,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      99,
      97,
      114,
      114,
      121,
      105,
      110,
      103,
      115,
      101,
      110,
      116,
      101,
      110,
      99,
      101,
      60,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      116,
      104,
      105,
      110,
      107,
      105,
      110,
      103,
      99,
      97,
      116,
      99,
      104,
      40,
      101,
      41,
      115,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      77,
      105,
      99,
      104,
      97,
      101,
      108,
      32,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      116,
      99,
      97,
      114,
      111,
      117,
      115,
      101,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      46,
      115,
      112,
      108,
      105,
      116,
      40,
      34,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      32,
      41,
      123,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      100,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      99,
      111,
      118,
      101,
      114,
      97,
      103,
      101,
      99,
      104,
      97,
      105,
      114,
      109,
      97,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      47,
      62,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      115,
      82,
      105,
      99,
      104,
      97,
      114,
      100,
      32,
      119,
      104,
      97,
      116,
      101,
      118,
      101,
      114,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      121,
      98,
      97,
      115,
      101,
      98,
      97,
      108,
      108,
      106,
      117,
      100,
      103,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      46,
      46,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      34,
      47,
      62,
      60,
      47,
      97,
      62,
      13,
      10,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      115,
      99,
      111,
      116,
      108,
      97,
      110,
      100,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      46,
      32,
      73,
      83,
      66,
      78,
      32,
      48,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      45,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      115,
      112,
      101,
      97,
      107,
      101,
      114,
      115,
      67,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      101,
      115,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      111,
      117,
      110,
      116,
      73,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      99,
      114,
      105,
      116,
      101,
      114,
      105,
      97,
      115,
      116,
      114,
      111,
      110,
      103,
      108,
      121,
      58,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      99,
      111,
      118,
      101,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      118,
      101,
      104,
      105,
      99,
      108,
      101,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      110,
      100,
      108,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      87,
      105,
      108,
      108,
      105,
      97,
      109,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      114,
      95,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      97,
      99,
      99,
      117,
      114,
      97,
      99,
      121,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      101,
      114,
      115,
      111,
      110,
      102,
      108,
      101,
      120,
      105,
      98,
      108,
      101,
      67,
      97,
      116,
      101,
      103,
      111,
      114,
      121,
      108,
      97,
      119,
      114,
      101,
      110,
      99,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      108,
      97,
      121,
      111,
      117,
      116,
      61,
      34,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      109,
      97,
      120,
      105,
      109,
      117,
      109,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      104,
      97,
      109,
      105,
      108,
      116,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      32,
      99,
      97,
      110,
      97,
      100,
      105,
      97,
      110,
      99,
      104,
      97,
      110,
      110,
      101,
      108,
      115,
      47,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      47,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      111,
      112,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      111,
      114,
      116,
      117,
      103,
      97,
      108,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      105,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      119,
      105,
      114,
      101,
      108,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      97,
      103,
      101,
      110,
      99,
      105,
      101,
      115,
      83,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      38,
      104,
      101,
      108,
      108,
      105,
      112,
      59,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      34,
      32,
      115,
      105,
      122,
      101,
      61,
      34,
      112,
      97,
      103,
      101,
      78,
      97,
      109,
      101,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      32,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      62,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      115,
      105,
      108,
      108,
      105,
      110,
      111,
      105,
      115,
      108,
      105,
      110,
      107,
      115,
      34,
      62,
      10,
      9,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      115,
      97,
      116,
      117,
      114,
      100,
      97,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      108,
      105,
      116,
      101,
      109,
      112,
      114,
      111,
      112,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      114,
      112,
      114,
      111,
      112,
      111,
      115,
      97,
      108,
      61,
      34,
      102,
      97,
      108,
      115,
      101,
      34,
      69,
      115,
      112,
      97,
      195,
      177,
      111,
      108,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      121,
      109,
      112,
      116,
      111,
      109,
      115,
      111,
      114,
      105,
      101,
      110,
      116,
      101,
      100,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      60,
      112,
      108,
      101,
      97,
      115,
      117,
      114,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      46,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      115,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      46,
      10,
      10,
      83,
      111,
      109,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      98,
      117,
      108,
      103,
      97,
      114,
      105,
      97,
      46,
      115,
      104,
      111,
      119,
      40,
      41,
      59,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      71,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      119,
      105,
      108,
      108,
      105,
      97,
      109,
      115,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      62,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      111,
      114,
      114,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      97,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      68,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      46,
      32,
      10,
      10,
      84,
      104,
      101,
      32,
      121,
      111,
      117,
      114,
      115,
      101,
      108,
      102,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      109,
      105,
      99,
      104,
      105,
      103,
      97,
      110,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      99,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      112,
      114,
      105,
      111,
      114,
      105,
      116,
      121,
      112,
      114,
      105,
      110,
      116,
      105,
      110,
      103,
      100,
      114,
      105,
      110,
      107,
      105,
      110,
      103,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      121,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      105,
      99,
      101,
      114,
      115,
      82,
      117,
      115,
      115,
      105,
      97,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      115,
      45,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      112,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      101,
      108,
      105,
      103,
      105,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      115,
      97,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      111,
      110,
      108,
      111,
      97,
      100,
      61,
      34,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      115,
      117,
      112,
      112,
      108,
      105,
      101,
      100,
      112,
      97,
      121,
      109,
      101,
      110,
      116,
      115,
      103,
      108,
      111,
      115,
      115,
      97,
      114,
      121,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      103,
      117,
      105,
      100,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      100,
      62,
      60,
      116,
      100,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      109,
      105,
      100,
      100,
      108,
      101,
      34,
      62,
      99,
      97,
      109,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      115,
      115,
      99,
      111,
      116,
      116,
      105,
      115,
      104,
      106,
      111,
      110,
      97,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      119,
      105,
      100,
      103,
      101,
      116,
      115,
      46,
      99,
      108,
      105,
      110,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      105,
      108,
      97,
      110,
      100,
      116,
      101,
      97,
      99,
      104,
      101,
      114,
      115,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      9,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      115,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      83,
      116,
      114,
      105,
      110,
      103,
      60,
      47,
      115,
      109,
      97,
      108,
      108,
      62,
      111,
      107,
      108,
      97,
      104,
      111,
      109,
      97,
      119,
      105,
      108,
      108,
      32,
      98,
      101,
      32,
      105,
      110,
      118,
      101,
      115,
      116,
      111,
      114,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      104,
      111,
      108,
      105,
      100,
      97,
      121,
      115,
      82,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      108,
      105,
      99,
      101,
      110,
      115,
      101,
      100,
      32,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      46,
      32,
      65,
      102,
      116,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      116,
      105,
      110,
      103,
      101,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      32,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      97,
      110,
      100,
      114,
      111,
      105,
      100,
      34,
      113,
      117,
      105,
      99,
      107,
      108,
      121,
      32,
      109,
      101,
      101,
      116,
      105,
      110,
      103,
      115,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      44,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      104,
      102,
      111,
      114,
      101,
      99,
      97,
      115,
      116,
      46,
      32,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      117,
      114,
      115,
      100,
      97,
      121,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      38,
      101,
      97,
      99,
      117,
      116,
      101,
      59,
      104,
      97,
      115,
      67,
      108,
      97,
      115,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      101,
      111,
      114,
      100,
      101,
      114,
      105,
      110,
      103,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      112,
      97,
      116,
      105,
      101,
      110,
      116,
      115,
      32,
      79,
      110,
      108,
      105,
      110,
      101,
      32,
      99,
      111,
      108,
      111,
      114,
      97,
      100,
      111,
      79,
      112,
      116,
      105,
      111,
      110,
      115,
      34,
      99,
      97,
      109,
      112,
      98,
      101,
      108,
      108,
      60,
      33,
      45,
      45,
      32,
      101,
      110,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      60,
      98,
      114,
      32,
      47,
      62,
      13,
      10,
      95,
      112,
      111,
      112,
      117,
      112,
      115,
      124,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      44,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      32,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      60,
      98,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      101,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      32,
      67,
      111,
      109,
      112,
      97,
      110,
      121,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      109,
      97,
      114,
      115,
      104,
      97,
      108,
      108,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      108,
      121,
      41,
      46,
      10,
      10,
      84,
      104,
      101,
      32,
      116,
      97,
      120,
      111,
      110,
      111,
      109,
      121,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      34,
      32,
      100,
      97,
      116,
      97,
      45,
      115,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      115,
      99,
      114,
      111,
      108,
      108,
      84,
      111,
      32,
      112,
      114,
      111,
      106,
      101,
      99,
      116,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      97,
      116,
      116,
      111,
      114,
      110,
      101,
      121,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      115,
      102,
      97,
      110,
      99,
      121,
      98,
      111,
      120,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      119,
      105,
      108,
      100,
      108,
      105,
      102,
      101,
      99,
      104,
      101,
      99,
      107,
      101,
      100,
      61,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      112,
      120,
      59,
      102,
      111,
      110,
      116,
      45,
      32,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      118,
      97,
      99,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      111,
      109,
      112,
      115,
      111,
      110,
      108,
      105,
      103,
      104,
      116,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      48,
      99,
      104,
      101,
      99,
      107,
      105,
      110,
      103,
      60,
      47,
      116,
      98,
      111,
      100,
      121,
      62,
      60,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      60,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      102,
      105,
      110,
      100,
      105,
      110,
      103,
      115,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      99,
      108,
      105,
      99,
      107,
      105,
      110,
      103,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      32,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      111,
      110,
      83,
      117,
      98,
      109,
      105,
      116,
      109,
      97,
      114,
      121,
      108,
      97,
      110,
      100,
      99,
      111,
      108,
      108,
      101,
      103,
      101,
      115,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      108,
      105,
      115,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      46,
      108,
      111,
      103,
      103,
      101,
      100,
      73,
      110,
      97,
      100,
      118,
      105,
      115,
      111,
      114,
      121,
      115,
      105,
      98,
      108,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      115,
      38,
      113,
      117,
      111,
      116,
      59,
      41,
      115,
      46,
      32,
      84,
      104,
      105,
      115,
      32,
      112,
      97,
      99,
      107,
      97,
      103,
      101,
      115,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      112,
      114,
      101,
      103,
      110,
      97,
      110,
      116,
      116,
      111,
      109,
      111,
      114,
      114,
      111,
      119,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      105,
      99,
      111,
      110,
      46,
      112,
      110,
      103,
      106,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      99,
      111,
      100,
      101,
      98,
      97,
      115,
      101,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      62,
      103,
      97,
      109,
      98,
      108,
      105,
      110,
      103,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      44,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      109,
      105,
      115,
      115,
      111,
      117,
      114,
      105,
      115,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      111,
      112,
      58,
      49,
      112,
      120,
      32,
      46,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      50,
      108,
      97,
      122,
      121,
      108,
      111,
      97,
      100,
      110,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      10,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      60,
      116,
      114,
      62,
      60,
      116,
      100,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      50,
      47,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      32,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      116,
      105,
      116,
      108,
      101,
      34,
      62,
      60,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      105,
      116,
      97,
      108,
      105,
      97,
      110,
      111,
      114,
      111,
      109,
      195,
      162,
      110,
      196,
      131,
      116,
      195,
      188,
      114,
      107,
      195,
      167,
      101,
      216,
      167,
      216,
      177,
      216,
      175,
      217,
      136,
      116,
      97,
      109,
      98,
      105,
      195,
      169,
      110,
      110,
      111,
      116,
      105,
      99,
      105,
      97,
      115,
      109,
      101,
      110,
      115,
      97,
      106,
      101,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      115,
      100,
      101,
      114,
      101,
      99,
      104,
      111,
      115,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      117,
      115,
      117,
      97,
      114,
      105,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      103,
      111,
      98,
      105,
      101,
      114,
      110,
      111,
      101,
      109,
      112,
      114,
      101,
      115,
      97,
      115,
      97,
      110,
      117,
      110,
      99,
      105,
      111,
      115,
      118,
      97,
      108,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      108,
      111,
      109,
      98,
      105,
      97,
      100,
      101,
      115,
      112,
      117,
      195,
      169,
      115,
      100,
      101,
      112,
      111,
      114,
      116,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      111,
      110,
      111,
      115,
      111,
      116,
      114,
      111,
      115,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      109,
      105,
      108,
      108,
      111,
      110,
      101,
      115,
      109,
      101,
      100,
      105,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      114,
      101,
      99,
      117,
      114,
      115,
      111,
      115,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      97,
      110,
      116,
      105,
      97,
      103,
      111,
      110,
      117,
      101,
      115,
      116,
      114,
      111,
      115,
      111,
      112,
      105,
      110,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      114,
      105,
      109,
      105,
      114,
      109,
      105,
      101,
      110,
      116,
      114,
      97,
      115,
      97,
      109,
      195,
      169,
      114,
      105,
      99,
      97,
      118,
      101,
      110,
      100,
      101,
      100,
      111,
      114,
      115,
      111,
      99,
      105,
      101,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      111,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      114,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      111,
      112,
      97,
      108,
      97,
      98,
      114,
      97,
      115,
      105,
      110,
      116,
      101,
      114,
      195,
      169,
      115,
      101,
      110,
      116,
      111,
      110,
      99,
      101,
      115,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      109,
      105,
      101,
      109,
      98,
      114,
      111,
      115,
      114,
      101,
      97,
      108,
      105,
      100,
      97,
      100,
      99,
      195,
      179,
      114,
      100,
      111,
      98,
      97,
      122,
      97,
      114,
      97,
      103,
      111,
      122,
      97,
      112,
      195,
      161,
      103,
      105,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      108,
      101,
      115,
      98,
      108,
      111,
      113,
      117,
      101,
      97,
      114,
      103,
      101,
      115,
      116,
      105,
      195,
      179,
      110,
      97,
      108,
      113,
      117,
      105,
      108,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      109,
      97,
      115,
      99,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      111,
      118,
      101,
      114,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      97,
      101,
      115,
      116,
      117,
      100,
      105,
      111,
      115,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      97,
      108,
      105,
      99,
      97,
      110,
      116,
      101,
      98,
      117,
      115,
      99,
      97,
      100,
      111,
      114,
      99,
      97,
      110,
      116,
      105,
      100,
      97,
      100,
      101,
      110,
      116,
      114,
      97,
      100,
      97,
      115,
      97,
      99,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      114,
      99,
      104,
      105,
      118,
      111,
      115,
      115,
      117,
      112,
      101,
      114,
      105,
      111,
      114,
      109,
      97,
      121,
      111,
      114,
      195,
      173,
      97,
      97,
      108,
      101,
      109,
      97,
      110,
      105,
      97,
      102,
      117,
      110,
      99,
      105,
      195,
      179,
      110,
      195,
      186,
      108,
      116,
      105,
      109,
      111,
      115,
      104,
      97,
      99,
      105,
      101,
      110,
      100,
      111,
      97,
      113,
      117,
      101,
      108,
      108,
      111,
      115,
      101,
      100,
      105,
      99,
      105,
      195,
      179,
      110,
      102,
      101,
      114,
      110,
      97,
      110,
      100,
      111,
      97,
      109,
      98,
      105,
      101,
      110,
      116,
      101,
      102,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      110,
      117,
      101,
      115,
      116,
      114,
      97,
      115,
      99,
      108,
      105,
      101,
      110,
      116,
      101,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      111,
      115,
      98,
      97,
      115,
      116,
      97,
      110,
      116,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      114,
      101,
      112,
      111,
      114,
      116,
      97,
      114,
      99,
      111,
      110,
      103,
      114,
      101,
      115,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      114,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      111,
      99,
      111,
      110,
      116,
      114,
      97,
      116,
      111,
      106,
      195,
      179,
      118,
      101,
      110,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      116,
      111,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      99,
      111,
      110,
      106,
      117,
      110,
      116,
      111,
      101,
      110,
      101,
      114,
      103,
      195,
      173,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      114,
      97,
      115,
      116,
      117,
      114,
      105,
      97,
      115,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      114,
      98,
      111,
      108,
      101,
      116,
      195,
      173,
      110,
      115,
      97,
      108,
      118,
      97,
      100,
      111,
      114,
      99,
      111,
      114,
      114,
      101,
      99,
      116,
      97,
      116,
      114,
      97,
      98,
      97,
      106,
      111,
      115,
      112,
      114,
      105,
      109,
      101,
      114,
      111,
      115,
      110,
      101,
      103,
      111,
      99,
      105,
      111,
      115,
      108,
      105,
      98,
      101,
      114,
      116,
      97,
      100,
      100,
      101,
      116,
      97,
      108,
      108,
      101,
      115,
      112,
      97,
      110,
      116,
      97,
      108,
      108,
      97,
      112,
      114,
      195,
      179,
      120,
      105,
      109,
      111,
      97,
      108,
      109,
      101,
      114,
      195,
      173,
      97,
      97,
      110,
      105,
      109,
      97,
      108,
      101,
      115,
      113,
      117,
      105,
      195,
      169,
      110,
      101,
      115,
      99,
      111,
      114,
      97,
      122,
      195,
      179,
      110,
      115,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      98,
      117,
      115,
      99,
      97,
      110,
      100,
      111,
      111,
      112,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      120,
      116,
      101,
      114,
      105,
      111,
      114,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      111,
      116,
      111,
      100,
      97,
      118,
      195,
      173,
      97,
      103,
      97,
      108,
      101,
      114,
      195,
      173,
      97,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      109,
      101,
      100,
      105,
      99,
      105,
      110,
      97,
      108,
      105,
      99,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      97,
      115,
      112,
      101,
      99,
      116,
      111,
      115,
      99,
      114,
      195,
      173,
      116,
      105,
      99,
      97,
      100,
      195,
      179,
      108,
      97,
      114,
      101,
      115,
      106,
      117,
      115,
      116,
      105,
      99,
      105,
      97,
      100,
      101,
      98,
      101,
      114,
      195,
      161,
      110,
      112,
      101,
      114,
      195,
      173,
      111,
      100,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      116,
      97,
      109,
      97,
      110,
      116,
      101,
      110,
      101,
      114,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      111,
      114,
      101,
      99,
      105,
      98,
      105,
      100,
      97,
      116,
      114,
      105,
      98,
      117,
      110,
      97,
      108,
      116,
      101,
      110,
      101,
      114,
      105,
      102,
      101,
      99,
      97,
      110,
      99,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      97,
      114,
      105,
      97,
      115,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      100,
      105,
      118,
      101,
      114,
      115,
      111,
      115,
      109,
      97,
      108,
      108,
      111,
      114,
      99,
      97,
      114,
      101,
      113,
      117,
      105,
      101,
      114,
      101,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      111,
      100,
      101,
      98,
      101,
      114,
      195,
      173,
      97,
      118,
      105,
      118,
      105,
      101,
      110,
      100,
      97,
      102,
      105,
      110,
      97,
      110,
      122,
      97,
      115,
      97,
      100,
      101,
      108,
      97,
      110,
      116,
      101,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      97,
      99,
      111,
      110,
      115,
      101,
      106,
      111,
      115,
      100,
      105,
      102,
      195,
      173,
      99,
      105,
      108,
      99,
      105,
      117,
      100,
      97,
      100,
      101,
      115,
      97,
      110,
      116,
      105,
      103,
      117,
      97,
      115,
      97,
      118,
      97,
      110,
      122,
      97,
      100,
      97,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      117,
      110,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      195,
      161,
      110,
      99,
      104,
      101,
      122,
      99,
      97,
      109,
      112,
      97,
      195,
      177,
      97,
      115,
      111,
      102,
      116,
      111,
      110,
      105,
      99,
      114,
      101,
      118,
      105,
      115,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      105,
      101,
      110,
      101,
      115,
      101,
      99,
      116,
      111,
      114,
      101,
      115,
      109,
      111,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      97,
      99,
      117,
      108,
      116,
      97,
      100,
      99,
      114,
      195,
      169,
      100,
      105,
      116,
      111,
      100,
      105,
      118,
      101,
      114,
      115,
      97,
      115,
      115,
      117,
      112,
      117,
      101,
      115,
      116,
      111,
      102,
      97,
      99,
      116,
      111,
      114,
      101,
      115,
      115,
      101,
      103,
      117,
      110,
      100,
      111,
      115,
      112,
      101,
      113,
      117,
      101,
      195,
      177,
      97,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      187,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      190,
      208,
      177,
      209,
      139,
      209,
      130,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      149,
      209,
      129,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      143,
      208,
      178,
      209,
      129,
      208,
      181,
      209,
      133,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      185,
      208,
      180,
      208,
      176,
      208,
      182,
      208,
      181,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      184,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      209,
      130,
      208,
      177,
      209,
      139,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      177,
      209,
      143,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      189,
      209,
      129,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      180,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      189,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      185,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      139,
      209,
      130,
      208,
      190,
      208,
      182,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      209,
      129,
      208,
      178,
      208,
      190,
      209,
      142,
      208,
      187,
      208,
      184,
      209,
      136,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      184,
      209,
      133,
      208,
      191,
      208,
      190,
      208,
      186,
      208,
      176,
      208,
      180,
      208,
      189,
      208,
      181,
      208,
      185,
      208,
      180,
      208,
      190,
      208,
      188,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      131,
      209,
      133,
      208,
      190,
      209,
      130,
      209,
      143,
      208,
      180,
      208,
      178,
      209,
      131,
      209,
      133,
      209,
      129,
      208,
      181,
      209,
      130,
      208,
      184,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      188,
      208,
      184,
      209,
      128,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      177,
      209,
      143,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      184,
      208,
      188,
      209,
      129,
      209,
      135,
      208,
      181,
      209,
      130,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      139,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      140,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      139,
      209,
      130,
      208,
      181,
      208,
      177,
      208,
      181,
      208,
      178,
      209,
      139,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      176,
      208,
      188,
      208,
      184,
      209,
      130,
      208,
      184,
      208,
      191,
      208,
      176,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      184,
      209,
      134,
      208,
      176,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      179,
      208,
      190,
      208,
      180,
      209,
      139,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      142,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      185,
      208,
      184,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      190,
      208,
      186,
      208,
      184,
      209,
      142,
      208,
      189,
      209,
      143,
      208,
      178,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      149,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      138,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      216,
      170,
      216,
      173,
      217,
      131,
      217,
      133,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      138,
      217,
      138,
      217,
      131,
      217,
      136,
      217,
      134,
      216,
      180,
      216,
      168,
      217,
      131,
      216,
      169,
      217,
      129,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      161,
      216,
      163,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      174,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      168,
      216,
      175,
      217,
      132,
      217,
      138,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      170,
      217,
      131,
      217,
      136,
      217,
      134,
      217,
      135,
      217,
      134,
      216,
      167,
      217,
      131,
      216,
      179,
      216,
      167,
      216,
      173,
      216,
      169,
      217,
      134,
      216,
      167,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      183,
      216,
      168,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      216,
      180,
      217,
      131,
      216,
      177,
      216,
      167,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      133,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      180,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      134,
      216,
      180,
      217,
      138,
      216,
      183,
      217,
      133,
      216,
      167,
      216,
      176,
      216,
      167,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      185,
      216,
      168,
      216,
      177,
      216,
      177,
      216,
      173,
      217,
      133,
      216,
      169,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      169,
      217,
      138,
      217,
      130,
      217,
      136,
      217,
      132,
      217,
      133,
      216,
      177,
      217,
      131,
      216,
      178,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      169,
      216,
      163,
      216,
      173,
      217,
      133,
      216,
      175,
      217,
      130,
      217,
      132,
      216,
      168,
      217,
      138,
      217,
      138,
      216,
      185,
      217,
      134,
      217,
      138,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      169,
      216,
      183,
      216,
      177,
      217,
      138,
      217,
      130,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      177,
      217,
      137,
      217,
      133,
      216,
      185,
      217,
      134,
      216,
      167,
      216,
      167,
      216,
      168,
      216,
      173,
      216,
      171,
      216,
      185,
      216,
      177,
      217,
      136,
      216,
      182,
      216,
      168,
      216,
      180,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      172,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      217,
      134,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      217,
      131,
      217,
      132,
      217,
      138,
      216,
      169,
      216,
      168,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      163,
      217,
      138,
      216,
      182,
      216,
      167,
      217,
      138,
      217,
      136,
      216,
      172,
      216,
      175,
      217,
      129,
      216,
      177,
      217,
      138,
      217,
      130,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      170,
      216,
      163,
      217,
      129,
      216,
      182,
      217,
      132,
      217,
      133,
      216,
      183,
      216,
      168,
      216,
      174,
      216,
      167,
      217,
      131,
      216,
      171,
      216,
      177,
      216,
      168,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      129,
      216,
      182,
      217,
      132,
      216,
      167,
      216,
      173,
      217,
      132,
      217,
      137,
      217,
      134,
      217,
      129,
      216,
      179,
      217,
      135,
      216,
      163,
      217,
      138,
      216,
      167,
      217,
      133,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      163,
      217,
      134,
      217,
      135,
      216,
      167,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      167,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      217,
      133,
      216,
      185,
      216,
      177,
      216,
      182,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      133,
      216,
      175,
      216,
      167,
      216,
      174,
      217,
      132,
      217,
      133,
      217,
      133,
      217,
      131,
      217,
      134,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      2,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      4,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      7,
      6,
      5,
      4,
      3,
      2,
      1,
      0,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      15,
      14,
      13,
      12,
      11,
      10,
      9,
      8,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      23,
      22,
      21,
      20,
      19,
      18,
      17,
      16,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      31,
      30,
      29,
      28,
      27,
      26,
      25,
      24,
      255,
      255,
      255,
      255,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      255,
      255,
      255,
      255,
      1,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      3,
      0,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      255,
      255,
      0,
      1,
      0,
      0,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      8,
      0,
      0,
      0,
      1,
      0,
      2,
      0,
      3,
      0,
      4,
      0,
      5,
      0,
      6,
      0,
      7,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      101,
      113,
      117,
      105,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      104,
      105,
      103,
      104,
      108,
      105,
      103,
      104,
      116,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      109,
      97,
      114,
      107,
      101,
      116,
      105,
      110,
      103,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      98,
      101,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      101,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      60,
      47,
      115,
      101,
      108,
      101,
      99,
      116,
      62,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      97,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      115,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      103,
      117,
      109,
      101,
      110,
      116,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      97,
      114,
      121,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      13,
      10,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      66,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      125,
      32,
      101,
      108,
      115,
      101,
      32,
      123,
      10,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      115,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      116,
      101,
      109,
      112,
      108,
      97,
      116,
      101,
      115,
      100,
      97,
      110,
      103,
      101,
      114,
      111,
      117,
      115,
      115,
      97,
      116,
      101,
      108,
      108,
      105,
      116,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      112,
      114,
      111,
      116,
      111,
      116,
      121,
      112,
      101,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      38,
      114,
      97,
      113,
      117,
      111,
      59,
      60,
      47,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      98,
      101,
      97,
      117,
      116,
      105,
      102,
      117,
      108,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      101,
      100,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      116,
      104,
      117,
      109,
      98,
      110,
      97,
      105,
      108,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      46,
      102,
      111,
      99,
      117,
      115,
      40,
      41,
      59,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      10,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      97,
      110,
      101,
      120,
      112,
      101,
      110,
      115,
      105,
      118,
      101,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      102,
      114,
      97,
      109,
      101,
      119,
      111,
      114,
      107,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      99,
      108,
      97,
      115,
      115,
      78,
      97,
      109,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      101,
      108,
      115,
      101,
      119,
      104,
      101,
      114,
      101,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      101,
      114,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      115,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      47,
      100,
      101,
      102,
      97,
      117,
      108,
      116,
      46,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      98,
      105,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      70,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      72,
      111,
      108,
      108,
      121,
      119,
      111,
      111,
      100,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      115,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      114,
      101,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      32,
      112,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      67,
      97,
      109,
      98,
      114,
      105,
      100,
      103,
      101,
      111,
      112,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      66,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      105,
      111,
      110,
      62,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      101,
      100,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      105,
      110,
      116,
      101,
      114,
      102,
      97,
      99,
      101,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      10,
      109,
      111,
      117,
      110,
      116,
      97,
      105,
      110,
      115,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      97,
      98,
      97,
      110,
      100,
      111,
      110,
      101,
      100,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      115,
      101,
      73,
      110,
      116,
      40,
      115,
      116,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      117,
      110,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      78,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      116,
      119,
      111,
      32,
      121,
      101,
      97,
      114,
      115,
      83,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      100,
      66,
      97,
      116,
      116,
      108,
      101,
      32,
      111,
      102,
      112,
      101,
      114,
      99,
      101,
      105,
      118,
      101,
      100,
      116,
      114,
      121,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      112,
      111,
      114,
      116,
      114,
      97,
      121,
      101,
      100,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      69,
      108,
      105,
      122,
      97,
      98,
      101,
      116,
      104,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      105,
      110,
      115,
      117,
      114,
      97,
      110,
      99,
      101,
      115,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      108,
      101,
      103,
      101,
      110,
      100,
      97,
      114,
      121,
      71,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      46,
      105,
      110,
      104,
      101,
      114,
      105,
      116,
      101,
      100,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      67,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      115,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      110,
      111,
      32,
      108,
      111,
      110,
      103,
      101,
      114,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      99,
      97,
      110,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      121,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      105,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      105,
      110,
      101,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      116,
      101,
      108,
      101,
      112,
      104,
      111,
      110,
      101,
      105,
      116,
      101,
      109,
      115,
      99,
      111,
      112,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      115,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      41,
      59,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      70,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      112,
      114,
      111,
      118,
      105,
      100,
      105,
      110,
      103,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      99,
      121,
      98,
      111,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      115,
      117,
      102,
      102,
      101,
      114,
      105,
      110,
      103,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      115,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      115,
      97,
      105,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      116,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      60,
      47,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      104,
      101,
      100,
      117,
      108,
      101,
      100,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      115,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      10,
      115,
      117,
      115,
      112,
      101,
      99,
      116,
      101,
      100,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      32,
      48,
      115,
      112,
      105,
      114,
      105,
      116,
      117,
      97,
      108,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      10,
      109,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      103,
      114,
      97,
      100,
      117,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      101,
      100,
      104,
      101,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      106,
      115,
      104,
      111,
      117,
      115,
      101,
      104,
      111,
      108,
      100,
      99,
      111,
      110,
      102,
      105,
      114,
      109,
      101,
      100,
      112,
      117,
      114,
      99,
      104,
      97,
      115,
      101,
      100,
      108,
      105,
      116,
      101,
      114,
      97,
      108,
      108,
      121,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      117,
      112,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      105,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      99,
      101,
      110,
      116,
      117,
      114,
      105,
      101,
      115,
      74,
      97,
      112,
      97,
      110,
      101,
      115,
      101,
      32,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      97,
      108,
      103,
      111,
      114,
      105,
      116,
      104,
      109,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      115,
      114,
      101,
      98,
      101,
      108,
      108,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      114,
      101,
      115,
      105,
      122,
      97,
      98,
      108,
      101,
      105,
      110,
      118,
      111,
      108,
      118,
      105,
      110,
      103,
      115,
      101,
      110,
      115,
      105,
      116,
      105,
      118,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      112,
      114,
      111,
      118,
      105,
      115,
      105,
      111,
      110,
      40,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      102,
      101,
      97,
      116,
      117,
      114,
      105,
      110,
      103,
      99,
      111,
      110,
      100,
      117,
      99,
      116,
      101,
      100,
      41,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      45,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      110,
      117,
      109,
      101,
      114,
      111,
      117,
      115,
      32,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      102,
      114,
      97,
      103,
      109,
      101,
      110,
      116,
      115,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      110,
      101,
      97,
      114,
      32,
      116,
      104,
      101,
      32,
      65,
      100,
      118,
      97,
      110,
      99,
      101,
      100,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      72,
      111,
      110,
      103,
      32,
      75,
      111,
      110,
      103,
      32,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      101,
      108,
      101,
      118,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      9,
      115,
      112,
      111,
      110,
      115,
      111,
      114,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      116,
      104,
      111,
      115,
      101,
      32,
      119,
      104,
      111,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      101,
      115,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      115,
      117,
      98,
      109,
      105,
      116,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      99,
      111,
      110,
      118,
      105,
      110,
      99,
      101,
      100,
      112,
      114,
      111,
      109,
      111,
      116,
      105,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      99,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      99,
      111,
      97,
      108,
      105,
      116,
      105,
      111,
      110,
      104,
      105,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      115,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      45,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      101,
      110,
      111,
      117,
      103,
      104,
      32,
      116,
      111,
      97,
      108,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      108,
      105,
      118,
      101,
      114,
      101,
      100,
      45,
      45,
      62,
      13,
      10,
      60,
      33,
      45,
      45,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      101,
      100,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      60,
      102,
      117,
      114,
      110,
      105,
      116,
      117,
      114,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      32,
      111,
      110,
      98,
      108,
      117,
      114,
      61,
      34,
      115,
      117,
      115,
      112,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      105,
      112,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      77,
      111,
      114,
      101,
      111,
      118,
      101,
      114,
      44,
      97,
      98,
      111,
      108,
      105,
      115,
      104,
      101,
      100,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      101,
      114,
      101,
      32,
      109,
      97,
      100,
      101,
      101,
      109,
      111,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      121,
      110,
      97,
      114,
      114,
      97,
      116,
      105,
      118,
      101,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      115,
      112,
      120,
      59,
      98,
      111,
      114,
      100,
      101,
      114,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      100,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      34,
      101,
      109,
      112,
      108,
      111,
      121,
      101,
      101,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      46,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      99,
      117,
      115,
      116,
      111,
      109,
      101,
      114,
      115,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      101,
      100,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      70,
      97,
      99,
      101,
      98,
      111,
      111,
      107,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      97,
      110,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      101,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      101,
      83,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      108,
      121,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      101,
      100,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      114,
      115,
      74,
      101,
      114,
      117,
      115,
      97,
      108,
      101,
      109,
      116,
      104,
      101,
      121,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      105,
      110,
      103,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      115,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      97,
      114,
      98,
      105,
      116,
      114,
      97,
      114,
      121,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      119,
      97,
      110,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      120,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      111,
      102,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      117,
      114,
      87,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      98,
      101,
      103,
      97,
      110,
      32,
      116,
      111,
      32,
      105,
      116,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      109,
      97,
      103,
      110,
      105,
      116,
      117,
      100,
      101,
      109,
      117,
      115,
      116,
      32,
      104,
      97,
      118,
      101,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      108,
      121,
      111,
      99,
      99,
      117,
      114,
      114,
      105,
      110,
      103,
      118,
      97,
      114,
      105,
      97,
      98,
      108,
      101,
      115,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      116,
      102,
      111,
      114,
      109,
      46,
      60,
      47,
      108,
      97,
      98,
      101,
      108,
      62,
      60,
      102,
      97,
      105,
      108,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      111,
      117,
      110,
      100,
      115,
      107,
      105,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      115,
      111,
      99,
      105,
      101,
      116,
      105,
      101,
      115,
      97,
      108,
      111,
      110,
      103,
      115,
      105,
      100,
      101,
      32,
      45,
      45,
      38,
      103,
      116,
      59,
      10,
      10,
      115,
      111,
      117,
      116,
      104,
      119,
      101,
      115,
      116,
      116,
      104,
      101,
      32,
      114,
      105,
      103,
      104,
      116,
      114,
      97,
      100,
      105,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      115,
      112,
      111,
      107,
      101,
      110,
      32,
      105,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      111,
      110,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      121,
      98,
      117,
      114,
      105,
      101,
      100,
      32,
      105,
      110,
      97,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      116,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      60,
      47,
      102,
      111,
      110,
      116,
      62,
      60,
      47,
      78,
      111,
      114,
      119,
      101,
      103,
      105,
      97,
      110,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      101,
      100,
      112,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      101,
      113,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      111,
      119,
      110,
      108,
      111,
      97,
      100,
      46,
      114,
      101,
      103,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      97,
      98,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      108,
      105,
      110,
      107,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      97,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      116,
      111,
      111,
      108,
      116,
      105,
      112,
      34,
      62,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      115,
      112,
      101,
      99,
      116,
      32,
      111,
      102,
      65,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      65,
      105,
      114,
      32,
      70,
      111,
      114,
      99,
      101,
      115,
      121,
      115,
      116,
      101,
      109,
      32,
      111,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      105,
      116,
      112,
      97,
      105,
      110,
      116,
      105,
      110,
      103,
      115,
      99,
      111,
      110,
      113,
      117,
      101,
      114,
      101,
      100,
      97,
      114,
      101,
      32,
      115,
      116,
      105,
      108,
      108,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      103,
      114,
      111,
      119,
      116,
      104,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      101,
      100,
      32,
      98,
      121,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      101,
      115,
      102,
      114,
      97,
      110,
      99,
      104,
      105,
      115,
      101,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      101,
      100,
      99,
      104,
      105,
      108,
      100,
      104,
      111,
      111,
      100,
      97,
      108,
      115,
      111,
      32,
      117,
      115,
      101,
      100,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      115,
      105,
      110,
      103,
      97,
      112,
      111,
      114,
      101,
      100,
      101,
      103,
      114,
      101,
      101,
      32,
      111,
      102,
      102,
      97,
      116,
      104,
      101,
      114,
      32,
      111,
      102,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      115,
      60,
      47,
      97,
      62,
      60,
      47,
      112,
      62,
      10,
      99,
      97,
      109,
      101,
      32,
      102,
      114,
      111,
      109,
      119,
      101,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      110,
      111,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      99,
      101,
      105,
      118,
      105,
      110,
      103,
      69,
      120,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      101,
      118,
      101,
      110,
      32,
      109,
      111,
      114,
      101,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      80,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      109,
      117,
      115,
      105,
      99,
      105,
      97,
      110,
      115,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      114,
      115,
      97,
      100,
      118,
      101,
      110,
      116,
      32,
      111,
      102,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      47,
      62,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      34,
      62,
      67,
      111,
      110,
      116,
      97,
      99,
      116,
      83,
      111,
      117,
      116,
      104,
      101,
      114,
      110,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      46,
      32,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      105,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      118,
      97,
      108,
      105,
      100,
      97,
      116,
      101,
      46,
      97,
      112,
      112,
      101,
      97,
      114,
      105,
      110,
      103,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      115,
      115,
      101,
      114,
      105,
      111,
      117,
      115,
      108,
      121,
      45,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      105,
      110,
      105,
      116,
      105,
      97,
      116,
      101,
      100,
      101,
      120,
      116,
      101,
      110,
      100,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      45,
      116,
      101,
      114,
      109,
      105,
      110,
      102,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      99,
      104,
      32,
      116,
      104,
      97,
      116,
      103,
      101,
      116,
      67,
      111,
      111,
      107,
      105,
      101,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      98,
      121,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      105,
      115,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      115,
      100,
      111,
      119,
      110,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      105,
      110,
      103,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      45,
      45,
      62,
      10,
      60,
      33,
      45,
      45,
      32,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      87,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      112,
      105,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      101,
      110,
      115,
      117,
      115,
      119,
      97,
      115,
      32,
      98,
      117,
      105,
      108,
      116,
      86,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      40,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      116,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      110,
      101,
      108,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      99,
      102,
      97,
      118,
      111,
      117,
      114,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      87,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      67,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      115,
      104,
      111,
      119,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      105,
      109,
      105,
      116,
      105,
      118,
      101,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      108,
      101,
      99,
      117,
      108,
      97,
      114,
      112,
      114,
      101,
      99,
      105,
      115,
      101,
      108,
      121,
      100,
      105,
      115,
      115,
      111,
      108,
      118,
      101,
      100,
      85,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      73,
      116,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      119,
      105,
      108,
      108,
      32,
      104,
      97,
      118,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      109,
      115,
      115,
      111,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      70,
      114,
      105,
      101,
      100,
      114,
      105,
      99,
      104,
      119,
      97,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      101,
      99,
      101,
      100,
      105,
      110,
      103,
      84,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      112,
      104,
      121,
      115,
      105,
      99,
      105,
      115,
      116,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      105,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      115,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      98,
      101,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      115,
      117,
      114,
      118,
      105,
      118,
      105,
      110,
      103,
      125,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      97,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      112,
      97,
      114,
      116,
      105,
      97,
      108,
      108,
      121,
      101,
      120,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      97,
      32,
      108,
      105,
      115,
      116,
      32,
      111,
      102,
      108,
      101,
      118,
      101,
      108,
      115,
      32,
      111,
      102,
      110,
      111,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      100,
      105,
      115,
      109,
      105,
      115,
      115,
      101,
      100,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      101,
      115,
      100,
      117,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      101,
      120,
      112,
      108,
      111,
      115,
      105,
      118,
      101,
      114,
      101,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      97,
      108,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      103,
      97,
      108,
      108,
      101,
      114,
      105,
      101,
      115,
      123,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      111,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      105,
      110,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      109,
      101,
      116,
      104,
      111,
      100,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      116,
      105,
      109,
      101,
      115,
      116,
      97,
      109,
      112,
      110,
      101,
      101,
      100,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      71,
      114,
      101,
      97,
      116,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      115,
      101,
      101,
      109,
      101,
      100,
      32,
      116,
      111,
      118,
      105,
      101,
      119,
      101,
      100,
      32,
      97,
      115,
      105,
      109,
      112,
      97,
      99,
      116,
      32,
      111,
      110,
      105,
      100,
      101,
      97,
      32,
      116,
      104,
      97,
      116,
      116,
      104,
      101,
      32,
      87,
      111,
      114,
      108,
      100,
      104,
      101,
      105,
      103,
      104,
      116,
      32,
      111,
      102,
      101,
      120,
      112,
      97,
      110,
      100,
      105,
      110,
      103,
      84,
      104,
      101,
      115,
      101,
      32,
      97,
      114,
      101,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      34,
      62,
      99,
      97,
      114,
      101,
      102,
      117,
      108,
      108,
      121,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      115,
      99,
      104,
      97,
      114,
      103,
      101,
      32,
      111,
      102,
      67,
      108,
      97,
      115,
      115,
      105,
      99,
      97,
      108,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      101,
      100,
      112,
      114,
      101,
      100,
      105,
      99,
      116,
      101,
      100,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      13,
      10,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      99,
      101,
      108,
      101,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      32,
      125,
      41,
      40,
      41,
      59,
      13,
      10,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      45,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      100,
      115,
      97,
      121,
      115,
      32,
      116,
      104,
      97,
      116,
      104,
      97,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      105,
      110,
      72,
      117,
      110,
      103,
      97,
      114,
      105,
      97,
      110,
      115,
      116,
      97,
      116,
      117,
      115,
      32,
      111,
      102,
      115,
      101,
      114,
      118,
      101,
      115,
      32,
      97,
      115,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      97,
      103,
      103,
      114,
      101,
      103,
      97,
      116,
      101,
      102,
      111,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      105,
      110,
      102,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      103,
      114,
      101,
      101,
      100,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      34,
      62,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      111,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      108,
      101,
      99,
      116,
      111,
      114,
      97,
      108,
      115,
      121,
      109,
      98,
      111,
      108,
      32,
      111,
      102,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      32,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      101,
      97,
      115,
      105,
      101,
      114,
      32,
      116,
      111,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      102,
      97,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      119,
      97,
      115,
      32,
      116,
      97,
      107,
      101,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      111,
      107,
      32,
      111,
      118,
      101,
      114,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      105,
      110,
      65,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      97,
      115,
      32,
      102,
      97,
      114,
      32,
      97,
      115,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      101,
      100,
      119,
      111,
      114,
      107,
      32,
      119,
      105,
      116,
      104,
      97,
      32,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      67,
      104,
      114,
      105,
      115,
      116,
      109,
      97,
      115,
      82,
      101,
      116,
      114,
      105,
      101,
      118,
      101,
      100,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      99,
      107,
      32,
      105,
      110,
      116,
      111,
      110,
      111,
      114,
      116,
      104,
      101,
      97,
      115,
      116,
      109,
      97,
      103,
      97,
      122,
      105,
      110,
      101,
      115,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      99,
      111,
      109,
      109,
      105,
      116,
      116,
      101,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      105,
      110,
      103,
      103,
      114,
      111,
      117,
      112,
      115,
      32,
      111,
      102,
      115,
      116,
      111,
      114,
      101,
      100,
      32,
      105,
      110,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      97,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      116,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      101,
      100,
      97,
      110,
      32,
      111,
      98,
      106,
      101,
      99,
      116,
      67,
      97,
      114,
      105,
      98,
      98,
      101,
      97,
      110,
      97,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      116,
      114,
      105,
      99,
      116,
      115,
      119,
      105,
      115,
      99,
      111,
      110,
      115,
      105,
      110,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      59,
      32,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      101,
      100,
      83,
      111,
      99,
      105,
      97,
      108,
      105,
      115,
      116,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      49,
      60,
      47,
      102,
      111,
      111,
      116,
      101,
      114,
      62,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      99,
      104,
      111,
      105,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      32,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      32,
      84,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      46,
      108,
      101,
      110,
      103,
      116,
      104,
      59,
      32,
      100,
      101,
      115,
      105,
      114,
      101,
      32,
      116,
      111,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      99,
      111,
      110,
      99,
      101,
      105,
      118,
      101,
      100,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      101,
      110,
      103,
      97,
      103,
      101,
      32,
      105,
      110,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      44,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      101,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      99,
      105,
      116,
      105,
      101,
      115,
      32,
      105,
      110,
      97,
      99,
      99,
      101,
      115,
      115,
      107,
      101,
      121,
      99,
      111,
      110,
      100,
      101,
      109,
      110,
      101,
      100,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      44,
      102,
      97,
      109,
      105,
      108,
      121,
      32,
      111,
      102,
      83,
      99,
      104,
      111,
      111,
      108,
      32,
      111,
      102,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      115,
      60,
      47,
      111,
      98,
      106,
      101,
      99,
      116,
      62,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      97,
      100,
      118,
      111,
      99,
      97,
      116,
      101,
      100,
      84,
      104,
      101,
      121,
      32,
      119,
      101,
      114,
      101,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      61,
      101,
      110,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      119,
      97,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      97,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      119,
      104,
      101,
      110,
      32,
      116,
      104,
      101,
      121,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      115,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      119,
      101,
      100,
      110,
      101,
      115,
      100,
      97,
      121,
      116,
      104,
      101,
      32,
      116,
      104,
      105,
      114,
      100,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      115,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      32,
      50,
      119,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      121,
      97,
      32,
      99,
      101,
      114,
      116,
      97,
      105,
      110,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      111,
      114,
      97,
      102,
      116,
      101,
      114,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      108,
      97,
      115,
      116,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      100,
      101,
      112,
      101,
      110,
      100,
      32,
      111,
      110,
      115,
      101,
      97,
      114,
      99,
      104,
      34,
      62,
      10,
      112,
      105,
      101,
      99,
      101,
      115,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      110,
      103,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      116,
      101,
      110,
      110,
      101,
      115,
      115,
      101,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      61,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      60,
      60,
      47,
      104,
      101,
      97,
      100,
      101,
      114,
      62,
      103,
      105,
      118,
      101,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      62,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      48,
      118,
      105,
      101,
      119,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      44,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      115,
      117,
      98,
      115,
      101,
      116,
      32,
      111,
      102,
      97,
      116,
      116,
      97,
      99,
      107,
      32,
      111,
      110,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      44,
      112,
      111,
      105,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      108,
      108,
      101,
      103,
      101,
      100,
      108,
      121,
      67,
      108,
      101,
      118,
      101,
      108,
      97,
      110,
      100,
      119,
      97,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      97,
      114,
      101,
      32,
      103,
      105,
      118,
      101,
      110,
      119,
      97,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      100,
      101,
      115,
      105,
      103,
      110,
      32,
      111,
      102,
      109,
      97,
      107,
      101,
      115,
      32,
      116,
      104,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      101,
      115,
      115,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      46,
      10,
      10,
      65,
      102,
      116,
      101,
      114,
      32,
      44,
      32,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      77,
      117,
      115,
      101,
      117,
      109,
      32,
      111,
      102,
      108,
      111,
      117,
      105,
      115,
      105,
      97,
      110,
      97,
      40,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      105,
      110,
      110,
      101,
      115,
      111,
      116,
      97,
      112,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      115,
      97,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      118,
      111,
      108,
      117,
      109,
      101,
      32,
      111,
      102,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      100,
      101,
      102,
      101,
      110,
      115,
      105,
      118,
      101,
      48,
      48,
      112,
      120,
      124,
      114,
      105,
      103,
      104,
      109,
      97,
      100,
      101,
      32,
      102,
      114,
      111,
      109,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      111,
      102,
      40,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      119,
      105,
      116,
      104,
      32,
      115,
      111,
      109,
      101,
      119,
      104,
      111,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      105,
      116,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      32,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      102,
      116,
      101,
      110,
      109,
      101,
      97,
      115,
      117,
      114,
      105,
      110,
      103,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      105,
      115,
      112,
      97,
      112,
      101,
      114,
      98,
      97,
      99,
      107,
      118,
      97,
      108,
      117,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      116,
      105,
      116,
      108,
      101,
      62,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      101,
      114,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      112,
      108,
      97,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      100,
      32,
      101,
      97,
      114,
      108,
      121,
      60,
      47,
      99,
      101,
      110,
      116,
      101,
      114,
      62,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      101,
      112,
      111,
      119,
      101,
      114,
      32,
      97,
      110,
      100,
      111,
      102,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      118,
      101,
      110,
      116,
      118,
      101,
      114,
      121,
      32,
      104,
      105,
      103,
      104,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      47,
      99,
      103,
      105,
      45,
      98,
      105,
      110,
      47,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      97,
      102,
      114,
      105,
      107,
      97,
      97,
      110,
      115,
      101,
      115,
      112,
      101,
      114,
      97,
      110,
      116,
      111,
      102,
      114,
      97,
      110,
      195,
      167,
      97,
      105,
      115,
      108,
      97,
      116,
      118,
      105,
      101,
      197,
      161,
      117,
      108,
      105,
      101,
      116,
      117,
      118,
      105,
      197,
      179,
      196,
      140,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      196,
      141,
      101,
      197,
      161,
      116,
      105,
      110,
      97,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      230,
      151,
      165,
      230,
      156,
      172,
      232,
      170,
      158,
      231,
      174,
      128,
      228,
      189,
      147,
      229,
      173,
      151,
      231,
      185,
      129,
      233,
      171,
      148,
      229,
      173,
      151,
      237,
      149,
      156,
      234,
      181,
      173,
      236,
      150,
      180,
      228,
      184,
      186,
      228,
      187,
      128,
      228,
      185,
      136,
      232,
      174,
      161,
      231,
      174,
      151,
      230,
      156,
      186,
      231,
      172,
      148,
      232,
      174,
      176,
      230,
      156,
      172,
      232,
      168,
      142,
      232,
      171,
      150,
      229,
      141,
      128,
      230,
      156,
      141,
      229,
      138,
      161,
      229,
      153,
      168,
      228,
      186,
      146,
      232,
      129,
      148,
      231,
      189,
      145,
      230,
      136,
      191,
      229,
      156,
      176,
      228,
      186,
      167,
      228,
      191,
      177,
      228,
      185,
      144,
      233,
      131,
      168,
      229,
      135,
      186,
      231,
      137,
      136,
      231,
      164,
      190,
      230,
      142,
      146,
      232,
      161,
      140,
      230,
      166,
      156,
      233,
      131,
      168,
      232,
      144,
      189,
      230,
      160,
      188,
      232,
      191,
      155,
      228,
      184,
      128,
      230,
      173,
      165,
      230,
      148,
      175,
      228,
      187,
      152,
      229,
      174,
      157,
      233,
      170,
      140,
      232,
      175,
      129,
      231,
      160,
      129,
      229,
      167,
      148,
      229,
      145,
      152,
      228,
      188,
      154,
      230,
      149,
      176,
      230,
      141,
      174,
      229,
      186,
      147,
      230,
      182,
      136,
      232,
      180,
      185,
      232,
      128,
      133,
      229,
      138,
      158,
      229,
      133,
      172,
      229,
      174,
      164,
      232,
      174,
      168,
      232,
      174,
      186,
      229,
      140,
      186,
      230,
      183,
      177,
      229,
      156,
      179,
      229,
      184,
      130,
      230,
      146,
      173,
      230,
      148,
      190,
      229,
      153,
      168,
      229,
      140,
      151,
      228,
      186,
      172,
      229,
      184,
      130,
      229,
      164,
      167,
      229,
      173,
      166,
      231,
      148,
      159,
      232,
      182,
      138,
      230,
      157,
      165,
      232,
      182,
      138,
      231,
      174,
      161,
      231,
      144,
      134,
      229,
      145,
      152,
      228,
      191,
      161,
      230,
      129,
      175,
      231,
      189,
      145,
      115,
      101,
      114,
      118,
      105,
      99,
      105,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      97,
      114,
      103,
      101,
      110,
      116,
      105,
      110,
      97,
      98,
      97,
      114,
      99,
      101,
      108,
      111,
      110,
      97,
      99,
      117,
      97,
      108,
      113,
      117,
      105,
      101,
      114,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      100,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      111,
      115,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      119,
      105,
      107,
      105,
      112,
      101,
      100,
      105,
      97,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      98,
      195,
      186,
      115,
      113,
      117,
      101,
      100,
      97,
      99,
      111,
      109,
      117,
      110,
      105,
      100,
      97,
      100,
      115,
      101,
      103,
      117,
      114,
      105,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      112,
      114,
      101,
      103,
      117,
      110,
      116,
      97,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      114,
      118,
      101,
      110,
      101,
      122,
      117,
      101,
      108,
      97,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      97,
      115,
      100,
      105,
      99,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      110,
      111,
      118,
      105,
      101,
      109,
      98,
      114,
      101,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      101,
      115,
      112,
      114,
      111,
      121,
      101,
      99,
      116,
      111,
      115,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      111,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      101,
      99,
      111,
      110,
      111,
      109,
      195,
      173,
      97,
      105,
      109,
      195,
      161,
      103,
      101,
      110,
      101,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      97,
      114,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      114,
      110,
      101,
      99,
      101,
      115,
      97,
      114,
      105,
      111,
      97,
      116,
      101,
      110,
      99,
      105,
      195,
      179,
      110,
      116,
      101,
      108,
      195,
      169,
      102,
      111,
      110,
      111,
      99,
      111,
      109,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      97,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      112,
      97,
      99,
      105,
      100,
      97,
      100,
      101,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      97,
      110,
      195,
      161,
      108,
      105,
      115,
      105,
      115,
      102,
      97,
      118,
      111,
      114,
      105,
      116,
      111,
      115,
      116,
      195,
      169,
      114,
      109,
      105,
      110,
      111,
      115,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      105,
      97,
      101,
      116,
      105,
      113,
      117,
      101,
      116,
      97,
      115,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      111,
      115,
      102,
      117,
      110,
      99,
      105,
      111,
      110,
      101,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      99,
      97,
      114,
      195,
      161,
      99,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      105,
      101,
      100,
      97,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      105,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      109,
      117,
      110,
      105,
      99,
      105,
      112,
      97,
      108,
      99,
      114,
      101,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      101,
      115,
      99,
      97,
      114,
      103,
      97,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      105,
      97,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      111,
      112,
      105,
      110,
      105,
      111,
      110,
      101,
      115,
      101,
      106,
      101,
      114,
      99,
      105,
      99,
      105,
      111,
      101,
      100,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      115,
      97,
      108,
      97,
      109,
      97,
      110,
      99,
      97,
      103,
      111,
      110,
      122,
      195,
      161,
      108,
      101,
      122,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      112,
      101,
      108,
      195,
      173,
      99,
      117,
      108,
      97,
      114,
      101,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      101,
      115,
      116,
      97,
      114,
      114,
      97,
      103,
      111,
      110,
      97,
      112,
      114,
      195,
      161,
      99,
      116,
      105,
      99,
      97,
      110,
      111,
      118,
      101,
      100,
      97,
      100,
      101,
      115,
      112,
      114,
      111,
      112,
      117,
      101,
      115,
      116,
      97,
      112,
      97,
      99,
      105,
      101,
      110,
      116,
      101,
      115,
      116,
      195,
      169,
      99,
      110,
      105,
      99,
      97,
      115,
      111,
      98,
      106,
      101,
      116,
      105,
      118,
      111,
      115,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      111,
      115,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      185,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      136,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      155,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      143,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      164,
      100,
      105,
      112,
      108,
      111,
      100,
      111,
      99,
      115,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      164,
      148,
      224,
      164,
      184,
      224,
      164,
      164,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      134,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      136,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      174,
      224,
      165,
      140,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      137,
      224,
      164,
      172,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      164,
      164,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      149,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      129,
      224,
      164,
      134,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      173,
      224,
      165,
      128,
      224,
      164,
      151,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      138,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      144,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      151,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      165,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      160,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      165,
      140,
      224,
      164,
      168,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      150,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      165,
      128,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      13,
      10,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      32,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      118,
      101,
      114,
      121,
      116,
      104,
      105,
      110,
      103,
      60,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      38,
      99,
      111,
      112,
      121,
      59,
      32,
      50,
      48,
      49,
      106,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      115,
      98,
      114,
      101,
      97,
      100,
      99,
      114,
      117,
      109,
      98,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      104,
      111,
      114,
      105,
      122,
      111,
      110,
      116,
      97,
      108,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      97,
      99,
      116,
      105,
      118,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      78,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      60,
      109,
      99,
      104,
      101,
      99,
      107,
      98,
      111,
      120,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      105,
      113,
      117,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      97,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      117,
      110,
      116,
      39,
      44,
      32,
      39,
      85,
      65,
      45,
      114,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      101,
      100,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      111,
      114,
      46,
      32,
      61,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      105,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      38,
      108,
      116,
      59,
      98,
      114,
      38,
      103,
      116,
      59,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      35,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      108,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      105,
      112,
      84,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      80,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      97,
      114,
      105,
      115,
      111,
      110,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      34,
      99,
      111,
      110,
      99,
      108,
      117,
      115,
      105,
      111,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      98,
      105,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      95,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      111,
      111,
      100,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      112,
      101,
      114,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      101,
      32,
      111,
      110,
      102,
      111,
      99,
      117,
      115,
      61,
      34,
      60,
      102,
      111,
      114,
      109,
      32,
      105,
      100,
      61,
      34,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      105,
      115,
      46,
      118,
      97,
      108,
      117,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      119,
      101,
      108,
      108,
      45,
      107,
      110,
      111,
      119,
      110,
      118,
      97,
      114,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      112,
      104,
      101,
      110,
      111,
      109,
      101,
      110,
      111,
      110,
      100,
      105,
      115,
      99,
      105,
      112,
      108,
      105,
      110,
      101,
      108,
      111,
      103,
      111,
      46,
      112,
      110,
      103,
      34,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      44,
      98,
      111,
      117,
      110,
      100,
      97,
      114,
      105,
      101,
      115,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      117,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      40,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      34,
      32,
      117,
      110,
      101,
      115,
      99,
      97,
      112,
      101,
      40,
      34,
      112,
      97,
      115,
      115,
      119,
      111,
      114,
      100,
      34,
      32,
      100,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      114,
      97,
      112,
      112,
      101,
      114,
      34,
      62,
      10,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      104,
      105,
      112,
      108,
      105,
      110,
      103,
      117,
      105,
      115,
      116,
      105,
      99,
      112,
      120,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      97,
      115,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      112,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      105,
      102,
      32,
      40,
      116,
      121,
      112,
      101,
      111,
      102,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      118,
      111,
      99,
      97,
      98,
      117,
      108,
      97,
      114,
      121,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      115,
      105,
      115,
      46,
      115,
      117,
      98,
      109,
      105,
      116,
      40,
      41,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      97,
      110,
      110,
      111,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      104,
      105,
      110,
      100,
      32,
      116,
      104,
      101,
      70,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      34,
      97,
      115,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      111,
      114,
      114,
      117,
      112,
      116,
      105,
      111,
      110,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      115,
      116,
      115,
      101,
      120,
      112,
      108,
      105,
      99,
      105,
      116,
      108,
      121,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      67,
      108,
      105,
      99,
      107,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      100,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      111,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      110,
      118,
      101,
      115,
      116,
      109,
      101,
      110,
      116,
      112,
      114,
      111,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      77,
      97,
      110,
      97,
      103,
      101,
      109,
      101,
      110,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      40,
      47,
      100,
      101,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      99,
      111,
      110,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      112,
      117,
      110,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      97,
      100,
      97,
      112,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      119,
      101,
      108,
      108,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      117,
      112,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      112,
      120,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      97,
      108,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      101,
      100,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      10,
      10,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      114,
      115,
      97,
      114,
      116,
      105,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      101,
      100,
      67,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      109,
      101,
      110,
      116,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      101,
      114,
      101,
      78,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      98,
      101,
      121,
      111,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      106,
      111,
      117,
      114,
      110,
      97,
      108,
      105,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      34,
      32,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      13,
      10,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      105,
      110,
      103,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      32,
      109,
      97,
      105,
      110,
      115,
      116,
      114,
      101,
      97,
      109,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      13,
      10,
      32,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      34,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      32,
      32,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      112,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      101,
      100,
      34,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      101,
      110,
      80,
      111,
      114,
      116,
      117,
      103,
      117,
      101,
      115,
      101,
      115,
      117,
      98,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      117,
      108,
      116,
      105,
      109,
      101,
      100,
      105,
      97,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      108,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      97,
      112,
      97,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      101,
      120,
      99,
      101,
      112,
      116,
      32,
      102,
      111,
      114,
      103,
      117,
      105,
      100,
      101,
      108,
      105,
      110,
      101,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      109,
      97,
      114,
      107,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      115,
      101,
      99,
      111,
      110,
      100,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      97,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      112,
      97,
      114,
      97,
      109,
      101,
      116,
      101,
      114,
      115,
      112,
      114,
      111,
      104,
      105,
      98,
      105,
      116,
      101,
      100,
      61,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      101,
      114,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      112,
      120,
      59,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      114,
      115,
      109,
      105,
      108,
      108,
      101,
      110,
      110,
      105,
      117,
      109,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      116,
      104,
      101,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      59,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      101,
      110,
      99,
      111,
      117,
      114,
      97,
      103,
      101,
      100,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      117,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      99,
      121,
      82,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      100,
      105,
      115,
      99,
      108,
      97,
      105,
      109,
      101,
      114,
      101,
      120,
      112,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      115,
      105,
      109,
      112,
      108,
      105,
      102,
      105,
      101,
      100,
      108,
      101,
      103,
      105,
      116,
      105,
      109,
      97,
      116,
      101,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      48,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      108,
      121,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      102,
      105,
      118,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      80,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      49,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      121,
      99,
      111,
      110,
      102,
      105,
      100,
      101,
      110,
      99,
      101,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      97,
      98,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      111,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      110,
      106,
      111,
      105,
      110,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      115,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      111,
      110,
      99,
      101,
      32,
      97,
      103,
      97,
      105,
      110,
      98,
      117,
      116,
      32,
      114,
      97,
      116,
      104,
      101,
      114,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      110,
      116,
      115,
      111,
      102,
      32,
      99,
      111,
      117,
      114,
      115,
      101,
      44,
      97,
      32,
      103,
      114,
      111,
      117,
      112,
      32,
      111,
      102,
      76,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      85,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      60,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      109,
      111,
      98,
      105,
      108,
      101,
      80,
      114,
      111,
      116,
      101,
      115,
      116,
      97,
      110,
      116,
      97,
      103,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      83,
      105,
      109,
      105,
      108,
      97,
      114,
      108,
      121,
      44,
      34,
      32,
      47,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      13,
      10,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      104,
      101,
      32,
      117,
      115,
      101,
      32,
      111,
      102,
      118,
      111,
      108,
      117,
      110,
      116,
      101,
      101,
      114,
      115,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      114,
      101,
      97,
      116,
      101,
      110,
      101,
      100,
      42,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      116,
      101,
      114,
      60,
      47,
      102,
      111,
      114,
      109,
      62,
      10,
      60,
      47,
      46,
      105,
      110,
      100,
      101,
      120,
      79,
      102,
      40,
      39,
      105,
      32,
      61,
      32,
      48,
      59,
      32,
      105,
      32,
      60,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      100,
      101,
      118,
      111,
      116,
      101,
      100,
      32,
      116,
      111,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      102,
      111,
      114,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      116,
      111,
      117,
      114,
      110,
      97,
      109,
      101,
      110,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      115,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      125,
      10,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      101,
      118,
      97,
      108,
      117,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      122,
      101,
      100,
      97,
      99,
      99,
      101,
      115,
      115,
      105,
      98,
      108,
      101,
      60,
      47,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      62,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      77,
      101,
      97,
      110,
      119,
      104,
      105,
      108,
      101,
      44,
      105,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      101,
      115,
      60,
      47,
      97,
      62,
      60,
      98,
      114,
      32,
      47,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      84,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      98,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      98,
      111,
      116,
      104,
      32,
      115,
      105,
      100,
      101,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      105,
      110,
      103,
      97,
      110,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      60,
      105,
      109,
      103,
      32,
      97,
      108,
      116,
      61,
      34,
      97,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      104,
      105,
      115,
      32,
      109,
      111,
      116,
      104,
      101,
      114,
      109,
      97,
      110,
      99,
      104,
      101,
      115,
      116,
      101,
      114,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      99,
      111,
      109,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      100,
      101,
      99,
      105,
      100,
      101,
      100,
      32,
      116,
      111,
      34,
      62,
      60,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      114,
      115,
      74,
      111,
      117,
      114,
      110,
      97,
      108,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      121,
      102,
      97,
      99,
      105,
      108,
      105,
      116,
      97,
      116,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      98,
      108,
      101,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      34,
      9,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      62,
      67,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      115,
      105,
      116,
      117,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      98,
      117,
      115,
      105,
      110,
      101,
      115,
      115,
      101,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      112,
      101,
      114,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      105,
      110,
      32,
      74,
      97,
      110,
      117,
      97,
      114,
      121,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      105,
      110,
      103,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      9,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      105,
      110,
      103,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      109,
      97,
      121,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      73,
      116,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      102,
      105,
      110,
      97,
      110,
      99,
      105,
      97,
      108,
      32,
      109,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      76,
      117,
      120,
      101,
      109,
      98,
      111,
      117,
      114,
      103,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      101,
      110,
      103,
      97,
      103,
      101,
      100,
      32,
      105,
      110,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      98,
      117,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      10,
      60,
      33,
      45,
      45,
      32,
      69,
      110,
      100,
      32,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      97,
      108,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      116,
      111,
      112,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      105,
      107,
      101,
      32,
      116,
      104,
      101,
      65,
      117,
      115,
      116,
      114,
      97,
      108,
      105,
      97,
      110,
      79,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      115,
      101,
      100,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      105,
      122,
      101,
      108,
      105,
      109,
      105,
      116,
      101,
      100,
      32,
      116,
      111,
      65,
      108,
      101,
      120,
      97,
      110,
      100,
      114,
      105,
      97,
      114,
      101,
      116,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      65,
      100,
      118,
      101,
      110,
      116,
      117,
      114,
      101,
      115,
      102,
      111,
      117,
      114,
      32,
      121,
      101,
      97,
      114,
      115,
      10,
      10,
      38,
      108,
      116,
      59,
      33,
      45,
      45,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      105,
      103,
      105,
      110,
      115,
      32,
      111,
      102,
      111,
      98,
      108,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      115,
      98,
      101,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      97,
      110,
      115,
      60,
      98,
      97,
      115,
      101,
      32,
      104,
      114,
      101,
      102,
      114,
      101,
      112,
      101,
      97,
      116,
      101,
      100,
      108,
      121,
      119,
      105,
      108,
      108,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      98,
      108,
      101,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      101,
      100,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      118,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      122,
      101,
      100,
      114,
      101,
      102,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      32,
      112,
      108,
      97,
      99,
      101,
      97,
      117,
      116,
      111,
      110,
      111,
      109,
      111,
      117,
      115,
      99,
      111,
      109,
      112,
      114,
      111,
      109,
      105,
      115,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      116,
      119,
      111,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      32,
      50,
      113,
      117,
      97,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      119,
      102,
      111,
      98,
      106,
      101,
      99,
      116,
      46,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      110,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      108,
      108,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      98,
      121,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      115,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      119,
      105,
      116,
      104,
      100,
      114,
      97,
      119,
      97,
      108,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      105,
      115,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      99,
      97,
      110,
      100,
      105,
      100,
      97,
      116,
      101,
      115,
      110,
      101,
      119,
      115,
      112,
      97,
      112,
      101,
      114,
      115,
      109,
      121,
      115,
      116,
      101,
      114,
      105,
      111,
      117,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      115,
      117,
      112,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      99,
      111,
      110,
      118,
      101,
      110,
      105,
      101,
      110,
      116,
      114,
      101,
      109,
      101,
      109,
      98,
      101,
      114,
      101,
      100,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      97,
      116,
      105,
      99,
      104,
      97,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      97,
      103,
      97,
      110,
      100,
      97,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      99,
      101,
      114,
      101,
      109,
      111,
      110,
      105,
      97,
      108,
      112,
      114,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      80,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      83,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      45,
      116,
      114,
      97,
      100,
      101,
      109,
      97,
      114,
      107,
      115,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      76,
      105,
      98,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      100,
      97,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      108,
      111,
      110,
      103,
      32,
      97,
      115,
      105,
      109,
      112,
      114,
      105,
      115,
      111,
      110,
      101,
      100,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      109,
      76,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      32,
      50,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      100,
      117,
      115,
      116,
      114,
      105,
      97,
      108,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      102,
      108,
      111,
      97,
      116,
      58,
      32,
      108,
      101,
      102,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      101,
      115,
      115,
      109,
      101,
      110,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      97,
      108,
      115,
      32,
      119,
      105,
      116,
      104,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      115,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      110,
      99,
      101,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      116,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      101,
      114,
      101,
      111,
      118,
      101,
      114,
      32,
      116,
      105,
      109,
      101,
      44,
      115,
      121,
      110,
      111,
      110,
      121,
      109,
      111,
      117,
      115,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      112,
      114,
      101,
      115,
      117,
      109,
      97,
      98,
      108,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      109,
      105,
      108,
      121,
      117,
      115,
      101,
      114,
      65,
      103,
      101,
      110,
      116,
      46,
      117,
      110,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      100,
      97,
      32,
      109,
      105,
      110,
      111,
      114,
      105,
      116,
      121,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      34,
      98,
      101,
      108,
      111,
      110,
      103,
      115,
      32,
      116,
      111,
      116,
      97,
      107,
      101,
      110,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      79,
      99,
      116,
      111,
      98,
      101,
      114,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      114,
      101,
      108,
      105,
      103,
      105,
      111,
      117,
      115,
      32,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      114,
      111,
      119,
      115,
      112,
      97,
      110,
      61,
      34,
      111,
      110,
      108,
      121,
      32,
      97,
      32,
      102,
      101,
      119,
      109,
      101,
      97,
      110,
      116,
      32,
      116,
      104,
      97,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      45,
      45,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      60,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      65,
      114,
      99,
      104,
      98,
      105,
      115,
      104,
      111,
      112,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      110,
      111,
      98,
      101,
      105,
      110,
      103,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      101,
      115,
      112,
      114,
      105,
      118,
      105,
      108,
      101,
      103,
      101,
      115,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      114,
      101,
      115,
      117,
      108,
      116,
      115,
      32,
      105,
      110,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      116,
      104,
      101,
      69,
      97,
      115,
      116,
      101,
      114,
      32,
      101,
      103,
      103,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      115,
      109,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      97,
      98,
      108,
      101,
      80,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      34,
      62,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      97,
      114,
      114,
      105,
      118,
      97,
      108,
      32,
      111,
      102,
      45,
      106,
      115,
      115,
      100,
      107,
      39,
      41,
      41,
      59,
      109,
      97,
      110,
      97,
      103,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      99,
      97,
      115,
      117,
      97,
      108,
      116,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      105,
      111,
      110,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      115,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      32,
      97,
      114,
      105,
      116,
      104,
      109,
      101,
      116,
      105,
      99,
      112,
      114,
      111,
      99,
      101,
      100,
      117,
      114,
      101,
      115,
      109,
      105,
      103,
      104,
      116,
      32,
      104,
      97,
      118,
      101,
      80,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      105,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      80,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      102,
      114,
      105,
      101,
      110,
      100,
      115,
      104,
      105,
      112,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      103,
      105,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      116,
      111,
      119,
      97,
      114,
      100,
      32,
      116,
      104,
      101,
      103,
      117,
      97,
      114,
      97,
      110,
      116,
      101,
      101,
      100,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      48,
      48,
      118,
      105,
      100,
      101,
      111,
      32,
      103,
      97,
      109,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      111,
      110,
      107,
      101,
      121,
      112,
      114,
      101,
      115,
      115,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      117,
      110,
      100,
      101,
      114,
      108,
      121,
      105,
      110,
      103,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      44,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      115,
      114,
      99,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      118,
      101,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      110,
      101,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      105,
      110,
      103,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      111,
      119,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      104,
      111,
      119,
      115,
      32,
      116,
      104,
      97,
      116,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      10,
      9,
      9,
      99,
      111,
      109,
      112,
      108,
      97,
      105,
      110,
      116,
      115,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      101,
      114,
      104,
      101,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      105,
      116,
      115,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      32,
      97,
      118,
      101,
      114,
      97,
      103,
      101,
      101,
      102,
      102,
      111,
      114,
      116,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      102,
      117,
      116,
      117,
      114,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      84,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      44,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      110,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      109,
      101,
      100,
      69,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      101,
      114,
      115,
      99,
      104,
      97,
      108,
      108,
      101,
      110,
      103,
      101,
      115,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      101,
      114,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      115,
      105,
      100,
      105,
      97,
      114,
      121,
      99,
      111,
      110,
      115,
      112,
      105,
      114,
      97,
      99,
      121,
      100,
      101,
      116,
      97,
      105,
      108,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      102,
      102,
      111,
      114,
      100,
      97,
      98,
      108,
      101,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      114,
      101,
      97,
      115,
      111,
      110,
      32,
      102,
      111,
      114,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      105,
      116,
      101,
      109,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      108,
      121,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      108,
      121,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      97,
      97,
      116,
      116,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      116,
      114,
      97,
      118,
      101,
      108,
      108,
      105,
      110,
      103,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      121,
      102,
      111,
      99,
      117,
      115,
      101,
      115,
      32,
      111,
      110,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      98,
      108,
      101,
      102,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      116,
      97,
      110,
      100,
      115,
      32,
      102,
      111,
      114,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      40,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      67,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      105,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      117,
      110,
      100,
      101,
      114,
      116,
      97,
      107,
      101,
      110,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      108,
      121,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      60,
      47,
      98,
      117,
      116,
      116,
      111,
      110,
      62,
      10,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      98,
      101,
      115,
      116,
      45,
      107,
      110,
      111,
      119,
      110,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      97,
      34,
      32,
      100,
      105,
      114,
      61,
      34,
      108,
      116,
      114,
      76,
      105,
      101,
      117,
      116,
      101,
      110,
      97,
      110,
      116,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      121,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      100,
      101,
      32,
      117,
      112,
      32,
      111,
      102,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      108,
      101,
      97,
      114,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      39,
      115,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      101,
      100,
      98,
      97,
      115,
      101,
      100,
      32,
      117,
      112,
      111,
      110,
      116,
      104,
      101,
      32,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      110,
      103,
      101,
      114,
      115,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      46,
      10,
      10,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      66,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      32,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      46,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      105,
      115,
      109,
      105,
      110,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      121,
      114,
      105,
      103,
      104,
      116,
      45,
      119,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      83,
      111,
      99,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      58,
      119,
      101,
      110,
      116,
      32,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      109,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      97,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      117,
      110,
      108,
      101,
      115,
      115,
      32,
      116,
      104,
      101,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      32,
      97,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      118,
      101,
      105,
      110,
      103,
      114,
      101,
      100,
      105,
      101,
      110,
      116,
      97,
      116,
      116,
      101,
      110,
      100,
      97,
      110,
      99,
      101,
      67,
      101,
      110,
      116,
      101,
      114,
      32,
      102,
      111,
      114,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      99,
      101,
      114,
      101,
      97,
      100,
      121,
      83,
      116,
      97,
      116,
      101,
      115,
      116,
      114,
      97,
      116,
      101,
      103,
      105,
      101,
      115,
      98,
      117,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      111,
      114,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      102,
      97,
      105,
      108,
      117,
      114,
      101,
      32,
      111,
      102,
      44,
      32,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      98,
      101,
      103,
      97,
      110,
      32,
      119,
      105,
      116,
      104,
      117,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      102,
      114,
      111,
      109,
      32,
      119,
      104,
      105,
      99,
      104,
      47,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      103,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      102,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      104,
      111,
      108,
      100,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      103,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      116,
      111,
      112,
      116,
      104,
      101,
      32,
      71,
      101,
      114,
      109,
      97,
      110,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      115,
      32,
      99,
      97,
      114,
      101,
      101,
      114,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      119,
      97,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      114,
      116,
      104,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      110,
      103,
      97,
      99,
      99,
      117,
      114,
      97,
      116,
      101,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      98,
      117,
      105,
      108,
      116,
      119,
      97,
      115,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      115,
      109,
      117,
      99,
      104,
      32,
      109,
      111,
      114,
      101,
      32,
      68,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      49,
      48,
      48,
      115,
      111,
      109,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      102,
      97,
      109,
      111,
      117,
      115,
      32,
      102,
      111,
      114,
      116,
      111,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      111,
      98,
      106,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      116,
      104,
      101,
      32,
      70,
      114,
      101,
      110,
      99,
      104,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      97,
      110,
      100,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      34,
      62,
      105,
      115,
      32,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      108,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      100,
      117,
      109,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      116,
      101,
      110,
      97,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      45,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      32,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      111,
      114,
      108,
      100,
      119,
      105,
      100,
      101,
      46,
      97,
      114,
      105,
      97,
      45,
      108,
      97,
      98,
      101,
      108,
      116,
      104,
      101,
      32,
      112,
      108,
      97,
      110,
      101,
      116,
      97,
      110,
      100,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      100,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      97,
      116,
      98,
      101,
      110,
      101,
      102,
      105,
      99,
      105,
      97,
      108,
      97,
      114,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      109,
      111,
      110,
      105,
      116,
      111,
      114,
      105,
      110,
      103,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      108,
      121,
      116,
      104,
      101,
      32,
      109,
      111,
      100,
      101,
      114,
      110,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      111,
      110,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      111,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      115,
      111,
      117,
      110,
      100,
      116,
      114,
      97,
      99,
      107,
      115,
      101,
      97,
      114,
      99,
      104,
      70,
      111,
      114,
      109,
      116,
      101,
      110,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      111,
      112,
      101,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      100,
      100,
      114,
      101,
      115,
      115,
      105,
      110,
      103,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      97,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      115,
      32,
      111,
      102,
      118,
      97,
      114,
      105,
      97,
      110,
      116,
      32,
      111,
      102,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      32,
      118,
      101,
      114,
      121,
      32,
      108,
      97,
      114,
      103,
      101,
      97,
      117,
      116,
      111,
      109,
      111,
      116,
      105,
      118,
      101,
      98,
      121,
      32,
      102,
      97,
      114,
      32,
      116,
      104,
      101,
      114,
      97,
      110,
      103,
      101,
      32,
      102,
      114,
      111,
      109,
      112,
      117,
      114,
      115,
      117,
      105,
      116,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      105,
      110,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      97,
      103,
      114,
      101,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      99,
      99,
      117,
      115,
      101,
      100,
      32,
      111,
      102,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      105,
      110,
      103,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      104,
      105,
      115,
      32,
      111,
      114,
      32,
      104,
      101,
      114,
      116,
      114,
      101,
      109,
      101,
      110,
      100,
      111,
      117,
      115,
      102,
      114,
      101,
      101,
      100,
      111,
      109,
      32,
      111,
      102,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      48,
      32,
      49,
      101,
      109,
      32,
      49,
      101,
      109,
      59,
      66,
      97,
      115,
      107,
      101,
      116,
      98,
      97,
      108,
      108,
      47,
      115,
      116,
      121,
      108,
      101,
      46,
      99,
      115,
      115,
      97,
      110,
      32,
      101,
      97,
      114,
      108,
      105,
      101,
      114,
      101,
      118,
      101,
      110,
      32,
      97,
      102,
      116,
      101,
      114,
      47,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      46,
      99,
      111,
      109,
      47,
      105,
      110,
      100,
      101,
      120,
      116,
      97,
      107,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      112,
      105,
      116,
      116,
      115,
      98,
      117,
      114,
      103,
      104,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      13,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      40,
      102,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      111,
      117,
      116,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      13,
      10,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      115,
      116,
      97,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      108,
      121,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      67,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      44,
      32,
      98,
      103,
      99,
      111,
      108,
      111,
      114,
      61,
      34,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      100,
      105,
      115,
      97,
      115,
      116,
      114,
      111,
      117,
      115,
      65,
      110,
      97,
      108,
      121,
      116,
      105,
      99,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      104,
      97,
      115,
      32,
      97,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      115,
      116,
      121,
      108,
      101,
      62,
      10,
      60,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      102,
      111,
      114,
      115,
      105,
      110,
      103,
      101,
      114,
      32,
      97,
      110,
      100,
      46,
      115,
      114,
      99,
      32,
      61,
      32,
      34,
      47,
      47,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      105,
      115,
      32,
      112,
      111,
      105,
      110,
      116,
      99,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      108,
      121,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      114,
      101,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      115,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      110,
      101,
      100,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      215,
      162,
      215,
      145,
      215,
      168,
      215,
      153,
      215,
      170,
      217,
      129,
      216,
      167,
      216,
      177,
      216,
      179,
      219,
      140,
      100,
      101,
      115,
      97,
      114,
      114,
      111,
      108,
      108,
      111,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      101,
      100,
      117,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      115,
      101,
      112,
      116,
      105,
      101,
      109,
      98,
      114,
      101,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      100,
      105,
      114,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      117,
      98,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      100,
      97,
      100,
      114,
      101,
      115,
      112,
      117,
      101,
      115,
      116,
      97,
      115,
      114,
      101,
      115,
      117,
      108,
      116,
      97,
      100,
      111,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      100,
      111,
      115,
      97,
      114,
      116,
      195,
      173,
      99,
      117,
      108,
      111,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      116,
      101,
      115,
      115,
      105,
      103,
      117,
      105,
      101,
      110,
      116,
      101,
      115,
      114,
      101,
      112,
      195,
      186,
      98,
      108,
      105,
      99,
      97,
      115,
      105,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      105,
      111,
      112,
      114,
      105,
      118,
      97,
      99,
      105,
      100,
      97,
      100,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      105,
      111,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      111,
      98,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      101,
      99,
      111,
      110,
      116,
      101,
      110,
      105,
      100,
      111,
      115,
      97,
      99,
      99,
      101,
      115,
      111,
      114,
      105,
      111,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      114,
      97,
      116,
      105,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      105,
      100,
      97,
      100,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      118,
      97,
      108,
      108,
      97,
      100,
      111,
      108,
      105,
      100,
      98,
      105,
      98,
      108,
      105,
      111,
      116,
      101,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      97,
      108,
      101,
      110,
      100,
      97,
      114,
      105,
      111,
      112,
      111,
      108,
      195,
      173,
      116,
      105,
      99,
      97,
      115,
      97,
      110,
      116,
      101,
      114,
      105,
      111,
      114,
      101,
      115,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      101,
      122,
      97,
      109,
      97,
      116,
      101,
      114,
      105,
      97,
      108,
      101,
      115,
      100,
      105,
      102,
      101,
      114,
      101,
      110,
      99,
      105,
      97,
      101,
      99,
      111,
      110,
      195,
      179,
      109,
      105,
      99,
      97,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      101,
      114,
      111,
      100,
      114,
      195,
      173,
      103,
      117,
      101,
      122,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      114,
      101,
      110,
      99,
      117,
      101,
      110,
      116,
      114,
      97,
      110,
      100,
      105,
      115,
      99,
      117,
      115,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      97,
      102,
      117,
      110,
      100,
      97,
      99,
      105,
      195,
      179,
      110,
      102,
      114,
      101,
      99,
      117,
      101,
      110,
      116,
      101,
      115,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      101,
      116,
      111,
      116,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      208,
      177,
      209,
      131,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      209,
      143,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      182,
      208,
      181,
      209,
      135,
      209,
      130,
      208,
      190,
      208,
      177,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      179,
      209,
      131,
      209,
      130,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      176,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      182,
      208,
      180,
      209,
      131,
      208,
      177,
      209,
      131,
      208,
      180,
      209,
      131,
      209,
      130,
      208,
      159,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      183,
      208,
      180,
      208,
      181,
      209,
      129,
      209,
      140,
      208,
      178,
      208,
      184,
      208,
      180,
      208,
      181,
      208,
      190,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      208,
      184,
      208,
      189,
      209,
      131,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      185,
      208,
      187,
      209,
      142,
      208,
      180,
      208,
      181,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      128,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      185,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      176,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      181,
      209,
      130,
      208,
      182,
      208,
      184,
      208,
      183,
      208,
      189,
      209,
      140,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      187,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      177,
      208,
      190,
      208,
      185,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      181,
      209,
      135,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      190,
      208,
      189,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      180,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      181,
      209,
      130,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      191,
      208,
      190,
      209,
      135,
      209,
      130,
      208,
      184,
      208,
      159,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      208,
      181,
      208,
      189,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      184,
      209,
      130,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      184,
      209,
      133,
      209,
      129,
      209,
      128,
      208,
      176,
      208,
      183,
      209,
      131,
      208,
      161,
      208,
      176,
      208,
      189,
      208,
      186,
      209,
      130,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      154,
      208,
      190,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      186,
      208,
      189,
      208,
      184,
      208,
      179,
      208,
      184,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      181,
      208,
      185,
      208,
      189,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      188,
      209,
      129,
      208,
      178,
      209,
      143,
      208,
      183,
      209,
      140,
      208,
      187,
      209,
      142,
      208,
      177,
      208,
      190,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      208,
      184,
      208,
      154,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      164,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      208,
      187,
      208,
      184,
      208,
      191,
      208,
      190,
      208,
      184,
      209,
      129,
      208,
      186,
      209,
      130,
      209,
      139,
      209,
      129,
      209,
      143,
      209,
      135,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      209,
      134,
      208,
      181,
      208,
      189,
      209,
      130,
      209,
      128,
      209,
      130,
      209,
      128,
      209,
      131,
      208,
      180,
      208,
      176,
      209,
      129,
      208,
      176,
      208,
      188,
      209,
      139,
      209,
      133,
      209,
      128,
      209,
      139,
      208,
      189,
      208,
      186,
      208,
      176,
      208,
      157,
      208,
      190,
      208,
      178,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      190,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      208,
      188,
      208,
      176,
      209,
      128,
      209,
      130,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      186,
      209,
      129,
      209,
      130,
      208,
      189,
      208,
      176,
      209,
      136,
      208,
      184,
      209,
      133,
      208,
      188,
      208,
      184,
      208,
      189,
      209,
      131,
      209,
      130,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      142,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      129,
      208,
      176,
      208,
      188,
      208,
      190,
      208,
      188,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      208,
      186,
      208,
      190,
      208,
      189,
      209,
      134,
      208,
      181,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      188,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      144,
      209,
      128,
      209,
      133,
      208,
      184,
      208,
      178,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      216,
      165,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      138,
      217,
      136,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      177,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      182,
      217,
      136,
      216,
      165,
      216,
      182,
      216,
      167,
      217,
      129,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      179,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      170,
      216,
      173,
      217,
      133,
      217,
      138,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      167,
      216,
      170,
      217,
      133,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      137,
      216,
      170,
      216,
      185,
      216,
      175,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      185,
      216,
      177,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      170,
      216,
      183,
      217,
      136,
      217,
      138,
      216,
      177,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      131,
      217,
      133,
      216,
      165,
      216,
      177,
      217,
      129,
      216,
      167,
      217,
      130,
      216,
      183,
      217,
      132,
      216,
      168,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      132,
      216,
      186,
      216,
      169,
      216,
      170,
      216,
      177,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      167,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      180,
      217,
      138,
      216,
      174,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      181,
      216,
      181,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      135,
      216,
      167,
      216,
      170,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      133,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      169,
      217,
      138,
      217,
      133,
      217,
      131,
      217,
      134,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      183,
      217,
      129,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      165,
      216,
      175,
      216,
      167,
      216,
      177,
      216,
      169,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      216,
      169,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      136,
      217,
      130,
      216,
      170,
      216,
      185,
      217,
      134,
      216,
      175,
      217,
      133,
      216,
      167,
      217,
      133,
      216,
      175,
      217,
      138,
      217,
      134,
      216,
      169,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      163,
      216,
      177,
      216,
      180,
      217,
      138,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      138,
      217,
      134,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      129,
      216,
      177,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      131,
      217,
      132,
      216,
      170,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      134,
      216,
      169,
      216,
      172,
      216,
      167,
      217,
      133,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      216,
      173,
      217,
      129,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      134,
      217,
      131,
      217,
      132,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      132,
      217,
      129,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      138,
      216,
      177,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      130,
      217,
      132,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      133,
      217,
      130,
      216,
      167,
      216,
      183,
      216,
      185,
      217,
      133,
      216,
      177,
      216,
      167,
      216,
      179,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      183,
      217,
      130,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      172,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      217,
      131,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      175,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      183,
      217,
      138,
      217,
      131,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      46,
      106,
      112,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      49,
      112,
      120,
      32,
      115,
      111,
      108,
      105,
      100,
      32,
      35,
      46,
      103,
      105,
      102,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      116,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      97,
      100,
      118,
      101,
      114,
      116,
      105,
      115,
      105,
      110,
      103,
      46,
      112,
      110,
      103,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      114,
      111,
      112,
      114,
      105,
      97,
      116,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      105,
      109,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      108,
      121,
      60,
      47,
      115,
      116,
      114,
      111,
      110,
      103,
      62,
      60,
      47,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      118,
      105,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      58,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      101,
      118,
      101,
      110,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      109,
      101,
      110,
      116,
      100,
      101,
      115,
      116,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      67,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      115,
      112,
      101,
      114,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      117,
      114,
      108,
      40,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      115,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      41,
      32,
      110,
      111,
      45,
      114,
      101,
      112,
      101,
      97,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      46,
      74,
      80,
      71,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      47,
      104,
      101,
      97,
      100,
      62,
      60,
      98,
      111,
      100,
      121,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      117,
      110,
      100,
      114,
      101,
      100,
      115,
      32,
      111,
      102,
      10,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      111,
      116,
      104,
      59,
      99,
      111,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      116,
      111,
      112,
      58,
      78,
      101,
      119,
      32,
      90,
      101,
      97,
      108,
      97,
      110,
      100,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      101,
      100,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      121,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      121,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      115,
      119,
      105,
      116,
      122,
      101,
      114,
      108,
      97,
      110,
      100,
      68,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      10,
      10,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      60,
      47,
      116,
      101,
      120,
      116,
      97,
      114,
      101,
      97,
      62,
      116,
      104,
      117,
      110,
      100,
      101,
      114,
      98,
      105,
      114,
      100,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      110,
      105,
      99,
      115,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      108,
      108,
      117,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      101,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      101,
      115,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      105,
      101,
      115,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      54,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      59,
      99,
      97,
      112,
      97,
      98,
      108,
      101,
      32,
      111,
      102,
      32,
      100,
      105,
      115,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      118,
      101,
      108,
      111,
      111,
      107,
      105,
      110,
      103,
      32,
      102,
      111,
      114,
      105,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      65,
      102,
      103,
      104,
      97,
      110,
      105,
      115,
      116,
      97,
      110,
      119,
      97,
      115,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      77,
      97,
      116,
      104,
      46,
      102,
      108,
      111,
      111,
      114,
      40,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      99,
      97,
      110,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      105,
      110,
      116,
      101,
      110,
      97,
      110,
      99,
      101,
      101,
      110,
      99,
      111,
      117,
      110,
      116,
      101,
      114,
      101,
      100,
      60,
      104,
      50,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      105,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      97,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      68,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      97,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      105,
      100,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      32,
      61,
      32,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      68,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      46,
      115,
      117,
      98,
      115,
      116,
      114,
      105,
      110,
      103,
      40,
      101,
      97,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      116,
      105,
      97,
      108,
      105,
      110,
      116,
      101,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      110,
      121,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      77,
      105,
      100,
      100,
      108,
      101,
      32,
      69,
      97,
      115,
      116,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      111,
      112,
      121,
      114,
      105,
      103,
      104,
      116,
      34,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      68,
      101,
      99,
      101,
      109,
      98,
      101,
      114,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      109,
      111,
      115,
      116,
      32,
      102,
      97,
      109,
      111,
      117,
      115,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      108,
      105,
      109,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      115,
      111,
      118,
      101,
      114,
      101,
      105,
      103,
      110,
      116,
      121,
      45,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      62,
      10,
      60,
      116,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      111,
      117,
      110,
      100,
      112,
      97,
      114,
      97,
      108,
      108,
      101,
      108,
      32,
      116,
      111,
      100,
      111,
      99,
      116,
      114,
      105,
      110,
      101,
      32,
      111,
      102,
      111,
      99,
      99,
      117,
      112,
      105,
      101,
      100,
      32,
      98,
      121,
      116,
      101,
      114,
      109,
      105,
      110,
      111,
      108,
      111,
      103,
      121,
      82,
      101,
      110,
      97,
      105,
      115,
      115,
      97,
      110,
      99,
      101,
      97,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      100,
      101,
      99,
      101,
      115,
      115,
      111,
      114,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      60,
      104,
      49,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      97,
      121,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      105,
      122,
      101,
      100,
      60,
      47,
      102,
      105,
      101,
      108,
      100,
      115,
      101,
      116,
      62,
      112,
      114,
      111,
      103,
      114,
      101,
      115,
      115,
      105,
      118,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      110,
      102,
      111,
      114,
      99,
      101,
      109,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      46,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      65,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      101,
      114,
      115,
      116,
      111,
      119,
      97,
      114,
      100,
      115,
      32,
      116,
      104,
      101,
      77,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      40,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      60,
      116,
      100,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      59,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      60,
      104,
      51,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      111,
      110,
      99,
      104,
      97,
      110,
      103,
      101,
      61,
      34,
      41,
      46,
      97,
      100,
      100,
      67,
      108,
      97,
      115,
      115,
      40,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      79,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      97,
      117,
      103,
      104,
      116,
      101,
      114,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      111,
      114,
      105,
      101,
      115,
      98,
      114,
      97,
      110,
      99,
      104,
      101,
      115,
      32,
      111,
      102,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      103,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      105,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      34,
      62,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      97,
      99,
      114,
      111,
      115,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      100,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      115,
      101,
      101,
      110,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      119,
      97,
      115,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      112,
      120,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      101,
      100,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      105,
      109,
      109,
      105,
      103,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      60,
      104,
      52,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      115,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      78,
      111,
      118,
      101,
      109,
      98,
      101,
      114,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      101,
      60,
      47,
      112,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      99,
      113,
      117,
      105,
      115,
      105,
      116,
      105,
      111,
      110,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      115,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      100,
      101,
      115,
      105,
      103,
      110,
      97,
      116,
      105,
      111,
      110,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      101,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      100,
      109,
      111,
      115,
      116,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      115,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      108,
      121,
      73,
      116,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      105,
      116,
      32,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      114,
      121,
      32,
      116,
      111,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      104,
      111,
      108,
      97,
      114,
      115,
      104,
      105,
      112,
      99,
      111,
      110,
      115,
      117,
      109,
      112,
      116,
      105,
      111,
      110,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      112,
      120,
      59,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      97,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      114,
      111,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      108,
      121,
      32,
      100,
      101,
      114,
      105,
      118,
      97,
      116,
      105,
      118,
      101,
      115,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      115,
      99,
      111,
      108,
      111,
      114,
      115,
      99,
      104,
      101,
      109,
      101,
      115,
      116,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      101,
      114,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      101,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      32,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      61,
      34,
      104,
      105,
      103,
      104,
      32,
      115,
      99,
      104,
      111,
      111,
      108,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      99,
      111,
      109,
      102,
      111,
      114,
      116,
      97,
      98,
      108,
      101,
      97,
      100,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      114,
      101,
      101,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      104,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      105,
      110,
      32,
      70,
      101,
      98,
      114,
      117,
      97,
      114,
      121,
      115,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      104,
      111,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      98,
      121,
      60,
      112,
      97,
      114,
      97,
      109,
      32,
      110,
      97,
      109,
      101,
      97,
      102,
      102,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      32,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      109,
      101,
      110,
      116,
      73,
      83,
      79,
      45,
      56,
      56,
      53,
      57,
      45,
      49,
      34,
      119,
      97,
      115,
      32,
      98,
      111,
      114,
      110,
      32,
      105,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      105,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      97,
      110,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      116,
      116,
      101,
      100,
      47,
      106,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      105,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      105,
      116,
      32,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      104,
      97,
      118,
      105,
      110,
      103,
      32,
      98,
      101,
      101,
      110,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      84,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      105,
      108,
      97,
      116,
      105,
      111,
      110,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      98,
      121,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      116,
      111,
      32,
      115,
      97,
      121,
      32,
      116,
      104,
      97,
      116,
      69,
      110,
      103,
      105,
      110,
      101,
      101,
      114,
      105,
      110,
      103,
      97,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      98,
      101,
      108,
      105,
      101,
      102,
      32,
      116,
      104,
      97,
      116,
      112,
      104,
      111,
      116,
      111,
      103,
      114,
      97,
      112,
      104,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      121,
      105,
      110,
      103,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      112,
      114,
      111,
      98,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      116,
      101,
      99,
      104,
      110,
      105,
      99,
      97,
      108,
      108,
      121,
      108,
      101,
      97,
      118,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      112,
      101,
      99,
      116,
      97,
      99,
      117,
      108,
      97,
      114,
      102,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      108,
      101,
      99,
      116,
      114,
      105,
      99,
      105,
      116,
      121,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      115,
      112,
      97,
      114,
      116,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      101,
      109,
      112,
      104,
      97,
      115,
      105,
      115,
      32,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      115,
      104,
      97,
      114,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      115,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      102,
      105,
      108,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      116,
      32,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      34,
      62,
      60,
      47,
      105,
      102,
      114,
      97,
      109,
      101,
      62,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      58,
      109,
      101,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      32,
      111,
      117,
      116,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      118,
      105,
      101,
      119,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      104,
      101,
      32,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      115,
      101,
      116,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      105,
      110,
      32,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      97,
      110,
      100,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      67,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      67,
      104,
      114,
      105,
      115,
      116,
      111,
      112,
      104,
      101,
      114,
      77,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      114,
      105,
      116,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      50,
      115,
      105,
      122,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      105,
      120,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      69,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      118,
      101,
      32,
      111,
      110,
      115,
      117,
      98,
      109,
      105,
      116,
      61,
      34,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      32,
      111,
      102,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      118,
      101,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      116,
      101,
      110,
      100,
      101,
      110,
      99,
      121,
      32,
      116,
      111,
      112,
      114,
      111,
      118,
      105,
      110,
      99,
      101,
      32,
      111,
      102,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      111,
      117,
      108,
      100,
      100,
      101,
      115,
      112,
      105,
      116,
      101,
      32,
      116,
      104,
      101,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      32,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      117,
      114,
      101,
      46,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      97,
      108,
      108,
      101,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      65,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      119,
      97,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      97,
      99,
      104,
      32,
      116,
      111,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      116,
      121,
      101,
      97,
      114,
      115,
      32,
      108,
      97,
      116,
      101,
      114,
      44,
      115,
      97,
      110,
      115,
      45,
      115,
      101,
      114,
      105,
      102,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      105,
      110,
      103,
      80,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      115,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      101,
      100,
      104,
      105,
      103,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      72,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      32,
      104,
      105,
      115,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      117,
      108,
      116,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      105,
      110,
      110,
      111,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      116,
      32,
      105,
      115,
      32,
      115,
      116,
      105,
      108,
      108,
      99,
      97,
      110,
      32,
      111,
      110,
      108,
      121,
      32,
      98,
      101,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      116,
      111,
      71,
      77,
      84,
      83,
      116,
      114,
      105,
      110,
      103,
      65,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      69,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      44,
      119,
      97,
      115,
      32,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      111,
      99,
      99,
      117,
      114,
      114,
      101,
      100,
      32,
      105,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      119,
      104,
      101,
      110,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      105,
      110,
      103,
      116,
      101,
      114,
      114,
      101,
      115,
      116,
      114,
      105,
      97,
      108,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      99,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      32,
      111,
      102,
      119,
      105,
      100,
      101,
      115,
      112,
      114,
      101,
      97,
      100,
      32,
      119,
      101,
      114,
      101,
      32,
      107,
      105,
      108,
      108,
      101,
      100,
      115,
      99,
      114,
      101,
      101,
      110,
      32,
      97,
      110,
      100,
      32,
      73,
      110,
      32,
      111,
      114,
      100,
      101,
      114,
      32,
      116,
      111,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      97,
      114,
      101,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      108,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      109,
      111,
      115,
      116,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      104,
      101,
      32,
      104,
      105,
      103,
      104,
      101,
      115,
      116,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      121,
      32,
      100,
      111,
      32,
      110,
      111,
      116,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      104,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      116,
      104,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      105,
      110,
      103,
      115,
      104,
      111,
      114,
      116,
      45,
      108,
      105,
      118,
      101,
      100,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      118,
      101,
      114,
      121,
      32,
      108,
      105,
      116,
      116,
      108,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      100,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      115,
      32,
      111,
      102,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      51,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      97,
      114,
      103,
      101,
      45,
      115,
      99,
      97,
      108,
      101,
      46,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      117,
      115,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      116,
      119,
      111,
      32,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      115,
      115,
      117,
      98,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      108,
      97,
      114,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      97,
      110,
      100,
      60,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      13,
      10,
      67,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      101,
      108,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      119,
      105,
      108,
      108,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      32,
      111,
      102,
      105,
      110,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      116,
      111,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      32,
      97,
      109,
      105,
      115,
      115,
      105,
      115,
      115,
      105,
      112,
      112,
      105,
      112,
      111,
      116,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      111,
      117,
      116,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      119,
      104,
      97,
      116,
      32,
      105,
      115,
      32,
      110,
      111,
      119,
      115,
      105,
      116,
      117,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      84,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      97,
      116,
      109,
      111,
      115,
      112,
      104,
      101,
      114,
      105,
      99,
      105,
      100,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      112,
      114,
      105,
      115,
      101,
      115,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      110,
      103,
      101,
      97,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      110,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      112,
      108,
      117,
      103,
      105,
      110,
      115,
      112,
      97,
      103,
      101,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      63,
      114,
      101,
      109,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      101,
      100,
      72,
      101,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      119,
      97,
      115,
      32,
      97,
      108,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      102,
      97,
      118,
      111,
      114,
      32,
      111,
      102,
      77,
      105,
      110,
      105,
      115,
      116,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      102,
      111,
      114,
      109,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      84,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      122,
      101,
      100,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      97,
      110,
      100,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      109,
      97,
      100,
      101,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      104,
      97,
      116,
      80,
      97,
      108,
      101,
      115,
      116,
      105,
      110,
      105,
      97,
      110,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      105,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      98,
      117,
      116,
      32,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      116,
      105,
      118,
      101,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      108,
      121,
      73,
      110,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      44,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      115,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      115,
      117,
      98,
      100,
      105,
      118,
      105,
      115,
      105,
      111,
      110,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      105,
      97,
      108,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      112,
      101,
      114,
      109,
      97,
      110,
      101,
      110,
      116,
      108,
      121,
      119,
      97,
      115,
      32,
      108,
      97,
      114,
      103,
      101,
      108,
      121,
      111,
      117,
      116,
      98,
      114,
      101,
      97,
      107,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      115,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      97,
      32,
      120,
      109,
      108,
      110,
      115,
      58,
      111,
      103,
      61,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      101,
      120,
      116,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      109,
      97,
      121,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      32,
      98,
      101,
      105,
      110,
      103,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      10,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      32,
      97,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      115,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      32,
      97,
      32,
      116,
      105,
      109,
      101,
      32,
      119,
      104,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      97,
      109,
      111,
      110,
      103,
      115,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      37,
      59,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      121,
      44,
      119,
      97,
      115,
      32,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      116,
      111,
      32,
      107,
      101,
      101,
      112,
      32,
      116,
      104,
      101,
      115,
      101,
      116,
      116,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      108,
      105,
      118,
      101,
      32,
      98,
      105,
      114,
      116,
      104,
      115,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      67,
      111,
      110,
      110,
      101,
      99,
      116,
      105,
      99,
      117,
      116,
      97,
      115,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      116,
      111,
      38,
      97,
      109,
      112,
      59,
      116,
      105,
      109,
      101,
      115,
      59,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      102,
      111,
      114,
      97,
      108,
      105,
      103,
      110,
      61,
      114,
      105,
      103,
      104,
      116,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      97,
      108,
      119,
      97,
      121,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      32,
      99,
      111,
      110,
      102,
      105,
      110,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      105,
      115,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      13,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      67,
      111,
      110,
      118,
      101,
      114,
      115,
      101,
      108,
      121,
      44,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      105,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      99,
      111,
      109,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      32,
      111,
      102,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      114,
      101,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      101,
      97,
      114,
      108,
      121,
      32,
      97,
      115,
      58,
      110,
      111,
      110,
      101,
      59,
      32,
      111,
      118,
      101,
      114,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      118,
      97,
      108,
      105,
      100,
      105,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      108,
      121,
      32,
      116,
      111,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      100,
      111,
      119,
      110,
      119,
      104,
      101,
      114,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      119,
      104,
      101,
      110,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      101,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      116,
      101,
      116,
      104,
      101,
      32,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      100,
      101,
      108,
      105,
      99,
      105,
      111,
      117,
      115,
      34,
      62,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      110,
      111,
      116,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      102,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      97,
      110,
      100,
      32,
      102,
      105,
      110,
      97,
      108,
      108,
      121,
      97,
      32,
      109,
      97,
      116,
      116,
      101,
      114,
      32,
      111,
      102,
      13,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      102,
      97,
      115,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      102,
      116,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      116,
      111,
      32,
      109,
      97,
      105,
      110,
      116,
      97,
      105,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      32,
      116,
      104,
      101,
      97,
      119,
      97,
      114,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      114,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      105,
      114,
      32,
      102,
      105,
      114,
      115,
      116,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      101,
      110,
      116,
      97,
      108,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      98,
      101,
      103,
      105,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      101,
      110,
      116,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      101,
      113,
      117,
      105,
      108,
      105,
      98,
      114,
      105,
      117,
      109,
      97,
      115,
      115,
      117,
      109,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      110,
      101,
      101,
      100,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      111,
      114,
      100,
      105,
      110,
      97,
      116,
      101,
      115,
      116,
      104,
      101,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      97,
      114,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      111,
      110,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      97,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      105,
      101,
      115,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      114,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      45,
      100,
      97,
      121,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      108,
      108,
      121,
      116,
      111,
      32,
      102,
      111,
      114,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      105,
      115,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      114,
      101,
      97,
      115,
      111,
      110,
      115,
      32,
      102,
      111,
      114,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      116,
      104,
      101,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      109,
      97,
      100,
      101,
      119,
      97,
      115,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      101,
      97,
      110,
      115,
      98,
      117,
      116,
      32,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      111,
      110,
      77,
      111,
      117,
      115,
      101,
      79,
      118,
      101,
      114,
      97,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      111,
      112,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      109,
      97,
      114,
      121,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      97,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      109,
      117,
      99,
      104,
      32,
      108,
      97,
      114,
      103,
      101,
      114,
      10,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      97,
      100,
      111,
      112,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      32,
      111,
      102,
      100,
      105,
      114,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      119,
      97,
      115,
      32,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      111,
      102,
      80,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      108,
      111,
      110,
      103,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      109,
      97,
      110,
      117,
      115,
      99,
      114,
      105,
      112,
      116,
      115,
      119,
      97,
      114,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      98,
      121,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      112,
      114,
      111,
      112,
      114,
      105,
      101,
      116,
      97,
      114,
      121,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      112,
      114,
      101,
      115,
      116,
      105,
      103,
      105,
      111,
      117,
      115,
      103,
      114,
      97,
      109,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      46,
      116,
      111,
      32,
      109,
      97,
      107,
      101,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      119,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      105,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      111,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      46,
      83,
      46,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      116,
      104,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      105,
      110,
      32,
      104,
      111,
      110,
      111,
      114,
      32,
      111,
      102,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      32,
      105,
      110,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      107,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      49,
      115,
      116,
      32,
      69,
      97,
      114,
      108,
      32,
      111,
      102,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      108,
      121,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      32,
      32,
      116,
      104,
      101,
      121,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      101,
      120,
      112,
      111,
      115,
      117,
      114,
      101,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      100,
      100,
      70,
      97,
      118,
      111,
      114,
      105,
      116,
      101,
      99,
      105,
      116,
      105,
      122,
      101,
      110,
      115,
      104,
      105,
      112,
      112,
      97,
      114,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      116,
      111,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      38,
      97,
      109,
      112,
      59,
      109,
      105,
      110,
      117,
      115,
      59,
      97,
      112,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      105,
      110,
      103,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      48,
      34,
      32,
      105,
      110,
      32,
      104,
      105,
      115,
      32,
      98,
      111,
      111,
      107,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      102,
      111,
      108,
      108,
      111,
      119,
      115,
      32,
      116,
      104,
      101,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      99,
      101,
      32,
      105,
      110,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      116,
      116,
      104,
      101,
      32,
      105,
      100,
      101,
      97,
      32,
      111,
      102,
      97,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      119,
      101,
      114,
      101,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      110,
      100,
      97,
      121,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      101,
      97,
      116,
      117,
      114,
      101,
      100,
      32,
      105,
      110,
      115,
      104,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      105,
      110,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      111,
      102,
      116,
      117,
      114,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      76,
      111,
      114,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      105,
      116,
      115,
      32,
      111,
      119,
      110,
      69,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      114,
      111,
      118,
      97,
      108,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      44,
      98,
      101,
      104,
      97,
      118,
      105,
      111,
      114,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      97,
      110,
      100,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      111,
      110,
      114,
      101,
      99,
      111,
      114,
      100,
      101,
      100,
      32,
      105,
      110,
      98,
      108,
      97,
      99,
      107,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      121,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      99,
      97,
      110,
      32,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      97,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      119,
      104,
      105,
      108,
      101,
      32,
      116,
      104,
      101,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      99,
      105,
      116,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      9,
      9,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      109,
      111,
      114,
      101,
      114,
      97,
      100,
      105,
      111,
      97,
      99,
      116,
      105,
      118,
      101,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      97,
      110,
      121,
      104,
      105,
      115,
      32,
      102,
      97,
      116,
      104,
      101,
      114,
      44,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      117,
      108,
      100,
      99,
      111,
      112,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      97,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      115,
      119,
      111,
      114,
      107,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      101,
      114,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      111,
      102,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      99,
      108,
      105,
      101,
      110,
      116,
      87,
      105,
      100,
      116,
      104,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      76,
      101,
      103,
      105,
      115,
      108,
      97,
      116,
      105,
      118,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      108,
      121,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      105,
      110,
      104,
      97,
      115,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      102,
      111,
      114,
      32,
      97,
      110,
      111,
      116,
      104,
      101,
      114,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      100,
      32,
      116,
      104,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      112,
      108,
      97,
      99,
      101,
      32,
      119,
      104,
      101,
      114,
      101,
      119,
      104,
      101,
      114,
      101,
      97,
      115,
      32,
      116,
      104,
      101,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      44,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      104,
      105,
      108,
      100,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      98,
      121,
      119,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      83,
      111,
      109,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      44,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      110,
      101,
      119,
      115,
      108,
      101,
      116,
      116,
      101,
      114,
      115,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      100,
      111,
      119,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      32,
      98,
      121,
      108,
      105,
      118,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      99,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      101,
      114,
      115,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      105,
      110,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      119,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      71,
      111,
      118,
      101,
      114,
      110,
      111,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      101,
      99,
      111,
      110,
      111,
      109,
      121,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      109,
      111,
      115,
      116,
      32,
      119,
      105,
      100,
      101,
      108,
      121,
      119,
      111,
      117,
      108,
      100,
      32,
      108,
      97,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      112,
      101,
      114,
      104,
      97,
      112,
      115,
      114,
      105,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      99,
      99,
      117,
      114,
      115,
      32,
      119,
      104,
      101,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      119,
      104,
      105,
      99,
      104,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      46,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      116,
      104,
      101,
      111,
      114,
      121,
      32,
      116,
      104,
      97,
      116,
      105,
      115,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      116,
      104,
      101,
      32,
      99,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      101,
      115,
      101,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      114,
      97,
      108,
      98,
      117,
      105,
      108,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      97,
      114,
      101,
      97,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      108,
      121,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      110,
      111,
      101,
      120,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      83,
      116,
      97,
      116,
      105,
      115,
      116,
      105,
      99,
      97,
      108,
      99,
      111,
      108,
      115,
      112,
      97,
      110,
      61,
      50,
      32,
      124,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      121,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      116,
      111,
      112,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      99,
      114,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      111,
      102,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      100,
      101,
      99,
      105,
      115,
      105,
      111,
      110,
      32,
      116,
      111,
      105,
      115,
      32,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      111,
      102,
      84,
      104,
      105,
      115,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      109,
      101,
      114,
      99,
      104,
      97,
      110,
      100,
      105,
      115,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      110,
      111,
      32,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      105,
      110,
      38,
      113,
      117,
      111,
      116,
      59,
      46,
      32,
      84,
      104,
      101,
      99,
      111,
      109,
      47,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      119,
      104,
      105,
      99,
      104,
      32,
      109,
      97,
      107,
      101,
      115,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      114,
      101,
      109,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      108,
      105,
      116,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      44,
      105,
      115,
      32,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      116,
      104,
      101,
      32,
      97,
      110,
      99,
      105,
      101,
      110,
      116,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      105,
      110,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      98,
      111,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      32,
      102,
      101,
      119,
      32,
      121,
      101,
      97,
      114,
      115,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      107,
      32,
      111,
      102,
      67,
      97,
      108,
      105,
      102,
      111,
      114,
      110,
      105,
      97,
      44,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      97,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      115,
      32,
      111,
      102,
      109,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      101,
      120,
      112,
      108,
      97,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      119,
      97,
      115,
      32,
      103,
      114,
      97,
      110,
      116,
      101,
      100,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      115,
      101,
      101,
      110,
      32,
      97,
      115,
      97,
      110,
      100,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      114,
      111,
      108,
      101,
      32,
      111,
      102,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      32,
      98,
      121,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      115,
      116,
      101,
      97,
      99,
      104,
      32,
      111,
      116,
      104,
      101,
      114,
      46,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      101,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      100,
      105,
      97,
      108,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      116,
      111,
      32,
      114,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      119,
      97,
      115,
      32,
      114,
      101,
      110,
      97,
      109,
      101,
      100,
      97,
      32,
      115,
      111,
      117,
      114,
      99,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      97,
      117,
      110,
      99,
      104,
      101,
      100,
      32,
      105,
      110,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      115,
      116,
      119,
      104,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      110,
      100,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      119,
      111,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      116,
      104,
      101,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      97,
      110,
      100,
      99,
      111,
      110,
      100,
      105,
      116,
      105,
      111,
      110,
      115,
      44,
      116,
      104,
      97,
      116,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      101,
      110,
      116,
      105,
      116,
      108,
      101,
      100,
      32,
      116,
      111,
      116,
      104,
      101,
      109,
      115,
      101,
      108,
      118,
      101,
      115,
      46,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      121,
      32,
      111,
      102,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      97,
      115,
      116,
      111,
      32,
      106,
      111,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      110,
      116,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      104,
      105,
      115,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      108,
      101,
      100,
      32,
      116,
      111,
      97,
      32,
      115,
      116,
      97,
      116,
      101,
      109,
      101,
      110,
      116,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      108,
      97,
      115,
      116,
      73,
      110,
      100,
      101,
      120,
      79,
      102,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      104,
      105,
      115,
      105,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      116,
      101,
      114,
      109,
      32,
      105,
      115,
      105,
      115,
      32,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      110,
      103,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      84,
      104,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      101,
      44,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      87,
      101,
      115,
      116,
      116,
      104,
      101,
      121,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      115,
      108,
      111,
      118,
      101,
      110,
      196,
      141,
      105,
      110,
      97,
      99,
      111,
      109,
      101,
      110,
      116,
      97,
      114,
      105,
      111,
      115,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      100,
      97,
      100,
      99,
      111,
      110,
      100,
      105,
      99,
      105,
      111,
      110,
      101,
      115,
      97,
      99,
      116,
      105,
      118,
      105,
      100,
      97,
      100,
      101,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      116,
      101,
      99,
      110,
      111,
      108,
      111,
      103,
      195,
      173,
      97,
      112,
      114,
      111,
      100,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      112,
      117,
      110,
      116,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      101,
      195,
      177,
      97,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      195,
      173,
      97,
      115,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      114,
      115,
      101,
      112,
      114,
      111,
      102,
      101,
      115,
      105,
      111,
      110,
      97,
      108,
      116,
      114,
      97,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      103,
      195,
      173,
      115,
      116,
      114,
      97,
      116,
      101,
      115,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      195,
      173,
      97,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      101,
      115,
      112,
      114,
      111,
      116,
      101,
      99,
      99,
      105,
      195,
      179,
      110,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      101,
      115,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      105,
      97,
      112,
      111,
      115,
      105,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      97,
      110,
      116,
      101,
      99,
      114,
      101,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      110,
      101,
      99,
      101,
      115,
      105,
      100,
      97,
      100,
      101,
      115,
      115,
      117,
      115,
      99,
      114,
      105,
      98,
      105,
      114,
      115,
      101,
      97,
      115,
      111,
      99,
      105,
      97,
      99,
      105,
      195,
      179,
      110,
      100,
      105,
      115,
      112,
      111,
      110,
      105,
      98,
      108,
      101,
      115,
      101,
      118,
      97,
      108,
      117,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      115,
      116,
      117,
      100,
      105,
      97,
      110,
      116,
      101,
      115,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      108,
      101,
      114,
      101,
      115,
      111,
      108,
      117,
      99,
      105,
      195,
      179,
      110,
      103,
      117,
      97,
      100,
      97,
      108,
      97,
      106,
      97,
      114,
      97,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      100,
      111,
      115,
      111,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      100,
      97,
      100,
      99,
      111,
      109,
      101,
      114,
      99,
      105,
      97,
      108,
      101,
      115,
      102,
      111,
      116,
      111,
      103,
      114,
      97,
      102,
      195,
      173,
      97,
      97,
      117,
      116,
      111,
      114,
      105,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      103,
      101,
      110,
      105,
      101,
      114,
      195,
      173,
      97,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      112,
      101,
      116,
      101,
      110,
      99,
      105,
      97,
      111,
      112,
      101,
      114,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      101,
      99,
      105,
      100,
      111,
      115,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      101,
      97,
      99,
      116,
      117,
      97,
      108,
      109,
      101,
      110,
      116,
      101,
      110,
      97,
      118,
      101,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      102,
      111,
      114,
      109,
      105,
      100,
      97,
      100,
      108,
      105,
      110,
      101,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      102,
      111,
      110,
      116,
      45,
      102,
      97,
      109,
      105,
      108,
      121,
      58,
      34,
      32,
      58,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      108,
      105,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      108,
      108,
      121,
      47,
      47,
      60,
      33,
      91,
      67,
      68,
      65,
      84,
      65,
      91,
      10,
      79,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      48,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      100,
      101,
      118,
      105,
      99,
      101,
      45,
      119,
      105,
      100,
      116,
      104,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      108,
      97,
      98,
      101,
      108,
      32,
      102,
      111,
      114,
      61,
      34,
      114,
      101,
      103,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      34,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      111,
      112,
      101,
      110,
      40,
      32,
      33,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      59,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      47,
      47,
      119,
      119,
      119,
      46,
      103,
      111,
      111,
      103,
      108,
      101,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      99,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      118,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      110,
      116,
      101,
      108,
      108,
      101,
      99,
      116,
      117,
      97,
      108,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      49,
      56,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      110,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      115,
      97,
      98,
      98,
      114,
      101,
      118,
      105,
      97,
      116,
      105,
      111,
      110,
      60,
      105,
      109,
      103,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      105,
      110,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      101,
      100,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      45,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      109,
      111,
      115,
      116,
      32,
      110,
      111,
      116,
      97,
      98,
      108,
      121,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      110,
      111,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      39,
      117,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      39,
      41,
      70,
      117,
      114,
      116,
      104,
      101,
      114,
      109,
      111,
      114,
      101,
      44,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      110,
      101,
      114,
      72,
      84,
      77,
      76,
      32,
      61,
      32,
      112,
      114,
      105,
      111,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      100,
      114,
      97,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      114,
      101,
      102,
      101,
      114,
      114,
      105,
      110,
      103,
      32,
      116,
      111,
      110,
      101,
      103,
      111,
      116,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      117,
      110,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      80,
      101,
      110,
      110,
      115,
      121,
      108,
      118,
      97,
      110,
      105,
      97,
      65,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      44,
      60,
      104,
      116,
      109,
      108,
      32,
      108,
      97,
      110,
      103,
      61,
      34,
      38,
      108,
      116,
      59,
      47,
      115,
      117,
      112,
      38,
      103,
      116,
      59,
      100,
      101,
      97,
      108,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      112,
      104,
      105,
      108,
      97,
      100,
      101,
      108,
      112,
      104,
      105,
      97,
      104,
      105,
      115,
      116,
      111,
      114,
      105,
      99,
      97,
      108,
      108,
      121,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      116,
      111,
      112,
      58,
      101,
      120,
      112,
      101,
      114,
      105,
      109,
      101,
      110,
      116,
      97,
      108,
      103,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      105,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      101,
      115,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      61,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      115,
      117,
      98,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      13,
      10,
      60,
      104,
      116,
      103,
      101,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      97,
      108,
      67,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      39,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      103,
      114,
      105,
      99,
      117,
      108,
      116,
      117,
      114,
      97,
      108,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      49,
      97,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      108,
      105,
      115,
      104,
      101,
      100,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      105,
      101,
      115,
      68,
      101,
      109,
      111,
      103,
      114,
      97,
      112,
      104,
      105,
      99,
      115,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      100,
      101,
      100,
      105,
      99,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      32,
      111,
      102,
      115,
      97,
      116,
      105,
      115,
      102,
      97,
      99,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      116,
      114,
      97,
      110,
      115,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      115,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      34,
      32,
      116,
      97,
      98,
      105,
      110,
      100,
      101,
      120,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      105,
      103,
      104,
      116,
      59,
      67,
      111,
      109,
      109,
      111,
      110,
      119,
      101,
      97,
      108,
      116,
      104,
      114,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      111,
      110,
      101,
      114,
      101,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      101,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      59,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      105,
      109,
      101,
      34,
      62,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      43,
      99,
      111,
      110,
      118,
      101,
      114,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      116,
      97,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      105,
      110,
      103,
      38,
      108,
      116,
      59,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      60,
      105,
      109,
      103,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      62,
      99,
      111,
      109,
      112,
      101,
      110,
      115,
      97,
      116,
      105,
      111,
      110,
      99,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      97,
      108,
      108,
      34,
      32,
      118,
      105,
      111,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      114,
      117,
      101,
      59,
      83,
      116,
      114,
      105,
      99,
      116,
      47,
      47,
      69,
      78,
      34,
      32,
      116,
      114,
      97,
      110,
      115,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      105,
      101,
      115,
      67,
      104,
      97,
      109,
      112,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      125,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      67,
      104,
      114,
      105,
      115,
      116,
      105,
      97,
      110,
      105,
      116,
      121,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      80,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      32,
      116,
      104,
      97,
      116,
      119,
      97,
      115,
      32,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      100,
      40,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      117,
      110,
      101,
      109,
      112,
      108,
      111,
      121,
      109,
      101,
      110,
      116,
      116,
      104,
      101,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      47,
      105,
      110,
      100,
      101,
      120,
      46,
      104,
      116,
      109,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      111,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      111,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      115,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      71,
      117,
      105,
      100,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      111,
      118,
      101,
      114,
      119,
      104,
      101,
      108,
      109,
      105,
      110,
      103,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      101,
      100,
      44,
      10,
      46,
      110,
      111,
      110,
      116,
      111,
      117,
      99,
      104,
      32,
      111,
      98,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      102,
      32,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      32,
      49,
      112,
      120,
      32,
      123,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      116,
      114,
      101,
      97,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      48,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      99,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      103,
      114,
      101,
      97,
      116,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      99,
      104,
      105,
      101,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      105,
      110,
      103,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      110,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      99,
      101,
      66,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      116,
      100,
      62,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      114,
      34,
      62,
      10,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      110,
      97,
      118,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      34,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      121,
      32,
      111,
      102,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      116,
      104,
      101,
      32,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      101,
      34,
      32,
      120,
      109,
      108,
      58,
      108,
      97,
      110,
      103,
      61,
      34,
      100,
      101,
      108,
      105,
      98,
      101,
      114,
      97,
      116,
      101,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      114,
      101,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      105,
      109,
      112,
      114,
      111,
      118,
      101,
      109,
      101,
      110,
      116,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      105,
      110,
      74,
      101,
      115,
      117,
      115,
      32,
      67,
      104,
      114,
      105,
      115,
      116,
      80,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      100,
      105,
      115,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      114,
      44,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      105,
      116,
      105,
      101,
      115,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      105,
      115,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      97,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      105,
      99,
      97,
      108,
      105,
      115,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      109,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      105,
      110,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      32,
      116,
      104,
      101,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      97,
      108,
      108,
      32,
      111,
      118,
      101,
      114,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      97,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      114,
      104,
      111,
      111,
      100,
      97,
      114,
      109,
      101,
      100,
      32,
      102,
      111,
      114,
      99,
      101,
      115,
      114,
      101,
      100,
      117,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      115,
      32,
      116,
      111,
      78,
      111,
      110,
      101,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      116,
      101,
      109,
      112,
      101,
      114,
      97,
      116,
      117,
      114,
      101,
      115,
      10,
      9,
      9,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      108,
      111,
      115,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      32,
      105,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      40,
      115,
      101,
      101,
      32,
      98,
      101,
      108,
      111,
      119,
      41,
      46,
      34,
      32,
      105,
      100,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      105,
      115,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      116,
      104,
      101,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      9,
      9,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      97,
      99,
      99,
      101,
      108,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      72,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      70,
      97,
      109,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      116,
      101,
      114,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      118,
      101,
      114,
      121,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      101,
      120,
      112,
      108,
      111,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      101,
      109,
      101,
      114,
      103,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      65,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      32,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      100,
      101,
      120,
      112,
      101,
      99,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      62,
      60,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      115,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      110,
      101,
      105,
      103,
      104,
      98,
      111,
      117,
      114,
      105,
      110,
      103,
      119,
      105,
      116,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      100,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      9,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      97,
      108,
      83,
      111,
      118,
      105,
      101,
      116,
      32,
      85,
      110,
      105,
      111,
      110,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      110,
      97,
      109,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      115,
      32,
      116,
      111,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      115,
      73,
      110,
      32,
      102,
      97,
      99,
      116,
      44,
      32,
      116,
      104,
      101,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      105,
      116,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      109,
      117,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      111,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      105,
      97,
      108,
      99,
      97,
      110,
      99,
      101,
      108,
      66,
      117,
      98,
      98,
      108,
      101,
      32,
      73,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      114,
      101,
      32,
      111,
      114,
      32,
      108,
      101,
      115,
      115,
      105,
      110,
      32,
      83,
      101,
      112,
      116,
      101,
      109,
      98,
      101,
      114,
      73,
      110,
      116,
      101,
      108,
      108,
      105,
      103,
      101,
      110,
      99,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      112,
      120,
      59,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      104,
      117,
      109,
      97,
      110,
      32,
      114,
      105,
      103,
      104,
      116,
      115,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      97,
      108,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      116,
      114,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      104,
      117,
      109,
      97,
      110,
      32,
      98,
      101,
      105,
      110,
      103,
      115,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      97,
      114,
      101,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      115,
      109,
      97,
      108,
      108,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      97,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      32,
      119,
      104,
      111,
      101,
      120,
      112,
      97,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      114,
      103,
      117,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      110,
      111,
      119,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      73,
      110,
      32,
      116,
      104,
      101,
      32,
      101,
      97,
      114,
      108,
      121,
      105,
      110,
      116,
      101,
      114,
      109,
      101,
      100,
      105,
      97,
      116,
      101,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      83,
      99,
      97,
      110,
      100,
      105,
      110,
      97,
      118,
      105,
      97,
      110,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      112,
      97,
      103,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      100,
      97,
      110,
      97,
      108,
      111,
      103,
      111,
      117,
      115,
      32,
      116,
      111,
      97,
      114,
      101,
      32,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      119,
      97,
      115,
      32,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      97,
      110,
      100,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      97,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      119,
      97,
      115,
      32,
      99,
      97,
      112,
      116,
      117,
      114,
      101,
      100,
      110,
      111,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      32,
      116,
      111,
      32,
      62,
      13,
      10,
      60,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      119,
      101,
      114,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      101,
      100,
      109,
      111,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      117,
      115,
      101,
      100,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      109,
      112,
      101,
      114,
      105,
      97,
      108,
      99,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      32,
      67,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      105,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      120,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      105,
      116,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      105,
      110,
      116,
      111,
      32,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      116,
      104,
      105,
      115,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      118,
      101,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      116,
      114,
      101,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      115,
      109,
      32,
      111,
      102,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      119,
      104,
      105,
      99,
      104,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      73,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      97,
      110,
      32,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      97,
      99,
      99,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      105,
      102,
      102,
      101,
      114,
      115,
      32,
      102,
      114,
      111,
      109,
      65,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      101,
      98,
      101,
      116,
      116,
      101,
      114,
      32,
      107,
      110,
      111,
      119,
      110,
      97,
      114,
      114,
      97,
      110,
      103,
      101,
      109,
      101,
      110,
      116,
      115,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      110,
      97,
      116,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      100,
      101,
      110,
      116,
      105,
      99,
      97,
      108,
      32,
      116,
      111,
      115,
      111,
      117,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      99,
      114,
      101,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      105,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      32,
      73,
      73,
      116,
      101,
      115,
      116,
      105,
      109,
      111,
      110,
      105,
      97,
      108,
      115,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      110,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      32,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      121,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      98,
      121,
      116,
      104,
      101,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      67,
      111,
      110,
      115,
      101,
      114,
      118,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      100,
      32,
      111,
      102,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      98,
      97,
      99,
      107,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      80,
      101,
      111,
      112,
      108,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      111,
      110,
      112,
      114,
      111,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      34,
      119,
      97,
      115,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      118,
      97,
      114,
      105,
      101,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      32,
      98,
      101,
      99,
      111,
      109,
      112,
      114,
      105,
      115,
      101,
      100,
      32,
      111,
      102,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      32,
      104,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      117,
      112,
      108,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      32,
      97,
      110,
      100,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      110,
      111,
      110,
      101,
      59,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      115,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      98,
      101,
      105,
      110,
      103,
      108,
      97,
      116,
      101,
      114,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      99,
      97,
      108,
      99,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      102,
      111,
      114,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      115,
      34,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      97,
      108,
      108,
      111,
      119,
      115,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      98,
      121,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      111,
      110,
      32,
      98,
      101,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      44,
      60,
      47,
      110,
      111,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      115,
      97,
      105,
      100,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      104,
      105,
      108,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      115,
      104,
      121,
      112,
      111,
      116,
      104,
      101,
      116,
      105,
      99,
      97,
      108,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      101,
      114,
      115,
      112,
      111,
      119,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      101,
      100,
      32,
      105,
      110,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      119,
      101,
      114,
      101,
      32,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      111,
      114,
      114,
      101,
      106,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      109,
      112,
      108,
      105,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      119,
      97,
      115,
      32,
      112,
      114,
      111,
      98,
      97,
      98,
      108,
      121,
      108,
      105,
      110,
      107,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      111,
      114,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      97,
      99,
      116,
      105,
      111,
      110,
      115,
      99,
      104,
      97,
      110,
      103,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      73,
      110,
      100,
      105,
      97,
      110,
      32,
      79,
      99,
      101,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      115,
      116,
      119,
      111,
      114,
      107,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      121,
      101,
      97,
      114,
      115,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      84,
      104,
      105,
      115,
      32,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      101,
      110,
      116,
      101,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      109,
      101,
      97,
      115,
      117,
      114,
      101,
      109,
      101,
      110,
      116,
      115,
      97,
      110,
      32,
      101,
      120,
      116,
      114,
      101,
      109,
      101,
      108,
      121,
      118,
      97,
      108,
      117,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      97,
      110,
      32,
      101,
      102,
      102,
      111,
      114,
      116,
      32,
      116,
      111,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      115,
      111,
      117,
      116,
      104,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      108,
      121,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      108,
      101,
      97,
      114,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      100,
      105,
      100,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      101,
      120,
      116,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      97,
      110,
      100,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      112,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      97,
      110,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      103,
      105,
      118,
      101,
      110,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      115,
      116,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      101,
      120,
      112,
      101,
      110,
      100,
      105,
      116,
      117,
      114,
      101,
      115,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      10,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      104,
      97,
      116,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      105,
      109,
      97,
      103,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      116,
      117,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      111,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      44,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      101,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      110,
      111,
      114,
      116,
      104,
      119,
      101,
      115,
      116,
      101,
      114,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      32,
      32,
      99,
      111,
      110,
      115,
      117,
      108,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      116,
      121,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      32,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      116,
      104,
      101,
      32,
      103,
      114,
      101,
      97,
      116,
      101,
      115,
      116,
      115,
      101,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      117,
      112,
      101,
      114,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      32,
      111,
      110,
      105,
      115,
      32,
      109,
      101,
      110,
      116,
      105,
      111,
      110,
      101,
      100,
      97,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      105,
      110,
      118,
      101,
      110,
      116,
      101,
      100,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      121,
      105,
      110,
      103,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      97,
      116,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      101,
      120,
      101,
      99,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      72,
      117,
      109,
      97,
      110,
      32,
      82,
      105,
      103,
      104,
      116,
      115,
      116,
      101,
      114,
      109,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      115,
      114,
      101,
      115,
      101,
      97,
      114,
      99,
      104,
      32,
      97,
      110,
      100,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      102,
      101,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      114,
      101,
      99,
      111,
      109,
      109,
      97,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      115,
      116,
      97,
      116,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      121,
      101,
      97,
      114,
      115,
      32,
      111,
      102,
      32,
      97,
      103,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      117,
      100,
      121,
      32,
      111,
      102,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      119,
      104,
      101,
      114,
      101,
      32,
      104,
      101,
      32,
      119,
      97,
      115,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      110,
      111,
      119,
      104,
      105,
      99,
      104,
      32,
      98,
      101,
      99,
      97,
      109,
      101,
      104,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      105,
      115,
      115,
      105,
      111,
      110,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      116,
      101,
      114,
      114,
      105,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      101,
      120,
      116,
      101,
      110,
      115,
      105,
      111,
      110,
      115,
      34,
      62,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      101,
      113,
      117,
      97,
      108,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      73,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      44,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      97,
      110,
      100,
      105,
      115,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      97,
      110,
      100,
      32,
      104,
      105,
      115,
      32,
      119,
      105,
      102,
      101,
      40,
      97,
      108,
      115,
      111,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      62,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      32,
      101,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      115,
      101,
      101,
      109,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      114,
      101,
      32,
      119,
      97,
      115,
      32,
      110,
      111,
      97,
      110,
      32,
      101,
      120,
      99,
      101,
      108,
      108,
      101,
      110,
      116,
      97,
      108,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      98,
      121,
      73,
      110,
      32,
      112,
      114,
      97,
      99,
      116,
      105,
      99,
      101,
      44,
      98,
      114,
      111,
      97,
      100,
      99,
      97,
      115,
      116,
      105,
      110,
      103,
      99,
      104,
      97,
      114,
      103,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      114,
      101,
      102,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      32,
      97,
      110,
      100,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      105,
      110,
      116,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      97,
      108,
      108,
      121,
      115,
      101,
      116,
      84,
      97,
      114,
      103,
      101,
      116,
      105,
      110,
      103,
      97,
      114,
      101,
      32,
      97,
      99,
      116,
      117,
      97,
      108,
      108,
      121,
      118,
      105,
      99,
      116,
      111,
      114,
      121,
      32,
      111,
      118,
      101,
      114,
      40,
      41,
      59,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      111,
      117,
      115,
      108,
      121,
      114,
      101,
      113,
      117,
      105,
      114,
      101,
      100,
      32,
      102,
      111,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      97,
      110,
      32,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      111,
      114,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      44,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      119,
      97,
      115,
      32,
      102,
      114,
      111,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      115,
      111,
      109,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      104,
      97,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      101,
      114,
      109,
      105,
      116,
      116,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      32,
      116,
      104,
      101,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      44,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      118,
      105,
      111,
      117,
      115,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      108,
      121,
      97,
      114,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      101,
      108,
      100,
      32,
      111,
      102,
      116,
      104,
      105,
      115,
      32,
      116,
      121,
      112,
      101,
      32,
      111,
      102,
      103,
      105,
      118,
      101,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      116,
      105,
      116,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      111,
      114,
      116,
      104,
      100,
      117,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      105,
      114,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      99,
      111,
      114,
      112,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      119,
      97,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      102,
      114,
      111,
      109,
      105,
      110,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      100,
      101,
      115,
      105,
      103,
      110,
      101,
      100,
      32,
      102,
      111,
      114,
      111,
      119,
      110,
      101,
      114,
      115,
      104,
      105,
      112,
      32,
      111,
      102,
      97,
      110,
      100,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      121,
      115,
      116,
      97,
      110,
      100,
      97,
      114,
      100,
      105,
      122,
      101,
      100,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      84,
      101,
      120,
      116,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      114,
      101,
      99,
      101,
      105,
      118,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      115,
      115,
      117,
      109,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      101,
      97,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      114,
      105,
      109,
      97,
      114,
      105,
      108,
      121,
      32,
      105,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      111,
      102,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      101,
      110,
      115,
      101,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      115,
      32,
      102,
      111,
      114,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      32,
      98,
      121,
      97,
      116,
      32,
      108,
      101,
      97,
      115,
      116,
      32,
      116,
      119,
      111,
      119,
      97,
      115,
      32,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      99,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      98,
      101,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      49,
      47,
      94,
      92,
      115,
      43,
      124,
      92,
      115,
      43,
      36,
      47,
      103,
      101,
      41,
      123,
      116,
      104,
      114,
      111,
      119,
      32,
      101,
      125,
      59,
      116,
      104,
      101,
      32,
      115,
      116,
      97,
      114,
      116,
      32,
      111,
      102,
      116,
      119,
      111,
      32,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      97,
      110,
      100,
      119,
      104,
      111,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      97,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      115,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      112,
      114,
      111,
      118,
      105,
      100,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      101,
      116,
      105,
      116,
      105,
      111,
      110,
      115,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      75,
      41,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      85,
      83,
      41,
      208,
      156,
      208,
      190,
      208,
      189,
      208,
      179,
      208,
      190,
      208,
      187,
      208,
      161,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      184,
      209,
      129,
      209,
      128,
      208,
      191,
      209,
      129,
      208,
      186,
      208,
      190,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      174,
      128,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      231,
      185,
      129,
      228,
      189,
      147,
      228,
      184,
      173,
      230,
      150,
      135,
      230,
      156,
      137,
      233,
      153,
      144,
      229,
      133,
      172,
      229,
      143,
      184,
      228,
      186,
      186,
      230,
      176,
      145,
      230,
      148,
      191,
      229,
      186,
      156,
      233,
      152,
      191,
      233,
      135,
      140,
      229,
      183,
      180,
      229,
      183,
      180,
      231,
      164,
      190,
      228,
      188,
      154,
      228,
      184,
      187,
      228,
      185,
      137,
      230,
      147,
      141,
      228,
      189,
      156,
      231,
      179,
      187,
      231,
      187,
      159,
      230,
      148,
      191,
      231,
      173,
      150,
      230,
      179,
      149,
      232,
      167,
      132,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      99,
      105,
      195,
      179,
      110,
      104,
      101,
      114,
      114,
      97,
      109,
      105,
      101,
      110,
      116,
      97,
      115,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      99,
      105,
      195,
      179,
      110,
      99,
      108,
      97,
      115,
      105,
      102,
      105,
      99,
      97,
      100,
      111,
      115,
      99,
      111,
      110,
      111,
      99,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      97,
      115,
      105,
      110,
      102,
      111,
      114,
      109,
      195,
      161,
      116,
      105,
      99,
      97,
      114,
      101,
      108,
      97,
      99,
      105,
      111,
      110,
      97,
      100,
      111,
      115,
      100,
      101,
      112,
      97,
      114,
      116,
      97,
      109,
      101,
      110,
      116,
      111,
      116,
      114,
      97,
      98,
      97,
      106,
      97,
      100,
      111,
      114,
      101,
      115,
      100,
      105,
      114,
      101,
      99,
      116,
      97,
      109,
      101,
      110,
      116,
      101,
      97,
      121,
      117,
      110,
      116,
      97,
      109,
      105,
      101,
      110,
      116,
      111,
      109,
      101,
      114,
      99,
      97,
      100,
      111,
      76,
      105,
      98,
      114,
      101,
      99,
      111,
      110,
      116,
      195,
      161,
      99,
      116,
      101,
      110,
      111,
      115,
      104,
      97,
      98,
      105,
      116,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      99,
      117,
      109,
      112,
      108,
      105,
      109,
      105,
      101,
      110,
      116,
      111,
      114,
      101,
      115,
      116,
      97,
      117,
      114,
      97,
      110,
      116,
      101,
      115,
      100,
      105,
      115,
      112,
      111,
      115,
      105,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      101,
      99,
      117,
      101,
      110,
      99,
      105,
      97,
      101,
      108,
      101,
      99,
      116,
      114,
      195,
      179,
      110,
      105,
      99,
      97,
      97,
      112,
      108,
      105,
      99,
      97,
      99,
      105,
      111,
      110,
      101,
      115,
      100,
      101,
      115,
      99,
      111,
      110,
      101,
      99,
      116,
      97,
      100,
      111,
      105,
      110,
      115,
      116,
      97,
      108,
      97,
      99,
      105,
      195,
      179,
      110,
      114,
      101,
      97,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      117,
      116,
      105,
      108,
      105,
      122,
      97,
      99,
      105,
      195,
      179,
      110,
      101,
      110,
      99,
      105,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      101,
      110,
      102,
      101,
      114,
      109,
      101,
      100,
      97,
      100,
      101,
      115,
      105,
      110,
      115,
      116,
      114,
      117,
      109,
      101,
      110,
      116,
      111,
      115,
      101,
      120,
      112,
      101,
      114,
      105,
      101,
      110,
      99,
      105,
      97,
      115,
      105,
      110,
      115,
      116,
      105,
      116,
      117,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      115,
      115,
      117,
      98,
      99,
      97,
      116,
      101,
      103,
      111,
      114,
      105,
      97,
      209,
      130,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      184,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      139,
      208,
      177,
      208,
      190,
      208,
      187,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      190,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      181,
      209,
      130,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      133,
      209,
      129,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      176,
      208,
      181,
      209,
      129,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      180,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      209,
      143,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      181,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      209,
      139,
      208,
      184,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      209,
      139,
      209,
      128,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      185,
      208,
      156,
      208,
      190,
      209,
      129,
      208,
      186,
      208,
      178,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      209,
      139,
      208,
      189,
      208,
      184,
      209,
      135,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      181,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      181,
      208,
      189,
      209,
      131,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      179,
      208,
      184,
      209,
      130,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      158,
      208,
      180,
      208,
      189,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      191,
      208,
      190,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      209,
      131,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      181,
      208,
      187,
      209,
      143,
      208,
      178,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      190,
      208,
      180,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      208,
      178,
      208,
      190,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      184,
      208,
      180,
      209,
      128,
      209,
      131,
      208,
      179,
      208,
      190,
      208,
      185,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      181,
      209,
      133,
      208,
      190,
      209,
      128,
      208,
      190,
      209,
      136,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      130,
      208,
      184,
      208,
      178,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      176,
      208,
      186,
      208,
      176,
      208,
      182,
      208,
      180,
      209,
      139,
      208,
      185,
      208,
      178,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      179,
      209,
      128,
      209,
      131,
      208,
      191,
      208,
      191,
      209,
      139,
      208,
      178,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      208,
      187,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      178,
      209,
      139,
      208,
      185,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      181,
      208,
      189,
      209,
      140,
      208,
      179,
      208,
      184,
      208,
      191,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      190,
      208,
      180,
      208,
      177,
      208,
      184,
      208,
      183,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      190,
      209,
      129,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      188,
      208,
      190,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      130,
      208,
      186,
      209,
      131,
      208,
      191,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      186,
      208,
      176,
      209,
      133,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      160,
      208,
      176,
      208,
      177,
      208,
      190,
      209,
      130,
      208,
      176,
      208,
      162,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      178,
      209,
      129,
      208,
      181,
      208,
      188,
      208,
      178,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      176,
      208,
      187,
      208,
      176,
      209,
      129,
      208,
      191,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      186,
      209,
      129,
      208,
      187,
      209,
      131,
      208,
      182,
      208,
      177,
      209,
      139,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      191,
      208,
      181,
      209,
      135,
      208,
      176,
      209,
      130,
      208,
      184,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      208,
      184,
      209,
      129,
      208,
      176,
      208,
      185,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      191,
      208,
      190,
      209,
      135,
      208,
      181,
      208,
      188,
      209,
      131,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      208,
      180,
      208,
      190,
      208,
      187,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      129,
      209,
      139,
      208,
      187,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      139,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      209,
      139,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      208,
      181,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      186,
      209,
      130,
      208,
      161,
      208,
      181,
      208,
      185,
      209,
      135,
      208,
      176,
      209,
      129,
      208,
      188,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      184,
      209,
      130,
      208,
      176,
      208,
      186,
      208,
      190,
      208,
      179,
      208,
      190,
      208,
      190,
      208,
      189,
      208,
      187,
      208,
      176,
      208,
      185,
      208,
      189,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      180,
      208,
      181,
      208,
      178,
      208,
      181,
      209,
      128,
      209,
      129,
      208,
      184,
      209,
      143,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      181,
      209,
      132,
      208,
      184,
      208,
      187,
      209,
      140,
      208,
      188,
      209,
      139,
      209,
      131,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      189,
      209,
      143,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      184,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      181,
      208,
      180,
      208,
      181,
      208,
      187,
      209,
      142,
      209,
      143,
      208,
      189,
      208,
      178,
      208,
      176,
      209,
      128,
      209,
      143,
      208,
      188,
      208,
      181,
      208,
      189,
      209,
      140,
      209,
      136,
      208,
      181,
      208,
      188,
      208,
      189,
      208,
      190,
      208,
      179,
      208,
      184,
      209,
      133,
      208,
      180,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      185,
      208,
      183,
      208,
      189,
      208,
      176,
      209,
      135,
      208,
      184,
      209,
      130,
      208,
      189,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      183,
      209,
      143,
      209,
      132,
      208,
      190,
      209,
      128,
      209,
      131,
      208,
      188,
      208,
      176,
      208,
      162,
      208,
      181,
      208,
      191,
      208,
      181,
      209,
      128,
      209,
      140,
      208,
      188,
      208,
      181,
      209,
      129,
      209,
      143,
      209,
      134,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      137,
      208,
      184,
      209,
      130,
      209,
      139,
      208,
      155,
      209,
      131,
      209,
      135,
      209,
      136,
      208,
      184,
      208,
      181,
      224,
      164,
      168,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      184,
      224,
      164,
      172,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      130,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      133,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      157,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      159,
      224,
      164,
      178,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      168,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      160,
      224,
      164,
      149,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      130,
      224,
      164,
      166,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      156,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      165,
      136,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      152,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      170,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      151,
      224,
      165,
      130,
      224,
      164,
      151,
      224,
      164,
      178,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      185,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      135,
      224,
      164,
      184,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      152,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      128,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      159,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      164,
      159,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      164,
      178,
      224,
      164,
      151,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      133,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      156,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      172,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      165,
      128,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      134,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      170,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      172,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      172,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      140,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      183,
      224,
      164,
      175,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      185,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      190,
      216,
      170,
      216,
      179,
      216,
      170,
      216,
      183,
      217,
      138,
      216,
      185,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      168,
      217,
      136,
      216,
      167,
      216,
      179,
      216,
      183,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      129,
      216,
      173,
      216,
      169,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      174,
      216,
      167,
      216,
      181,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      178,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      168,
      216,
      177,
      217,
      134,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      217,
      132,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      177,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      176,
      217,
      135,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      130,
      217,
      136,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      177,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      177,
      216,
      167,
      217,
      130,
      217,
      133,
      216,
      173,
      217,
      129,
      217,
      136,
      216,
      184,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      134,
      217,
      138,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      163,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      130,
      216,
      177,
      216,
      162,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      168,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      173,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      179,
      216,
      177,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      217,
      133,
      216,
      172,
      217,
      133,
      217,
      136,
      216,
      185,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      173,
      217,
      133,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      134,
      217,
      130,
      216,
      167,
      216,
      183,
      217,
      129,
      217,
      132,
      216,
      179,
      216,
      183,
      217,
      138,
      217,
      134,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      136,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      134,
      217,
      138,
      216,
      167,
      216,
      168,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      170,
      216,
      173,
      217,
      138,
      216,
      167,
      216,
      170,
      217,
      138,
      216,
      168,
      216,
      170,
      217,
      136,
      217,
      130,
      217,
      138,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      136,
      217,
      132,
      217,
      137,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      217,
      138,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      180,
      216,
      174,
      216,
      181,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      132,
      216,
      167,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      173,
      216,
      175,
      217,
      138,
      216,
      171,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      132,
      217,
      138,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      133,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      172,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      167,
      216,
      185,
      216,
      169,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      174,
      217,
      136,
      217,
      132,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      131,
      216,
      170,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      136,
      216,
      177,
      217,
      138,
      216,
      167,
      217,
      132,
      216,
      175,
      216,
      177,
      217,
      136,
      216,
      179,
      216,
      167,
      216,
      179,
      216,
      170,
      216,
      186,
      216,
      177,
      217,
      130,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      168,
      217,
      134,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      184,
      217,
      138,
      217,
      133,
      101,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      61,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      46,
      106,
      112,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      111,
      110,
      102,
      105,
      103,
      117,
      114,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      110,
      103,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      98,
      111,
      100,
      121,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      121,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      99,
      105,
      114,
      99,
      117,
      109,
      115,
      116,
      97,
      110,
      99,
      101,
      115,
      46,
      97,
      112,
      112,
      101,
      110,
      100,
      67,
      104,
      105,
      108,
      100,
      40,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      101,
      100,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      99,
      108,
      101,
      97,
      114,
      34,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      98,
      97,
      115,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      77,
      97,
      115,
      115,
      97,
      99,
      104,
      117,
      115,
      101,
      116,
      116,
      115,
      116,
      97,
      98,
      108,
      101,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      112,
      114,
      111,
      110,
      117,
      110,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      35,
      102,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      108,
      101,
      102,
      116,
      58,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      109,
      105,
      115,
      99,
      101,
      108,
      108,
      97,
      110,
      101,
      111,
      117,
      115,
      38,
      108,
      116,
      59,
      47,
      109,
      97,
      116,
      104,
      38,
      103,
      116,
      59,
      112,
      115,
      121,
      99,
      104,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      101,
      97,
      114,
      99,
      104,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      97,
      115,
      32,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      83,
      117,
      112,
      114,
      101,
      109,
      101,
      32,
      67,
      111,
      117,
      114,
      116,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      65,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      112,
      120,
      59,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      105,
      101,
      115,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      46,
      116,
      111,
      76,
      111,
      119,
      101,
      114,
      67,
      97,
      115,
      101,
      40,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      105,
      110,
      103,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      70,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      105,
      110,
      103,
      32,
      111,
      102,
      34,
      32,
      109,
      97,
      120,
      108,
      101,
      110,
      103,
      116,
      104,
      61,
      34,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      77,
      101,
      100,
      105,
      116,
      101,
      114,
      114,
      97,
      110,
      101,
      97,
      110,
      101,
      120,
      116,
      114,
      97,
      111,
      114,
      100,
      105,
      110,
      97,
      114,
      121,
      97,
      115,
      115,
      97,
      115,
      115,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      98,
      117,
      116,
      116,
      111,
      110,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      104,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      114,
      101,
      102,
      101,
      114,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      60,
      47,
      117,
      108,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      119,
      97,
      115,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      83,
      97,
      110,
      32,
      70,
      114,
      97,
      110,
      99,
      105,
      115,
      99,
      111,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      109,
      97,
      105,
      110,
      115,
      111,
      112,
      104,
      105,
      115,
      116,
      105,
      99,
      97,
      116,
      101,
      100,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      115,
      32,
      116,
      104,
      97,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      115,
      109,
      97,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      40,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      84,
      104,
      105,
      115,
      32,
      97,
      114,
      116,
      105,
      99,
      108,
      101,
      32,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      97,
      115,
      101,
      115,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      71,
      114,
      101,
      97,
      116,
      32,
      66,
      114,
      105,
      116,
      97,
      105,
      110,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      116,
      111,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      59,
      32,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      32,
      106,
      117,
      115,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      117,
      102,
      102,
      101,
      114,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      108,
      101,
      97,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      97,
      114,
      101,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      10,
      9,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      101,
      100,
      32,
      105,
      110,
      99,
      111,
      110,
      118,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      114,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      104,
      97,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      109,
      111,
      115,
      116,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      99,
      114,
      101,
      100,
      105,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      58,
      60,
      47,
      97,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      60,
      105,
      102,
      114,
      97,
      109,
      101,
      32,
      115,
      114,
      99,
      61,
      34,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      112,
      97,
      114,
      108,
      105,
      97,
      109,
      101,
      110,
      116,
      97,
      114,
      121,
      109,
      111,
      114,
      101,
      32,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      112,
      114,
      101,
      100,
      111,
      109,
      105,
      110,
      97,
      110,
      116,
      108,
      121,
      38,
      110,
      98,
      115,
      112,
      59,
      124,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      111,
      114,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      47,
      120,
      45,
      115,
      104,
      111,
      99,
      107,
      119,
      97,
      118,
      101,
      45,
      100,
      101,
      109,
      111,
      110,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      119,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      65,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      111,
      117,
      108,
      100,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      112,
      114,
      111,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      102,
      111,
      114,
      32,
      105,
      110,
      115,
      116,
      97,
      110,
      99,
      101,
      44,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      97,
      115,
      32,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      97,
      114,
      116,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      100,
      105,
      115,
      99,
      117,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      105,
      100,
      100,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      32,
      116,
      111,
      32,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      102,
      32,
      118,
      105,
      101,
      119,
      104,
      111,
      109,
      111,
      115,
      101,
      120,
      117,
      97,
      108,
      105,
      116,
      121,
      97,
      99,
      99,
      101,
      112,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      109,
      97,
      110,
      117,
      102,
      97,
      99,
      116,
      117,
      114,
      101,
      114,
      115,
      111,
      114,
      105,
      103,
      105,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      100,
      101,
      110,
      111,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      115,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      32,
      35,
      108,
      101,
      110,
      103,
      116,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      32,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      62,
      114,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      108,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      119,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      73,
      110,
      100,
      111,
      45,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      118,
      117,
      108,
      110,
      101,
      114,
      97,
      98,
      108,
      101,
      32,
      116,
      111,
      112,
      114,
      111,
      112,
      111,
      110,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      99,
      108,
      111,
      115,
      101,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      78,
      101,
      119,
      32,
      89,
      111,
      114,
      107,
      32,
      67,
      105,
      116,
      121,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      99,
      111,
      117,
      114,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      98,
      121,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      116,
      101,
      99,
      104,
      110,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      46,
      114,
      101,
      109,
      111,
      118,
      101,
      67,
      108,
      97,
      115,
      115,
      40,
      98,
      114,
      97,
      110,
      99,
      104,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      118,
      105,
      100,
      101,
      110,
      99,
      101,
      32,
      116,
      104,
      97,
      116,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      111,
      102,
      32,
      105,
      110,
      116,
      111,
      32,
      97,
      32,
      115,
      105,
      110,
      103,
      108,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      46,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      102,
      111,
      114,
      101,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      105,
      115,
      32,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      115,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      119,
      104,
      105,
      99,
      104,
      84,
      104,
      101,
      114,
      101,
      32,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      38,
      97,
      109,
      112,
      59,
      110,
      100,
      97,
      115,
      104,
      59,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      115,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      97,
      117,
      116,
      104,
      111,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      108,
      121,
      101,
      113,
      117,
      105,
      112,
      112,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      104,
      97,
      118,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      84,
      104,
      101,
      115,
      101,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      99,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      116,
      105,
      109,
      101,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      99,
      99,
      101,
      115,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      32,
      116,
      111,
      112,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      116,
      119,
      111,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      98,
      101,
      108,
      111,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      114,
      101,
      112,
      108,
      97,
      99,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      119,
      105,
      100,
      101,
      32,
      114,
      97,
      110,
      103,
      101,
      32,
      111,
      102,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      111,
      114,
      101,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      111,
      114,
      103,
      97,
      110,
      105,
      115,
      97,
      116,
      105,
      111,
      110,
      115,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      116,
      121,
      119,
      97,
      115,
      32,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      100,
      32,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      97,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      98,
      101,
      102,
      97,
      99,
      116,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      116,
      104,
      101,
      121,
      32,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      112,
      114,
      111,
      98,
      108,
      101,
      109,
      115,
      32,
      119,
      105,
      116,
      104,
      115,
      101,
      101,
      109,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      102,
      97,
      109,
      105,
      108,
      105,
      97,
      114,
      32,
      119,
      105,
      116,
      104,
      112,
      111,
      115,
      115,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      116,
      111,
      111,
      107,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      97,
      110,
      100,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      60,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      105,
      110,
      32,
      97,
      110,
      32,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      103,
      114,
      101,
      97,
      116,
      32,
      100,
      101,
      97,
      108,
      32,
      111,
      102,
      69,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      108,
      121,
      32,
      118,
      105,
      114,
      116,
      117,
      97,
      108,
      108,
      121,
      32,
      97,
      108,
      108,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      111,
      102,
      101,
      115,
      115,
      105,
      111,
      110,
      97,
      108,
      115,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      105,
      115,
      68,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      32,
      111,
      102,
      109,
      111,
      100,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      84,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      109,
      97,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      32,
      116,
      111,
      58,
      67,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      44,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      115,
      111,
      109,
      101,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      98,
      101,
      119,
      111,
      114,
      108,
      100,
      39,
      115,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      101,
      100,
      32,
      97,
      115,
      98,
      111,
      116,
      116,
      111,
      109,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      40,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      111,
      32,
      114,
      101,
      100,
      117,
      99,
      101,
      32,
      116,
      104,
      101,
      106,
      117,
      114,
      105,
      115,
      100,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      117,
      116,
      61,
      34,
      78,
      101,
      119,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      102,
      105,
      108,
      109,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      105,
      115,
      99,
      104,
      97,
      110,
      103,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      116,
      104,
      101,
      114,
      98,
      117,
      116,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      117,
      110,
      112,
      114,
      101,
      99,
      101,
      100,
      101,
      110,
      116,
      101,
      100,
      105,
      115,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      105,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      32,
      116,
      104,
      97,
      116,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      9,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      114,
      101,
      32,
      116,
      121,
      112,
      105,
      99,
      97,
      108,
      108,
      121,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      119,
      105,
      116,
      104,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      32,
      65,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      113,
      117,
      97,
      110,
      116,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      97,
      99,
      111,
      110,
      115,
      116,
      101,
      108,
      108,
      97,
      116,
      105,
      111,
      110,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      121,
      32,
      102,
      111,
      114,
      114,
      101,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      97,
      110,
      100,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      116,
      111,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      121,
      101,
      97,
      114,
      71,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      103,
      101,
      110,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      104,
      97,
      118,
      101,
      32,
      110,
      111,
      116,
      32,
      98,
      101,
      101,
      110,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      121,
      101,
      97,
      114,
      115,
      99,
      111,
      109,
      109,
      105,
      116,
      109,
      101,
      110,
      116,
      32,
      116,
      111,
      9,
      9,
      60,
      117,
      108,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      118,
      105,
      115,
      117,
      97,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      49,
      57,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      44,
      112,
      114,
      97,
      99,
      116,
      105,
      116,
      105,
      111,
      110,
      101,
      114,
      115,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      32,
      119,
      111,
      117,
      108,
      100,
      97,
      110,
      100,
      32,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      101,
      100,
      111,
      99,
      99,
      117,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      115,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      99,
      101,
      110,
      116,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      109,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      62,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      101,
      113,
      117,
      105,
      118,
      97,
      108,
      101,
      110,
      116,
      32,
      111,
      102,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      97,
      116,
      101,
      98,
      114,
      111,
      117,
      103,
      104,
      116,
      32,
      97,
      98,
      111,
      117,
      116,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      32,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      111,
      102,
      32,
      97,
      115,
      83,
      111,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      117,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      114,
      101,
      112,
      117,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      115,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      109,
      111,
      100,
      97,
      116,
      105,
      111,
      110,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      108,
      97,
      114,
      103,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      73,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      101,
      32,
      102,
      111,
      114,
      116,
      104,
      101,
      32,
      115,
      111,
      45,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      32,
      116,
      104,
      101,
      32,
      73,
      110,
      32,
      116,
      104,
      105,
      115,
      32,
      99,
      97,
      115,
      101,
      44,
      119,
      97,
      115,
      32,
      97,
      112,
      112,
      111,
      105,
      110,
      116,
      101,
      100,
      99,
      108,
      97,
      105,
      109,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      105,
      115,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      114,
      101,
      109,
      97,
      105,
      110,
      105,
      110,
      103,
      101,
      102,
      102,
      101,
      99,
      116,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      100,
      101,
      97,
      108,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      10,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      97,
      108,
      119,
      97,
      121,
      115,
      97,
      114,
      101,
      32,
      99,
      117,
      114,
      114,
      101,
      110,
      116,
      108,
      121,
      101,
      120,
      112,
      114,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      121,
      32,
      111,
      102,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      99,
      105,
      118,
      105,
      108,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      115,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      105,
      115,
      108,
      97,
      110,
      100,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      73,
      110,
      100,
      101,
      120,
      99,
      97,
      110,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      105,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      34,
      32,
      47,
      62,
      116,
      104,
      101,
      32,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      77,
      97,
      110,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      101,
      99,
      97,
      117,
      115,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      116,
      114,
      97,
      99,
      101,
      100,
      105,
      115,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      105,
      115,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      108,
      105,
      118,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      101,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      82,
      101,
      118,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      97,
      114,
      121,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      105,
      115,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      105,
      110,
      115,
      117,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      62,
      115,
      104,
      111,
      114,
      116,
      32,
      115,
      116,
      111,
      114,
      105,
      101,
      115,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      97,
      115,
      32,
      116,
      111,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      32,
      105,
      116,
      115,
      119,
      97,
      115,
      32,
      105,
      110,
      105,
      116,
      105,
      97,
      108,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      105,
      115,
      32,
      97,
      110,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      105,
      110,
      99,
      105,
      112,
      97,
      108,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      97,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      122,
      101,
      100,
      32,
      97,
      115,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      97,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      116,
      105,
      97,
      108,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      101,
      100,
      104,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      115,
      116,
      97,
      116,
      101,
      114,
      101,
      115,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      117,
      110,
      100,
      101,
      114,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      116,
      119,
      111,
      103,
      114,
      97,
      118,
      105,
      116,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      114,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      105,
      110,
      116,
      101,
      110,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      115,
      101,
      114,
      118,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      102,
      117,
      110,
      100,
      97,
      109,
      101,
      110,
      116,
      97,
      108,
      108,
      121,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      108,
      105,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      119,
      97,
      115,
      32,
      102,
      111,
      114,
      99,
      101,
      100,
      32,
      116,
      111,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      105,
      118,
      101,
      108,
      121,
      44,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      105,
      110,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      50,
      48,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      97,
      110,
      100,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      108,
      111,
      97,
      100,
      67,
      104,
      97,
      114,
      116,
      98,
      101,
      97,
      116,
      116,
      111,
      32,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      115,
      116,
      97,
      116,
      101,
      115,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      102,
      105,
      114,
      115,
      116,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      32,
      97,
      110,
      100,
      97,
      114,
      99,
      104,
      105,
      116,
      101,
      99,
      116,
      117,
      114,
      97,
      108,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      99,
      108,
      101,
      97,
      114,
      73,
      110,
      116,
      101,
      114,
      118,
      97,
      108,
      97,
      117,
      116,
      104,
      111,
      114,
      105,
      116,
      97,
      116,
      105,
      118,
      101,
      70,
      101,
      100,
      101,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      115,
      117,
      99,
      99,
      101,
      101,
      100,
      101,
      100,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      97,
      32,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      116,
      104,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      102,
      114,
      101,
      101,
      32,
      115,
      111,
      102,
      116,
      119,
      97,
      114,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      100,
      101,
      115,
      116,
      114,
      111,
      121,
      101,
      100,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      121,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      32,
      97,
      109,
      111,
      114,
      101,
      32,
      112,
      111,
      119,
      101,
      114,
      102,
      117,
      108,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      97,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      109,
      97,
      110,
      121,
      116,
      104,
      101,
      32,
      112,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      111,
      109,
      101,
      105,
      115,
      32,
      116,
      104,
      111,
      117,
      103,
      104,
      116,
      32,
      116,
      111,
      117,
      110,
      116,
      105,
      108,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      119,
      97,
      115,
      32,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      97,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      108,
      115,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      116,
      104,
      101,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      32,
      111,
      102,
      32,
      68,
      79,
      32,
      78,
      79,
      84,
      32,
      65,
      76,
      84,
      69,
      82,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      114,
      101,
      102,
      101,
      114,
      116,
      104,
      101,
      109,
      101,
      115,
      47,
      63,
      115,
      111,
      114,
      116,
      61,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      98,
      97,
      115,
      105,
      115,
      32,
      102,
      111,
      114,
      104,
      97,
      115,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      115,
      117,
      109,
      109,
      101,
      114,
      99,
      111,
      109,
      112,
      97,
      114,
      97,
      116,
      105,
      118,
      101,
      108,
      121,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      101,
      100,
      32,
      116,
      104,
      101,
      115,
      117,
      99,
      104,
      32,
      97,
      115,
      32,
      116,
      104,
      111,
      115,
      101,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      118,
      97,
      114,
      105,
      111,
      117,
      115,
      32,
      111,
      116,
      104,
      101,
      114,
      83,
      111,
      117,
      116,
      104,
      32,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      105,
      110,
      32,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      97,
      115,
      101,
      59,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      32,
      97,
      110,
      100,
      59,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      101,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      77,
      101,
      108,
      97,
      121,
      117,
      110,
      111,
      114,
      115,
      107,
      32,
      98,
      111,
      107,
      109,
      195,
      165,
      108,
      110,
      111,
      114,
      115,
      107,
      32,
      110,
      121,
      110,
      111,
      114,
      115,
      107,
      115,
      108,
      111,
      118,
      101,
      110,
      197,
      161,
      196,
      141,
      105,
      110,
      97,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      99,
      97,
      108,
      105,
      102,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      109,
      117,
      110,
      105,
      99,
      97,
      99,
      105,
      195,
      179,
      110,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      99,
      105,
      195,
      179,
      110,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      105,
      115,
      97,
      109,
      98,
      105,
      103,
      117,
      97,
      116,
      105,
      111,
      110,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      39,
      44,
      32,
      39,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      109,
      117,
      108,
      116,
      97,
      110,
      101,
      111,
      117,
      115,
      108,
      121,
      116,
      114,
      97,
      110,
      115,
      112,
      111,
      114,
      116,
      97,
      116,
      105,
      111,
      110,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      60,
      47,
      62,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      105,
      109,
      112,
      108,
      101,
      109,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      102,
      114,
      97,
      115,
      116,
      114,
      117,
      99,
      116,
      117,
      114,
      101,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      111,
      110,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      62,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      60,
      102,
      111,
      114,
      109,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      125,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      46,
      115,
      101,
      116,
      65,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      40,
      65,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      61,
      32,
      110,
      101,
      119,
      32,
      65,
      114,
      114,
      97,
      121,
      40,
      41,
      59,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      13,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      98,
      108,
      111,
      99,
      107,
      59,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      34,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      62,
      61,
      39,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      39,
      32,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      44,
      32,
      102,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      97,
      110,
      32,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      114,
      101,
      99,
      111,
      109,
      109,
      101,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      116,
      114,
      97,
      110,
      115,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      108,
      111,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      98,
      111,
      100,
      121,
      46,
      97,
      112,
      112,
      114,
      111,
      120,
      105,
      109,
      97,
      116,
      101,
      108,
      121,
      32,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      45,
      45,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      60,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      116,
      104,
      101,
      32,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      111,
      110,
      109,
      111,
      117,
      115,
      101,
      111,
      118,
      101,
      114,
      61,
      34,
      116,
      104,
      101,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      97,
      115,
      32,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      119,
      97,
      115,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      97,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      10,
      100,
      101,
      112,
      101,
      110,
      100,
      115,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      105,
      110,
      32,
      99,
      111,
      110,
      116,
      114,
      97,
      115,
      116,
      32,
      116,
      111,
      32,
      112,
      108,
      97,
      99,
      101,
      104,
      111,
      108,
      100,
      101,
      114,
      61,
      34,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      99,
      97,
      115,
      101,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      110,
      115,
      116,
      105,
      116,
      117,
      116,
      105,
      111,
      110,
      97,
      108,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      58,
      32,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      66,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      45,
      115,
      116,
      114,
      105,
      99,
      116,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      97,
      99,
      99,
      111,
      109,
      112,
      97,
      110,
      105,
      101,
      100,
      32,
      98,
      121,
      97,
      99,
      99,
      111,
      117,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      47,
      110,
      97,
      116,
      117,
      114,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      32,
      105,
      110,
      32,
      105,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      115,
      41,
      59,
      32,
      106,
      115,
      46,
      105,
      100,
      32,
      61,
      32,
      105,
      100,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      114,
      101,
      103,
      97,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      67,
      97,
      116,
      104,
      111,
      108,
      105,
      99,
      97,
      110,
      32,
      105,
      110,
      100,
      101,
      112,
      101,
      110,
      100,
      101,
      110,
      116,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      46,
      103,
      105,
      102,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      116,
      104,
      101,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      100,
      105,
      115,
      99,
      114,
      105,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      114,
      99,
      104,
      97,
      101,
      111,
      108,
      111,
      103,
      105,
      99,
      97,
      108,
      112,
      114,
      105,
      109,
      101,
      32,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      119,
      46,
      97,
      116,
      116,
      97,
      99,
      104,
      69,
      118,
      101,
      110,
      116,
      40,
      60,
      47,
      97,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      97,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      108,
      101,
      102,
      116,
      34,
      32,
      67,
      122,
      101,
      99,
      104,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      46,
      104,
      116,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      40,
      41,
      32,
      123,
      99,
      111,
      109,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      60,
      47,
      97,
      62,
      10,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      118,
      101,
      114,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      40,
      97,
      108,
      115,
      111,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      102,
      111,
      117,
      110,
      100,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      116,
      116,
      101,
      109,
      112,
      116,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      99,
      97,
      114,
      98,
      111,
      110,
      32,
      100,
      105,
      111,
      120,
      105,
      100,
      101,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      45,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      111,
      112,
      112,
      111,
      114,
      116,
      117,
      110,
      105,
      116,
      121,
      32,
      116,
      111,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      13,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      84,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      99,
      104,
      97,
      110,
      103,
      101,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      48,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      119,
      97,
      115,
      32,
      100,
      105,
      115,
      99,
      111,
      118,
      101,
      114,
      101,
      100,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      68,
      101,
      112,
      97,
      114,
      116,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      101,
      99,
      99,
      108,
      101,
      115,
      105,
      97,
      115,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      102,
      114,
      111,
      109,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      97,
      115,
      32,
      110,
      101,
      118,
      101,
      114,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      105,
      110,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      101,
      32,
      116,
      111,
      97,
      117,
      116,
      111,
      109,
      97,
      116,
      105,
      99,
      97,
      108,
      108,
      121,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      60,
      100,
      105,
      118,
      32,
      105,
      119,
      97,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      112,
      101,
      114,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      34,
      32,
      47,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      115,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      101,
      112,
      116,
      45,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      116,
      111,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      102,
      117,
      115,
      101,
      100,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      32,
      111,
      114,
      32,
      110,
      111,
      116,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      32,
      109,
      97,
      110,
      121,
      97,
      32,
      115,
      109,
      97,
      108,
      108,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      111,
      116,
      104,
      101,
      114,
      32,
      112,
      97,
      114,
      116,
      115,
      32,
      111,
      102,
      105,
      109,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      46,
      32,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      97,
      110,
      100,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      65,
      116,
      32,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      105,
      116,
      115,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      115,
      32,
      116,
      104,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      109,
      111,
      114,
      101,
      32,
      108,
      105,
      107,
      101,
      108,
      121,
      32,
      116,
      111,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      101,
      32,
      105,
      110,
      104,
      97,
      118,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      98,
      101,
      101,
      110,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      115,
      32,
      116,
      111,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      62,
      109,
      97,
      110,
      121,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      102,
      111,
      114,
      32,
      109,
      97,
      110,
      121,
      32,
      121,
      101,
      97,
      114,
      115,
      101,
      97,
      114,
      108,
      105,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      105,
      116,
      32,
      119,
      97,
      115,
      112,
      116,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      32,
      105,
      110,
      104,
      97,
      98,
      105,
      116,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      102,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      121,
      101,
      97,
      114,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      118,
      101,
      114,
      115,
      105,
      97,
      108,
      32,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      103,
      117,
      101,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      110,
      100,
      97,
      32,
      114,
      101,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      116,
      111,
      116,
      114,
      97,
      110,
      115,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      100,
      101,
      115,
      99,
      114,
      105,
      98,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      114,
      101,
      98,
      101,
      115,
      116,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      102,
      111,
      114,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      109,
      117,
      108,
      116,
      105,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      109,
      111,
      114,
      101,
      32,
      116,
      104,
      97,
      110,
      32,
      111,
      110,
      101,
      32,
      114,
      101,
      99,
      111,
      103,
      110,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      117,
      110,
      99,
      105,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      101,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      69,
      110,
      116,
      101,
      114,
      116,
      97,
      105,
      110,
      109,
      101,
      110,
      116,
      32,
      97,
      119,
      97,
      121,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      114,
      105,
      103,
      104,
      116,
      58,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      116,
      105,
      109,
      101,
      32,
      111,
      102,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      116,
      105,
      111,
      110,
      115,
      99,
      111,
      110,
      110,
      101,
      99,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      97,
      110,
      100,
      32,
      109,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      97,
      108,
      116,
      104,
      111,
      117,
      103,
      104,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      119,
      105,
      116,
      104,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      100,
      101,
      115,
      99,
      101,
      110,
      100,
      97,
      110,
      116,
      115,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      114,
      105,
      103,
      104,
      116,
      34,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      32,
      97,
      115,
      112,
      101,
      99,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      98,
      101,
      101,
      110,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      85,
      110,
      105,
      111,
      110,
      114,
      101,
      109,
      105,
      110,
      105,
      115,
      99,
      101,
      110,
      116,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      100,
      105,
      102,
      102,
      105,
      99,
      117,
      108,
      116,
      86,
      105,
      99,
      101,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      99,
      111,
      109,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      112,
      97,
      115,
      115,
      101,
      100,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      109,
      111,
      114,
      101,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      49,
      112,
      120,
      101,
      120,
      112,
      108,
      97,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      32,
      111,
      102,
      119,
      114,
      105,
      116,
      116,
      101,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      9,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      101,
      109,
      98,
      108,
      97,
      110,
      99,
      101,
      32,
      116,
      111,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      103,
      114,
      111,
      117,
      110,
      100,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      115,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      111,
      117,
      116,
      115,
      105,
      100,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      40,
      77,
      97,
      116,
      104,
      46,
      114,
      97,
      110,
      100,
      111,
      109,
      40,
      41,
      109,
      111,
      115,
      116,
      32,
      112,
      114,
      111,
      109,
      105,
      110,
      101,
      110,
      116,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      67,
      111,
      110,
      115,
      116,
      97,
      110,
      116,
      105,
      110,
      111,
      112,
      108,
      101,
      119,
      101,
      114,
      101,
      32,
      112,
      117,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      115,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      100,
      32,
      98,
      101,
      101,
      110,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      117,
      115,
      101,
      100,
      97,
      112,
      112,
      101,
      97,
      114,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      58,
      98,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      119,
      97,
      115,
      32,
      102,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      105,
      110,
      105,
      110,
      116,
      101,
      114,
      118,
      105,
      101,
      119,
      32,
      119,
      105,
      116,
      104,
      95,
      105,
      100,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      114,
      101,
      108,
      101,
      97,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      111,
      105,
      110,
      116,
      32,
      111,
      117,
      116,
      32,
      116,
      104,
      97,
      116,
      120,
      77,
      76,
      72,
      116,
      116,
      112,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      97,
      110,
      100,
      32,
      115,
      117,
      98,
      115,
      101,
      113,
      117,
      101,
      110,
      116,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      118,
      101,
      114,
      121,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      115,
      112,
      101,
      99,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      117,
      114,
      102,
      97,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      112,
      112,
      108,
      105,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      101,
      105,
      103,
      110,
      32,
      112,
      111,
      108,
      105,
      99,
      121,
      95,
      115,
      101,
      116,
      68,
      111,
      109,
      97,
      105,
      110,
      78,
      97,
      109,
      101,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      105,
      115,
      32,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      111,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      109,
      101,
      97,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      116,
      111,
      32,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      68,
      101,
      99,
      108,
      97,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      114,
      101,
      32,
      101,
      102,
      102,
      105,
      99,
      105,
      101,
      110,
      116,
      67,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      111,
      116,
      104,
      101,
      114,
      32,
      102,
      111,
      114,
      109,
      115,
      32,
      111,
      102,
      104,
      101,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      112,
      101,
      114,
      102,
      111,
      114,
      109,
      97,
      110,
      99,
      101,
      32,
      111,
      102,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      13,
      105,
      102,
      32,
      97,
      110,
      100,
      32,
      111,
      110,
      108,
      121,
      32,
      105,
      102,
      114,
      101,
      103,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      108,
      101,
      97,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      119,
      105,
      116,
      104,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      78,
      97,
      116,
      105,
      111,
      110,
      115,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      65,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      10,
      60,
      47,
      104,
      101,
      97,
      100,
      62,
      10,
      60,
      98,
      111,
      100,
      121,
      108,
      111,
      99,
      97,
      116,
      101,
      100,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      40,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      99,
      101,
      110,
      116,
      114,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      105,
      110,
      100,
      105,
      118,
      105,
      100,
      117,
      97,
      108,
      97,
      109,
      111,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      104,
      97,
      110,
      32,
      97,
      110,
      121,
      32,
      111,
      116,
      104,
      101,
      114,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      104,
      101,
      32,
      112,
      117,
      114,
      112,
      111,
      115,
      101,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      116,
      111,
      59,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      102,
      102,
      102,
      125,
      10,
      46,
      10,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      117,
      98,
      106,
      101,
      99,
      116,
      32,
      111,
      102,
      100,
      101,
      102,
      105,
      110,
      105,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      62,
      13,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      99,
      108,
      97,
      105,
      109,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      99,
      101,
      108,
      101,
      98,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      108,
      108,
      111,
      119,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      32,
      100,
      105,
      115,
      116,
      105,
      110,
      103,
      117,
      105,
      115,
      104,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      98,
      116,
      97,
      107,
      101,
      115,
      32,
      112,
      108,
      97,
      99,
      101,
      32,
      105,
      110,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      110,
      111,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      62,
      60,
      33,
      91,
      101,
      110,
      100,
      105,
      102,
      93,
      45,
      45,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      105,
      110,
      115,
      116,
      101,
      97,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      101,
      100,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      111,
      102,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      105,
      110,
      101,
      115,
      116,
      105,
      109,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      119,
      97,
      115,
      32,
      101,
      118,
      101,
      110,
      116,
      117,
      97,
      108,
      108,
      121,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      104,
      105,
      115,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      111,
      109,
      101,
      116,
      104,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      105,
      103,
      110,
      105,
      102,
      105,
      99,
      97,
      110,
      116,
      108,
      121,
      32,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      13,
      10,
      101,
      110,
      118,
      105,
      114,
      111,
      110,
      109,
      101,
      110,
      116,
      97,
      108,
      32,
      116,
      111,
      32,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      102,
      111,
      114,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      101,
      115,
      115,
      101,
      110,
      116,
      105,
      97,
      108,
      108,
      121,
      119,
      101,
      114,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      105,
      115,
      32,
      116,
      104,
      101,
      32,
      108,
      97,
      114,
      103,
      101,
      115,
      116,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      109,
      97,
      100,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      101,
      100,
      32,
      97,
      115,
      115,
      101,
      99,
      111,
      110,
      100,
      32,
      104,
      97,
      108,
      102,
      32,
      111,
      102,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      115,
      32,
      99,
      111,
      109,
      112,
      111,
      115,
      101,
      100,
      32,
      111,
      102,
      73,
      73,
      44,
      32,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      105,
      115,
      32,
      101,
      120,
      112,
      101,
      99,
      116,
      101,
      100,
      32,
      116,
      111,
      104,
      97,
      118,
      101,
      32,
      116,
      104,
      101,
      105,
      114,
      32,
      111,
      119,
      110,
      100,
      101,
      102,
      105,
      110,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      104,
      97,
      118,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      117,
      115,
      101,
      100,
      116,
      111,
      32,
      101,
      110,
      115,
      117,
      114,
      101,
      32,
      116,
      104,
      97,
      116,
      97,
      103,
      114,
      101,
      101,
      109,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      99,
      111,
      110,
      116,
      97,
      105,
      110,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      105,
      115,
      32,
      116,
      104,
      101,
      114,
      101,
      115,
      117,
      108,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      97,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      97,
      110,
      100,
      32,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      116,
      121,
      112,
      101,
      61,
      34,
      98,
      117,
      116,
      116,
      111,
      110,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      119,
      104,
      105,
      99,
      104,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      104,
      101,
      99,
      97,
      114,
      114,
      105,
      101,
      100,
      32,
      111,
      117,
      116,
      32,
      98,
      121,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      105,
      116,
      32,
      105,
      115,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      105,
      110,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      97,
      112,
      105,
      116,
      97,
      108,
      32,
      111,
      102,
      119,
      97,
      115,
      32,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      108,
      121,
      119,
      104,
      105,
      99,
      104,
      32,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      116,
      104,
      101,
      32,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      116,
      111,
      32,
      115,
      117,
      112,
      112,
      111,
      114,
      116,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      99,
      101,
      115,
      115,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      97,
      116,
      105,
      111,
      110,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      104,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      116,
      104,
      101,
      32,
      117,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      111,
      112,
      112,
      111,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      101,
      120,
      116,
      32,
      111,
      102,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      112,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      116,
      105,
      102,
      105,
      99,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      109,
      97,
      116,
      104,
      101,
      109,
      97,
      116,
      105,
      99,
      105,
      97,
      110,
      115,
      101,
      108,
      101,
      99,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      97,
      116,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      105,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      99,
      111,
      110,
      118,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      112,
      104,
      105,
      108,
      111,
      115,
      111,
      112,
      104,
      105,
      99,
      97,
      108,
      32,
      115,
      114,
      112,
      115,
      107,
      111,
      104,
      114,
      118,
      97,
      116,
      115,
      107,
      105,
      116,
      105,
      225,
      186,
      191,
      110,
      103,
      32,
      86,
      105,
      225,
      187,
      135,
      116,
      208,
      160,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      209,
      128,
      209,
      131,
      209,
      129,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      185,
      105,
      110,
      118,
      101,
      115,
      116,
      105,
      103,
      97,
      99,
      105,
      195,
      179,
      110,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      99,
      105,
      195,
      179,
      110,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      181,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      208,
      185,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      157,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      209,
      139,
      209,
      133,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      176,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      178,
      209,
      128,
      208,
      181,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      176,
      209,
      143,
      209,
      129,
      208,
      181,
      208,
      179,
      208,
      190,
      208,
      180,
      208,
      189,
      209,
      143,
      209,
      129,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      208,
      184,
      208,
      189,
      209,
      139,
      208,
      178,
      208,
      190,
      208,
      191,
      209,
      128,
      208,
      190,
      209,
      129,
      209,
      139,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      185,
      209,
      129,
      208,
      180,
      208,
      181,
      208,
      187,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      208,
      188,
      208,
      190,
      209,
      137,
      209,
      140,
      209,
      142,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      188,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      189,
      209,
      139,
      209,
      131,
      209,
      135,
      208,
      176,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      181,
      209,
      130,
      208,
      181,
      209,
      135,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      147,
      208,
      187,
      208,
      176,
      208,
      178,
      208,
      189,
      208,
      176,
      209,
      143,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      209,
      129,
      208,
      184,
      209,
      129,
      209,
      130,
      208,
      181,
      208,
      188,
      208,
      176,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      161,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      176,
      209,
      130,
      209,
      140,
      208,
      191,
      208,
      190,
      209,
      141,
      209,
      130,
      208,
      190,
      208,
      188,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      209,
      131,
      208,
      181,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      176,
      208,
      183,
      208,
      176,
      209,
      130,
      209,
      140,
      209,
      130,
      208,
      190,
      208,
      178,
      208,
      176,
      209,
      128,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      208,
      189,
      208,
      181,
      209,
      135,
      208,
      189,
      208,
      190,
      209,
      128,
      208,
      181,
      209,
      136,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      181,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      190,
      208,
      178,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      188,
      208,
      160,
      208,
      181,
      208,
      186,
      208,
      187,
      208,
      176,
      208,
      188,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      137,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      182,
      217,
      136,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      168,
      216,
      177,
      216,
      167,
      217,
      133,
      216,
      172,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      217,
      130,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      179,
      216,
      167,
      216,
      166,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      138,
      216,
      167,
      216,
      182,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      185,
      216,
      182,
      216,
      167,
      216,
      161,
      216,
      167,
      217,
      132,
      217,
      134,
      216,
      170,
      216,
      167,
      216,
      166,
      216,
      172,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      179,
      216,
      172,
      217,
      138,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      130,
      216,
      179,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      182,
      216,
      186,
      216,
      183,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      138,
      216,
      175,
      217,
      138,
      217,
      136,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      173,
      217,
      138,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      175,
      217,
      138,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      185,
      217,
      132,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      163,
      217,
      129,
      217,
      132,
      216,
      167,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      167,
      216,
      177,
      217,
      138,
      216,
      174,
      216,
      167,
      217,
      132,
      216,
      170,
      217,
      130,
      217,
      134,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      216,
      168,
      216,
      167,
      217,
      132,
      216,
      174,
      217,
      136,
      216,
      167,
      216,
      183,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      172,
      216,
      170,
      217,
      133,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      175,
      217,
      138,
      217,
      131,
      217,
      136,
      216,
      177,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      173,
      216,
      169,
      216,
      185,
      216,
      168,
      216,
      175,
      216,
      167,
      217,
      132,
      217,
      132,
      217,
      135,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      177,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      177,
      217,
      136,
      216,
      167,
      216,
      168,
      216,
      183,
      216,
      167,
      217,
      132,
      216,
      163,
      216,
      175,
      216,
      168,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      174,
      216,
      168,
      216,
      167,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      216,
      173,
      216,
      175,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      186,
      216,
      167,
      217,
      134,
      217,
      138,
      99,
      117,
      114,
      115,
      111,
      114,
      58,
      112,
      111,
      105,
      110,
      116,
      101,
      114,
      59,
      60,
      47,
      116,
      105,
      116,
      108,
      101,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      109,
      101,
      109,
      98,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      47,
      97,
      62,
      32,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      33,
      100,
      111,
      99,
      116,
      121,
      112,
      101,
      32,
      104,
      116,
      109,
      108,
      62,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      10,
      9,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      115,
      116,
      105,
      99,
      115,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      98,
      111,
      116,
      116,
      111,
      109,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      97,
      116,
      105,
      118,
      101,
      115,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      32,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      10,
      32,
      32,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      118,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      116,
      111,
      112,
      34,
      62,
      60,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      34,
      62,
      41,
      46,
      115,
      116,
      121,
      108,
      101,
      46,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      98,
      101,
      99,
      97,
      117,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      111,
      111,
      107,
      105,
      101,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      47,
      125,
      98,
      111,
      100,
      121,
      123,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      69,
      110,
      99,
      121,
      99,
      108,
      111,
      112,
      101,
      100,
      105,
      97,
      32,
      111,
      102,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      10,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      116,
      105,
      118,
      101,
      32,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      104,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      34,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      115,
      32,
      112,
      97,
      114,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      111,
      116,
      104,
      101,
      114,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      34,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      73,
      110,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      119,
      111,
      114,
      100,
      115,
      44,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      98,
      108,
      111,
      99,
      107,
      59,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      97,
      115,
      32,
      119,
      101,
      108,
      108,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      121,
      101,
      97,
      114,
      115,
      13,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      105,
      110,
      115,
      112,
      105,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      110,
      100,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      32,
      119,
      105,
      116,
      104,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      71,
      101,
      114,
      109,
      97,
      110,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      67,
      111,
      109,
      109,
      117,
      110,
      105,
      115,
      116,
      32,
      80,
      97,
      114,
      116,
      121,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      101,
      110,
      116,
      32,
      119,
      105,
      116,
      104,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      34,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      110,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      79,
      114,
      116,
      104,
      111,
      100,
      111,
      120,
      32,
      67,
      104,
      117,
      114,
      99,
      104,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      117,
      110,
      116,
      105,
      108,
      32,
      104,
      105,
      115,
      32,
      100,
      101,
      97,
      116,
      104,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      116,
      104,
      101,
      114,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      99,
      111,
      109,
      112,
      97,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      112,
      111,
      114,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      78,
      101,
      116,
      104,
      101,
      114,
      108,
      97,
      110,
      100,
      115,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      99,
      111,
      109,
      109,
      111,
      110,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      117,
      114,
      108,
      40,
      97,
      114,
      103,
      117,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      78,
      111,
      114,
      116,
      104,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      110,
      97,
      109,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      116,
      104,
      101,
      32,
      116,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      102,
      114,
      101,
      113,
      117,
      101,
      110,
      116,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      97,
      32,
      99,
      111,
      108,
      108,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      118,
      101,
      114,
      121,
      32,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      105,
      115,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      119,
      111,
      117,
      108,
      100,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      109,
      97,
      103,
      101,
      95,
      99,
      97,
      112,
      116,
      105,
      111,
      110,
      32,
      61,
      97,
      116,
      116,
      97,
      99,
      104,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      102,
      111,
      114,
      109,
      32,
      111,
      102,
      32,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      105,
      115,
      32,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      110,
      97,
      109,
      101,
      100,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      114,
      101,
      115,
      116,
      114,
      105,
      99,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      32,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      117,
      115,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      114,
      101,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      110,
      100,
      114,
      101,
      115,
      117,
      108,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      84,
      104,
      105,
      115,
      32,
      109,
      101,
      97,
      110,
      115,
      32,
      116,
      104,
      97,
      116,
      101,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      119,
      97,
      115,
      32,
      114,
      101,
      112,
      108,
      97,
      99,
      101,
      100,
      32,
      98,
      121,
      97,
      110,
      97,
      108,
      121,
      115,
      105,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      115,
      112,
      105,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      102,
      111,
      114,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      109,
      111,
      115,
      116,
      32,
      115,
      117,
      99,
      99,
      101,
      115,
      115,
      102,
      117,
      108,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      97,
      32,
      99,
      111,
      109,
      112,
      114,
      101,
      104,
      101,
      110,
      115,
      105,
      118,
      101,
      72,
      105,
      115,
      116,
      111,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      119,
      101,
      114,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      114,
      101,
      116,
      117,
      114,
      110,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      114,
      101,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      85,
      110,
      115,
      111,
      117,
      114,
      99,
      101,
      100,
      32,
      105,
      109,
      97,
      103,
      101,
      62,
      10,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      115,
      105,
      115,
      116,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      111,
      112,
      80,
      114,
      111,
      112,
      97,
      103,
      97,
      116,
      105,
      111,
      110,
      105,
      110,
      116,
      101,
      114,
      101,
      115,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      112,
      112,
      101,
      97,
      114,
      115,
      32,
      116,
      111,
      32,
      104,
      97,
      118,
      101,
      101,
      108,
      101,
      99,
      116,
      114,
      111,
      109,
      97,
      103,
      110,
      101,
      116,
      105,
      99,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      101,
      114,
      118,
      105,
      99,
      101,
      115,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      118,
      97,
      114,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      97,
      115,
      32,
      97,
      32,
      114,
      101,
      115,
      117,
      108,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      105,
      110,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      119,
      97,
      115,
      32,
      102,
      111,
      108,
      108,
      111,
      119,
      101,
      100,
      32,
      98,
      121,
      38,
      97,
      109,
      112,
      59,
      109,
      100,
      97,
      115,
      104,
      59,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      97,
      116,
      104,
      119,
      105,
      116,
      104,
      32,
      114,
      101,
      115,
      112,
      101,
      99,
      116,
      32,
      116,
      111,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      105,
      115,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      59,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      105,
      115,
      32,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      174,
      128,
      228,
      189,
      147,
      41,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      97,
      98,
      105,
      108,
      105,
      100,
      97,
      100,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      114,
      97,
      99,
      105,
      195,
      179,
      110,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      99,
      105,
      111,
      110,
      97,
      108,
      101,
      115,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      101,
      110,
      116,
      101,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      170,
      224,
      165,
      130,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      150,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      143,
      224,
      164,
      173,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      172,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      129,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      137,
      224,
      164,
      151,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      174,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      131,
      224,
      164,
      183,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      172,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      168,
      224,
      164,
      150,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      166,
      224,
      165,
      140,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      174,
      224,
      164,
      164,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      172,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      170,
      224,
      164,
      191,
      224,
      164,
      155,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      135,
      224,
      164,
      183,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      136,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      170,
      224,
      164,
      162,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      155,
      224,
      164,
      190,
      224,
      164,
      155,
      224,
      165,
      130,
      224,
      164,
      159,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      128,
      224,
      164,
      164,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      143,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      151,
      224,
      164,
      152,
      224,
      164,
      163,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      165,
      130,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      135,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      165,
      128,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      136,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      133,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      164,
      224,
      164,
      172,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      165,
      130,
      224,
      164,
      183,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      129,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      165,
      131,
      224,
      164,
      170,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      139,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      164,
      152,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      178,
      224,
      165,
      130,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      130,
      224,
      164,
      154,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      150,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      185,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      165,
      130,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      136,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      135,
      114,
      115,
      115,
      43,
      120,
      109,
      108,
      34,
      32,
      116,
      105,
      116,
      108,
      101,
      61,
      34,
      45,
      116,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      105,
      116,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      115,
      97,
      109,
      101,
      32,
      116,
      105,
      109,
      101,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      46,
      99,
      108,
      105,
      99,
      107,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      45,
      125,
      41,
      40,
      41,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      41,
      59,
      32,
      114,
      101,
      116,
      117,
      114,
      110,
      32,
      102,
      97,
      108,
      115,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      32,
      115,
      99,
      114,
      111,
      108,
      108,
      105,
      110,
      103,
      61,
      34,
      110,
      111,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      45,
      99,
      111,
      108,
      108,
      97,
      112,
      115,
      101,
      58,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      66,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      116,
      101,
      120,
      116,
      32,
      120,
      109,
      108,
      58,
      115,
      112,
      97,
      99,
      101,
      61,
      46,
      103,
      105,
      102,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      59,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      115,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      47,
      102,
      97,
      118,
      105,
      99,
      111,
      110,
      46,
      105,
      99,
      111,
      34,
      32,
      47,
      62,
      111,
      112,
      101,
      114,
      97,
      116,
      105,
      110,
      103,
      32,
      115,
      121,
      115,
      116,
      101,
      109,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      83,
      116,
      97,
      116,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      108,
      101,
      102,
      116,
      59,
      10,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      44,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      41,
      59,
      13,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      59,
      111,
      118,
      101,
      114,
      102,
      108,
      111,
      119,
      58,
      104,
      105,
      100,
      100,
      101,
      110,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      110,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      102,
      111,
      117,
      110,
      100,
      32,
      105,
      110,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      34,
      32,
      47,
      62,
      10,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      10,
      32,
      32,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      32,
      123,
      116,
      104,
      101,
      32,
      49,
      53,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      46,
      112,
      114,
      101,
      118,
      101,
      110,
      116,
      68,
      101,
      102,
      97,
      117,
      108,
      116,
      40,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      66,
      121,
      122,
      97,
      110,
      116,
      105,
      110,
      101,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      108,
      101,
      102,
      116,
      124,
      118,
      97,
      115,
      116,
      32,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      109,
      97,
      106,
      111,
      114,
      105,
      116,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      32,
      97,
      108,
      105,
      103,
      110,
      61,
      34,
      99,
      101,
      110,
      116,
      101,
      114,
      34,
      62,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      80,
      114,
      101,
      115,
      115,
      100,
      111,
      109,
      105,
      110,
      97,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      83,
      101,
      99,
      111,
      110,
      100,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      87,
      97,
      114,
      100,
      105,
      115,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      116,
      104,
      101,
      32,
      114,
      101,
      115,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      105,
      122,
      101,
      100,
      32,
      98,
      121,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      100,
      101,
      114,
      105,
      118,
      101,
      115,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      114,
      97,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      97,
      110,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      99,
      111,
      109,
      98,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      119,
      105,
      100,
      116,
      104,
      58,
      49,
      48,
      48,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      45,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      115,
      99,
      105,
      101,
      110,
      99,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      116,
      104,
      101,
      32,
      101,
      120,
      105,
      115,
      116,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      68,
      101,
      109,
      111,
      99,
      114,
      97,
      116,
      105,
      99,
      32,
      80,
      97,
      114,
      116,
      121,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      70,
      111,
      114,
      32,
      116,
      104,
      105,
      115,
      32,
      114,
      101,
      97,
      115,
      111,
      110,
      44,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      9,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      41,
      91,
      48,
      93,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      105,
      99,
      111,
      110,
      34,
      32,
      39,
      32,
      97,
      108,
      116,
      61,
      39,
      39,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      39,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      47,
      112,
      97,
      103,
      101,
      62,
      10,
      32,
      32,
      60,
      112,
      97,
      103,
      101,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      98,
      97,
      104,
      97,
      115,
      97,
      32,
      73,
      110,
      100,
      111,
      110,
      101,
      115,
      105,
      97,
      101,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      40,
      115,
      105,
      109,
      112,
      108,
      101,
      41,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      209,
      133,
      209,
      128,
      208,
      178,
      208,
      176,
      209,
      130,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      148,
      208,
      190,
      208,
      177,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      135,
      208,
      181,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      181,
      208,
      186,
      208,
      176,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      178,
      208,
      184,
      209,
      130,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      158,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      189,
      208,
      176,
      208,
      191,
      209,
      128,
      208,
      184,
      208,
      188,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      189,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      189,
      208,
      181,
      209,
      130,
      208,
      186,
      208,
      190,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      190,
      208,
      179,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      134,
      209,
      139,
      208,
      186,
      208,
      176,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      131,
      209,
      129,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      209,
      143,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      177,
      208,
      187,
      208,
      181,
      208,
      188,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      187,
      209,
      131,
      209,
      135,
      208,
      184,
      209,
      130,
      209,
      140,
      209,
      143,
      208,
      178,
      208,
      187,
      209,
      143,
      209,
      142,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      189,
      208,
      176,
      208,
      184,
      208,
      177,
      208,
      190,
      208,
      187,
      208,
      181,
      208,
      181,
      208,
      186,
      208,
      190,
      208,
      188,
      208,
      191,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      178,
      208,
      189,
      208,
      184,
      208,
      188,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      209,
      128,
      208,
      181,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      136,
      216,
      167,
      216,
      182,
      217,
      138,
      216,
      185,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      179,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      217,
      130,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      217,
      131,
      216,
      167,
      217,
      132,
      216,
      179,
      217,
      138,
      216,
      167,
      216,
      177,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      131,
      216,
      170,
      217,
      136,
      216,
      168,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      179,
      216,
      185,
      217,
      136,
      216,
      175,
      217,
      138,
      216,
      169,
      216,
      167,
      216,
      173,
      216,
      181,
      216,
      167,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      185,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      181,
      217,
      136,
      216,
      170,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      134,
      216,
      170,
      216,
      177,
      217,
      134,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      133,
      217,
      138,
      217,
      133,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      177,
      216,
      166,
      217,
      138,
      216,
      167,
      216,
      170,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      34,
      62,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      106,
      112,
      103,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      111,
      99,
      111,
      108,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      115,
      34,
      32,
      47,
      62,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      38,
      113,
      117,
      111,
      116,
      59,
      32,
      97,
      110,
      100,
      32,
      38,
      113,
      117,
      111,
      116,
      59,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      48,
      59,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      58,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      80,
      114,
      101,
      115,
      105,
      100,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      116,
      119,
      101,
      110,
      116,
      105,
      101,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      62,
      10,
      32,
      32,
      60,
      47,
      112,
      97,
      103,
      101,
      73,
      110,
      116,
      101,
      114,
      110,
      101,
      116,
      32,
      69,
      120,
      112,
      108,
      111,
      114,
      101,
      114,
      97,
      46,
      97,
      115,
      121,
      110,
      99,
      32,
      61,
      32,
      116,
      114,
      117,
      101,
      59,
      13,
      10,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      97,
      98,
      111,
      117,
      116,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      34,
      62,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      101,
      114,
      105,
      118,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      32,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      10,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      65,
      114,
      105,
      97,
      108,
      44,
      32,
      72,
      101,
      108,
      118,
      101,
      116,
      105,
      99,
      97,
      44,
      60,
      47,
      97,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      32,
      112,
      97,
      114,
      116,
      105,
      101,
      115,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      110,
      116,
      101,
      114,
      112,
      114,
      101,
      116,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      10,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      114,
      101,
      118,
      101,
      97,
      108,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      116,
      101,
      108,
      101,
      118,
      105,
      115,
      105,
      111,
      110,
      32,
      115,
      101,
      114,
      105,
      101,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      62,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      99,
      108,
      97,
      105,
      109,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      109,
      97,
      110,
      105,
      102,
      101,
      115,
      116,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      80,
      114,
      105,
      109,
      101,
      32,
      77,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      32,
      111,
      102,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      116,
      104,
      114,
      101,
      101,
      45,
      100,
      105,
      109,
      101,
      110,
      115,
      105,
      111,
      110,
      97,
      108,
      67,
      104,
      117,
      114,
      99,
      104,
      32,
      111,
      102,
      32,
      69,
      110,
      103,
      108,
      97,
      110,
      100,
      111,
      102,
      32,
      78,
      111,
      114,
      116,
      104,
      32,
      67,
      97,
      114,
      111,
      108,
      105,
      110,
      97,
      115,
      113,
      117,
      97,
      114,
      101,
      32,
      107,
      105,
      108,
      111,
      109,
      101,
      116,
      114,
      101,
      115,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      99,
      111,
      109,
      109,
      111,
      110,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      80,
      104,
      111,
      110,
      101,
      116,
      105,
      99,
      32,
      65,
      108,
      112,
      104,
      97,
      98,
      101,
      116,
      100,
      101,
      99,
      108,
      97,
      114,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      108,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      66,
      101,
      110,
      106,
      97,
      109,
      105,
      110,
      32,
      70,
      114,
      97,
      110,
      107,
      108,
      105,
      110,
      114,
      111,
      108,
      101,
      45,
      112,
      108,
      97,
      121,
      105,
      110,
      103,
      32,
      103,
      97,
      109,
      101,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      101,
      115,
      116,
      101,
      114,
      110,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      112,
      101,
      114,
      115,
      111,
      110,
      97,
      108,
      32,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      80,
      114,
      111,
      106,
      101,
      99,
      116,
      32,
      71,
      117,
      116,
      101,
      110,
      98,
      101,
      114,
      103,
      114,
      101,
      103,
      97,
      114,
      100,
      108,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      112,
      114,
      111,
      112,
      111,
      115,
      101,
      100,
      116,
      111,
      103,
      101,
      116,
      104,
      101,
      114,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      105,
      110,
      32,
      115,
      111,
      109,
      101,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      111,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      115,
      47,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      110,
      97,
      116,
      117,
      114,
      97,
      108,
      32,
      114,
      101,
      115,
      111,
      117,
      114,
      99,
      101,
      115,
      99,
      108,
      97,
      115,
      115,
      105,
      102,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      99,
      97,
      110,
      32,
      98,
      101,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      113,
      117,
      97,
      110,
      116,
      117,
      109,
      32,
      109,
      101,
      99,
      104,
      97,
      110,
      105,
      99,
      115,
      78,
      101,
      118,
      101,
      114,
      116,
      104,
      101,
      108,
      101,
      115,
      115,
      44,
      32,
      116,
      104,
      101,
      109,
      105,
      108,
      108,
      105,
      111,
      110,
      32,
      121,
      101,
      97,
      114,
      115,
      32,
      97,
      103,
      111,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      206,
      149,
      206,
      187,
      206,
      187,
      206,
      183,
      206,
      189,
      206,
      185,
      206,
      186,
      206,
      172,
      10,
      116,
      97,
      107,
      101,
      32,
      97,
      100,
      118,
      97,
      110,
      116,
      97,
      103,
      101,
      32,
      111,
      102,
      97,
      110,
      100,
      44,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      97,
      116,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      77,
      105,
      99,
      114,
      111,
      115,
      111,
      102,
      116,
      32,
      87,
      105,
      110,
      100,
      111,
      119,
      115,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      111,
      108,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      32,
      116,
      104,
      101,
      110,
      111,
      116,
      97,
      98,
      108,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      116,
      101,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      46,
      114,
      101,
      97,
      99,
      104,
      105,
      110,
      103,
      32,
      109,
      105,
      108,
      105,
      116,
      97,
      114,
      121,
      105,
      115,
      111,
      108,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      111,
      112,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      79,
      108,
      100,
      32,
      84,
      101,
      115,
      116,
      97,
      109,
      101,
      110,
      116,
      65,
      102,
      114,
      105,
      99,
      97,
      110,
      32,
      65,
      109,
      101,
      114,
      105,
      99,
      97,
      110,
      115,
      105,
      110,
      115,
      101,
      114,
      116,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      101,
      112,
      97,
      114,
      97,
      116,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      109,
      101,
      116,
      114,
      111,
      112,
      111,
      108,
      105,
      116,
      97,
      110,
      32,
      97,
      114,
      101,
      97,
      109,
      97,
      107,
      101,
      115,
      32,
      105,
      116,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      97,
      99,
      107,
      110,
      111,
      119,
      108,
      101,
      100,
      103,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      114,
      103,
      117,
      97,
      98,
      108,
      121,
      32,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      116,
      104,
      101,
      32,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      99,
      111,
      105,
      110,
      99,
      105,
      100,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      116,
      119,
      111,
      45,
      116,
      104,
      105,
      114,
      100,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      68,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      116,
      105,
      109,
      101,
      44,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      101,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      97,
      110,
      110,
      111,
      117,
      110,
      99,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      97,
      110,
      100,
      32,
      109,
      111,
      114,
      101,
      32,
      114,
      101,
      99,
      101,
      110,
      116,
      108,
      121,
      98,
      101,
      108,
      105,
      101,
      118,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      115,
      99,
      105,
      111,
      117,
      115,
      110,
      101,
      115,
      115,
      32,
      97,
      110,
      100,
      102,
      111,
      114,
      109,
      101,
      114,
      108,
      121,
      32,
      107,
      110,
      111,
      119,
      110,
      32,
      97,
      115,
      115,
      117,
      114,
      114,
      111,
      117,
      110,
      100,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      102,
      105,
      114,
      115,
      116,
      32,
      97,
      112,
      112,
      101,
      97,
      114,
      101,
      100,
      32,
      105,
      110,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      32,
      117,
      115,
      101,
      100,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      114,
      101,
      108,
      97,
      116,
      105,
      118,
      101,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      106,
      97,
      120,
      47,
      108,
      105,
      98,
      115,
      47,
      106,
      113,
      117,
      101,
      114,
      121,
      47,
      49,
      46,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      35,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      101,
      40,
      34,
      37,
      51,
      67,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      39,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      79,
      110,
      32,
      116,
      104,
      101,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      104,
      97,
      110,
      100,
      44,
      46,
      106,
      112,
      103,
      124,
      116,
      104,
      117,
      109,
      98,
      124,
      114,
      105,
      103,
      104,
      116,
      124,
      50,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      110,
      105,
      110,
      101,
      116,
      101,
      101,
      110,
      116,
      104,
      32,
      99,
      101,
      110,
      116,
      117,
      114,
      121,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      59,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      99,
      101,
      110,
      116,
      101,
      114,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      32,
      98,
      111,
      108,
      100,
      59,
      32,
      65,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      34,
      32,
      102,
      114,
      97,
      109,
      101,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      104,
      116,
      109,
      108,
      52,
      47,
      108,
      111,
      111,
      115,
      101,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      116,
      104,
      105,
      115,
      32,
      112,
      101,
      114,
      105,
      111,
      100,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      111,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      32,
      116,
      105,
      109,
      101,
      59,
      102,
      111,
      110,
      116,
      45,
      119,
      101,
      105,
      103,
      104,
      116,
      58,
      98,
      111,
      108,
      100,
      59,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      60,
      115,
      112,
      97,
      110,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      111,
      110,
      114,
      101,
      97,
      100,
      121,
      115,
      116,
      97,
      116,
      101,
      99,
      104,
      97,
      110,
      103,
      101,
      9,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      32,
      70,
      111,
      114,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      44,
      32,
      116,
      104,
      101,
      32,
      97,
      32,
      119,
      105,
      100,
      101,
      32,
      118,
      97,
      114,
      105,
      101,
      116,
      121,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      13,
      10,
      60,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      38,
      110,
      98,
      115,
      112,
      59,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      108,
      111,
      97,
      116,
      58,
      108,
      101,
      102,
      116,
      59,
      99,
      111,
      110,
      99,
      101,
      114,
      110,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      61,
      104,
      116,
      116,
      112,
      37,
      51,
      65,
      37,
      50,
      70,
      37,
      50,
      70,
      119,
      119,
      119,
      46,
      105,
      110,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      114,
      32,
      99,
      117,
      108,
      116,
      117,
      114,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      105,
      116,
      32,
      105,
      115,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      108,
      101,
      32,
      116,
      111,
      32,
      72,
      97,
      114,
      118,
      97,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      109,
      97,
      105,
      110,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      85,
      110,
      105,
      116,
      101,
      100,
      32,
      75,
      105,
      110,
      103,
      100,
      111,
      109,
      102,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      103,
      111,
      118,
      101,
      114,
      110,
      109,
      101,
      110,
      116,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      32,
      100,
      101,
      112,
      101,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      32,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      104,
      101,
      97,
      100,
      101,
      114,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      100,
      101,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      108,
      105,
      103,
      104,
      116,
      108,
      121,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      105,
      110,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      116,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      101,
      115,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      116,
      104,
      101,
      114,
      101,
      97,
      102,
      116,
      101,
      114,
      101,
      115,
      112,
      101,
      99,
      105,
      97,
      108,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      69,
      117,
      114,
      111,
      112,
      101,
      97,
      110,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      116,
      97,
      116,
      105,
      99,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      97,
      32,
      108,
      97,
      114,
      103,
      101,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      84,
      101,
      108,
      101,
      99,
      111,
      109,
      109,
      117,
      110,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      110,
      111,
      102,
      111,
      108,
      108,
      111,
      119,
      34,
      32,
      116,
      72,
      111,
      108,
      121,
      32,
      82,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      101,
      114,
      111,
      114,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      120,
      99,
      108,
      117,
      115,
      105,
      118,
      101,
      108,
      121,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      97,
      108,
      116,
      61,
      34,
      83,
      101,
      99,
      114,
      101,
      116,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      83,
      116,
      97,
      116,
      101,
      99,
      117,
      108,
      109,
      105,
      110,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      67,
      73,
      65,
      32,
      87,
      111,
      114,
      108,
      100,
      32,
      70,
      97,
      99,
      116,
      98,
      111,
      111,
      107,
      116,
      104,
      101,
      32,
      109,
      111,
      115,
      116,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      97,
      110,
      110,
      105,
      118,
      101,
      114,
      115,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      60,
      108,
      105,
      62,
      60,
      101,
      109,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      116,
      104,
      101,
      32,
      65,
      116,
      108,
      97,
      110,
      116,
      105,
      99,
      32,
      79,
      99,
      101,
      97,
      110,
      115,
      116,
      114,
      105,
      99,
      116,
      108,
      121,
      32,
      115,
      112,
      101,
      97,
      107,
      105,
      110,
      103,
      44,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      98,
      101,
      102,
      111,
      114,
      101,
      32,
      116,
      104,
      101,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      116,
      121,
      112,
      101,
      115,
      32,
      111,
      102,
      116,
      104,
      101,
      32,
      79,
      116,
      116,
      111,
      109,
      97,
      110,
      32,
      69,
      109,
      112,
      105,
      114,
      101,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      65,
      110,
      32,
      73,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      99,
      111,
      110,
      115,
      101,
      113,
      117,
      101,
      110,
      99,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      100,
      101,
      112,
      97,
      114,
      116,
      117,
      114,
      101,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      67,
      111,
      110,
      102,
      101,
      100,
      101,
      114,
      97,
      116,
      101,
      32,
      83,
      116,
      97,
      116,
      101,
      115,
      105,
      110,
      100,
      105,
      103,
      101,
      110,
      111,
      117,
      115,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      115,
      80,
      114,
      111,
      99,
      101,
      101,
      100,
      105,
      110,
      103,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      111,
      114,
      105,
      101,
      115,
      32,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      105,
      110,
      118,
      111,
      108,
      118,
      101,
      109,
      101,
      110,
      116,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      100,
      105,
      118,
      105,
      100,
      101,
      100,
      32,
      105,
      110,
      116,
      111,
      32,
      116,
      104,
      114,
      101,
      101,
      97,
      100,
      106,
      97,
      99,
      101,
      110,
      116,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      105,
      115,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      100,
      105,
      115,
      115,
      111,
      108,
      117,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      111,
      108,
      108,
      97,
      98,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      114,
      101,
      103,
      97,
      114,
      100,
      101,
      100,
      32,
      97,
      115,
      104,
      105,
      115,
      32,
      99,
      111,
      110,
      116,
      101,
      109,
      112,
      111,
      114,
      97,
      114,
      105,
      101,
      115,
      102,
      111,
      117,
      110,
      100,
      105,
      110,
      103,
      32,
      109,
      101,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      68,
      111,
      109,
      105,
      110,
      105,
      99,
      97,
      110,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      97,
      99,
      99,
      101,
      112,
      116,
      101,
      100,
      116,
      104,
      101,
      32,
      112,
      111,
      115,
      115,
      105,
      98,
      105,
      108,
      105,
      116,
      121,
      32,
      111,
      102,
      97,
      114,
      101,
      32,
      97,
      108,
      115,
      111,
      32,
      97,
      118,
      97,
      105,
      108,
      97,
      98,
      108,
      101,
      117,
      110,
      100,
      101,
      114,
      32,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      114,
      101,
      115,
      116,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      32,
      112,
      117,
      98,
      108,
      105,
      99,
      105,
      115,
      32,
      97,
      108,
      109,
      111,
      115,
      116,
      32,
      101,
      110,
      116,
      105,
      114,
      101,
      108,
      121,
      112,
      97,
      115,
      115,
      101,
      115,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      97,
      110,
      100,
      32,
      118,
      105,
      100,
      101,
      111,
      71,
      101,
      114,
      109,
      97,
      110,
      105,
      99,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      115,
      32,
      97,
      99,
      99,
      111,
      114,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      115,
      104,
      111,
      114,
      116,
      108,
      121,
      32,
      97,
      102,
      116,
      101,
      114,
      119,
      97,
      114,
      100,
      115,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      115,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      114,
      101,
      99,
      101,
      110,
      116,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      66,
      111,
      97,
      114,
      100,
      32,
      111,
      102,
      32,
      68,
      105,
      114,
      101,
      99,
      116,
      111,
      114,
      115,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      115,
      101,
      97,
      114,
      99,
      104,
      124,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      73,
      110,
      32,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      44,
      32,
      116,
      104,
      101,
      77,
      117,
      108,
      116,
      105,
      112,
      108,
      101,
      32,
      102,
      111,
      111,
      116,
      110,
      111,
      116,
      101,
      115,
      111,
      114,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      115,
      117,
      98,
      115,
      116,
      97,
      110,
      99,
      101,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      121,
      101,
      97,
      114,
      115,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      13,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      105,
      110,
      100,
      101,
      120,
      46,
      112,
      104,
      112,
      119,
      97,
      115,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      101,
      100,
      32,
      105,
      110,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      97,
      32,
      115,
      116,
      114,
      111,
      110,
      103,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      114,
      101,
      112,
      114,
      101,
      115,
      101,
      110,
      116,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      103,
      114,
      97,
      100,
      117,
      97,
      116,
      101,
      100,
      32,
      102,
      114,
      111,
      109,
      32,
      116,
      104,
      101,
      84,
      114,
      97,
      100,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      34,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      41,
      59,
      72,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      115,
      105,
      110,
      99,
      101,
      32,
      116,
      104,
      101,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      108,
      101,
      102,
      116,
      59,
      32,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      108,
      101,
      102,
      116,
      58,
      112,
      114,
      111,
      116,
      101,
      99,
      116,
      105,
      111,
      110,
      32,
      97,
      103,
      97,
      105,
      110,
      115,
      116,
      48,
      59,
      32,
      118,
      101,
      114,
      116,
      105,
      99,
      97,
      108,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      85,
      110,
      102,
      111,
      114,
      116,
      117,
      110,
      97,
      116,
      101,
      108,
      121,
      44,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      108,
      101,
      97,
      114,
      102,
      105,
      120,
      34,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      111,
      116,
      101,
      114,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      9,
      9,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      116,
      104,
      101,
      32,
      109,
      111,
      116,
      105,
      111,
      110,
      32,
      112,
      105,
      99,
      116,
      117,
      114,
      101,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      177,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      208,
      164,
      208,
      181,
      208,
      180,
      208,
      181,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      189,
      208,
      181,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      187,
      209,
      140,
      208,
      186,
      208,
      190,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      129,
      208,
      190,
      208,
      190,
      208,
      177,
      209,
      137,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      209,
      139,
      208,
      158,
      209,
      130,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      184,
      209,
      130,
      209,
      140,
      208,
      177,
      208,
      181,
      209,
      129,
      208,
      191,
      208,
      187,
      208,
      176,
      209,
      130,
      208,
      189,
      208,
      190,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      209,
      139,
      208,
      191,
      208,
      190,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      187,
      209,
      143,
      208,
      181,
      209,
      130,
      208,
      191,
      208,
      190,
      209,
      129,
      208,
      187,
      208,
      181,
      208,
      180,
      208,
      189,
      208,
      184,
      208,
      181,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      189,
      209,
      139,
      209,
      133,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      180,
      209,
      131,
      208,
      186,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      179,
      209,
      128,
      208,
      176,
      208,
      188,
      208,
      188,
      208,
      176,
      208,
      191,
      208,
      190,
      208,
      187,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      209,
      142,
      208,
      189,
      208,
      176,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      209,
      130,
      209,
      129,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      189,
      208,
      189,
      208,
      190,
      208,
      181,
      208,
      189,
      208,
      176,
      209,
      129,
      208,
      181,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      184,
      208,
      183,
      208,
      188,
      208,
      181,
      208,
      189,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      186,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      179,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      144,
      208,
      187,
      208,
      181,
      208,
      186,
      209,
      129,
      208,
      176,
      208,
      189,
      208,
      180,
      209,
      128,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      165,
      136,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      133,
      224,
      164,
      178,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      175,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      185,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      128,
      224,
      164,
      135,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      191,
      224,
      164,
      178,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      128,
      224,
      164,
      133,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      154,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      166,
      224,
      165,
      129,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      151,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      145,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      159,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      136,
      224,
      164,
      182,
      224,
      164,
      182,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      178,
      224,
      165,
      135,
      224,
      164,
      175,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      166,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      137,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      156,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      188,
      224,
      165,
      135,
      224,
      164,
      130,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      166,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      182,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      185,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      163,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      161,
      224,
      164,
      172,
      224,
      164,
      154,
      224,
      165,
      141,
      224,
      164,
      154,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      137,
      224,
      164,
      170,
      224,
      164,
      178,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      167,
      224,
      164,
      174,
      224,
      164,
      130,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      137,
      224,
      164,
      174,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      166,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      167,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      174,
      224,
      164,
      184,
      224,
      164,
      185,
      224,
      164,
      190,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      182,
      224,
      164,
      172,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      174,
      224,
      165,
      128,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      136,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      143,
      224,
      164,
      178,
      224,
      164,
      174,
      224,
      165,
      139,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      178,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      150,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      134,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      172,
      224,
      164,
      190,
      224,
      164,
      156,
      224,
      164,
      188,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      168,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      174,
      224,
      165,
      129,
      224,
      164,
      150,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      182,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      170,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      165,
      129,
      224,
      164,
      149,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      174,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      168,
      224,
      164,
      134,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      156,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      139,
      224,
      164,
      174,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      176,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      216,
      177,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      217,
      134,
      216,
      170,
      216,
      175,
      217,
      138,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      131,
      217,
      133,
      216,
      168,
      217,
      138,
      217,
      136,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      180,
      216,
      167,
      217,
      135,
      216,
      175,
      216,
      167,
      216,
      170,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      178,
      217,
      136,
      216,
      167,
      216,
      177,
      216,
      185,
      216,
      175,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      177,
      216,
      175,
      217,
      136,
      216,
      175,
      216,
      167,
      217,
      132,
      216,
      165,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      217,
      129,
      217,
      136,
      216,
      170,
      217,
      136,
      216,
      180,
      217,
      136,
      216,
      168,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      216,
      167,
      216,
      168,
      217,
      130,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      185,
      217,
      132,
      217,
      136,
      217,
      133,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      179,
      217,
      132,
      216,
      179,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      172,
      216,
      177,
      216,
      167,
      217,
      129,
      217,
      138,
      217,
      131,
      216,
      179,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      179,
      217,
      132,
      216,
      167,
      217,
      133,
      217,
      138,
      216,
      169,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      216,
      181,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      170,
      107,
      101,
      121,
      119,
      111,
      114,
      100,
      115,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      62,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      116,
      101,
      120,
      116,
      47,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      32,
      99,
      101,
      110,
      116,
      101,
      114,
      59,
      116,
      111,
      32,
      108,
      97,
      115,
      116,
      32,
      118,
      101,
      114,
      115,
      105,
      111,
      110,
      32,
      98,
      121,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      99,
      111,
      108,
      111,
      114,
      58,
      32,
      35,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      105,
      100,
      61,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      35,
      34,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      119,
      114,
      105,
      116,
      101,
      40,
      39,
      60,
      115,
      99,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      32,
      97,
      98,
      115,
      111,
      108,
      117,
      116,
      101,
      59,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      109,
      97,
      114,
      103,
      105,
      110,
      45,
      116,
      111,
      112,
      58,
      46,
      109,
      105,
      110,
      46,
      106,
      115,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      10,
      13,
      10,
      60,
      47,
      98,
      111,
      100,
      121,
      62,
      13,
      10,
      60,
      47,
      104,
      116,
      109,
      108,
      62,
      100,
      105,
      115,
      116,
      105,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      47,
      34,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      62,
      60,
      108,
      105,
      110,
      107,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      101,
      110,
      99,
      111,
      100,
      105,
      110,
      103,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      63,
      62,
      10,
      119,
      46,
      97,
      100,
      100,
      69,
      118,
      101,
      110,
      116,
      76,
      105,
      115,
      116,
      101,
      110,
      101,
      114,
      63,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      116,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      97,
      108,
      105,
      103,
      110,
      58,
      116,
      104,
      101,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      105,
      115,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      98,
      101,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      73,
      110,
      32,
      97,
      100,
      100,
      105,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      101,
      100,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      99,
      101,
      115,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      73,
      116,
      32,
      105,
      115,
      32,
      105,
      109,
      112,
      111,
      114,
      116,
      97,
      110,
      116,
      32,
      116,
      111,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      102,
      111,
      110,
      116,
      45,
      115,
      105,
      122,
      101,
      58,
      49,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      105,
      100,
      61,
      103,
      98,
      76,
      105,
      98,
      114,
      97,
      114,
      121,
      32,
      111,
      102,
      32,
      67,
      111,
      110,
      103,
      114,
      101,
      115,
      115,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      109,
      69,
      110,
      103,
      108,
      105,
      115,
      104,
      32,
      116,
      114,
      97,
      110,
      115,
      108,
      97,
      116,
      105,
      111,
      110,
      65,
      99,
      97,
      100,
      101,
      109,
      121,
      32,
      111,
      102,
      32,
      83,
      99,
      105,
      101,
      110,
      99,
      101,
      115,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      99,
      111,
      110,
      115,
      116,
      114,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      105,
      100,
      41,
      105,
      110,
      32,
      99,
      111,
      110,
      106,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      59,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      121,
      61,
      34,
      111,
      103,
      58,
      208,
      145,
      209,
      138,
      208,
      187,
      208,
      179,
      208,
      176,
      209,
      128,
      209,
      129,
      208,
      186,
      208,
      184,
      10,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      62,
      80,
      114,
      105,
      118,
      97,
      99,
      121,
      32,
      80,
      111,
      108,
      105,
      99,
      121,
      60,
      47,
      97,
      62,
      97,
      100,
      109,
      105,
      110,
      105,
      115,
      116,
      101,
      114,
      101,
      100,
      32,
      98,
      121,
      32,
      116,
      104,
      101,
      101,
      110,
      97,
      98,
      108,
      101,
      83,
      105,
      110,
      103,
      108,
      101,
      82,
      101,
      113,
      117,
      101,
      115,
      116,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      109,
      97,
      114,
      103,
      105,
      110,
      58,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      38,
      113,
      117,
      111,
      116,
      59,
      102,
      108,
      111,
      97,
      116,
      58,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      116,
      104,
      101,
      32,
      116,
      111,
      116,
      97,
      108,
      32,
      112,
      111,
      112,
      117,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      110,
      32,
      87,
      97,
      115,
      104,
      105,
      110,
      103,
      116,
      111,
      110,
      44,
      32,
      68,
      46,
      67,
      46,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      97,
      109,
      111,
      110,
      103,
      32,
      111,
      116,
      104,
      101,
      114,
      32,
      116,
      104,
      105,
      110,
      103,
      115,
      44,
      111,
      114,
      103,
      97,
      110,
      105,
      122,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      101,
      100,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      105,
      110,
      116,
      114,
      111,
      100,
      117,
      99,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      105,
      100,
      101,
      110,
      116,
      105,
      102,
      105,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      102,
      105,
      99,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      99,
      104,
      97,
      114,
      97,
      99,
      116,
      101,
      114,
      32,
      79,
      120,
      102,
      111,
      114,
      100,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      32,
      109,
      105,
      115,
      117,
      110,
      100,
      101,
      114,
      115,
      116,
      97,
      110,
      100,
      105,
      110,
      103,
      32,
      111,
      102,
      84,
      104,
      101,
      114,
      101,
      32,
      97,
      114,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      47,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      32,
      85,
      110,
      105,
      118,
      101,
      114,
      115,
      105,
      116,
      121,
      101,
      120,
      112,
      97,
      110,
      100,
      101,
      100,
      32,
      116,
      111,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      117,
      115,
      117,
      97,
      108,
      108,
      121,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      105,
      110,
      100,
      105,
      99,
      97,
      116,
      105,
      110,
      103,
      32,
      116,
      104,
      97,
      116,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      115,
      117,
      103,
      103,
      101,
      115,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      97,
      102,
      102,
      105,
      108,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      99,
      111,
      114,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      110,
      117,
      109,
      98,
      101,
      114,
      32,
      111,
      102,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      62,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      73,
      114,
      101,
      108,
      97,
      110,
      100,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      105,
      110,
      102,
      108,
      117,
      101,
      110,
      99,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      79,
      102,
      102,
      105,
      99,
      105,
      97,
      108,
      32,
      119,
      101,
      98,
      115,
      105,
      116,
      101,
      32,
      111,
      102,
      104,
      101,
      97,
      100,
      113,
      117,
      97,
      114,
      116,
      101,
      114,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      99,
      101,
      110,
      116,
      101,
      114,
      101,
      100,
      32,
      97,
      114,
      111,
      117,
      110,
      100,
      32,
      116,
      104,
      101,
      105,
      109,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      104,
      97,
      118,
      101,
      32,
      98,
      101,
      101,
      110,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      70,
      101,
      100,
      101,
      114,
      97,
      108,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      98,
      101,
      99,
      97,
      109,
      101,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      108,
      121,
      99,
      111,
      110,
      116,
      105,
      110,
      117,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      78,
      111,
      116,
      101,
      44,
      32,
      104,
      111,
      119,
      101,
      118,
      101,
      114,
      44,
      32,
      116,
      104,
      97,
      116,
      115,
      105,
      109,
      105,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      97,
      116,
      32,
      111,
      102,
      32,
      99,
      97,
      112,
      97,
      98,
      105,
      108,
      105,
      116,
      105,
      101,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      97,
      99,
      99,
      111,
      114,
      100,
      97,
      110,
      99,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      110,
      116,
      115,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      102,
      117,
      114,
      116,
      104,
      101,
      114,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      117,
      110,
      100,
      101,
      114,
      32,
      116,
      104,
      101,
      32,
      100,
      105,
      114,
      101,
      99,
      116,
      105,
      111,
      110,
      105,
      115,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      104,
      105,
      115,
      32,
      121,
      111,
      117,
      110,
      103,
      101,
      114,
      32,
      98,
      114,
      111,
      116,
      104,
      101,
      114,
      60,
      47,
      116,
      100,
      62,
      60,
      47,
      116,
      114,
      62,
      60,
      47,
      116,
      97,
      98,
      108,
      101,
      62,
      60,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      112,
      104,
      121,
      115,
      105,
      99,
      97,
      108,
      32,
      112,
      114,
      111,
      112,
      101,
      114,
      116,
      105,
      101,
      115,
      111,
      102,
      32,
      66,
      114,
      105,
      116,
      105,
      115,
      104,
      32,
      67,
      111,
      108,
      117,
      109,
      98,
      105,
      97,
      104,
      97,
      115,
      32,
      98,
      101,
      101,
      110,
      32,
      99,
      114,
      105,
      116,
      105,
      99,
      105,
      122,
      101,
      100,
      40,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      113,
      117,
      101,
      115,
      116,
      105,
      111,
      110,
      115,
      32,
      97,
      98,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      112,
      97,
      115,
      115,
      105,
      110,
      103,
      32,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      32,
      116,
      104,
      101,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      116,
      104,
      111,
      117,
      115,
      97,
      110,
      100,
      115,
      32,
      111,
      102,
      32,
      112,
      101,
      111,
      112,
      108,
      101,
      114,
      101,
      100,
      105,
      114,
      101,
      99,
      116,
      115,
      32,
      104,
      101,
      114,
      101,
      46,
      32,
      70,
      111,
      114,
      104,
      97,
      118,
      101,
      32,
      99,
      104,
      105,
      108,
      100,
      114,
      101,
      110,
      32,
      117,
      110,
      100,
      101,
      114,
      37,
      51,
      69,
      37,
      51,
      67,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      37,
      51,
      69,
      34,
      41,
      41,
      59,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      115,
      105,
      116,
      101,
      95,
      110,
      97,
      109,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      110,
      111,
      110,
      101,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      32,
      110,
      111,
      110,
      101,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      88,
      45,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      40,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      119,
      105,
      110,
      100,
      111,
      119,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      104,
      114,
      101,
      102,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      45,
      45,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      39,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      60,
      47,
      100,
      105,
      118,
      62,
      13,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      47,
      97,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      32,
      97,
      108,
      108,
      111,
      119,
      84,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      88,
      45,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      104,
      105,
      112,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      47,
      117,
      108,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      101,
      100,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      60,
      100,
      105,
      118,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      113,
      34,
      60,
      116,
      97,
      98,
      108,
      101,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      48,
      48,
      37,
      34,
      32,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      112,
      111,
      115,
      105,
      116,
      105,
      111,
      110,
      58,
      34,
      32,
      98,
      111,
      114,
      100,
      101,
      114,
      61,
      34,
      48,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      54,
      62,
      60,
      117,
      108,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      32,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      115,
      99,
      114,
      101,
      101,
      110,
      34,
      32,
      114,
      101,
      115,
      112,
      111,
      110,
      115,
      105,
      98,
      108,
      101,
      32,
      102,
      111,
      114,
      32,
      116,
      104,
      101,
      32,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      99,
      97,
      116,
      105,
      111,
      110,
      47,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      97,
      108,
      108,
      111,
      119,
      116,
      114,
      97,
      110,
      115,
      112,
      97,
      114,
      101,
      110,
      99,
      121,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      13,
      10,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      62,
      60,
      47,
      115,
      112,
      97,
      110,
      62,
      60,
      115,
      112,
      97,
      110,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      62,
      59,
      10,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      111,
      109,
      101,
      116,
      105,
      109,
      101,
      115,
      32,
      99,
      97,
      108,
      108,
      101,
      100,
      32,
      116,
      104,
      101,
      100,
      111,
      101,
      115,
      32,
      110,
      111,
      116,
      32,
      110,
      101,
      99,
      101,
      115,
      115,
      97,
      114,
      105,
      108,
      121,
      70,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      97,
      116,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      60,
      104,
      116,
      109,
      108,
      112,
      97,
      114,
      116,
      105,
      99,
      117,
      108,
      97,
      114,
      108,
      121,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      118,
      111,
      105,
      100,
      40,
      48,
      41,
      59,
      34,
      101,
      102,
      102,
      101,
      99,
      116,
      105,
      118,
      101,
      110,
      101,
      115,
      115,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      103,
      101,
      110,
      101,
      114,
      97,
      108,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      62,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      34,
      62,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      116,
      104,
      114,
      111,
      117,
      103,
      104,
      111,
      117,
      116,
      32,
      116,
      104,
      101,
      32,
      119,
      111,
      114,
      108,
      100,
      99,
      111,
      109,
      109,
      111,
      110,
      32,
      109,
      105,
      115,
      99,
      111,
      110,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      97,
      115,
      115,
      111,
      99,
      105,
      97,
      116,
      105,
      111,
      110,
      32,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      100,
      117,
      114,
      105,
      110,
      103,
      32,
      104,
      105,
      115,
      32,
      108,
      105,
      102,
      101,
      116,
      105,
      109,
      101,
      44,
      99,
      111,
      114,
      114,
      101,
      115,
      112,
      111,
      110,
      100,
      105,
      110,
      103,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      97,
      110,
      32,
      105,
      110,
      99,
      114,
      101,
      97,
      115,
      105,
      110,
      103,
      32,
      110,
      117,
      109,
      98,
      101,
      114,
      100,
      105,
      112,
      108,
      111,
      109,
      97,
      116,
      105,
      99,
      32,
      114,
      101,
      108,
      97,
      116,
      105,
      111,
      110,
      115,
      97,
      114,
      101,
      32,
      111,
      102,
      116,
      101,
      110,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      101,
      120,
      97,
      109,
      112,
      108,
      101,
      115,
      32,
      105,
      110,
      99,
      108,
      117,
      100,
      101,
      32,
      116,
      104,
      101,
      34,
      62,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      105,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      111,
      110,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      116,
      104,
      101,
      32,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      38,
      97,
      109,
      112,
      59,
      110,
      98,
      115,
      112,
      59,
      116,
      111,
      32,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      101,
      32,
      119,
      104,
      101,
      116,
      104,
      101,
      114,
      113,
      117,
      105,
      116,
      101,
      32,
      100,
      105,
      102,
      102,
      101,
      114,
      101,
      110,
      116,
      32,
      102,
      114,
      111,
      109,
      109,
      97,
      114,
      107,
      101,
      100,
      32,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      100,
      105,
      115,
      116,
      97,
      110,
      99,
      101,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      116,
      114,
      105,
      98,
      117,
      116,
      105,
      111,
      110,
      115,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      99,
      111,
      110,
      102,
      108,
      105,
      99,
      116,
      32,
      98,
      101,
      116,
      119,
      101,
      101,
      110,
      32,
      116,
      104,
      101,
      119,
      105,
      100,
      101,
      108,
      121,
      32,
      99,
      111,
      110,
      115,
      105,
      100,
      101,
      114,
      101,
      100,
      32,
      116,
      111,
      119,
      97,
      115,
      32,
      111,
      110,
      101,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      102,
      105,
      114,
      115,
      116,
      119,
      105,
      116,
      104,
      32,
      118,
      97,
      114,
      121,
      105,
      110,
      103,
      32,
      100,
      101,
      103,
      114,
      101,
      101,
      115,
      104,
      97,
      118,
      101,
      32,
      115,
      112,
      101,
      99,
      117,
      108,
      97,
      116,
      101,
      100,
      32,
      116,
      104,
      97,
      116,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      112,
      97,
      114,
      116,
      105,
      99,
      105,
      112,
      97,
      116,
      105,
      110,
      103,
      32,
      105,
      110,
      32,
      116,
      104,
      101,
      111,
      114,
      105,
      103,
      105,
      110,
      97,
      108,
      108,
      121,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      101,
      100,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      47,
      62,
      10,
      105,
      110,
      116,
      101,
      114,
      99,
      104,
      97,
      110,
      103,
      101,
      97,
      98,
      108,
      121,
      32,
      119,
      105,
      116,
      104,
      109,
      111,
      114,
      101,
      32,
      99,
      108,
      111,
      115,
      101,
      108,
      121,
      32,
      114,
      101,
      108,
      97,
      116,
      101,
      100,
      115,
      111,
      99,
      105,
      97,
      108,
      32,
      97,
      110,
      100,
      32,
      112,
      111,
      108,
      105,
      116,
      105,
      99,
      97,
      108,
      116,
      104,
      97,
      116,
      32,
      119,
      111,
      117,
      108,
      100,
      32,
      111,
      116,
      104,
      101,
      114,
      119,
      105,
      115,
      101,
      112,
      101,
      114,
      112,
      101,
      110,
      100,
      105,
      99,
      117,
      108,
      97,
      114,
      32,
      116,
      111,
      32,
      116,
      104,
      101,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      102,
      97,
      109,
      105,
      108,
      105,
      101,
      115,
      32,
      114,
      101,
      115,
      105,
      100,
      105,
      110,
      103,
      32,
      105,
      110,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      105,
      110,
      103,
      32,
      99,
      111,
      117,
      110,
      116,
      114,
      105,
      101,
      115,
      99,
      111,
      109,
      112,
      117,
      116,
      101,
      114,
      32,
      112,
      114,
      111,
      103,
      114,
      97,
      109,
      109,
      105,
      110,
      103,
      101,
      99,
      111,
      110,
      111,
      109,
      105,
      99,
      32,
      100,
      101,
      118,
      101,
      108,
      111,
      112,
      109,
      101,
      110,
      116,
      100,
      101,
      116,
      101,
      114,
      109,
      105,
      110,
      97,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      102,
      111,
      114,
      32,
      109,
      111,
      114,
      101,
      32,
      105,
      110,
      102,
      111,
      114,
      109,
      97,
      116,
      105,
      111,
      110,
      111,
      110,
      32,
      115,
      101,
      118,
      101,
      114,
      97,
      108,
      32,
      111,
      99,
      99,
      97,
      115,
      105,
      111,
      110,
      115,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      69,
      117,
      114,
      111,
      112,
      101,
      117,
      41,
      208,
      163,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      209,
      131,
      208,
      186,
      209,
      128,
      208,
      176,
      209,
      151,
      208,
      189,
      209,
      129,
      209,
      140,
      208,
      186,
      208,
      176,
      208,
      160,
      208,
      190,
      209,
      129,
      209,
      129,
      208,
      184,
      208,
      185,
      209,
      129,
      208,
      186,
      208,
      190,
      208,
      185,
      208,
      188,
      208,
      176,
      209,
      130,
      208,
      181,
      209,
      128,
      208,
      184,
      208,
      176,
      208,
      187,
      208,
      190,
      208,
      178,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      209,
      131,
      208,
      191,
      209,
      128,
      208,
      176,
      208,
      178,
      208,
      187,
      208,
      181,
      208,
      189,
      208,
      184,
      209,
      143,
      208,
      189,
      208,
      181,
      208,
      190,
      208,
      177,
      209,
      133,
      208,
      190,
      208,
      180,
      208,
      184,
      208,
      188,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      152,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      143,
      208,
      160,
      208,
      181,
      209,
      129,
      208,
      191,
      209,
      131,
      208,
      177,
      208,
      187,
      208,
      184,
      208,
      186,
      208,
      184,
      208,
      186,
      208,
      190,
      208,
      187,
      208,
      184,
      209,
      135,
      208,
      181,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      190,
      208,
      184,
      208,
      189,
      209,
      132,
      208,
      190,
      209,
      128,
      208,
      188,
      208,
      176,
      209,
      134,
      208,
      184,
      209,
      142,
      209,
      130,
      208,
      181,
      209,
      128,
      209,
      128,
      208,
      184,
      209,
      130,
      208,
      190,
      209,
      128,
      208,
      184,
      208,
      184,
      208,
      180,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      176,
      209,
      130,
      208,
      190,
      209,
      135,
      208,
      189,
      208,
      190,
      216,
      167,
      217,
      132,
      217,
      133,
      216,
      170,
      217,
      136,
      216,
      167,
      216,
      172,
      216,
      175,
      217,
      136,
      217,
      134,
      216,
      167,
      217,
      132,
      216,
      167,
      216,
      180,
      216,
      170,
      216,
      177,
      216,
      167,
      217,
      131,
      216,
      167,
      216,
      170,
      216,
      167,
      217,
      132,
      216,
      167,
      217,
      130,
      216,
      170,
      216,
      177,
      216,
      167,
      216,
      173,
      216,
      167,
      216,
      170,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      85,
      84,
      70,
      45,
      56,
      34,
      32,
      115,
      101,
      116,
      84,
      105,
      109,
      101,
      111,
      117,
      116,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      105,
      110,
      108,
      105,
      110,
      101,
      45,
      98,
      108,
      111,
      99,
      107,
      59,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      115,
      117,
      98,
      109,
      105,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      60,
      105,
      109,
      103,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      97,
      117,
      116,
      111,
      99,
      111,
      109,
      112,
      108,
      101,
      116,
      101,
      61,
      34,
      111,
      102,
      102,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      10,
      60,
      108,
      105,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      34,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      102,
      111,
      114,
      109,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      13,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      32,
      111,
      110,
      99,
      108,
      105,
      99,
      107,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      58,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      125,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      80,
      101,
      111,
      112,
      108,
      101,
      39,
      115,
      32,
      82,
      101,
      112,
      117,
      98,
      108,
      105,
      99,
      32,
      111,
      102,
      32,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      116,
      101,
      120,
      116,
      45,
      100,
      101,
      99,
      111,
      114,
      97,
      116,
      105,
      111,
      110,
      58,
      117,
      110,
      100,
      101,
      114,
      116,
      104,
      101,
      32,
      98,
      101,
      103,
      105,
      110,
      110,
      105,
      110,
      103,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      60,
      47,
      100,
      105,
      118,
      62,
      10,
      101,
      115,
      116,
      97,
      98,
      108,
      105,
      115,
      104,
      109,
      101,
      110,
      116,
      32,
      111,
      102,
      32,
      116,
      104,
      101,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      35,
      118,
      105,
      101,
      119,
      112,
      111,
      114,
      116,
      123,
      109,
      105,
      110,
      45,
      104,
      101,
      105,
      103,
      104,
      116,
      58,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      115,
      114,
      99,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      111,
      102,
      116,
      101,
      110,
      32,
      114,
      101,
      102,
      101,
      114,
      114,
      101,
      100,
      32,
      116,
      111,
      32,
      97,
      115,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      33,
      45,
      45,
      91,
      73,
      110,
      116,
      101,
      114,
      110,
      97,
      116,
      105,
      111,
      110,
      97,
      108,
      32,
      65,
      105,
      114,
      112,
      111,
      114,
      116,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      60,
      47,
      97,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      224,
      184,
      160,
      224,
      184,
      178,
      224,
      184,
      169,
      224,
      184,
      178,
      224,
      185,
      132,
      224,
      184,
      151,
      224,
      184,
      162,
      225,
      131,
      165,
      225,
      131,
      144,
      225,
      131,
      160,
      225,
      131,
      151,
      225,
      131,
      163,
      225,
      131,
      154,
      225,
      131,
      152,
      230,
      173,
      163,
      233,
      171,
      148,
      228,
      184,
      173,
      230,
      150,
      135,
      32,
      40,
      231,
      185,
      129,
      233,
      171,
      148,
      41,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      166,
      224,
      165,
      135,
      224,
      164,
      182,
      224,
      164,
      161,
      224,
      164,
      190,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      164,
      178,
      224,
      165,
      139,
      224,
      164,
      161,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      165,
      135,
      224,
      164,
      164,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      156,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      165,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      190,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      181,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      184,
      224,
      164,
      130,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      149,
      224,
      164,
      176,
      224,
      164,
      163,
      224,
      164,
      184,
      224,
      164,
      190,
      224,
      164,
      174,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      128,
      224,
      164,
      154,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      141,
      224,
      164,
      160,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      133,
      224,
      164,
      174,
      224,
      165,
      135,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      173,
      224,
      164,
      191,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      168,
      224,
      164,
      151,
      224,
      164,
      190,
      224,
      164,
      161,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      190,
      224,
      164,
      129,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      175,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      149,
      224,
      164,
      191,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      185,
      224,
      165,
      129,
      224,
      164,
      129,
      224,
      164,
      154,
      224,
      164,
      164,
      224,
      165,
      128,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      172,
      224,
      164,
      130,
      224,
      164,
      167,
      224,
      164,
      168,
      224,
      164,
      159,
      224,
      164,
      191,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      170,
      224,
      164,
      163,
      224,
      165,
      128,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      135,
      224,
      164,
      159,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      130,
      224,
      164,
      173,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      176,
      224,
      164,
      171,
      224,
      164,
      188,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      164,
      168,
      224,
      164,
      191,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      174,
      224,
      164,
      190,
      224,
      164,
      163,
      224,
      164,
      178,
      224,
      164,
      191,
      224,
      164,
      174,
      224,
      164,
      191,
      224,
      164,
      159,
      224,
      165,
      135,
      224,
      164,
      161,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      108,
      111,
      99,
      97,
      116,
      105,
      111,
      110,
      46,
      112,
      114,
      111,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      60,
      109,
      101,
      116,
      97,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      34,
      117,
      116,
      102,
      45,
      56,
      34,
      62,
      58,
      117,
      114,
      108,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      49,
      57,
      57,
      57,
      47,
      120,
      104,
      116,
      109,
      108,
      34,
      32,
      120,
      109,
      108,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      103,
      101,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      32,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      116,
      121,
      112,
      101,
      61,
      34,
      105,
      109,
      97,
      103,
      101,
      47,
      120,
      45,
      105,
      99,
      111,
      110,
      34,
      32,
      47,
      62,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      46,
      99,
      115,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      60,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      34,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      97,
      112,
      112,
      108,
      105,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      112,
      97,
      100,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      118,
      97,
      108,
      117,
      101,
      61,
      34,
      47,
      97,
      62,
      38,
      110,
      98,
      115,
      112,
      59,
      60,
      115,
      112,
      97,
      110,
      32,
      114,
      111,
      108,
      101,
      61,
      34,
      115,
      10,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      74,
      97,
      118,
      97,
      83,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      109,
      101,
      100,
      105,
      97,
      61,
      34,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      119,
      105,
      116,
      104,
      32,
      116,
      104,
      101,
      32,
      101,
      120,
      99,
      101,
      112,
      116,
      105,
      111,
      110,
      32,
      111,
      102,
      32,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      32,
      104,
      101,
      105,
      103,
      104,
      116,
      61,
      34,
      49,
      34,
      32,
      119,
      105,
      100,
      116,
      104,
      61,
      34,
      49,
      34,
      32,
      61,
      39,
      43,
      101,
      110,
      99,
      111,
      100,
      101,
      85,
      82,
      73,
      67,
      111,
      109,
      112,
      111,
      110,
      101,
      110,
      116,
      40,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      97,
      108,
      116,
      101,
      114,
      110,
      97,
      116,
      101,
      34,
      32,
      10,
      98,
      111,
      100,
      121,
      44,
      32,
      116,
      114,
      44,
      32,
      105,
      110,
      112,
      117,
      116,
      44,
      32,
      116,
      101,
      120,
      116,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      114,
      111,
      98,
      111,
      116,
      115,
      34,
      32,
      99,
      111,
      110,
      109,
      101,
      116,
      104,
      111,
      100,
      61,
      34,
      112,
      111,
      115,
      116,
      34,
      32,
      97,
      99,
      116,
      105,
      111,
      110,
      61,
      34,
      62,
      10,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      99,
      115,
      115,
      34,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      62,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      101,
      34,
      62,
      194,
      183,
      60,
      114,
      105,
      112,
      116,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      108,
      61,
      48,
      59,
      125,
      41,
      40,
      41,
      59,
      10,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      111,
      110,
      40,
      41,
      123,
      98,
      97,
      99,
      107,
      103,
      114,
      111,
      117,
      110,
      100,
      45,
      105,
      109,
      97,
      103,
      101,
      58,
      32,
      117,
      114,
      108,
      40,
      47,
      97,
      62,
      60,
      47,
      108,
      105,
      62,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      9,
      9,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      117,
      62,
      32,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      108,
      97,
      110,
      103,
      117,
      97,
      103,
      101,
      61,
      34,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      34,
      32,
      47,
      111,
      112,
      116,
      105,
      111,
      110,
      62,
      10,
      60,
      111,
      112,
      116,
      105,
      111,
      110,
      32,
      118,
      97,
      108,
      117,
      101,
      47,
      100,
      105,
      118,
      62,
      60,
      47,
      100,
      105,
      118,
      62,
      60,
      100,
      105,
      118,
      32,
      99,
      108,
      97,
      115,
      115,
      61,
      114,
      97,
      116,
      111,
      114,
      34,
      32,
      97,
      114,
      105,
      97,
      45,
      104,
      105,
      100,
      100,
      101,
      110,
      61,
      34,
      116,
      114,
      101,
      61,
      40,
      110,
      101,
      119,
      32,
      68,
      97,
      116,
      101,
      41,
      46,
      103,
      101,
      116,
      84,
      105,
      109,
      101,
      40,
      41,
      112,
      111,
      114,
      116,
      117,
      103,
      117,
      195,
      170,
      115,
      32,
      40,
      100,
      111,
      32,
      66,
      114,
      97,
      115,
      105,
      108,
      41,
      208,
      190,
      209,
      128,
      208,
      179,
      208,
      176,
      208,
      189,
      208,
      184,
      208,
      183,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      209,
      140,
      208,
      190,
      208,
      177,
      209,
      128,
      208,
      176,
      208,
      183,
      208,
      190,
      208,
      178,
      208,
      176,
      208,
      189,
      208,
      184,
      209,
      143,
      209,
      128,
      208,
      181,
      208,
      179,
      208,
      184,
      209,
      129,
      209,
      130,
      209,
      128,
      208,
      176,
      209,
      134,
      208,
      184,
      208,
      184,
      208,
      178,
      208,
      190,
      208,
      183,
      208,
      188,
      208,
      190,
      208,
      182,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      208,
      190,
      208,
      177,
      209,
      143,
      208,
      183,
      208,
      176,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      176,
      60,
      33,
      68,
      79,
      67,
      84,
      89,
      80,
      69,
      32,
      104,
      116,
      109,
      108,
      32,
      80,
      85,
      66,
      76,
      73,
      67,
      32,
      34,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      60,
      109,
      101,
      116,
      97,
      32,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      69,
      78,
      34,
      32,
      34,
      104,
      116,
      116,
      112,
      58,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      88,
      72,
      84,
      77,
      76,
      32,
      49,
      46,
      48,
      32,
      84,
      68,
      84,
      68,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      45,
      116,
      114,
      97,
      110,
      115,
      105,
      116,
      105,
      111,
      110,
      97,
      108,
      47,
      47,
      119,
      119,
      119,
      46,
      119,
      51,
      46,
      111,
      114,
      103,
      47,
      84,
      82,
      47,
      120,
      104,
      116,
      109,
      108,
      49,
      47,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      59,
      60,
      109,
      101,
      116,
      97,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      101,
      115,
      99,
      114,
      105,
      112,
      116,
      105,
      111,
      110,
      112,
      97,
      114,
      101,
      110,
      116,
      78,
      111,
      100,
      101,
      46,
      105,
      110,
      115,
      101,
      114,
      116,
      66,
      101,
      102,
      111,
      114,
      101,
      60,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      106,
      115,
      34,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      40,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      41,
      46,
      114,
      101,
      97,
      100,
      121,
      40,
      102,
      117,
      110,
      99,
      116,
      105,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      105,
      109,
      97,
      103,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      85,
      65,
      45,
      67,
      111,
      109,
      112,
      97,
      116,
      105,
      98,
      108,
      101,
      34,
      32,
      99,
      111,
      110,
      116,
      101,
      110,
      116,
      61,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      104,
      111,
      114,
      116,
      99,
      117,
      116,
      32,
      105,
      99,
      111,
      110,
      60,
      108,
      105,
      110,
      107,
      32,
      114,
      101,
      108,
      61,
      34,
      115,
      116,
      121,
      108,
      101,
      115,
      104,
      101,
      101,
      116,
      34,
      32,
      60,
      47,
      115,
      99,
      114,
      105,
      112,
      116,
      62,
      10,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      60,
      97,
      32,
      116,
      97,
      114,
      103,
      101,
      116,
      61,
      34,
      95,
      98,
      108,
      97,
      110,
      107,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      32,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      97,
      46,
      116,
      121,
      112,
      101,
      32,
      61,
      32,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      101,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      34,
      104,
      116,
      116,
      112,
      45,
      47,
      47,
      87,
      51,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      39,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      41,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      104,
      105,
      100,
      100,
      101,
      110,
      34,
      32,
      110,
      97,
      109,
      60,
      115,
      99,
      114,
      105,
      112,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      34,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      66,
      121,
      73,
      100,
      40,
      61,
      100,
      111,
      99,
      117,
      109,
      101,
      110,
      116,
      46,
      99,
      114,
      101,
      97,
      116,
      101,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      40,
      39,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      105,
      110,
      112,
      117,
      116,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      34,
      32,
      110,
      97,
      109,
      101,
      61,
      34,
      100,
      46,
      103,
      101,
      116,
      69,
      108,
      101,
      109,
      101,
      110,
      116,
      115,
      66,
      121,
      84,
      97,
      103,
      78,
      97,
      109,
      101,
      40,
      115,
      110,
      105,
      99,
      97,
      108,
      34,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      67,
      47,
      47,
      68,
      84,
      68,
      32,
      72,
      84,
      77,
      76,
      32,
      52,
      46,
      48,
      49,
      32,
      84,
      114,
      97,
      110,
      115,
      105,
      116,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      10,
      10,
      60,
      115,
      116,
      121,
      108,
      101,
      32,
      116,
      121,
      112,
      101,
      61,
      34,
      116,
      101,
      120,
      116,
      47,
      99,
      115,
      115,
      34,
      62,
      105,
      111,
      110,
      97,
      108,
      46,
      100,
      116,
      100,
      34,
      62,
      10,
      60,
      104,
      116,
      109,
      108,
      32,
      120,
      109,
      108,
      110,
      115,
      61,
      104,
      116,
      116,
      112,
      45,
      101,
      113,
      117,
      105,
      118,
      61,
      34,
      67,
      111,
      110,
      116,
      101,
      110,
      116,
      45,
      84,
      121,
      112,
      101,
      100,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      32,
      99,
      101,
      108,
      108,
      115,
      112,
      97,
      99,
      105,
      110,
      103,
      61,
      34,
      48,
      34,
      104,
      116,
      109,
      108,
      59,
      32,
      99,
      104,
      97,
      114,
      115,
      101,
      116,
      61,
      117,
      116,
      102,
      45,
      56,
      34,
      32,
      47,
      62,
      10,
      32,
      115,
      116,
      121,
      108,
      101,
      61,
      34,
      100,
      105,
      115,
      112,
      108,
      97,
      121,
      58,
      110,
      111,
      110,
      101,
      59,
      34,
      62,
      60,
      60,
      108,
      105,
      62,
      60,
      97,
      32,
      104,
      114,
      101,
      102,
      61,
      34,
      104,
      116,
      116,
      112,
      58,
      47,
      47,
      119,
      119,
      119,
      46,
      32,
      116,
      121,
      112,
      101,
      61,
      39,
      116,
      101,
      120,
      116,
      47,
      106,
      97,
      118,
      97,
      115,
      99,
      114,
      105,
      112,
      116,
      39,
      62,
      208,
      180,
      208,
      181,
      209,
      143,
      209,
      130,
      208,
      181,
      208,
      187,
      209,
      140,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      209,
      129,
      208,
      190,
      208,
      190,
      209,
      130,
      208,
      178,
      208,
      181,
      209,
      130,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      184,
      208,
      184,
      208,
      191,
      209,
      128,
      208,
      190,
      208,
      184,
      208,
      183,
      208,
      178,
      208,
      190,
      208,
      180,
      209,
      129,
      209,
      130,
      208,
      178,
      208,
      176,
      208,
      177,
      208,
      181,
      208,
      183,
      208,
      190,
      208,
      191,
      208,
      176,
      209,
      129,
      208,
      189,
      208,
      190,
      209,
      129,
      209,
      130,
      208,
      184,
      224,
      164,
      170,
      224,
      165,
      129,
      224,
      164,
      184,
      224,
      165,
      141,
      224,
      164,
      164,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      165,
      135,
      224,
      164,
      184,
      224,
      164,
      137,
      224,
      164,
      168,
      224,
      165,
      141,
      224,
      164,
      185,
      224,
      165,
      139,
      224,
      164,
      130,
      224,
      164,
      168,
      224,
      165,
      135,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      167,
      224,
      164,
      190,
      224,
      164,
      168,
      224,
      164,
      184,
      224,
      164,
      173,
      224,
      164,
      190,
      224,
      164,
      171,
      224,
      164,
      191,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      184,
      224,
      164,
      191,
      224,
      164,
      130,
      224,
      164,
      151,
      224,
      164,
      184,
      224,
      165,
      129,
      224,
      164,
      176,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      183,
      224,
      164,
      191,
      224,
      164,
      164,
      224,
      164,
      149,
      224,
      165,
      137,
      224,
      164,
      170,
      224,
      165,
      128,
      224,
      164,
      176,
      224,
      164,
      190,
      224,
      164,
      135,
      224,
      164,
      159,
      224,
      164,
      181,
      224,
      164,
      191,
      224,
      164,
      156,
      224,
      165,
      141,
      224,
      164,
      158,
      224,
      164,
      190,
      224,
      164,
      170,
      224,
      164,
      168,
      224,
      164,
      149,
      224,
      164,
      190,
      224,
      164,
      176,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      181,
      224,
      164,
      190,
      224,
      164,
      136,
      224,
      164,
      184,
      224,
      164,
      149,
      224,
      165,
      141,
      224,
      164,
      176,
      224,
      164,
      191,
      224,
      164,
      175,
      224,
      164,
      164,
      224,
      164,
      190
    ]);
    exports2.init = function() {
      return exports2.dictionary;
    };
  }
});

// node_modules/brotli/dec/dictionary.js
var require_dictionary = __commonJS({
  "node_modules/brotli/dec/dictionary.js"(exports2) {
    var data = require_dictionary_data();
    exports2.init = function() {
      exports2.dictionary = data.init();
    };
    exports2.offsetsByLength = new Uint32Array([
      0,
      0,
      0,
      0,
      0,
      4096,
      9216,
      21504,
      35840,
      44032,
      53248,
      63488,
      74752,
      87040,
      93696,
      100864,
      104704,
      106752,
      108928,
      113536,
      115968,
      118528,
      119872,
      121280,
      122016
    ]);
    exports2.sizeBitsByLength = new Uint8Array([
      0,
      0,
      0,
      0,
      10,
      10,
      11,
      11,
      10,
      10,
      10,
      10,
      10,
      9,
      9,
      8,
      7,
      7,
      8,
      7,
      7,
      6,
      6,
      5,
      5
    ]);
    exports2.minDictionaryWordLength = 4;
    exports2.maxDictionaryWordLength = 24;
  }
});

// node_modules/brotli/dec/huffman.js
var require_huffman = __commonJS({
  "node_modules/brotli/dec/huffman.js"(exports2) {
    function HuffmanCode(bits, value) {
      this.bits = bits;
      this.value = value;
    }
    exports2.HuffmanCode = HuffmanCode;
    var MAX_LENGTH = 15;
    function GetNextKey(key, len) {
      var step = 1 << len - 1;
      while (key & step) {
        step >>= 1;
      }
      return (key & step - 1) + step;
    }
    function ReplicateValue(table, i2, step, end, code) {
      do {
        end -= step;
        table[i2 + end] = new HuffmanCode(code.bits, code.value);
      } while (end > 0);
    }
    function NextTableBitSize(count, len, root_bits) {
      var left = 1 << len - root_bits;
      while (len < MAX_LENGTH) {
        left -= count[len];
        if (left <= 0)
          break;
        ++len;
        left <<= 1;
      }
      return len - root_bits;
    }
    exports2.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
      var start_table = table;
      var code;
      var len;
      var symbol;
      var key;
      var step;
      var low;
      var mask;
      var table_bits;
      var table_size;
      var total_size;
      var sorted;
      var count = new Int32Array(MAX_LENGTH + 1);
      var offset = new Int32Array(MAX_LENGTH + 1);
      sorted = new Int32Array(code_lengths_size);
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        count[code_lengths[symbol]]++;
      }
      offset[1] = 0;
      for (len = 1; len < MAX_LENGTH; len++) {
        offset[len + 1] = offset[len] + count[len];
      }
      for (symbol = 0; symbol < code_lengths_size; symbol++) {
        if (code_lengths[symbol] !== 0) {
          sorted[offset[code_lengths[symbol]]++] = symbol;
        }
      }
      table_bits = root_bits;
      table_size = 1 << table_bits;
      total_size = table_size;
      if (offset[MAX_LENGTH] === 1) {
        for (key = 0; key < total_size; ++key) {
          root_table[table + key] = new HuffmanCode(0, sorted[0] & 65535);
        }
        return total_size;
      }
      key = 0;
      symbol = 0;
      for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          code = new HuffmanCode(len & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + key, step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      mask = total_size - 1;
      low = -1;
      for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
        for (; count[len] > 0; --count[len]) {
          if ((key & mask) !== low) {
            table += table_size;
            table_bits = NextTableBitSize(count, len, root_bits);
            table_size = 1 << table_bits;
            total_size += table_size;
            low = key & mask;
            root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 255, table - start_table - low & 65535);
          }
          code = new HuffmanCode(len - root_bits & 255, sorted[symbol++] & 65535);
          ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
          key = GetNextKey(key, len);
        }
      }
      return total_size;
    };
  }
});

// node_modules/brotli/dec/context.js
var require_context = __commonJS({
  "node_modules/brotli/dec/context.js"(exports2) {
    exports2.lookup = new Uint8Array([
      /* CONTEXT_UTF8, last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      4,
      0,
      0,
      4,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      8,
      12,
      16,
      12,
      12,
      20,
      12,
      16,
      24,
      28,
      12,
      12,
      32,
      12,
      36,
      12,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      44,
      32,
      32,
      24,
      40,
      28,
      12,
      12,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      48,
      52,
      52,
      52,
      52,
      52,
      24,
      12,
      28,
      12,
      12,
      12,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      56,
      60,
      60,
      60,
      60,
      60,
      24,
      12,
      28,
      12,
      0,
      /* UTF8 continuation byte range. */
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      /* UTF8 lead byte range. */
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      /* CONTEXT_UTF8 second last byte. */
      /* ASCII range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      1,
      1,
      1,
      1,
      0,
      /* UTF8 continuation byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      /* UTF8 lead byte range. */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      /* CONTEXT_SIGNED, second last byte. */
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      7,
      /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
      0,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      8,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      24,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      32,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      40,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      56,
      /* CONTEXT_LSB6, last byte. */
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      /* CONTEXT_MSB6, last byte. */
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      6,
      6,
      6,
      6,
      7,
      7,
      7,
      7,
      8,
      8,
      8,
      8,
      9,
      9,
      9,
      9,
      10,
      10,
      10,
      10,
      11,
      11,
      11,
      11,
      12,
      12,
      12,
      12,
      13,
      13,
      13,
      13,
      14,
      14,
      14,
      14,
      15,
      15,
      15,
      15,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      22,
      22,
      22,
      22,
      23,
      23,
      23,
      23,
      24,
      24,
      24,
      24,
      25,
      25,
      25,
      25,
      26,
      26,
      26,
      26,
      27,
      27,
      27,
      27,
      28,
      28,
      28,
      28,
      29,
      29,
      29,
      29,
      30,
      30,
      30,
      30,
      31,
      31,
      31,
      31,
      32,
      32,
      32,
      32,
      33,
      33,
      33,
      33,
      34,
      34,
      34,
      34,
      35,
      35,
      35,
      35,
      36,
      36,
      36,
      36,
      37,
      37,
      37,
      37,
      38,
      38,
      38,
      38,
      39,
      39,
      39,
      39,
      40,
      40,
      40,
      40,
      41,
      41,
      41,
      41,
      42,
      42,
      42,
      42,
      43,
      43,
      43,
      43,
      44,
      44,
      44,
      44,
      45,
      45,
      45,
      45,
      46,
      46,
      46,
      46,
      47,
      47,
      47,
      47,
      48,
      48,
      48,
      48,
      49,
      49,
      49,
      49,
      50,
      50,
      50,
      50,
      51,
      51,
      51,
      51,
      52,
      52,
      52,
      52,
      53,
      53,
      53,
      53,
      54,
      54,
      54,
      54,
      55,
      55,
      55,
      55,
      56,
      56,
      56,
      56,
      57,
      57,
      57,
      57,
      58,
      58,
      58,
      58,
      59,
      59,
      59,
      59,
      60,
      60,
      60,
      60,
      61,
      61,
      61,
      61,
      62,
      62,
      62,
      62,
      63,
      63,
      63,
      63,
      /* CONTEXT_{M,L}SB6, second last byte, */
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]);
    exports2.lookupOffsets = new Uint16Array([
      /* CONTEXT_LSB6 */
      1024,
      1536,
      /* CONTEXT_MSB6 */
      1280,
      1536,
      /* CONTEXT_UTF8 */
      0,
      256,
      /* CONTEXT_SIGNED */
      768,
      512
    ]);
  }
});

// node_modules/brotli/dec/prefix.js
var require_prefix = __commonJS({
  "node_modules/brotli/dec/prefix.js"(exports2) {
    function PrefixCodeRange(offset, nbits) {
      this.offset = offset;
      this.nbits = nbits;
    }
    exports2.kBlockLengthPrefixCode = [
      new PrefixCodeRange(1, 2),
      new PrefixCodeRange(5, 2),
      new PrefixCodeRange(9, 2),
      new PrefixCodeRange(13, 2),
      new PrefixCodeRange(17, 3),
      new PrefixCodeRange(25, 3),
      new PrefixCodeRange(33, 3),
      new PrefixCodeRange(41, 3),
      new PrefixCodeRange(49, 4),
      new PrefixCodeRange(65, 4),
      new PrefixCodeRange(81, 4),
      new PrefixCodeRange(97, 4),
      new PrefixCodeRange(113, 5),
      new PrefixCodeRange(145, 5),
      new PrefixCodeRange(177, 5),
      new PrefixCodeRange(209, 5),
      new PrefixCodeRange(241, 6),
      new PrefixCodeRange(305, 6),
      new PrefixCodeRange(369, 7),
      new PrefixCodeRange(497, 8),
      new PrefixCodeRange(753, 9),
      new PrefixCodeRange(1265, 10),
      new PrefixCodeRange(2289, 11),
      new PrefixCodeRange(4337, 12),
      new PrefixCodeRange(8433, 13),
      new PrefixCodeRange(16625, 24)
    ];
    exports2.kInsertLengthPrefixCode = [
      new PrefixCodeRange(0, 0),
      new PrefixCodeRange(1, 0),
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 1),
      new PrefixCodeRange(8, 1),
      new PrefixCodeRange(10, 2),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 3),
      new PrefixCodeRange(26, 3),
      new PrefixCodeRange(34, 4),
      new PrefixCodeRange(50, 4),
      new PrefixCodeRange(66, 5),
      new PrefixCodeRange(98, 5),
      new PrefixCodeRange(130, 6),
      new PrefixCodeRange(194, 7),
      new PrefixCodeRange(322, 8),
      new PrefixCodeRange(578, 9),
      new PrefixCodeRange(1090, 10),
      new PrefixCodeRange(2114, 12),
      new PrefixCodeRange(6210, 14),
      new PrefixCodeRange(22594, 24)
    ];
    exports2.kCopyLengthPrefixCode = [
      new PrefixCodeRange(2, 0),
      new PrefixCodeRange(3, 0),
      new PrefixCodeRange(4, 0),
      new PrefixCodeRange(5, 0),
      new PrefixCodeRange(6, 0),
      new PrefixCodeRange(7, 0),
      new PrefixCodeRange(8, 0),
      new PrefixCodeRange(9, 0),
      new PrefixCodeRange(10, 1),
      new PrefixCodeRange(12, 1),
      new PrefixCodeRange(14, 2),
      new PrefixCodeRange(18, 2),
      new PrefixCodeRange(22, 3),
      new PrefixCodeRange(30, 3),
      new PrefixCodeRange(38, 4),
      new PrefixCodeRange(54, 4),
      new PrefixCodeRange(70, 5),
      new PrefixCodeRange(102, 5),
      new PrefixCodeRange(134, 6),
      new PrefixCodeRange(198, 7),
      new PrefixCodeRange(326, 8),
      new PrefixCodeRange(582, 9),
      new PrefixCodeRange(1094, 10),
      new PrefixCodeRange(2118, 24)
    ];
    exports2.kInsertRangeLut = [
      0,
      0,
      8,
      8,
      0,
      16,
      8,
      16,
      16
    ];
    exports2.kCopyRangeLut = [
      0,
      8,
      0,
      8,
      16,
      0,
      16,
      8,
      16
    ];
  }
});

// node_modules/brotli/dec/transform.js
var require_transform = __commonJS({
  "node_modules/brotli/dec/transform.js"(exports2) {
    var BrotliDictionary = require_dictionary();
    var kIdentity = 0;
    var kOmitLast1 = 1;
    var kOmitLast2 = 2;
    var kOmitLast3 = 3;
    var kOmitLast4 = 4;
    var kOmitLast5 = 5;
    var kOmitLast6 = 6;
    var kOmitLast7 = 7;
    var kOmitLast8 = 8;
    var kOmitLast9 = 9;
    var kUppercaseFirst = 10;
    var kUppercaseAll = 11;
    var kOmitFirst1 = 12;
    var kOmitFirst2 = 13;
    var kOmitFirst3 = 14;
    var kOmitFirst4 = 15;
    var kOmitFirst5 = 16;
    var kOmitFirst6 = 17;
    var kOmitFirst7 = 18;
    var kOmitFirst9 = 20;
    function Transform(prefix, transform, suffix) {
      this.prefix = new Uint8Array(prefix.length);
      this.transform = transform;
      this.suffix = new Uint8Array(suffix.length);
      for (var i2 = 0; i2 < prefix.length; i2++)
        this.prefix[i2] = prefix.charCodeAt(i2);
      for (var i2 = 0; i2 < suffix.length; i2++)
        this.suffix[i2] = suffix.charCodeAt(i2);
    }
    var kTransforms = [
      new Transform("", kIdentity, ""),
      new Transform("", kIdentity, " "),
      new Transform(" ", kIdentity, " "),
      new Transform("", kOmitFirst1, ""),
      new Transform("", kUppercaseFirst, " "),
      new Transform("", kIdentity, " the "),
      new Transform(" ", kIdentity, ""),
      new Transform("s ", kIdentity, " "),
      new Transform("", kIdentity, " of "),
      new Transform("", kUppercaseFirst, ""),
      new Transform("", kIdentity, " and "),
      new Transform("", kOmitFirst2, ""),
      new Transform("", kOmitLast1, ""),
      new Transform(", ", kIdentity, " "),
      new Transform("", kIdentity, ", "),
      new Transform(" ", kUppercaseFirst, " "),
      new Transform("", kIdentity, " in "),
      new Transform("", kIdentity, " to "),
      new Transform("e ", kIdentity, " "),
      new Transform("", kIdentity, '"'),
      new Transform("", kIdentity, "."),
      new Transform("", kIdentity, '">'),
      new Transform("", kIdentity, "\n"),
      new Transform("", kOmitLast3, ""),
      new Transform("", kIdentity, "]"),
      new Transform("", kIdentity, " for "),
      new Transform("", kOmitFirst3, ""),
      new Transform("", kOmitLast2, ""),
      new Transform("", kIdentity, " a "),
      new Transform("", kIdentity, " that "),
      new Transform(" ", kUppercaseFirst, ""),
      new Transform("", kIdentity, ". "),
      new Transform(".", kIdentity, ""),
      new Transform(" ", kIdentity, ", "),
      new Transform("", kOmitFirst4, ""),
      new Transform("", kIdentity, " with "),
      new Transform("", kIdentity, "'"),
      new Transform("", kIdentity, " from "),
      new Transform("", kIdentity, " by "),
      new Transform("", kOmitFirst5, ""),
      new Transform("", kOmitFirst6, ""),
      new Transform(" the ", kIdentity, ""),
      new Transform("", kOmitLast4, ""),
      new Transform("", kIdentity, ". The "),
      new Transform("", kUppercaseAll, ""),
      new Transform("", kIdentity, " on "),
      new Transform("", kIdentity, " as "),
      new Transform("", kIdentity, " is "),
      new Transform("", kOmitLast7, ""),
      new Transform("", kOmitLast1, "ing "),
      new Transform("", kIdentity, "\n	"),
      new Transform("", kIdentity, ":"),
      new Transform(" ", kIdentity, ". "),
      new Transform("", kIdentity, "ed "),
      new Transform("", kOmitFirst9, ""),
      new Transform("", kOmitFirst7, ""),
      new Transform("", kOmitLast6, ""),
      new Transform("", kIdentity, "("),
      new Transform("", kUppercaseFirst, ", "),
      new Transform("", kOmitLast8, ""),
      new Transform("", kIdentity, " at "),
      new Transform("", kIdentity, "ly "),
      new Transform(" the ", kIdentity, " of "),
      new Transform("", kOmitLast5, ""),
      new Transform("", kOmitLast9, ""),
      new Transform(" ", kUppercaseFirst, ", "),
      new Transform("", kUppercaseFirst, '"'),
      new Transform(".", kIdentity, "("),
      new Transform("", kUppercaseAll, " "),
      new Transform("", kUppercaseFirst, '">'),
      new Transform("", kIdentity, '="'),
      new Transform(" ", kIdentity, "."),
      new Transform(".com/", kIdentity, ""),
      new Transform(" the ", kIdentity, " of the "),
      new Transform("", kUppercaseFirst, "'"),
      new Transform("", kIdentity, ". This "),
      new Transform("", kIdentity, ","),
      new Transform(".", kIdentity, " "),
      new Transform("", kUppercaseFirst, "("),
      new Transform("", kUppercaseFirst, "."),
      new Transform("", kIdentity, " not "),
      new Transform(" ", kIdentity, '="'),
      new Transform("", kIdentity, "er "),
      new Transform(" ", kUppercaseAll, " "),
      new Transform("", kIdentity, "al "),
      new Transform(" ", kUppercaseAll, ""),
      new Transform("", kIdentity, "='"),
      new Transform("", kUppercaseAll, '"'),
      new Transform("", kUppercaseFirst, ". "),
      new Transform(" ", kIdentity, "("),
      new Transform("", kIdentity, "ful "),
      new Transform(" ", kUppercaseFirst, ". "),
      new Transform("", kIdentity, "ive "),
      new Transform("", kIdentity, "less "),
      new Transform("", kUppercaseAll, "'"),
      new Transform("", kIdentity, "est "),
      new Transform(" ", kUppercaseFirst, "."),
      new Transform("", kUppercaseAll, '">'),
      new Transform(" ", kIdentity, "='"),
      new Transform("", kUppercaseFirst, ","),
      new Transform("", kIdentity, "ize "),
      new Transform("", kUppercaseAll, "."),
      new Transform("\xC2\xA0", kIdentity, ""),
      new Transform(" ", kIdentity, ","),
      new Transform("", kUppercaseFirst, '="'),
      new Transform("", kUppercaseAll, '="'),
      new Transform("", kIdentity, "ous "),
      new Transform("", kUppercaseAll, ", "),
      new Transform("", kUppercaseFirst, "='"),
      new Transform(" ", kUppercaseFirst, ","),
      new Transform(" ", kUppercaseAll, '="'),
      new Transform(" ", kUppercaseAll, ", "),
      new Transform("", kUppercaseAll, ","),
      new Transform("", kUppercaseAll, "("),
      new Transform("", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseAll, "."),
      new Transform("", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseAll, ". "),
      new Transform(" ", kUppercaseFirst, '="'),
      new Transform(" ", kUppercaseAll, "='"),
      new Transform(" ", kUppercaseFirst, "='")
    ];
    exports2.kTransforms = kTransforms;
    exports2.kNumTransforms = kTransforms.length;
    function ToUpperCase(p, i2) {
      if (p[i2] < 192) {
        if (p[i2] >= 97 && p[i2] <= 122) {
          p[i2] ^= 32;
        }
        return 1;
      }
      if (p[i2] < 224) {
        p[i2 + 1] ^= 32;
        return 2;
      }
      p[i2 + 2] ^= 5;
      return 3;
    }
    exports2.transformDictionaryWord = function(dst, idx, word, len, transform) {
      var prefix = kTransforms[transform].prefix;
      var suffix = kTransforms[transform].suffix;
      var t = kTransforms[transform].transform;
      var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
      var i2 = 0;
      var start_idx = idx;
      var uppercase;
      if (skip > len) {
        skip = len;
      }
      var prefix_pos = 0;
      while (prefix_pos < prefix.length) {
        dst[idx++] = prefix[prefix_pos++];
      }
      word += skip;
      len -= skip;
      if (t <= kOmitLast9) {
        len -= t;
      }
      for (i2 = 0; i2 < len; i2++) {
        dst[idx++] = BrotliDictionary.dictionary[word + i2];
      }
      uppercase = idx - len;
      if (t === kUppercaseFirst) {
        ToUpperCase(dst, uppercase);
      } else if (t === kUppercaseAll) {
        while (len > 0) {
          var step = ToUpperCase(dst, uppercase);
          uppercase += step;
          len -= step;
        }
      }
      var suffix_pos = 0;
      while (suffix_pos < suffix.length) {
        dst[idx++] = suffix[suffix_pos++];
      }
      return idx - start_idx;
    };
  }
});

// node_modules/brotli/dec/decode.js
var require_decode = __commonJS({
  "node_modules/brotli/dec/decode.js"(exports2) {
    var BrotliInput = require_streams().BrotliInput;
    var BrotliOutput = require_streams().BrotliOutput;
    var BrotliBitReader = require_bit_reader();
    var BrotliDictionary = require_dictionary();
    var HuffmanCode = require_huffman().HuffmanCode;
    var BrotliBuildHuffmanTable = require_huffman().BrotliBuildHuffmanTable;
    var Context = require_context();
    var Prefix = require_prefix();
    var Transform = require_transform();
    var kDefaultCodeLength = 8;
    var kCodeLengthRepeatCode = 16;
    var kNumLiteralCodes = 256;
    var kNumInsertAndCopyCodes = 704;
    var kNumBlockLengthCodes = 26;
    var kLiteralContextBits = 6;
    var kDistanceContextBits = 2;
    var HUFFMAN_TABLE_BITS = 8;
    var HUFFMAN_TABLE_MASK = 255;
    var HUFFMAN_MAX_TABLE_SIZE = 1080;
    var CODE_LENGTH_CODES = 18;
    var kCodeLengthCodeOrder = new Uint8Array([
      1,
      2,
      3,
      4,
      0,
      5,
      17,
      6,
      16,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15
    ]);
    var NUM_DISTANCE_SHORT_CODES = 16;
    var kDistanceShortCodeIndexOffset = new Uint8Array([
      3,
      2,
      1,
      0,
      3,
      3,
      3,
      3,
      3,
      3,
      2,
      2,
      2,
      2,
      2,
      2
    ]);
    var kDistanceShortCodeValueOffset = new Int8Array([
      0,
      0,
      0,
      0,
      -1,
      1,
      -2,
      2,
      -3,
      3,
      -1,
      1,
      -2,
      2,
      -3,
      3
    ]);
    var kMaxHuffmanTableSize = new Uint16Array([
      256,
      402,
      436,
      468,
      500,
      534,
      566,
      598,
      630,
      662,
      694,
      726,
      758,
      790,
      822,
      854,
      886,
      920,
      952,
      984,
      1016,
      1048,
      1080
    ]);
    function DecodeWindowBits(br) {
      var n;
      if (br.readBits(1) === 0) {
        return 16;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 17 + n;
      }
      n = br.readBits(3);
      if (n > 0) {
        return 8 + n;
      }
      return 17;
    }
    function DecodeVarLenUint8(br) {
      if (br.readBits(1)) {
        var nbits = br.readBits(3);
        if (nbits === 0) {
          return 1;
        } else {
          return br.readBits(nbits) + (1 << nbits);
        }
      }
      return 0;
    }
    function MetaBlockLength() {
      this.meta_block_length = 0;
      this.input_end = 0;
      this.is_uncompressed = 0;
      this.is_metadata = false;
    }
    function DecodeMetaBlockLength(br) {
      var out = new MetaBlockLength();
      var size_nibbles;
      var size_bytes;
      var i2;
      out.input_end = br.readBits(1);
      if (out.input_end && br.readBits(1)) {
        return out;
      }
      size_nibbles = br.readBits(2) + 4;
      if (size_nibbles === 7) {
        out.is_metadata = true;
        if (br.readBits(1) !== 0)
          throw new Error("Invalid reserved bit");
        size_bytes = br.readBits(2);
        if (size_bytes === 0)
          return out;
        for (i2 = 0; i2 < size_bytes; i2++) {
          var next_byte = br.readBits(8);
          if (i2 + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
            throw new Error("Invalid size byte");
          out.meta_block_length |= next_byte << i2 * 8;
        }
      } else {
        for (i2 = 0; i2 < size_nibbles; ++i2) {
          var next_nibble = br.readBits(4);
          if (i2 + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
            throw new Error("Invalid size nibble");
          out.meta_block_length |= next_nibble << i2 * 4;
        }
      }
      ++out.meta_block_length;
      if (!out.input_end && !out.is_metadata) {
        out.is_uncompressed = br.readBits(1);
      }
      return out;
    }
    function ReadSymbol(table, index, br) {
      var start_index = index;
      var nbits;
      br.fillBitWindow();
      index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
      nbits = table[index].bits - HUFFMAN_TABLE_BITS;
      if (nbits > 0) {
        br.bit_pos_ += HUFFMAN_TABLE_BITS;
        index += table[index].value;
        index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
      }
      br.bit_pos_ += table[index].bits;
      return table[index].value;
    }
    function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
      var symbol = 0;
      var prev_code_len = kDefaultCodeLength;
      var repeat = 0;
      var repeat_code_len = 0;
      var space = 32768;
      var table = [];
      for (var i2 = 0; i2 < 32; i2++)
        table.push(new HuffmanCode(0, 0));
      BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
      while (symbol < num_symbols && space > 0) {
        var p = 0;
        var code_len;
        br.readMoreInput();
        br.fillBitWindow();
        p += br.val_ >>> br.bit_pos_ & 31;
        br.bit_pos_ += table[p].bits;
        code_len = table[p].value & 255;
        if (code_len < kCodeLengthRepeatCode) {
          repeat = 0;
          code_lengths[symbol++] = code_len;
          if (code_len !== 0) {
            prev_code_len = code_len;
            space -= 32768 >> code_len;
          }
        } else {
          var extra_bits = code_len - 14;
          var old_repeat;
          var repeat_delta;
          var new_len = 0;
          if (code_len === kCodeLengthRepeatCode) {
            new_len = prev_code_len;
          }
          if (repeat_code_len !== new_len) {
            repeat = 0;
            repeat_code_len = new_len;
          }
          old_repeat = repeat;
          if (repeat > 0) {
            repeat -= 2;
            repeat <<= extra_bits;
          }
          repeat += br.readBits(extra_bits) + 3;
          repeat_delta = repeat - old_repeat;
          if (symbol + repeat_delta > num_symbols) {
            throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
          }
          for (var x = 0; x < repeat_delta; x++)
            code_lengths[symbol + x] = repeat_code_len;
          symbol += repeat_delta;
          if (repeat_code_len !== 0) {
            space -= repeat_delta << 15 - repeat_code_len;
          }
        }
      }
      if (space !== 0) {
        throw new Error("[ReadHuffmanCodeLengths] space = " + space);
      }
      for (; symbol < num_symbols; symbol++)
        code_lengths[symbol] = 0;
    }
    function ReadHuffmanCode(alphabet_size, tables, table, br) {
      var table_size = 0;
      var simple_code_or_skip;
      var code_lengths = new Uint8Array(alphabet_size);
      br.readMoreInput();
      simple_code_or_skip = br.readBits(2);
      if (simple_code_or_skip === 1) {
        var i2;
        var max_bits_counter = alphabet_size - 1;
        var max_bits = 0;
        var symbols = new Int32Array(4);
        var num_symbols = br.readBits(2) + 1;
        while (max_bits_counter) {
          max_bits_counter >>= 1;
          ++max_bits;
        }
        for (i2 = 0; i2 < num_symbols; ++i2) {
          symbols[i2] = br.readBits(max_bits) % alphabet_size;
          code_lengths[symbols[i2]] = 2;
        }
        code_lengths[symbols[0]] = 1;
        switch (num_symbols) {
          case 1:
            break;
          case 3:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            break;
          case 2:
            if (symbols[0] === symbols[1]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            code_lengths[symbols[1]] = 1;
            break;
          case 4:
            if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
              throw new Error("[ReadHuffmanCode] invalid symbols");
            }
            if (br.readBits(1)) {
              code_lengths[symbols[2]] = 3;
              code_lengths[symbols[3]] = 3;
            } else {
              code_lengths[symbols[0]] = 2;
            }
            break;
        }
      } else {
        var i2;
        var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
        var space = 32;
        var num_codes = 0;
        var huff = [
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 1),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(3, 2),
          new HuffmanCode(2, 0),
          new HuffmanCode(2, 4),
          new HuffmanCode(2, 3),
          new HuffmanCode(4, 5)
        ];
        for (i2 = simple_code_or_skip; i2 < CODE_LENGTH_CODES && space > 0; ++i2) {
          var code_len_idx = kCodeLengthCodeOrder[i2];
          var p = 0;
          var v;
          br.fillBitWindow();
          p += br.val_ >>> br.bit_pos_ & 15;
          br.bit_pos_ += huff[p].bits;
          v = huff[p].value;
          code_length_code_lengths[code_len_idx] = v;
          if (v !== 0) {
            space -= 32 >> v;
            ++num_codes;
          }
        }
        if (!(num_codes === 1 || space === 0))
          throw new Error("[ReadHuffmanCode] invalid num_codes or space");
        ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
      }
      table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
      if (table_size === 0) {
        throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
      }
      return table_size;
    }
    function ReadBlockLength(table, index, br) {
      var code;
      var nbits;
      code = ReadSymbol(table, index, br);
      nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
      return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
    }
    function TranslateShortCodes(code, ringbuffer, index) {
      var val;
      if (code < NUM_DISTANCE_SHORT_CODES) {
        index += kDistanceShortCodeIndexOffset[code];
        index &= 3;
        val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
      } else {
        val = code - NUM_DISTANCE_SHORT_CODES + 1;
      }
      return val;
    }
    function MoveToFront(v, index) {
      var value = v[index];
      var i2 = index;
      for (; i2; --i2)
        v[i2] = v[i2 - 1];
      v[0] = value;
    }
    function InverseMoveToFrontTransform(v, v_len) {
      var mtf = new Uint8Array(256);
      var i2;
      for (i2 = 0; i2 < 256; ++i2) {
        mtf[i2] = i2;
      }
      for (i2 = 0; i2 < v_len; ++i2) {
        var index = v[i2];
        v[i2] = mtf[index];
        if (index)
          MoveToFront(mtf, index);
      }
    }
    function HuffmanTreeGroup(alphabet_size, num_htrees) {
      this.alphabet_size = alphabet_size;
      this.num_htrees = num_htrees;
      this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
      this.htrees = new Uint32Array(num_htrees);
    }
    HuffmanTreeGroup.prototype.decode = function(br) {
      var i2;
      var table_size;
      var next = 0;
      for (i2 = 0; i2 < this.num_htrees; ++i2) {
        this.htrees[i2] = next;
        table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
        next += table_size;
      }
    };
    function DecodeContextMap(context_map_size, br) {
      var out = { num_htrees: null, context_map: null };
      var use_rle_for_zeros;
      var max_run_length_prefix = 0;
      var table;
      var i2;
      br.readMoreInput();
      var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
      var context_map = out.context_map = new Uint8Array(context_map_size);
      if (num_htrees <= 1) {
        return out;
      }
      use_rle_for_zeros = br.readBits(1);
      if (use_rle_for_zeros) {
        max_run_length_prefix = br.readBits(4) + 1;
      }
      table = [];
      for (i2 = 0; i2 < HUFFMAN_MAX_TABLE_SIZE; i2++) {
        table[i2] = new HuffmanCode(0, 0);
      }
      ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
      for (i2 = 0; i2 < context_map_size; ) {
        var code;
        br.readMoreInput();
        code = ReadSymbol(table, 0, br);
        if (code === 0) {
          context_map[i2] = 0;
          ++i2;
        } else if (code <= max_run_length_prefix) {
          var reps = 1 + (1 << code) + br.readBits(code);
          while (--reps) {
            if (i2 >= context_map_size) {
              throw new Error("[DecodeContextMap] i >= context_map_size");
            }
            context_map[i2] = 0;
            ++i2;
          }
        } else {
          context_map[i2] = code - max_run_length_prefix;
          ++i2;
        }
      }
      if (br.readBits(1)) {
        InverseMoveToFrontTransform(context_map, context_map_size);
      }
      return out;
    }
    function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
      var ringbuffer = tree_type * 2;
      var index = tree_type;
      var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
      var block_type;
      if (type_code === 0) {
        block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
      } else if (type_code === 1) {
        block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
      } else {
        block_type = type_code - 2;
      }
      if (block_type >= max_block_type) {
        block_type -= max_block_type;
      }
      block_types[tree_type] = block_type;
      ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
      ++indexes[index];
    }
    function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
      var rb_size = ringbuffer_mask + 1;
      var rb_pos = pos & ringbuffer_mask;
      var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
      var nbytes;
      if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
        while (len-- > 0) {
          br.readMoreInput();
          ringbuffer[rb_pos++] = br.readBits(8);
          if (rb_pos === rb_size) {
            output.write(ringbuffer, rb_size);
            rb_pos = 0;
          }
        }
        return;
      }
      if (br.bit_end_pos_ < 32) {
        throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
      }
      while (br.bit_pos_ < 32) {
        ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
        br.bit_pos_ += 8;
        ++rb_pos;
        --len;
      }
      nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
      if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
        var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
        for (var x = 0; x < tail; x++)
          ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        nbytes -= tail;
        rb_pos += tail;
        len -= tail;
        br_pos = 0;
      }
      for (var x = 0; x < nbytes; x++)
        ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
      rb_pos += nbytes;
      len -= nbytes;
      if (rb_pos >= rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos -= rb_size;
        for (var x = 0; x < rb_pos; x++)
          ringbuffer[x] = ringbuffer[rb_size + x];
      }
      while (rb_pos + len >= rb_size) {
        nbytes = rb_size - rb_pos;
        if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
          throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
        }
        output.write(ringbuffer, rb_size);
        len -= nbytes;
        rb_pos = 0;
      }
      if (br.input_.read(ringbuffer, rb_pos, len) < len) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      }
      br.reset();
    }
    function JumpToByteBoundary(br) {
      var new_bit_pos = br.bit_pos_ + 7 & ~7;
      var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
      return pad_bits == 0;
    }
    function BrotliDecompressedSize(buffer) {
      var input = new BrotliInput(buffer);
      var br = new BrotliBitReader(input);
      DecodeWindowBits(br);
      var out = DecodeMetaBlockLength(br);
      return out.meta_block_length;
    }
    exports2.BrotliDecompressedSize = BrotliDecompressedSize;
    function BrotliDecompressBuffer(buffer, output_size) {
      var input = new BrotliInput(buffer);
      if (output_size == null) {
        output_size = BrotliDecompressedSize(buffer);
      }
      var output_buffer = new Uint8Array(output_size);
      var output = new BrotliOutput(output_buffer);
      BrotliDecompress(input, output);
      if (output.pos < output.buffer.length) {
        output.buffer = output.buffer.subarray(0, output.pos);
      }
      return output.buffer;
    }
    exports2.BrotliDecompressBuffer = BrotliDecompressBuffer;
    function BrotliDecompress(input, output) {
      var i2;
      var pos = 0;
      var input_end = 0;
      var window_bits = 0;
      var max_backward_distance;
      var max_distance = 0;
      var ringbuffer_size;
      var ringbuffer_mask;
      var ringbuffer;
      var ringbuffer_end;
      var dist_rb = [16, 15, 11, 4];
      var dist_rb_idx = 0;
      var prev_byte1 = 0;
      var prev_byte2 = 0;
      var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
      var block_type_trees;
      var block_len_trees;
      var br;
      var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
      br = new BrotliBitReader(input);
      window_bits = DecodeWindowBits(br);
      max_backward_distance = (1 << window_bits) - 16;
      ringbuffer_size = 1 << window_bits;
      ringbuffer_mask = ringbuffer_size - 1;
      ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
      ringbuffer_end = ringbuffer_size;
      block_type_trees = [];
      block_len_trees = [];
      for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
        block_type_trees[x] = new HuffmanCode(0, 0);
        block_len_trees[x] = new HuffmanCode(0, 0);
      }
      while (!input_end) {
        var meta_block_remaining_len = 0;
        var is_uncompressed;
        var block_length = [1 << 28, 1 << 28, 1 << 28];
        var block_type = [0];
        var num_block_types = [1, 1, 1];
        var block_type_rb = [0, 1, 0, 1, 0, 1];
        var block_type_rb_index = [0];
        var distance_postfix_bits;
        var num_direct_distance_codes;
        var distance_postfix_mask;
        var num_distance_codes;
        var context_map = null;
        var context_modes = null;
        var num_literal_htrees;
        var dist_context_map = null;
        var num_dist_htrees;
        var context_offset = 0;
        var context_map_slice = null;
        var literal_htree_index = 0;
        var dist_context_offset = 0;
        var dist_context_map_slice = null;
        var dist_htree_index = 0;
        var context_lookup_offset1 = 0;
        var context_lookup_offset2 = 0;
        var context_mode;
        var htree_command;
        for (i2 = 0; i2 < 3; ++i2) {
          hgroup[i2].codes = null;
          hgroup[i2].htrees = null;
        }
        br.readMoreInput();
        var _out = DecodeMetaBlockLength(br);
        meta_block_remaining_len = _out.meta_block_length;
        if (pos + meta_block_remaining_len > output.buffer.length) {
          var tmp = new Uint8Array(pos + meta_block_remaining_len);
          tmp.set(output.buffer);
          output.buffer = tmp;
        }
        input_end = _out.input_end;
        is_uncompressed = _out.is_uncompressed;
        if (_out.is_metadata) {
          JumpToByteBoundary(br);
          for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
            br.readMoreInput();
            br.readBits(8);
          }
          continue;
        }
        if (meta_block_remaining_len === 0) {
          continue;
        }
        if (is_uncompressed) {
          br.bit_pos_ = br.bit_pos_ + 7 & ~7;
          CopyUncompressedBlockToOutput(
            output,
            meta_block_remaining_len,
            pos,
            ringbuffer,
            ringbuffer_mask,
            br
          );
          pos += meta_block_remaining_len;
          continue;
        }
        for (i2 = 0; i2 < 3; ++i2) {
          num_block_types[i2] = DecodeVarLenUint8(br) + 1;
          if (num_block_types[i2] >= 2) {
            ReadHuffmanCode(num_block_types[i2] + 2, block_type_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            block_length[i2] = ReadBlockLength(block_len_trees, i2 * HUFFMAN_MAX_TABLE_SIZE, br);
            block_type_rb_index[i2] = 1;
          }
        }
        br.readMoreInput();
        distance_postfix_bits = br.readBits(2);
        num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
        distance_postfix_mask = (1 << distance_postfix_bits) - 1;
        num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
        context_modes = new Uint8Array(num_block_types[0]);
        for (i2 = 0; i2 < num_block_types[0]; ++i2) {
          br.readMoreInput();
          context_modes[i2] = br.readBits(2) << 1;
        }
        var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
        num_literal_htrees = _o1.num_htrees;
        context_map = _o1.context_map;
        var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
        num_dist_htrees = _o2.num_htrees;
        dist_context_map = _o2.context_map;
        hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
        hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
        hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
        for (i2 = 0; i2 < 3; ++i2) {
          hgroup[i2].decode(br);
        }
        context_map_slice = 0;
        dist_context_map_slice = 0;
        context_mode = context_modes[block_type[0]];
        context_lookup_offset1 = Context.lookupOffsets[context_mode];
        context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        htree_command = hgroup[1].htrees[0];
        while (meta_block_remaining_len > 0) {
          var cmd_code;
          var range_idx;
          var insert_code;
          var copy_code;
          var insert_length;
          var copy_length;
          var distance_code;
          var distance;
          var context;
          var j;
          var copy_dst;
          br.readMoreInput();
          if (block_length[1] === 0) {
            DecodeBlockType(
              num_block_types[1],
              block_type_trees,
              1,
              block_type,
              block_type_rb,
              block_type_rb_index,
              br
            );
            block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
            htree_command = hgroup[1].htrees[block_type[1]];
          }
          --block_length[1];
          cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
          range_idx = cmd_code >> 6;
          if (range_idx >= 2) {
            range_idx -= 2;
            distance_code = -1;
          } else {
            distance_code = 0;
          }
          insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
          copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
          insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
          copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
          for (j = 0; j < insert_length; ++j) {
            br.readMoreInput();
            if (block_length[0] === 0) {
              DecodeBlockType(
                num_block_types[0],
                block_type_trees,
                0,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[0] = ReadBlockLength(block_len_trees, 0, br);
              context_offset = block_type[0] << kLiteralContextBits;
              context_map_slice = context_offset;
              context_mode = context_modes[block_type[0]];
              context_lookup_offset1 = Context.lookupOffsets[context_mode];
              context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
            }
            context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
            literal_htree_index = context_map[context_map_slice + context];
            --block_length[0];
            prev_byte2 = prev_byte1;
            prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
            ringbuffer[pos & ringbuffer_mask] = prev_byte1;
            if ((pos & ringbuffer_mask) === ringbuffer_mask) {
              output.write(ringbuffer, ringbuffer_size);
            }
            ++pos;
          }
          meta_block_remaining_len -= insert_length;
          if (meta_block_remaining_len <= 0)
            break;
          if (distance_code < 0) {
            var context;
            br.readMoreInput();
            if (block_length[2] === 0) {
              DecodeBlockType(
                num_block_types[2],
                block_type_trees,
                2,
                block_type,
                block_type_rb,
                block_type_rb_index,
                br
              );
              block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
              dist_context_offset = block_type[2] << kDistanceContextBits;
              dist_context_map_slice = dist_context_offset;
            }
            --block_length[2];
            context = (copy_length > 4 ? 3 : copy_length - 2) & 255;
            dist_htree_index = dist_context_map[dist_context_map_slice + context];
            distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
            if (distance_code >= num_direct_distance_codes) {
              var nbits;
              var postfix;
              var offset;
              distance_code -= num_direct_distance_codes;
              postfix = distance_code & distance_postfix_mask;
              distance_code >>= distance_postfix_bits;
              nbits = (distance_code >> 1) + 1;
              offset = (2 + (distance_code & 1) << nbits) - 4;
              distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
            }
          }
          distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
          if (distance < 0) {
            throw new Error("[BrotliDecompress] invalid distance");
          }
          if (pos < max_backward_distance && max_distance !== max_backward_distance) {
            max_distance = pos;
          } else {
            max_distance = max_backward_distance;
          }
          copy_dst = pos & ringbuffer_mask;
          if (distance > max_distance) {
            if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
              var offset = BrotliDictionary.offsetsByLength[copy_length];
              var word_id = distance - max_distance - 1;
              var shift = BrotliDictionary.sizeBitsByLength[copy_length];
              var mask = (1 << shift) - 1;
              var word_idx = word_id & mask;
              var transform_idx = word_id >> shift;
              offset += word_idx * copy_length;
              if (transform_idx < Transform.kNumTransforms) {
                var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                copy_dst += len;
                pos += len;
                meta_block_remaining_len -= len;
                if (copy_dst >= ringbuffer_end) {
                  output.write(ringbuffer, ringbuffer_size);
                  for (var _x = 0; _x < copy_dst - ringbuffer_end; _x++)
                    ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                }
              } else {
                throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
              }
            } else {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
          } else {
            if (distance_code > 0) {
              dist_rb[dist_rb_idx & 3] = distance;
              ++dist_rb_idx;
            }
            if (copy_length > meta_block_remaining_len) {
              throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
            }
            for (j = 0; j < copy_length; ++j) {
              ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
              if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                output.write(ringbuffer, ringbuffer_size);
              }
              ++pos;
              --meta_block_remaining_len;
            }
          }
          prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
          prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        }
        pos &= 1073741823;
      }
      output.write(ringbuffer, pos & ringbuffer_mask);
    }
    exports2.BrotliDecompress = BrotliDecompress;
    BrotliDictionary.init();
  }
});

// node_modules/brotli/decompress.js
var require_decompress = __commonJS({
  "node_modules/brotli/decompress.js"(exports2, module2) {
    module2.exports = require_decode().BrotliDecompressBuffer;
  }
});

// node_modules/fontkit/dist/main.cjs
var require_main2 = __commonJS({
  "node_modules/fontkit/dist/main.cjs"(exports2, module2) {
    var $lzfo4$restructure = require_restructure();
    var $lzfo4$fs = require("fs");
    var $lzfo4$swchelpers = require_lib();
    var $lzfo4$buffer = require("buffer");
    var $lzfo4$restructuresrcutilsjs = require_utils();
    var $lzfo4$deepequal = require_deep_equal();
    var $lzfo4$iconvlitecjs = require_iconv_lite();
    var $lzfo4$unicodeproperties = require_main();
    var $lzfo4$unicodetrie = require_unicode_trie();
    var $lzfo4$dfa = require_dfa();
    var $lzfo4$clone = require_clone();
    var $lzfo4$tinyinflate = require_tiny_inflate();
    var $lzfo4$brotlidecompressjs = require_decompress();
    function $parcel$defineInteropFlag(a) {
      Object.defineProperty(a, "__esModule", { value: true, configurable: true });
    }
    function $parcel$export(e, n, v, s) {
      Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
    }
    function $parcel$exportWildcard(dest, source) {
      Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) {
          return;
        }
        Object.defineProperty(dest, key, {
          enumerable: true,
          get: function get() {
            return source[key];
          }
        });
      });
      return dest;
    }
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    $parcel$defineInteropFlag(module2.exports);
    $parcel$export(module2.exports, "default", () => $7b813caac4971c4b$export$2e2bcd8739ae039);
    var $a35dad4d16c8d1df$exports = {};
    $parcel$export($a35dad4d16c8d1df$exports, "logErrors", () => $a35dad4d16c8d1df$export$bd5c5d8b8dcafd78);
    $parcel$export($a35dad4d16c8d1df$exports, "registerFormat", () => $a35dad4d16c8d1df$export$36b2f24e97d43be);
    $parcel$export($a35dad4d16c8d1df$exports, "openSync", () => $a35dad4d16c8d1df$export$fa5499edb1ab414a);
    $parcel$export($a35dad4d16c8d1df$exports, "create", () => $a35dad4d16c8d1df$export$185802fd694ee1f5);
    $parcel$export($a35dad4d16c8d1df$exports, "open", () => $a35dad4d16c8d1df$export$3ce6949f20cea765);
    $parcel$export($a35dad4d16c8d1df$exports, "defaultLanguage", () => $a35dad4d16c8d1df$export$42940898df819940);
    $parcel$export($a35dad4d16c8d1df$exports, "setDefaultLanguage", () => $a35dad4d16c8d1df$export$5157e7780d44cc36);
    var $a35dad4d16c8d1df$export$bd5c5d8b8dcafd78 = false;
    var $a35dad4d16c8d1df$var$formats = [];
    function $a35dad4d16c8d1df$export$36b2f24e97d43be(format) {
      $a35dad4d16c8d1df$var$formats.push(format);
    }
    function $a35dad4d16c8d1df$export$fa5499edb1ab414a(filename, postscriptName) {
      let buffer = $lzfo4$fs.readFileSync(filename);
      return $a35dad4d16c8d1df$export$185802fd694ee1f5(buffer, postscriptName);
    }
    function $a35dad4d16c8d1df$export$3ce6949f20cea765(filename, postscriptName, callback) {
      if (typeof postscriptName === "function") {
        callback = postscriptName;
        postscriptName = null;
      }
      $lzfo4$fs.readFile(filename, function(err, buffer) {
        if (err)
          return callback(err);
        try {
          var font = $a35dad4d16c8d1df$export$185802fd694ee1f5(buffer, postscriptName);
        } catch (e) {
          return callback(e);
        }
        return callback(null, font);
      });
      return;
    }
    function $a35dad4d16c8d1df$export$185802fd694ee1f5(buffer, postscriptName) {
      for (let i2 = 0; i2 < $a35dad4d16c8d1df$var$formats.length; i2++) {
        let format = $a35dad4d16c8d1df$var$formats[i2];
        if (format.probe(buffer)) {
          let font = new format(new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(buffer));
          if (postscriptName)
            return font.getFont(postscriptName);
          return font;
        }
      }
      throw new Error("Unknown font format");
    }
    var $a35dad4d16c8d1df$export$42940898df819940 = "en";
    function $a35dad4d16c8d1df$export$5157e7780d44cc36(lang = "en") {
      $a35dad4d16c8d1df$export$42940898df819940 = lang;
    }
    function $9ea776e3198edd2e$export$69a3209f1a06c04d(target, key1, descriptor) {
      if (descriptor.get) {
        let get = descriptor.get;
        descriptor.get = function() {
          let value = get.call(this);
          Object.defineProperty(this, key1, {
            value
          });
          return value;
        };
      } else if (typeof descriptor.value === "function") {
        let fn = descriptor.value;
        return {
          get() {
            let $9ea776e3198edd2e$export$69a3209f1a06c04d2 = /* @__PURE__ */ new Map();
            function memoized(...args) {
              let key = args.length > 0 ? args[0] : "value";
              if ($9ea776e3198edd2e$export$69a3209f1a06c04d2.has(key))
                return $9ea776e3198edd2e$export$69a3209f1a06c04d2.get(key);
              let result = fn.apply(this, args);
              $9ea776e3198edd2e$export$69a3209f1a06c04d2.set(key, result);
              return result;
            }
            Object.defineProperty(this, key1, {
              value: memoized
            });
            return memoized;
          }
        };
      }
    }
    var $f6569fe31dc9e2a4$var$SubHeader = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      firstCode: $parcel$interopDefault($lzfo4$restructure).uint16,
      entryCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      idDelta: $parcel$interopDefault($lzfo4$restructure).int16,
      idRangeOffset: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $f6569fe31dc9e2a4$var$CmapGroup = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      startCharCode: $parcel$interopDefault($lzfo4$restructure).uint32,
      endCharCode: $parcel$interopDefault($lzfo4$restructure).uint32,
      glyphID: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $f6569fe31dc9e2a4$var$UnicodeValueRange = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      startUnicodeValue: $parcel$interopDefault($lzfo4$restructure).uint24,
      additionalCount: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $f6569fe31dc9e2a4$var$UVSMapping = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      unicodeValue: $parcel$interopDefault($lzfo4$restructure).uint24,
      glyphID: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $f6569fe31dc9e2a4$var$DefaultUVS = new ($parcel$interopDefault($lzfo4$restructure)).Array($f6569fe31dc9e2a4$var$UnicodeValueRange, $parcel$interopDefault($lzfo4$restructure).uint32);
    var $f6569fe31dc9e2a4$var$NonDefaultUVS = new ($parcel$interopDefault($lzfo4$restructure)).Array($f6569fe31dc9e2a4$var$UVSMapping, $parcel$interopDefault($lzfo4$restructure).uint32);
    var $f6569fe31dc9e2a4$var$VarSelectorRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      varSelector: $parcel$interopDefault($lzfo4$restructure).uint24,
      defaultUVS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f6569fe31dc9e2a4$var$DefaultUVS, {
        type: "parent"
      }),
      nonDefaultUVS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f6569fe31dc9e2a4$var$NonDefaultUVS, {
        type: "parent"
      })
    });
    var $f6569fe31dc9e2a4$var$CmapSubtable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      0: {
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        language: $parcel$interopDefault($lzfo4$restructure).uint16,
        codeMap: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint8, 256)
      },
      2: {
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        language: $parcel$interopDefault($lzfo4$restructure).uint16,
        subHeaderKeys: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, 256),
        subHeaderCount: (t) => Math.max.apply(Math, t.subHeaderKeys),
        subHeaders: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($f6569fe31dc9e2a4$var$SubHeader, "subHeaderCount"),
        glyphIndexArray: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "subHeaderCount")
      },
      4: {
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        language: $parcel$interopDefault($lzfo4$restructure).uint16,
        segCountX2: $parcel$interopDefault($lzfo4$restructure).uint16,
        segCount: (t) => t.segCountX2 >> 1,
        searchRange: $parcel$interopDefault($lzfo4$restructure).uint16,
        entrySelector: $parcel$interopDefault($lzfo4$restructure).uint16,
        rangeShift: $parcel$interopDefault($lzfo4$restructure).uint16,
        endCode: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "segCount"),
        reservedPad: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        startCode: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "segCount"),
        idDelta: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).int16, "segCount"),
        idRangeOffset: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "segCount"),
        glyphIndexArray: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(
          $parcel$interopDefault($lzfo4$restructure).uint16,
          (t) => (t.length - t._currentOffset) / 2
        )
      },
      6: {
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        language: $parcel$interopDefault($lzfo4$restructure).uint16,
        firstCode: $parcel$interopDefault($lzfo4$restructure).uint16,
        entryCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyphIndices: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "entryCount")
      },
      8: {
        reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        language: $parcel$interopDefault($lzfo4$restructure).uint16,
        is32: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint8, 8192),
        nGroups: $parcel$interopDefault($lzfo4$restructure).uint32,
        groups: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($f6569fe31dc9e2a4$var$CmapGroup, "nGroups")
      },
      10: {
        reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        language: $parcel$interopDefault($lzfo4$restructure).uint32,
        firstCode: $parcel$interopDefault($lzfo4$restructure).uint32,
        entryCount: $parcel$interopDefault($lzfo4$restructure).uint32,
        glyphIndices: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "numChars")
      },
      12: {
        reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        language: $parcel$interopDefault($lzfo4$restructure).uint32,
        nGroups: $parcel$interopDefault($lzfo4$restructure).uint32,
        groups: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($f6569fe31dc9e2a4$var$CmapGroup, "nGroups")
      },
      13: {
        reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        language: $parcel$interopDefault($lzfo4$restructure).uint32,
        nGroups: $parcel$interopDefault($lzfo4$restructure).uint32,
        groups: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($f6569fe31dc9e2a4$var$CmapGroup, "nGroups")
      },
      14: {
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        numRecords: $parcel$interopDefault($lzfo4$restructure).uint32,
        varSelectors: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($f6569fe31dc9e2a4$var$VarSelectorRecord, "numRecords")
      }
    });
    var $f6569fe31dc9e2a4$var$CmapEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      platformID: $parcel$interopDefault($lzfo4$restructure).uint16,
      encodingID: $parcel$interopDefault($lzfo4$restructure).uint16,
      table: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f6569fe31dc9e2a4$var$CmapSubtable, {
        type: "parent",
        lazy: true
      })
    });
    var $f6569fe31dc9e2a4$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numSubtables: $parcel$interopDefault($lzfo4$restructure).uint16,
      tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($f6569fe31dc9e2a4$var$CmapEntry, "numSubtables")
    });
    var $e1b51afd73796719$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).int32,
      revision: $parcel$interopDefault($lzfo4$restructure).int32,
      checkSumAdjustment: $parcel$interopDefault($lzfo4$restructure).uint32,
      magicNumber: $parcel$interopDefault($lzfo4$restructure).uint32,
      flags: $parcel$interopDefault($lzfo4$restructure).uint16,
      unitsPerEm: $parcel$interopDefault($lzfo4$restructure).uint16,
      created: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int32, 2),
      modified: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int32, 2),
      xMin: $parcel$interopDefault($lzfo4$restructure).int16,
      yMin: $parcel$interopDefault($lzfo4$restructure).int16,
      xMax: $parcel$interopDefault($lzfo4$restructure).int16,
      yMax: $parcel$interopDefault($lzfo4$restructure).int16,
      macStyle: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
        "bold",
        "italic",
        "underline",
        "outline",
        "shadow",
        "condensed",
        "extended"
      ]),
      lowestRecPPEM: $parcel$interopDefault($lzfo4$restructure).uint16,
      fontDirectionHint: $parcel$interopDefault($lzfo4$restructure).int16,
      indexToLocFormat: $parcel$interopDefault($lzfo4$restructure).int16,
      glyphDataFormat: $parcel$interopDefault($lzfo4$restructure).int16
      // 0 for current format
    });
    var $af15e8c2ca202685$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).int32,
      ascent: $parcel$interopDefault($lzfo4$restructure).int16,
      descent: $parcel$interopDefault($lzfo4$restructure).int16,
      lineGap: $parcel$interopDefault($lzfo4$restructure).int16,
      advanceWidthMax: $parcel$interopDefault($lzfo4$restructure).uint16,
      minLeftSideBearing: $parcel$interopDefault($lzfo4$restructure).int16,
      minRightSideBearing: $parcel$interopDefault($lzfo4$restructure).int16,
      xMaxExtent: $parcel$interopDefault($lzfo4$restructure).int16,
      caretSlopeRise: $parcel$interopDefault($lzfo4$restructure).int16,
      caretSlopeRun: $parcel$interopDefault($lzfo4$restructure).int16,
      caretOffset: $parcel$interopDefault($lzfo4$restructure).int16,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).int16, 4),
      metricDataFormat: $parcel$interopDefault($lzfo4$restructure).int16,
      numberOfMetrics: $parcel$interopDefault($lzfo4$restructure).uint16
      // Number of advance widths in 'hmtx' table
    });
    var $cbee70d452c87a2f$var$HmtxEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      advance: $parcel$interopDefault($lzfo4$restructure).uint16,
      bearing: $parcel$interopDefault($lzfo4$restructure).int16
    });
    var $cbee70d452c87a2f$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      metrics: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(
        $cbee70d452c87a2f$var$HmtxEntry,
        (t) => t.parent.hhea.numberOfMetrics
      ),
      bearings: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(
        $parcel$interopDefault($lzfo4$restructure).int16,
        (t) => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics
      )
    });
    var $62b43947ebb31537$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).int32,
      numGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxPoints: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxContours: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxComponentPoints: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxComponentContours: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxZones: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxTwilightPoints: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxStorage: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxFunctionDefs: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxInstructionDefs: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxStackElements: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxSizeOfInstructions: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxComponentElements: $parcel$interopDefault($lzfo4$restructure).uint16,
      maxComponentDepth: $parcel$interopDefault($lzfo4$restructure).uint16
      // Maximum levels of recursion; 1 for simple components
    });
    function $d8b54c41212776fe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
      if (platformID === 1 && $d8b54c41212776fe$export$479e671907f486d1[languageID])
        return $d8b54c41212776fe$export$479e671907f486d1[languageID];
      return $d8b54c41212776fe$export$6fef87b7618bdf0b[platformID][encodingID];
    }
    var $d8b54c41212776fe$export$6fef87b7618bdf0b = [
      // unicode
      [
        "utf16be",
        "utf16be",
        "utf16be",
        "utf16be",
        "utf16be",
        "utf16be"
      ],
      // macintosh
      // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
      // 0	Roman                 17	Malayalam
      // 1	Japanese	            18	Sinhalese
      // 2	Traditional Chinese	  19	Burmese
      // 3	Korean	              20	Khmer
      // 4	Arabic	              21	Thai
      // 5	Hebrew	              22	Laotian
      // 6	Greek	                23	Georgian
      // 7	Russian	              24	Armenian
      // 8	RSymbol	              25	Simplified Chinese
      // 9	Devanagari	          26	Tibetan
      // 10	Gurmukhi	            27	Mongolian
      // 11	Gujarati	            28	Geez
      // 12	Oriya	                29	Slavic
      // 13	Bengali	              30	Vietnamese
      // 14	Tamil	                31	Sindhi
      // 15	Telugu	              32	(Uninterpreted)
      // 16	Kannada
      [
        "macroman",
        "shift-jis",
        "big5",
        "euc-kr",
        "iso-8859-6",
        "iso-8859-8",
        "macgreek",
        "maccyrillic",
        "symbol",
        "Devanagari",
        "Gurmukhi",
        "Gujarati",
        "Oriya",
        "Bengali",
        "Tamil",
        "Telugu",
        "Kannada",
        "Malayalam",
        "Sinhalese",
        "Burmese",
        "Khmer",
        "macthai",
        "Laotian",
        "Georgian",
        "Armenian",
        "gb-2312-80",
        "Tibetan",
        "Mongolian",
        "Geez",
        "maccenteuro",
        "Vietnamese",
        "Sindhi"
      ],
      // ISO (deprecated)
      [
        "ascii"
      ],
      // windows
      // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
      [
        "symbol",
        "utf16be",
        "shift-jis",
        "gb18030",
        "big5",
        "wansung",
        "johab",
        null,
        null,
        null,
        "utf16be"
      ]
    ];
    var $d8b54c41212776fe$export$479e671907f486d1 = {
      15: "maciceland",
      17: "macturkish",
      18: "maccroatian",
      24: "maccenteuro",
      25: "maccenteuro",
      26: "maccenteuro",
      27: "maccenteuro",
      28: "maccenteuro",
      30: "maciceland",
      37: "macromania",
      38: "maccenteuro",
      39: "maccenteuro",
      40: "maccenteuro",
      143: "macinuit",
      146: "macgaelic"
      // Unsupported by iconv-lite
    };
    var $d8b54c41212776fe$export$2092376fd002e13 = [
      // unicode
      [],
      {
        0: "en",
        30: "fo",
        60: "ks",
        90: "rw",
        1: "fr",
        31: "fa",
        61: "ku",
        91: "rn",
        2: "de",
        32: "ru",
        62: "sd",
        92: "ny",
        3: "it",
        33: "zh",
        63: "bo",
        93: "mg",
        4: "nl",
        34: "nl-BE",
        64: "ne",
        94: "eo",
        5: "sv",
        35: "ga",
        65: "sa",
        128: "cy",
        6: "es",
        36: "sq",
        66: "mr",
        129: "eu",
        7: "da",
        37: "ro",
        67: "bn",
        130: "ca",
        8: "pt",
        38: "cz",
        68: "as",
        131: "la",
        9: "no",
        39: "sk",
        69: "gu",
        132: "qu",
        10: "he",
        40: "si",
        70: "pa",
        133: "gn",
        11: "ja",
        41: "yi",
        71: "or",
        134: "ay",
        12: "ar",
        42: "sr",
        72: "ml",
        135: "tt",
        13: "fi",
        43: "mk",
        73: "kn",
        136: "ug",
        14: "el",
        44: "bg",
        74: "ta",
        137: "dz",
        15: "is",
        45: "uk",
        75: "te",
        138: "jv",
        16: "mt",
        46: "be",
        76: "si",
        139: "su",
        17: "tr",
        47: "uz",
        77: "my",
        140: "gl",
        18: "hr",
        48: "kk",
        78: "km",
        141: "af",
        19: "zh-Hant",
        49: "az-Cyrl",
        79: "lo",
        142: "br",
        20: "ur",
        50: "az-Arab",
        80: "vi",
        143: "iu",
        21: "hi",
        51: "hy",
        81: "id",
        144: "gd",
        22: "th",
        52: "ka",
        82: "tl",
        145: "gv",
        23: "ko",
        53: "mo",
        83: "ms",
        146: "ga",
        24: "lt",
        54: "ky",
        84: "ms-Arab",
        147: "to",
        25: "pl",
        55: "tg",
        85: "am",
        148: "el-polyton",
        26: "hu",
        56: "tk",
        86: "ti",
        149: "kl",
        27: "es",
        57: "mn-CN",
        87: "om",
        150: "az",
        28: "lv",
        58: "mn",
        88: "so",
        151: "nn",
        29: "se",
        59: "ps",
        89: "sw"
      },
      // ISO (deprecated)
      [],
      {
        1078: "af",
        16393: "en-IN",
        1159: "rw",
        1074: "tn",
        1052: "sq",
        6153: "en-IE",
        1089: "sw",
        1115: "si",
        1156: "gsw",
        8201: "en-JM",
        1111: "kok",
        1051: "sk",
        1118: "am",
        17417: "en-MY",
        1042: "ko",
        1060: "sl",
        5121: "ar-DZ",
        5129: "en-NZ",
        1088: "ky",
        11274: "es-AR",
        15361: "ar-BH",
        13321: "en-PH",
        1108: "lo",
        16394: "es-BO",
        3073: "ar",
        18441: "en-SG",
        1062: "lv",
        13322: "es-CL",
        2049: "ar-IQ",
        7177: "en-ZA",
        1063: "lt",
        9226: "es-CO",
        11265: "ar-JO",
        11273: "en-TT",
        2094: "dsb",
        5130: "es-CR",
        13313: "ar-KW",
        2057: "en-GB",
        1134: "lb",
        7178: "es-DO",
        12289: "ar-LB",
        1033: "en",
        1071: "mk",
        12298: "es-EC",
        4097: "ar-LY",
        12297: "en-ZW",
        2110: "ms-BN",
        17418: "es-SV",
        6145: "ary",
        1061: "et",
        1086: "ms",
        4106: "es-GT",
        8193: "ar-OM",
        1080: "fo",
        1100: "ml",
        18442: "es-HN",
        16385: "ar-QA",
        1124: "fil",
        1082: "mt",
        2058: "es-MX",
        1025: "ar-SA",
        1035: "fi",
        1153: "mi",
        19466: "es-NI",
        10241: "ar-SY",
        2060: "fr-BE",
        1146: "arn",
        6154: "es-PA",
        7169: "aeb",
        3084: "fr-CA",
        1102: "mr",
        15370: "es-PY",
        14337: "ar-AE",
        1036: "fr",
        1148: "moh",
        10250: "es-PE",
        9217: "ar-YE",
        5132: "fr-LU",
        1104: "mn",
        20490: "es-PR",
        1067: "hy",
        6156: "fr-MC",
        2128: "mn-CN",
        3082: "es",
        1101: "as",
        4108: "fr-CH",
        1121: "ne",
        1034: "es",
        2092: "az-Cyrl",
        1122: "fy",
        1044: "nb",
        21514: "es-US",
        1068: "az",
        1110: "gl",
        2068: "nn",
        14346: "es-UY",
        1133: "ba",
        1079: "ka",
        1154: "oc",
        8202: "es-VE",
        1069: "eu",
        3079: "de-AT",
        1096: "or",
        2077: "sv-FI",
        1059: "be",
        1031: "de",
        1123: "ps",
        1053: "sv",
        2117: "bn",
        5127: "de-LI",
        1045: "pl",
        1114: "syr",
        1093: "bn-IN",
        4103: "de-LU",
        1046: "pt",
        1064: "tg",
        8218: "bs-Cyrl",
        2055: "de-CH",
        2070: "pt-PT",
        2143: "tzm",
        5146: "bs",
        1032: "el",
        1094: "pa",
        1097: "ta",
        1150: "br",
        1135: "kl",
        1131: "qu-BO",
        1092: "tt",
        1026: "bg",
        1095: "gu",
        2155: "qu-EC",
        1098: "te",
        1027: "ca",
        1128: "ha",
        3179: "qu",
        1054: "th",
        3076: "zh-HK",
        1037: "he",
        1048: "ro",
        1105: "bo",
        5124: "zh-MO",
        1081: "hi",
        1047: "rm",
        1055: "tr",
        2052: "zh",
        1038: "hu",
        1049: "ru",
        1090: "tk",
        4100: "zh-SG",
        1039: "is",
        9275: "smn",
        1152: "ug",
        1028: "zh-TW",
        1136: "ig",
        4155: "smj-NO",
        1058: "uk",
        1155: "co",
        1057: "id",
        5179: "smj",
        1070: "hsb",
        1050: "hr",
        1117: "iu",
        3131: "se-FI",
        1056: "ur",
        4122: "hr-BA",
        2141: "iu-Latn",
        1083: "se",
        2115: "uz-Cyrl",
        1029: "cs",
        2108: "ga",
        2107: "se-SE",
        1091: "uz",
        1030: "da",
        1076: "xh",
        8251: "sms",
        1066: "vi",
        1164: "prs",
        1077: "zu",
        6203: "sma-NO",
        1106: "cy",
        1125: "dv",
        1040: "it",
        7227: "sms",
        1160: "wo",
        2067: "nl-BE",
        2064: "it-CH",
        1103: "sa",
        1157: "sah",
        1043: "nl",
        1041: "ja",
        7194: "sr-Cyrl-BA",
        1144: "ii",
        3081: "en-AU",
        1099: "kn",
        3098: "sr",
        1130: "yo",
        10249: "en-BZ",
        1087: "kk",
        6170: "sr-Latn-BA",
        4105: "en-CA",
        1107: "km",
        2074: "sr-Latn",
        9225: "en-029",
        1158: "quc",
        1132: "nso"
      }
    ];
    var $7cfee716e27b503e$require$Buffer = $lzfo4$buffer.Buffer;
    var $7cfee716e27b503e$var$NameRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      platformID: $parcel$interopDefault($lzfo4$restructure).uint16,
      encodingID: $parcel$interopDefault($lzfo4$restructure).uint16,
      languageID: $parcel$interopDefault($lzfo4$restructure).uint16,
      nameID: $parcel$interopDefault($lzfo4$restructure).uint16,
      length: $parcel$interopDefault($lzfo4$restructure).uint16,
      string: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new ($parcel$interopDefault($lzfo4$restructure)).String(
        "length",
        (t) => $d8b54c41212776fe$export$badc544e0651b6b1(t.platformID, t.encodingID, t.languageID)
      ), {
        type: "parent",
        relativeTo: (ctx) => ctx.parent.stringOffset,
        allowNull: false
      })
    });
    var $7cfee716e27b503e$var$LangTagRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      length: $parcel$interopDefault($lzfo4$restructure).uint16,
      tag: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new ($parcel$interopDefault($lzfo4$restructure)).String("length", "utf16be"), {
        type: "parent",
        relativeTo: (ctx) => ctx.stringOffset
      })
    });
    var $7cfee716e27b503e$var$NameTable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      0: {
        count: $parcel$interopDefault($lzfo4$restructure).uint16,
        stringOffset: $parcel$interopDefault($lzfo4$restructure).uint16,
        records: new ($parcel$interopDefault($lzfo4$restructure)).Array($7cfee716e27b503e$var$NameRecord, "count")
      },
      1: {
        count: $parcel$interopDefault($lzfo4$restructure).uint16,
        stringOffset: $parcel$interopDefault($lzfo4$restructure).uint16,
        records: new ($parcel$interopDefault($lzfo4$restructure)).Array($7cfee716e27b503e$var$NameRecord, "count"),
        langTagCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        langTags: new ($parcel$interopDefault($lzfo4$restructure)).Array($7cfee716e27b503e$var$LangTagRecord, "langTagCount")
      }
    });
    var $7cfee716e27b503e$export$2e2bcd8739ae039 = $7cfee716e27b503e$var$NameTable;
    var $7cfee716e27b503e$var$NAMES = [
      "copyright",
      "fontFamily",
      "fontSubfamily",
      "uniqueSubfamily",
      "fullName",
      "version",
      "postscriptName",
      "trademark",
      "manufacturer",
      "designer",
      "description",
      "vendorURL",
      "designerURL",
      "license",
      "licenseURL",
      null,
      "preferredFamily",
      "preferredSubfamily",
      "compatibleFull",
      "sampleText",
      "postscriptCIDFontName",
      "wwsFamilyName",
      "wwsSubfamilyName"
    ];
    $7cfee716e27b503e$var$NameTable.process = function(stream) {
      var records = {};
      for (let record of this.records) {
        let language = $d8b54c41212776fe$export$2092376fd002e13[record.platformID][record.languageID];
        if (language == null && this.langTags != null && record.languageID >= 32768)
          language = this.langTags[record.languageID - 32768].tag;
        if (language == null)
          language = record.platformID + "-" + record.languageID;
        let key = record.nameID >= 256 ? "fontFeatures" : $7cfee716e27b503e$var$NAMES[record.nameID] || record.nameID;
        if (records[key] == null)
          records[key] = {};
        let obj = records[key];
        if (record.nameID >= 256)
          obj = obj[record.nameID] || (obj[record.nameID] = {});
        if (typeof record.string === "string" || typeof obj[language] !== "string")
          obj[language] = record.string;
      }
      this.records = records;
    };
    $7cfee716e27b503e$var$NameTable.preEncode = function() {
      if (Array.isArray(this.records))
        return;
      this.version = 0;
      let records = [];
      for (let key in this.records) {
        let val = this.records[key];
        if (key === "fontFeatures")
          continue;
        records.push({
          platformID: 3,
          encodingID: 1,
          languageID: 1033,
          nameID: $7cfee716e27b503e$var$NAMES.indexOf(key),
          length: $7cfee716e27b503e$require$Buffer.byteLength(val.en, "utf16le"),
          string: val.en
        });
        if (key === "postscriptName")
          records.push({
            platformID: 1,
            encodingID: 0,
            languageID: 0,
            nameID: $7cfee716e27b503e$var$NAMES.indexOf(key),
            length: val.en.length,
            string: val.en
          });
      }
      this.records = records;
      this.count = records.length;
      this.stringOffset = $7cfee716e27b503e$var$NameTable.size(this, null, false);
    };
    var $5e9fda50085d9beb$var$OS2 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      header: {
        xAvgCharWidth: $parcel$interopDefault($lzfo4$restructure).int16,
        usWeightClass: $parcel$interopDefault($lzfo4$restructure).uint16,
        usWidthClass: $parcel$interopDefault($lzfo4$restructure).uint16,
        fsType: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
          null,
          "noEmbedding",
          "viewOnly",
          "editable",
          null,
          null,
          null,
          null,
          "noSubsetting",
          "bitmapOnly"
        ]),
        ySubscriptXSize: $parcel$interopDefault($lzfo4$restructure).int16,
        ySubscriptYSize: $parcel$interopDefault($lzfo4$restructure).int16,
        ySubscriptXOffset: $parcel$interopDefault($lzfo4$restructure).int16,
        ySubscriptYOffset: $parcel$interopDefault($lzfo4$restructure).int16,
        ySuperscriptXSize: $parcel$interopDefault($lzfo4$restructure).int16,
        ySuperscriptYSize: $parcel$interopDefault($lzfo4$restructure).int16,
        ySuperscriptXOffset: $parcel$interopDefault($lzfo4$restructure).int16,
        ySuperscriptYOffset: $parcel$interopDefault($lzfo4$restructure).int16,
        yStrikeoutSize: $parcel$interopDefault($lzfo4$restructure).int16,
        yStrikeoutPosition: $parcel$interopDefault($lzfo4$restructure).int16,
        sFamilyClass: $parcel$interopDefault($lzfo4$restructure).int16,
        panose: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, 10),
        ulCharRange: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, 4),
        vendorID: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
        fsSelection: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
          "italic",
          "underscore",
          "negative",
          "outlined",
          "strikeout",
          "bold",
          "regular",
          "useTypoMetrics",
          "wws",
          "oblique"
        ]),
        usFirstCharIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
        usLastCharIndex: $parcel$interopDefault($lzfo4$restructure).uint16
        // The maximum Unicode index in this font
      },
      // The Apple version of this table ends here, but the Microsoft one continues on...
      0: {},
      1: {
        typoAscender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoDescender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoLineGap: $parcel$interopDefault($lzfo4$restructure).int16,
        winAscent: $parcel$interopDefault($lzfo4$restructure).uint16,
        winDescent: $parcel$interopDefault($lzfo4$restructure).uint16,
        codePageRange: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, 2)
      },
      2: {
        // these should be common with version 1 somehow
        typoAscender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoDescender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoLineGap: $parcel$interopDefault($lzfo4$restructure).int16,
        winAscent: $parcel$interopDefault($lzfo4$restructure).uint16,
        winDescent: $parcel$interopDefault($lzfo4$restructure).uint16,
        codePageRange: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, 2),
        xHeight: $parcel$interopDefault($lzfo4$restructure).int16,
        capHeight: $parcel$interopDefault($lzfo4$restructure).int16,
        defaultChar: $parcel$interopDefault($lzfo4$restructure).uint16,
        breakChar: $parcel$interopDefault($lzfo4$restructure).uint16,
        maxContent: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      5: {
        typoAscender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoDescender: $parcel$interopDefault($lzfo4$restructure).int16,
        typoLineGap: $parcel$interopDefault($lzfo4$restructure).int16,
        winAscent: $parcel$interopDefault($lzfo4$restructure).uint16,
        winDescent: $parcel$interopDefault($lzfo4$restructure).uint16,
        codePageRange: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, 2),
        xHeight: $parcel$interopDefault($lzfo4$restructure).int16,
        capHeight: $parcel$interopDefault($lzfo4$restructure).int16,
        defaultChar: $parcel$interopDefault($lzfo4$restructure).uint16,
        breakChar: $parcel$interopDefault($lzfo4$restructure).uint16,
        maxContent: $parcel$interopDefault($lzfo4$restructure).uint16,
        usLowerOpticalPointSize: $parcel$interopDefault($lzfo4$restructure).uint16,
        usUpperOpticalPointSize: $parcel$interopDefault($lzfo4$restructure).uint16
      }
    });
    var $5e9fda50085d9beb$var$versions = $5e9fda50085d9beb$var$OS2.versions;
    $5e9fda50085d9beb$var$versions[3] = $5e9fda50085d9beb$var$versions[4] = $5e9fda50085d9beb$var$versions[2];
    var $5e9fda50085d9beb$export$2e2bcd8739ae039 = $5e9fda50085d9beb$var$OS2;
    var $8fb96ffb3c5b1cd6$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).fixed32, {
      header: {
        italicAngle: $parcel$interopDefault($lzfo4$restructure).fixed32,
        underlinePosition: $parcel$interopDefault($lzfo4$restructure).int16,
        underlineThickness: $parcel$interopDefault($lzfo4$restructure).int16,
        isFixedPitch: $parcel$interopDefault($lzfo4$restructure).uint32,
        minMemType42: $parcel$interopDefault($lzfo4$restructure).uint32,
        maxMemType42: $parcel$interopDefault($lzfo4$restructure).uint32,
        minMemType1: $parcel$interopDefault($lzfo4$restructure).uint32,
        maxMemType1: $parcel$interopDefault($lzfo4$restructure).uint32
        // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
      },
      1: {},
      2: {
        numberOfGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyphNameIndex: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numberOfGlyphs"),
        names: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).String($parcel$interopDefault($lzfo4$restructure).uint8))
      },
      2.5: {
        numberOfGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
        offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, "numberOfGlyphs")
      },
      3: {},
      4: {
        map: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint32,
          (t) => t.parent.maxp.numGlyphs
        )
      }
    });
    var $e85635aafda425ab$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      controlValues: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int16)
    });
    var $2b37abe4b96e3c42$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      instructions: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8)
    });
    var $8cebe4fe43d5c208$var$loca = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("head.indexToLocFormat", {
      0: {
        offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16)
      },
      1: {
        offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32)
      }
    });
    $8cebe4fe43d5c208$var$loca.process = function() {
      if (this.version === 0)
        for (let i2 = 0; i2 < this.offsets.length; i2++)
          this.offsets[i2] <<= 1;
    };
    $8cebe4fe43d5c208$var$loca.preEncode = function() {
      if (this.version === 0)
        for (let i2 = 0; i2 < this.offsets.length; i2++)
          this.offsets[i2] >>>= 1;
    };
    var $8cebe4fe43d5c208$export$2e2bcd8739ae039 = $8cebe4fe43d5c208$var$loca;
    var $75c86c4a9179fd24$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      controlValueProgram: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8)
    });
    var $1edb604f0b10eb6a$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Buffer());
    var $52a9289da21106c8$export$2e2bcd8739ae039 = class {
      getCFFVersion(ctx) {
        while (ctx && !ctx.hdrSize)
          ctx = ctx.parent;
        return ctx ? ctx.version : -1;
      }
      decode(stream, parent) {
        let version = this.getCFFVersion(parent);
        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();
        if (count === 0)
          return [];
        let offSize = stream.readUInt8();
        let offsetType;
        if (offSize === 1)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint8;
        else if (offSize === 2)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint16;
        else if (offSize === 3)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint24;
        else if (offSize === 4)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint32;
        else
          throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);
        let ret = [];
        let startPos = stream.pos + (count + 1) * offSize - 1;
        let start = offsetType.decode(stream);
        for (let i2 = 0; i2 < count; i2++) {
          let end = offsetType.decode(stream);
          if (this.type != null) {
            let pos = stream.pos;
            stream.pos = startPos + start;
            parent.length = end - start;
            ret.push(this.type.decode(stream, parent));
            stream.pos = pos;
          } else
            ret.push({
              offset: startPos + start,
              length: end - start
            });
          start = end;
        }
        stream.pos = startPos + start;
        return ret;
      }
      size(arr, parent) {
        let size = 2;
        if (arr.length === 0)
          return size;
        let type = this.type || new ($parcel$interopDefault($lzfo4$restructure)).Buffer();
        let offset = 1;
        for (let i2 = 0; i2 < arr.length; i2++) {
          let item = arr[i2];
          offset += type.size(item, parent);
        }
        let offsetType;
        if (offset <= 255)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint8;
        else if (offset <= 65535)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint16;
        else if (offset <= 16777215)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint24;
        else if (offset <= 4294967295)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint32;
        else
          throw new Error("Bad offset in CFFIndex");
        size += 1 + offsetType.size() * (arr.length + 1);
        size += offset - 1;
        return size;
      }
      encode(stream, arr, parent) {
        stream.writeUInt16BE(arr.length);
        if (arr.length === 0)
          return;
        let type = this.type || new ($parcel$interopDefault($lzfo4$restructure)).Buffer();
        let sizes = [];
        let offset = 1;
        for (let item of arr) {
          let s = type.size(item, parent);
          sizes.push(s);
          offset += s;
        }
        let offsetType;
        if (offset <= 255)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint8;
        else if (offset <= 65535)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint16;
        else if (offset <= 16777215)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint24;
        else if (offset <= 4294967295)
          offsetType = $parcel$interopDefault($lzfo4$restructure).uint32;
        else
          throw new Error("Bad offset in CFFIndex");
        stream.writeUInt8(offsetType.size());
        offset = 1;
        offsetType.encode(stream, offset);
        for (let size of sizes) {
          offset += size;
          offsetType.encode(stream, offset);
        }
        for (let item1 of arr)
          type.encode(stream, item1, parent);
        return;
      }
      constructor(type) {
        this.type = type;
      }
    };
    var $7331b8461b34fafd$var$FLOAT_EOF = 15;
    var $7331b8461b34fafd$var$FLOAT_LOOKUP = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ".",
      "E",
      "E-",
      null,
      "-"
    ];
    var $7331b8461b34fafd$var$FLOAT_ENCODE_LOOKUP = {
      ".": 10,
      "E": 11,
      "E-": 12,
      "-": 14
    };
    var $7331b8461b34fafd$export$2e2bcd8739ae039 = class {
      static decode(stream, value) {
        if (32 <= value && value <= 246)
          return value - 139;
        if (247 <= value && value <= 250)
          return (value - 247) * 256 + stream.readUInt8() + 108;
        if (251 <= value && value <= 254)
          return -(value - 251) * 256 - stream.readUInt8() - 108;
        if (value === 28)
          return stream.readInt16BE();
        if (value === 29)
          return stream.readInt32BE();
        if (value === 30) {
          let str = "";
          while (true) {
            let b = stream.readUInt8();
            let n1 = b >> 4;
            if (n1 === $7331b8461b34fafd$var$FLOAT_EOF)
              break;
            str += $7331b8461b34fafd$var$FLOAT_LOOKUP[n1];
            let n2 = b & 15;
            if (n2 === $7331b8461b34fafd$var$FLOAT_EOF)
              break;
            str += $7331b8461b34fafd$var$FLOAT_LOOKUP[n2];
          }
          return parseFloat(str);
        }
        return null;
      }
      static size(value) {
        if (value.forceLarge)
          value = 32768;
        if ((value | 0) !== value) {
          let str = "" + value;
          return 1 + Math.ceil((str.length + 1) / 2);
        } else if (-107 <= value && value <= 107)
          return 1;
        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108)
          return 2;
        else if (-32768 <= value && value <= 32767)
          return 3;
        else
          return 5;
      }
      static encode(stream, value) {
        let val = Number(value);
        if (value.forceLarge) {
          stream.writeUInt8(29);
          return stream.writeInt32BE(val);
        } else if ((val | 0) !== val) {
          stream.writeUInt8(30);
          let str = "" + val;
          for (let i2 = 0; i2 < str.length; i2 += 2) {
            let c1 = str[i2];
            let n1 = $7331b8461b34fafd$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;
            if (i2 === str.length - 1)
              var n2 = $7331b8461b34fafd$var$FLOAT_EOF;
            else {
              let c2 = str[i2 + 1];
              var n2 = $7331b8461b34fafd$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;
            }
            stream.writeUInt8(n1 << 4 | n2 & 15);
          }
          if (n2 !== $7331b8461b34fafd$var$FLOAT_EOF)
            return stream.writeUInt8($7331b8461b34fafd$var$FLOAT_EOF << 4);
        } else if (-107 <= val && val <= 107)
          return stream.writeUInt8(val + 139);
        else if (108 <= val && val <= 1131) {
          val -= 108;
          stream.writeUInt8((val >> 8) + 247);
          return stream.writeUInt8(val & 255);
        } else if (-1131 <= val && val <= -108) {
          val = -val - 108;
          stream.writeUInt8((val >> 8) + 251);
          return stream.writeUInt8(val & 255);
        } else if (-32768 <= val && val <= 32767) {
          stream.writeUInt8(28);
          return stream.writeInt16BE(val);
        } else {
          stream.writeUInt8(29);
          return stream.writeInt32BE(val);
        }
      }
    };
    var $e73dde9fb8a50748$export$2e2bcd8739ae039 = class {
      decodeOperands(type, stream, ret, operands) {
        if (Array.isArray(type))
          return operands.map(
            (op, i2) => this.decodeOperands(type[i2], stream, ret, [
              op
            ])
          );
        else if (type.decode != null)
          return type.decode(stream, ret, operands);
        else
          switch (type) {
            case "number":
            case "offset":
            case "sid":
              return operands[0];
            case "boolean":
              return !!operands[0];
            default:
              return operands;
          }
      }
      encodeOperands(type, stream, ctx, operands) {
        if (Array.isArray(type))
          return operands.map(
            (op, i2) => this.encodeOperands(type[i2], stream, ctx, op)[0]
          );
        else if (type.encode != null)
          return type.encode(stream, operands, ctx);
        else if (typeof operands === "number")
          return [
            operands
          ];
        else if (typeof operands === "boolean")
          return [
            +operands
          ];
        else if (Array.isArray(operands))
          return operands;
        else
          return [
            operands
          ];
      }
      decode(stream, parent) {
        let end = stream.pos + parent.length;
        let ret = {};
        let operands = [];
        Object.defineProperties(ret, {
          parent: {
            value: parent
          },
          _startOffset: {
            value: stream.pos
          }
        });
        for (let key in this.fields) {
          let field = this.fields[key];
          ret[field[1]] = field[3];
        }
        while (stream.pos < end) {
          let b = stream.readUInt8();
          if (b < 28) {
            if (b === 12)
              b = b << 8 | stream.readUInt8();
            let field = this.fields[b];
            if (!field)
              throw new Error(`Unknown operator ${b}`);
            let val = this.decodeOperands(field[2], stream, ret, operands);
            if (val != null) {
              if (val instanceof $lzfo4$restructuresrcutilsjs.PropertyDescriptor)
                Object.defineProperty(ret, field[1], val);
              else
                ret[field[1]] = val;
            }
            operands = [];
          } else
            operands.push($7331b8461b34fafd$export$2e2bcd8739ae039.decode(stream, b));
        }
        return ret;
      }
      size(dict, parent, includePointers = true) {
        let ctx = {
          parent,
          val: dict,
          pointerSize: 0,
          startOffset: parent.startOffset || 0
        };
        let len = 0;
        for (let k in this.fields) {
          let field = this.fields[k];
          let val = dict[field[1]];
          if (val == null || $parcel$interopDefault($lzfo4$deepequal)(val, field[3]))
            continue;
          let operands = this.encodeOperands(field[2], null, ctx, val);
          for (let op of operands)
            len += $7331b8461b34fafd$export$2e2bcd8739ae039.size(op);
          let key = Array.isArray(field[0]) ? field[0] : [
            field[0]
          ];
          len += key.length;
        }
        if (includePointers)
          len += ctx.pointerSize;
        return len;
      }
      encode(stream, dict, parent) {
        let ctx = {
          pointers: [],
          startOffset: stream.pos,
          parent,
          val: dict,
          pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
        for (let field of this.ops) {
          let val = dict[field[1]];
          if (val == null || $parcel$interopDefault($lzfo4$deepequal)(val, field[3]))
            continue;
          let operands = this.encodeOperands(field[2], stream, ctx, val);
          for (let op of operands)
            $7331b8461b34fafd$export$2e2bcd8739ae039.encode(stream, op);
          let key = Array.isArray(field[0]) ? field[0] : [
            field[0]
          ];
          for (let op1 of key)
            stream.writeUInt8(op1);
        }
        let i2 = 0;
        while (i2 < ctx.pointers.length) {
          let ptr = ctx.pointers[i2++];
          ptr.type.encode(stream, ptr.val, ptr.parent);
        }
        return;
      }
      constructor(ops = []) {
        this.ops = ops;
        this.fields = {};
        for (let field of ops) {
          let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
          this.fields[key] = field;
        }
      }
    };
    var $1bd98896423435ca$export$2e2bcd8739ae039 = class extends $parcel$interopDefault($lzfo4$restructure).Pointer {
      decode(stream, parent, operands) {
        this.offsetType = {
          decode: () => operands[0]
        };
        return super.decode(stream, parent, operands);
      }
      encode(stream, value, ctx) {
        if (!stream) {
          this.offsetType = {
            size: () => 0
          };
          this.size(value, ctx);
          return [
            new $1bd98896423435ca$var$Ptr(0)
          ];
        }
        let ptr = null;
        this.offsetType = {
          encode: (stream2, val) => ptr = val
        };
        super.encode(stream, value, ctx);
        return [
          new $1bd98896423435ca$var$Ptr(ptr)
        ];
      }
      constructor(type, options = {}) {
        if (options.type == null)
          options.type = "global";
        super(null, type, options);
      }
    };
    var $1bd98896423435ca$var$Ptr = class {
      valueOf() {
        return this.val;
      }
      constructor(val) {
        this.val = val;
        this.forceLarge = true;
      }
    };
    var $f099ec1eecfbbfe4$var$CFFBlendOp = class {
      static decode(stream, parent, operands) {
        let numBlends = operands.pop();
        while (operands.length > numBlends)
          operands.pop();
      }
    };
    var $f099ec1eecfbbfe4$export$2e2bcd8739ae039 = new $e73dde9fb8a50748$export$2e2bcd8739ae039([
      // key       name                    type                                          default
      [
        6,
        "BlueValues",
        "delta",
        null
      ],
      [
        7,
        "OtherBlues",
        "delta",
        null
      ],
      [
        8,
        "FamilyBlues",
        "delta",
        null
      ],
      [
        9,
        "FamilyOtherBlues",
        "delta",
        null
      ],
      [
        [
          12,
          9
        ],
        "BlueScale",
        "number",
        0.039625
      ],
      [
        [
          12,
          10
        ],
        "BlueShift",
        "number",
        7
      ],
      [
        [
          12,
          11
        ],
        "BlueFuzz",
        "number",
        1
      ],
      [
        10,
        "StdHW",
        "number",
        null
      ],
      [
        11,
        "StdVW",
        "number",
        null
      ],
      [
        [
          12,
          12
        ],
        "StemSnapH",
        "delta",
        null
      ],
      [
        [
          12,
          13
        ],
        "StemSnapV",
        "delta",
        null
      ],
      [
        [
          12,
          14
        ],
        "ForceBold",
        "boolean",
        false
      ],
      [
        [
          12,
          17
        ],
        "LanguageGroup",
        "number",
        0
      ],
      [
        [
          12,
          18
        ],
        "ExpansionFactor",
        "number",
        0.06
      ],
      [
        [
          12,
          19
        ],
        "initialRandomSeed",
        "number",
        0
      ],
      [
        20,
        "defaultWidthX",
        "number",
        0
      ],
      [
        21,
        "nominalWidthX",
        "number",
        0
      ],
      [
        22,
        "vsindex",
        "number",
        0
      ],
      [
        23,
        "blend",
        $f099ec1eecfbbfe4$var$CFFBlendOp,
        null
      ],
      [
        19,
        "Subrs",
        new $1bd98896423435ca$export$2e2bcd8739ae039(new $52a9289da21106c8$export$2e2bcd8739ae039(), {
          type: "local"
        }),
        null
      ]
    ]);
    var $4292bb2f086bd070$export$2e2bcd8739ae039 = [
      ".notdef",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "questiondown",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "AE",
      "ordfeminine",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "ae",
      "dotlessi",
      "lslash",
      "oslash",
      "oe",
      "germandbls",
      "onesuperior",
      "logicalnot",
      "mu",
      "trademark",
      "Eth",
      "onehalf",
      "plusminus",
      "Thorn",
      "onequarter",
      "divide",
      "brokenbar",
      "degree",
      "thorn",
      "threequarters",
      "twosuperior",
      "registered",
      "minus",
      "eth",
      "multiply",
      "threesuperior",
      "copyright",
      "Aacute",
      "Acircumflex",
      "Adieresis",
      "Agrave",
      "Aring",
      "Atilde",
      "Ccedilla",
      "Eacute",
      "Ecircumflex",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Ntilde",
      "Oacute",
      "Ocircumflex",
      "Odieresis",
      "Ograve",
      "Otilde",
      "Scaron",
      "Uacute",
      "Ucircumflex",
      "Udieresis",
      "Ugrave",
      "Yacute",
      "Ydieresis",
      "Zcaron",
      "aacute",
      "acircumflex",
      "adieresis",
      "agrave",
      "aring",
      "atilde",
      "ccedilla",
      "eacute",
      "ecircumflex",
      "edieresis",
      "egrave",
      "iacute",
      "icircumflex",
      "idieresis",
      "igrave",
      "ntilde",
      "oacute",
      "ocircumflex",
      "odieresis",
      "ograve",
      "otilde",
      "scaron",
      "uacute",
      "ucircumflex",
      "udieresis",
      "ugrave",
      "yacute",
      "ydieresis",
      "zcaron",
      "exclamsmall",
      "Hungarumlautsmall",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "Dotaccentsmall",
      "Macronsmall",
      "figuredash",
      "hypheninferior",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall",
      "001.000",
      "001.001",
      "001.002",
      "001.003",
      "Black",
      "Bold",
      "Book",
      "Light",
      "Medium",
      "Regular",
      "Roman",
      "Semibold"
    ];
    var $64905f2680ca92ce$export$dee0027060fa13bd = [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "",
      "questiondown",
      "",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "",
      "ring",
      "cedilla",
      "",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "AE",
      "",
      "ordfeminine",
      "",
      "",
      "",
      "",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "",
      "",
      "",
      "",
      "",
      "ae",
      "",
      "",
      "",
      "dotlessi",
      "",
      "",
      "lslash",
      "oslash",
      "oe",
      "germandbls"
    ];
    var $64905f2680ca92ce$export$4f58f497e14a53c3 = [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "space",
      "exclamsmall",
      "Hungarumlautsmall",
      "",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "",
      "",
      "isuperior",
      "",
      "",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "",
      "",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "",
      "",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "",
      "Dotaccentsmall",
      "",
      "",
      "Macronsmall",
      "",
      "",
      "figuredash",
      "hypheninferior",
      "",
      "",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "",
      "",
      "",
      "onequarter",
      "onehalf",
      "threequarters",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "",
      "",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall"
    ];
    var $d3c587cfeb0b2fa7$export$c33b50336c234f16 = [
      ".notdef",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quoteright",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "quoteleft",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "exclamdown",
      "cent",
      "sterling",
      "fraction",
      "yen",
      "florin",
      "section",
      "currency",
      "quotesingle",
      "quotedblleft",
      "guillemotleft",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "endash",
      "dagger",
      "daggerdbl",
      "periodcentered",
      "paragraph",
      "bullet",
      "quotesinglbase",
      "quotedblbase",
      "quotedblright",
      "guillemotright",
      "ellipsis",
      "perthousand",
      "questiondown",
      "grave",
      "acute",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "dieresis",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "emdash",
      "AE",
      "ordfeminine",
      "Lslash",
      "Oslash",
      "OE",
      "ordmasculine",
      "ae",
      "dotlessi",
      "lslash",
      "oslash",
      "oe",
      "germandbls",
      "onesuperior",
      "logicalnot",
      "mu",
      "trademark",
      "Eth",
      "onehalf",
      "plusminus",
      "Thorn",
      "onequarter",
      "divide",
      "brokenbar",
      "degree",
      "thorn",
      "threequarters",
      "twosuperior",
      "registered",
      "minus",
      "eth",
      "multiply",
      "threesuperior",
      "copyright",
      "Aacute",
      "Acircumflex",
      "Adieresis",
      "Agrave",
      "Aring",
      "Atilde",
      "Ccedilla",
      "Eacute",
      "Ecircumflex",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Ntilde",
      "Oacute",
      "Ocircumflex",
      "Odieresis",
      "Ograve",
      "Otilde",
      "Scaron",
      "Uacute",
      "Ucircumflex",
      "Udieresis",
      "Ugrave",
      "Yacute",
      "Ydieresis",
      "Zcaron",
      "aacute",
      "acircumflex",
      "adieresis",
      "agrave",
      "aring",
      "atilde",
      "ccedilla",
      "eacute",
      "ecircumflex",
      "edieresis",
      "egrave",
      "iacute",
      "icircumflex",
      "idieresis",
      "igrave",
      "ntilde",
      "oacute",
      "ocircumflex",
      "odieresis",
      "ograve",
      "otilde",
      "scaron",
      "uacute",
      "ucircumflex",
      "udieresis",
      "ugrave",
      "yacute",
      "ydieresis",
      "zcaron"
    ];
    var $d3c587cfeb0b2fa7$export$3ed0f9e1fee8d489 = [
      ".notdef",
      "space",
      "exclamsmall",
      "Hungarumlautsmall",
      "dollaroldstyle",
      "dollarsuperior",
      "ampersandsmall",
      "Acutesmall",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "questionsmall",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "Circumflexsmall",
      "hyphensuperior",
      "Gravesmall",
      "Asmall",
      "Bsmall",
      "Csmall",
      "Dsmall",
      "Esmall",
      "Fsmall",
      "Gsmall",
      "Hsmall",
      "Ismall",
      "Jsmall",
      "Ksmall",
      "Lsmall",
      "Msmall",
      "Nsmall",
      "Osmall",
      "Psmall",
      "Qsmall",
      "Rsmall",
      "Ssmall",
      "Tsmall",
      "Usmall",
      "Vsmall",
      "Wsmall",
      "Xsmall",
      "Ysmall",
      "Zsmall",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "Tildesmall",
      "exclamdownsmall",
      "centoldstyle",
      "Lslashsmall",
      "Scaronsmall",
      "Zcaronsmall",
      "Dieresissmall",
      "Brevesmall",
      "Caronsmall",
      "Dotaccentsmall",
      "Macronsmall",
      "figuredash",
      "hypheninferior",
      "Ogoneksmall",
      "Ringsmall",
      "Cedillasmall",
      "onequarter",
      "onehalf",
      "threequarters",
      "questiondownsmall",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior",
      "Agravesmall",
      "Aacutesmall",
      "Acircumflexsmall",
      "Atildesmall",
      "Adieresissmall",
      "Aringsmall",
      "AEsmall",
      "Ccedillasmall",
      "Egravesmall",
      "Eacutesmall",
      "Ecircumflexsmall",
      "Edieresissmall",
      "Igravesmall",
      "Iacutesmall",
      "Icircumflexsmall",
      "Idieresissmall",
      "Ethsmall",
      "Ntildesmall",
      "Ogravesmall",
      "Oacutesmall",
      "Ocircumflexsmall",
      "Otildesmall",
      "Odieresissmall",
      "OEsmall",
      "Oslashsmall",
      "Ugravesmall",
      "Uacutesmall",
      "Ucircumflexsmall",
      "Udieresissmall",
      "Yacutesmall",
      "Thornsmall",
      "Ydieresissmall"
    ];
    var $d3c587cfeb0b2fa7$export$dc28be11139d4120 = [
      ".notdef",
      "space",
      "dollaroldstyle",
      "dollarsuperior",
      "parenleftsuperior",
      "parenrightsuperior",
      "twodotenleader",
      "onedotenleader",
      "comma",
      "hyphen",
      "period",
      "fraction",
      "zerooldstyle",
      "oneoldstyle",
      "twooldstyle",
      "threeoldstyle",
      "fouroldstyle",
      "fiveoldstyle",
      "sixoldstyle",
      "sevenoldstyle",
      "eightoldstyle",
      "nineoldstyle",
      "colon",
      "semicolon",
      "commasuperior",
      "threequartersemdash",
      "periodsuperior",
      "asuperior",
      "bsuperior",
      "centsuperior",
      "dsuperior",
      "esuperior",
      "isuperior",
      "lsuperior",
      "msuperior",
      "nsuperior",
      "osuperior",
      "rsuperior",
      "ssuperior",
      "tsuperior",
      "ff",
      "fi",
      "fl",
      "ffi",
      "ffl",
      "parenleftinferior",
      "parenrightinferior",
      "hyphensuperior",
      "colonmonetary",
      "onefitted",
      "rupiah",
      "centoldstyle",
      "figuredash",
      "hypheninferior",
      "onequarter",
      "onehalf",
      "threequarters",
      "oneeighth",
      "threeeighths",
      "fiveeighths",
      "seveneighths",
      "onethird",
      "twothirds",
      "zerosuperior",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "foursuperior",
      "fivesuperior",
      "sixsuperior",
      "sevensuperior",
      "eightsuperior",
      "ninesuperior",
      "zeroinferior",
      "oneinferior",
      "twoinferior",
      "threeinferior",
      "fourinferior",
      "fiveinferior",
      "sixinferior",
      "seveninferior",
      "eightinferior",
      "nineinferior",
      "centinferior",
      "dollarinferior",
      "periodinferior",
      "commainferior"
    ];
    var $02fa1fdbd31163f6$var$LangSysTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      reqFeatureIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      featureCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      featureIndexes: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "featureCount")
    });
    var $02fa1fdbd31163f6$var$LangSysRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      langSys: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$LangSysTable, {
        type: "parent"
      })
    });
    var $02fa1fdbd31163f6$var$Script = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      defaultLangSys: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$LangSysTable),
      count: $parcel$interopDefault($lzfo4$restructure).uint16,
      langSysRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LangSysRecord, "count")
    });
    var $02fa1fdbd31163f6$var$ScriptRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      script: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$Script, {
        type: "parent"
      })
    });
    var $02fa1fdbd31163f6$export$3e15fc05ce864229 = new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$ScriptRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $02fa1fdbd31163f6$var$FeatureParams = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      nameID: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $02fa1fdbd31163f6$export$6e91cf7616333d5 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      featureParams: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$FeatureParams),
      lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupListIndexes: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "lookupCount")
    });
    var $02fa1fdbd31163f6$var$FeatureRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      feature: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$6e91cf7616333d5, {
        type: "parent"
      })
    });
    var $02fa1fdbd31163f6$export$aa18130def4b6cb4 = new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$FeatureRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $02fa1fdbd31163f6$var$LookupFlags = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      markAttachmentType: $parcel$interopDefault($lzfo4$restructure).uint8,
      flags: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint8, [
        "rightToLeft",
        "ignoreBaseGlyphs",
        "ignoreLigatures",
        "ignoreMarks",
        "useMarkFilteringSet"
      ])
    });
    function $02fa1fdbd31163f6$export$df0008c6ff2da22a(SubTable) {
      let Lookup = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        lookupType: $parcel$interopDefault($lzfo4$restructure).uint16,
        flags: $02fa1fdbd31163f6$var$LookupFlags,
        subTableCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        subTables: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, SubTable), "subTableCount"),
        markFilteringSet: new ($parcel$interopDefault($lzfo4$restructure)).Optional(
          $parcel$interopDefault($lzfo4$restructure).uint16,
          (t) => t.flags.flags.useMarkFilteringSet
        )
      });
      return new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, Lookup), $parcel$interopDefault($lzfo4$restructure).uint16);
    }
    var $02fa1fdbd31163f6$var$RangeRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      start: $parcel$interopDefault($lzfo4$restructure).uint16,
      end: $parcel$interopDefault($lzfo4$restructure).uint16,
      startCoverageIndex: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $02fa1fdbd31163f6$export$17608c3f81a6111 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyphs: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "glyphCount")
      },
      2: {
        rangeCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        rangeRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$RangeRecord, "rangeCount")
      }
    });
    var $02fa1fdbd31163f6$var$ClassRangeRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      start: $parcel$interopDefault($lzfo4$restructure).uint16,
      end: $parcel$interopDefault($lzfo4$restructure).uint16,
      class: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $02fa1fdbd31163f6$export$843d551fbbafef71 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        startGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        classValueArray: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "glyphCount")
      },
      2: {
        classRangeCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        classRangeRecord: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$ClassRangeRecord, "classRangeCount")
      }
    });
    var $02fa1fdbd31163f6$export$8215d14a63d9fb10 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      a: $parcel$interopDefault($lzfo4$restructure).uint16,
      b: $parcel$interopDefault($lzfo4$restructure).uint16,
      deltaFormat: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $02fa1fdbd31163f6$var$LookupRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      sequenceIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupListIndex: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $02fa1fdbd31163f6$var$Rule = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      input: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.glyphCount - 1
      ),
      lookupRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LookupRecord, "lookupCount")
    });
    var $02fa1fdbd31163f6$var$RuleSet = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$Rule), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $02fa1fdbd31163f6$var$ClassRule = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      classes: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.glyphCount - 1
      ),
      lookupRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LookupRecord, "lookupCount")
    });
    var $02fa1fdbd31163f6$var$ClassSet = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$ClassRule), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $02fa1fdbd31163f6$export$841858b892ce1f4c = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        ruleSetCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        ruleSets: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$RuleSet), "ruleSetCount")
      },
      2: {
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        classDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
        classSetCnt: $parcel$interopDefault($lzfo4$restructure).uint16,
        classSet: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$ClassSet), "classSetCnt")
      },
      3: {
        glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverages: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "glyphCount"),
        lookupRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LookupRecord, "lookupCount")
      }
    });
    var $02fa1fdbd31163f6$var$ChainRule = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      backtrackGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      backtrack: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "backtrackGlyphCount"),
      inputGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      input: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.inputGlyphCount - 1
      ),
      lookaheadGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookahead: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "lookaheadGlyphCount"),
      lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LookupRecord, "lookupCount")
    });
    var $02fa1fdbd31163f6$var$ChainRuleSet = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$ChainRule), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $02fa1fdbd31163f6$export$5e6d09e6861162f6 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        chainCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        chainRuleSets: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$ChainRuleSet), "chainCount")
      },
      2: {
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        backtrackClassDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
        inputClassDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
        lookaheadClassDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
        chainCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        chainClassSet: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$var$ChainRuleSet), "chainCount")
      },
      3: {
        backtrackGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        backtrackCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "backtrackGlyphCount"),
        inputGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        inputCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "inputGlyphCount"),
        lookaheadGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookaheadCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "lookaheadGlyphCount"),
        lookupCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookupRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($02fa1fdbd31163f6$var$LookupRecord, "lookupCount")
      }
    });
    var $f7d48077c0582beb$var$F2DOT14 = new ($parcel$interopDefault($lzfo4$restructure)).Fixed(16, "BE", 14);
    var $f7d48077c0582beb$var$RegionAxisCoordinates = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      startCoord: $f7d48077c0582beb$var$F2DOT14,
      peakCoord: $f7d48077c0582beb$var$F2DOT14,
      endCoord: $f7d48077c0582beb$var$F2DOT14
    });
    var $f7d48077c0582beb$var$VariationRegionList = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      axisCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      regionCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      variationRegions: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Array($f7d48077c0582beb$var$RegionAxisCoordinates, "axisCount"), "regionCount")
    });
    var $f7d48077c0582beb$var$DeltaSet = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      shortDeltas: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).int16,
        (t) => t.parent.shortDeltaCount
      ),
      regionDeltas: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).int8,
        (t) => t.parent.regionIndexCount - t.parent.shortDeltaCount
      ),
      deltas: (t) => t.shortDeltas.concat(t.regionDeltas)
    });
    var $f7d48077c0582beb$var$ItemVariationData = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      itemCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      shortDeltaCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      regionIndexCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      regionIndexes: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "regionIndexCount"),
      deltaSets: new ($parcel$interopDefault($lzfo4$restructure)).Array($f7d48077c0582beb$var$DeltaSet, "itemCount")
    });
    var $f7d48077c0582beb$export$fe1b122a2710f241 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      format: $parcel$interopDefault($lzfo4$restructure).uint16,
      variationRegionList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$var$VariationRegionList),
      variationDataCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      itemVariationData: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$var$ItemVariationData), "variationDataCount")
    });
    var $f7d48077c0582beb$var$ConditionTable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        axisIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
        axisIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
        filterRangeMinValue: $f7d48077c0582beb$var$F2DOT14,
        filterRangeMaxValue: $f7d48077c0582beb$var$F2DOT14
      }
    });
    var $f7d48077c0582beb$var$ConditionSet = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      conditionCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      conditionTable: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$var$ConditionTable), "conditionCount")
    });
    var $f7d48077c0582beb$var$FeatureTableSubstitutionRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      featureIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      alternateFeatureTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $02fa1fdbd31163f6$export$6e91cf7616333d5, {
        type: "parent"
      })
    });
    var $f7d48077c0582beb$var$FeatureTableSubstitution = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      substitutionCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      substitutions: new ($parcel$interopDefault($lzfo4$restructure)).Array($f7d48077c0582beb$var$FeatureTableSubstitutionRecord, "substitutionCount")
    });
    var $f7d48077c0582beb$var$FeatureVariationRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      conditionSet: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$var$ConditionSet, {
        type: "parent"
      }),
      featureTableSubstitution: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$var$FeatureTableSubstitution, {
        type: "parent"
      })
    });
    var $f7d48077c0582beb$export$441b70b7971dd419 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      majorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      minorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      featureVariationRecordCount: $parcel$interopDefault($lzfo4$restructure).uint32,
      featureVariationRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($f7d48077c0582beb$var$FeatureVariationRecord, "featureVariationRecordCount")
    });
    var $5d220daacf51f8dc$var$PredefinedOp = class {
      decode(stream, parent, operands) {
        if (this.predefinedOps[operands[0]])
          return this.predefinedOps[operands[0]];
        return this.type.decode(stream, parent, operands);
      }
      size(value, ctx) {
        return this.type.size(value, ctx);
      }
      encode(stream, value, ctx) {
        let index = this.predefinedOps.indexOf(value);
        if (index !== -1)
          return index;
        return this.type.encode(stream, value, ctx);
      }
      constructor(predefinedOps, type) {
        this.predefinedOps = predefinedOps;
        this.type = type;
      }
    };
    var $5d220daacf51f8dc$var$CFFEncodingVersion = class extends $parcel$interopDefault($lzfo4$restructure).Number {
      decode(stream) {
        return $parcel$interopDefault($lzfo4$restructure).uint8.decode(stream) & 127;
      }
      constructor() {
        super("UInt8");
      }
    };
    var $5d220daacf51f8dc$var$Range1 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      first: $parcel$interopDefault($lzfo4$restructure).uint16,
      nLeft: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $5d220daacf51f8dc$var$Range2 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      first: $parcel$interopDefault($lzfo4$restructure).uint16,
      nLeft: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $5d220daacf51f8dc$var$CFFCustomEncoding = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct(new $5d220daacf51f8dc$var$CFFEncodingVersion(), {
      0: {
        nCodes: $parcel$interopDefault($lzfo4$restructure).uint8,
        codes: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, "nCodes")
      },
      1: {
        nRanges: $parcel$interopDefault($lzfo4$restructure).uint8,
        ranges: new ($parcel$interopDefault($lzfo4$restructure)).Array($5d220daacf51f8dc$var$Range1, "nRanges")
      }
    });
    var $5d220daacf51f8dc$var$CFFEncoding = new $5d220daacf51f8dc$var$PredefinedOp([
      $64905f2680ca92ce$export$dee0027060fa13bd,
      $64905f2680ca92ce$export$4f58f497e14a53c3
    ], new $1bd98896423435ca$export$2e2bcd8739ae039($5d220daacf51f8dc$var$CFFCustomEncoding, {
      lazy: true
    }));
    var $5d220daacf51f8dc$var$RangeArray = class extends $parcel$interopDefault($lzfo4$restructure).Array {
      decode(stream, parent) {
        let length = $lzfo4$restructuresrcutilsjs.resolveLength(this.length, stream, parent);
        let count = 0;
        let res = [];
        while (count < length) {
          let range = this.type.decode(stream, parent);
          range.offset = count;
          count += range.nLeft + 1;
          res.push(range);
        }
        return res;
      }
    };
    var $5d220daacf51f8dc$var$CFFCustomCharset = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint8, {
      0: {
        glyphs: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint16,
          (t) => t.parent.CharStrings.length - 1
        )
      },
      1: {
        ranges: new $5d220daacf51f8dc$var$RangeArray(
          $5d220daacf51f8dc$var$Range1,
          (t) => t.parent.CharStrings.length - 1
        )
      },
      2: {
        ranges: new $5d220daacf51f8dc$var$RangeArray(
          $5d220daacf51f8dc$var$Range2,
          (t) => t.parent.CharStrings.length - 1
        )
      }
    });
    var $5d220daacf51f8dc$var$CFFCharset = new $5d220daacf51f8dc$var$PredefinedOp([
      $d3c587cfeb0b2fa7$export$c33b50336c234f16,
      $d3c587cfeb0b2fa7$export$3ed0f9e1fee8d489,
      $d3c587cfeb0b2fa7$export$dc28be11139d4120
    ], new $1bd98896423435ca$export$2e2bcd8739ae039($5d220daacf51f8dc$var$CFFCustomCharset, {
      lazy: true
    }));
    var $5d220daacf51f8dc$var$FDRange3 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      first: $parcel$interopDefault($lzfo4$restructure).uint16,
      fd: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $5d220daacf51f8dc$var$FDRange4 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      first: $parcel$interopDefault($lzfo4$restructure).uint32,
      fd: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $5d220daacf51f8dc$var$FDSelect = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint8, {
      0: {
        fds: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint8,
          (t) => t.parent.CharStrings.length
        )
      },
      3: {
        nRanges: $parcel$interopDefault($lzfo4$restructure).uint16,
        ranges: new ($parcel$interopDefault($lzfo4$restructure)).Array($5d220daacf51f8dc$var$FDRange3, "nRanges"),
        sentinel: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      4: {
        nRanges: $parcel$interopDefault($lzfo4$restructure).uint32,
        ranges: new ($parcel$interopDefault($lzfo4$restructure)).Array($5d220daacf51f8dc$var$FDRange4, "nRanges"),
        sentinel: $parcel$interopDefault($lzfo4$restructure).uint32
      }
    });
    var $5d220daacf51f8dc$var$ptr = new $1bd98896423435ca$export$2e2bcd8739ae039($f099ec1eecfbbfe4$export$2e2bcd8739ae039);
    var $5d220daacf51f8dc$var$CFFPrivateOp = class {
      decode(stream, parent, operands) {
        parent.length = operands[0];
        return $5d220daacf51f8dc$var$ptr.decode(stream, parent, [
          operands[1]
        ]);
      }
      size(dict, ctx) {
        return [
          $f099ec1eecfbbfe4$export$2e2bcd8739ae039.size(dict, ctx, false),
          $5d220daacf51f8dc$var$ptr.size(dict, ctx)[0]
        ];
      }
      encode(stream, dict, ctx) {
        return [
          $f099ec1eecfbbfe4$export$2e2bcd8739ae039.size(dict, ctx, false),
          $5d220daacf51f8dc$var$ptr.encode(stream, dict, ctx)[0]
        ];
      }
    };
    var $5d220daacf51f8dc$var$FontDict = new $e73dde9fb8a50748$export$2e2bcd8739ae039([
      // key       name                   type(s)                                 default
      [
        18,
        "Private",
        new $5d220daacf51f8dc$var$CFFPrivateOp(),
        null
      ],
      [
        [
          12,
          38
        ],
        "FontName",
        "sid",
        null
      ],
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        [
          12,
          5
        ],
        "PaintType",
        "number",
        0
      ]
    ]);
    var $5d220daacf51f8dc$var$CFFTopDict = new $e73dde9fb8a50748$export$2e2bcd8739ae039([
      // key       name                   type(s)                                 default
      [
        [
          12,
          30
        ],
        "ROS",
        [
          "sid",
          "sid",
          "number"
        ],
        null
      ],
      [
        0,
        "version",
        "sid",
        null
      ],
      [
        1,
        "Notice",
        "sid",
        null
      ],
      [
        [
          12,
          0
        ],
        "Copyright",
        "sid",
        null
      ],
      [
        2,
        "FullName",
        "sid",
        null
      ],
      [
        3,
        "FamilyName",
        "sid",
        null
      ],
      [
        4,
        "Weight",
        "sid",
        null
      ],
      [
        [
          12,
          1
        ],
        "isFixedPitch",
        "boolean",
        false
      ],
      [
        [
          12,
          2
        ],
        "ItalicAngle",
        "number",
        0
      ],
      [
        [
          12,
          3
        ],
        "UnderlinePosition",
        "number",
        -100
      ],
      [
        [
          12,
          4
        ],
        "UnderlineThickness",
        "number",
        50
      ],
      [
        [
          12,
          5
        ],
        "PaintType",
        "number",
        0
      ],
      [
        [
          12,
          6
        ],
        "CharstringType",
        "number",
        2
      ],
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        13,
        "UniqueID",
        "number",
        null
      ],
      [
        5,
        "FontBBox",
        "array",
        [
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          12,
          8
        ],
        "StrokeWidth",
        "number",
        0
      ],
      [
        14,
        "XUID",
        "array",
        null
      ],
      [
        15,
        "charset",
        $5d220daacf51f8dc$var$CFFCharset,
        $d3c587cfeb0b2fa7$export$c33b50336c234f16
      ],
      [
        16,
        "Encoding",
        $5d220daacf51f8dc$var$CFFEncoding,
        $64905f2680ca92ce$export$dee0027060fa13bd
      ],
      [
        17,
        "CharStrings",
        new $1bd98896423435ca$export$2e2bcd8739ae039(new $52a9289da21106c8$export$2e2bcd8739ae039()),
        null
      ],
      [
        18,
        "Private",
        new $5d220daacf51f8dc$var$CFFPrivateOp(),
        null
      ],
      [
        [
          12,
          20
        ],
        "SyntheticBase",
        "number",
        null
      ],
      [
        [
          12,
          21
        ],
        "PostScript",
        "sid",
        null
      ],
      [
        [
          12,
          22
        ],
        "BaseFontName",
        "sid",
        null
      ],
      [
        [
          12,
          23
        ],
        "BaseFontBlend",
        "delta",
        null
      ],
      // CID font specific
      [
        [
          12,
          31
        ],
        "CIDFontVersion",
        "number",
        0
      ],
      [
        [
          12,
          32
        ],
        "CIDFontRevision",
        "number",
        0
      ],
      [
        [
          12,
          33
        ],
        "CIDFontType",
        "number",
        0
      ],
      [
        [
          12,
          34
        ],
        "CIDCount",
        "number",
        8720
      ],
      [
        [
          12,
          35
        ],
        "UIDBase",
        "number",
        null
      ],
      [
        [
          12,
          37
        ],
        "FDSelect",
        new $1bd98896423435ca$export$2e2bcd8739ae039($5d220daacf51f8dc$var$FDSelect),
        null
      ],
      [
        [
          12,
          36
        ],
        "FDArray",
        new $1bd98896423435ca$export$2e2bcd8739ae039(new $52a9289da21106c8$export$2e2bcd8739ae039($5d220daacf51f8dc$var$FontDict)),
        null
      ],
      [
        [
          12,
          38
        ],
        "FontName",
        "sid",
        null
      ]
    ]);
    var $5d220daacf51f8dc$var$VariationStore = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      length: $parcel$interopDefault($lzfo4$restructure).uint16,
      itemVariationStore: $f7d48077c0582beb$export$fe1b122a2710f241
    });
    var $5d220daacf51f8dc$var$CFF2TopDict = new $e73dde9fb8a50748$export$2e2bcd8739ae039([
      [
        [
          12,
          7
        ],
        "FontMatrix",
        "array",
        [
          1e-3,
          0,
          0,
          1e-3,
          0,
          0
        ]
      ],
      [
        17,
        "CharStrings",
        new $1bd98896423435ca$export$2e2bcd8739ae039(new $52a9289da21106c8$export$2e2bcd8739ae039()),
        null
      ],
      [
        [
          12,
          37
        ],
        "FDSelect",
        new $1bd98896423435ca$export$2e2bcd8739ae039($5d220daacf51f8dc$var$FDSelect),
        null
      ],
      [
        [
          12,
          36
        ],
        "FDArray",
        new $1bd98896423435ca$export$2e2bcd8739ae039(new $52a9289da21106c8$export$2e2bcd8739ae039($5d220daacf51f8dc$var$FontDict)),
        null
      ],
      [
        24,
        "vstore",
        new $1bd98896423435ca$export$2e2bcd8739ae039($5d220daacf51f8dc$var$VariationStore),
        null
      ],
      [
        25,
        "maxstack",
        "number",
        193
      ]
    ]);
    var $5d220daacf51f8dc$var$CFFTop = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).fixed16, {
      1: {
        hdrSize: $parcel$interopDefault($lzfo4$restructure).uint8,
        offSize: $parcel$interopDefault($lzfo4$restructure).uint8,
        nameIndex: new $52a9289da21106c8$export$2e2bcd8739ae039(new ($parcel$interopDefault($lzfo4$restructure)).String("length")),
        topDictIndex: new $52a9289da21106c8$export$2e2bcd8739ae039($5d220daacf51f8dc$var$CFFTopDict),
        stringIndex: new $52a9289da21106c8$export$2e2bcd8739ae039(new ($parcel$interopDefault($lzfo4$restructure)).String("length")),
        globalSubrIndex: new $52a9289da21106c8$export$2e2bcd8739ae039()
      },
      2: {
        hdrSize: $parcel$interopDefault($lzfo4$restructure).uint8,
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        topDict: $5d220daacf51f8dc$var$CFF2TopDict,
        globalSubrIndex: new $52a9289da21106c8$export$2e2bcd8739ae039()
      }
    });
    var $5d220daacf51f8dc$export$2e2bcd8739ae039 = $5d220daacf51f8dc$var$CFFTop;
    var $af4e76a81d73e13e$var$CFFFont = class _$af4e76a81d73e13e$var$CFFFont {
      static decode(stream) {
        return new _$af4e76a81d73e13e$var$CFFFont(stream);
      }
      decode() {
        let start = this.stream.pos;
        let top = $5d220daacf51f8dc$export$2e2bcd8739ae039.decode(this.stream);
        for (let key in top) {
          let val = top[key];
          this[key] = val;
        }
        if (this.version < 2) {
          if (this.topDictIndex.length !== 1)
            throw new Error("Only a single font is allowed in CFF");
          this.topDict = this.topDictIndex[0];
        }
        this.isCIDFont = this.topDict.ROS != null;
        return this;
      }
      string(sid) {
        if (this.version >= 2)
          return null;
        if (sid < $4292bb2f086bd070$export$2e2bcd8739ae039.length)
          return $4292bb2f086bd070$export$2e2bcd8739ae039[sid];
        return this.stringIndex[sid - $4292bb2f086bd070$export$2e2bcd8739ae039.length];
      }
      get postscriptName() {
        if (this.version < 2)
          return this.nameIndex[0];
        return null;
      }
      get fullName() {
        return this.string(this.topDict.FullName);
      }
      get familyName() {
        return this.string(this.topDict.FamilyName);
      }
      getCharString(glyph) {
        this.stream.pos = this.topDict.CharStrings[glyph].offset;
        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
      }
      getGlyphName(gid) {
        if (this.version >= 2)
          return null;
        if (this.isCIDFont)
          return null;
        let { charset } = this.topDict;
        if (Array.isArray(charset))
          return charset[gid];
        if (gid === 0)
          return ".notdef";
        gid -= 1;
        switch (charset.version) {
          case 0:
            return this.string(charset.glyphs[gid]);
          case 1:
          case 2:
            for (let i2 = 0; i2 < charset.ranges.length; i2++) {
              let range = charset.ranges[i2];
              if (range.offset <= gid && gid <= range.offset + range.nLeft)
                return this.string(range.first + (gid - range.offset));
            }
            break;
        }
        return null;
      }
      fdForGlyph(gid) {
        if (!this.topDict.FDSelect)
          return null;
        switch (this.topDict.FDSelect.version) {
          case 0:
            return this.topDict.FDSelect.fds[gid];
          case 3:
          case 4:
            let { ranges } = this.topDict.FDSelect;
            let low = 0;
            let high = ranges.length - 1;
            while (low <= high) {
              let mid = low + high >> 1;
              if (gid < ranges[mid].first)
                high = mid - 1;
              else if (mid < high && gid >= ranges[mid + 1].first)
                low = mid + 1;
              else
                return ranges[mid].fd;
            }
          default:
            throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
        }
      }
      privateDictForGlyph(gid) {
        if (this.topDict.FDSelect) {
          let fd = this.fdForGlyph(gid);
          if (this.topDict.FDArray[fd])
            return this.topDict.FDArray[fd].Private;
          return null;
        }
        if (this.version < 2)
          return this.topDict.Private;
        return this.topDict.FDArray[0].Private;
      }
      constructor(stream) {
        this.stream = stream;
        this.decode();
      }
    };
    var $af4e76a81d73e13e$export$2e2bcd8739ae039 = $af4e76a81d73e13e$var$CFFFont;
    var $a037a9ab8e35d2e2$var$VerticalOrigin = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyphIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      vertOriginY: $parcel$interopDefault($lzfo4$restructure).int16
    });
    var $a037a9ab8e35d2e2$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      majorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      minorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      defaultVertOriginY: $parcel$interopDefault($lzfo4$restructure).int16,
      numVertOriginYMetrics: $parcel$interopDefault($lzfo4$restructure).uint16,
      metrics: new ($parcel$interopDefault($lzfo4$restructure)).Array($a037a9ab8e35d2e2$var$VerticalOrigin, "numVertOriginYMetrics")
    });
    var $57be5e4dbfc12b37$export$16b227cb15d716a0 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      height: $parcel$interopDefault($lzfo4$restructure).uint8,
      width: $parcel$interopDefault($lzfo4$restructure).uint8,
      horiBearingX: $parcel$interopDefault($lzfo4$restructure).int8,
      horiBearingY: $parcel$interopDefault($lzfo4$restructure).int8,
      horiAdvance: $parcel$interopDefault($lzfo4$restructure).uint8,
      vertBearingX: $parcel$interopDefault($lzfo4$restructure).int8,
      vertBearingY: $parcel$interopDefault($lzfo4$restructure).int8,
      vertAdvance: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $57be5e4dbfc12b37$export$62c53e75f69bfe12 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      height: $parcel$interopDefault($lzfo4$restructure).uint8,
      width: $parcel$interopDefault($lzfo4$restructure).uint8,
      bearingX: $parcel$interopDefault($lzfo4$restructure).int8,
      bearingY: $parcel$interopDefault($lzfo4$restructure).int8,
      advance: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $57be5e4dbfc12b37$var$EBDTComponent = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyph: $parcel$interopDefault($lzfo4$restructure).uint16,
      xOffset: $parcel$interopDefault($lzfo4$restructure).int8,
      yOffset: $parcel$interopDefault($lzfo4$restructure).int8
    });
    var $57be5e4dbfc12b37$var$ByteAligned = class {
    };
    var $57be5e4dbfc12b37$var$BitAligned = class {
    };
    var $57be5e4dbfc12b37$export$f1f5ddeb20d14f = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("version", {
      1: {
        metrics: $57be5e4dbfc12b37$export$62c53e75f69bfe12,
        data: $57be5e4dbfc12b37$var$ByteAligned
      },
      2: {
        metrics: $57be5e4dbfc12b37$export$62c53e75f69bfe12,
        data: $57be5e4dbfc12b37$var$BitAligned
      },
      // format 3 is deprecated
      // format 4 is not supported by Microsoft
      5: {
        data: $57be5e4dbfc12b37$var$BitAligned
      },
      6: {
        metrics: $57be5e4dbfc12b37$export$16b227cb15d716a0,
        data: $57be5e4dbfc12b37$var$ByteAligned
      },
      7: {
        metrics: $57be5e4dbfc12b37$export$16b227cb15d716a0,
        data: $57be5e4dbfc12b37$var$BitAligned
      },
      8: {
        metrics: $57be5e4dbfc12b37$export$62c53e75f69bfe12,
        pad: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint8),
        numComponents: $parcel$interopDefault($lzfo4$restructure).uint16,
        components: new ($parcel$interopDefault($lzfo4$restructure)).Array($57be5e4dbfc12b37$var$EBDTComponent, "numComponents")
      },
      9: {
        metrics: $57be5e4dbfc12b37$export$16b227cb15d716a0,
        pad: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint8),
        numComponents: $parcel$interopDefault($lzfo4$restructure).uint16,
        components: new ($parcel$interopDefault($lzfo4$restructure)).Array($57be5e4dbfc12b37$var$EBDTComponent, "numComponents")
      },
      17: {
        metrics: $57be5e4dbfc12b37$export$62c53e75f69bfe12,
        dataLen: $parcel$interopDefault($lzfo4$restructure).uint32,
        data: new ($parcel$interopDefault($lzfo4$restructure)).Buffer("dataLen")
      },
      18: {
        metrics: $57be5e4dbfc12b37$export$16b227cb15d716a0,
        dataLen: $parcel$interopDefault($lzfo4$restructure).uint32,
        data: new ($parcel$interopDefault($lzfo4$restructure)).Buffer("dataLen")
      },
      19: {
        dataLen: $parcel$interopDefault($lzfo4$restructure).uint32,
        data: new ($parcel$interopDefault($lzfo4$restructure)).Buffer("dataLen")
      }
    });
    var $415d3f0073d22090$var$SBitLineMetrics = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      ascender: $parcel$interopDefault($lzfo4$restructure).int8,
      descender: $parcel$interopDefault($lzfo4$restructure).int8,
      widthMax: $parcel$interopDefault($lzfo4$restructure).uint8,
      caretSlopeNumerator: $parcel$interopDefault($lzfo4$restructure).int8,
      caretSlopeDenominator: $parcel$interopDefault($lzfo4$restructure).int8,
      caretOffset: $parcel$interopDefault($lzfo4$restructure).int8,
      minOriginSB: $parcel$interopDefault($lzfo4$restructure).int8,
      minAdvanceSB: $parcel$interopDefault($lzfo4$restructure).int8,
      maxBeforeBL: $parcel$interopDefault($lzfo4$restructure).int8,
      minAfterBL: $parcel$interopDefault($lzfo4$restructure).int8,
      pad: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).int8, 2)
    });
    var $415d3f0073d22090$var$CodeOffsetPair = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyphCode: $parcel$interopDefault($lzfo4$restructure).uint16,
      offset: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $415d3f0073d22090$var$IndexSubtable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      header: {
        imageFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        imageDataOffset: $parcel$interopDefault($lzfo4$restructure).uint32
      },
      1: {
        offsetArray: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint32,
          (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
        )
      },
      2: {
        imageSize: $parcel$interopDefault($lzfo4$restructure).uint32,
        bigMetrics: $57be5e4dbfc12b37$export$16b227cb15d716a0
      },
      3: {
        offsetArray: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint16,
          (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
        )
      },
      4: {
        numGlyphs: $parcel$interopDefault($lzfo4$restructure).uint32,
        glyphArray: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $415d3f0073d22090$var$CodeOffsetPair,
          (t) => t.numGlyphs + 1
        )
      },
      5: {
        imageSize: $parcel$interopDefault($lzfo4$restructure).uint32,
        bigMetrics: $57be5e4dbfc12b37$export$16b227cb15d716a0,
        numGlyphs: $parcel$interopDefault($lzfo4$restructure).uint32,
        glyphCodeArray: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numGlyphs")
      }
    });
    var $415d3f0073d22090$var$IndexSubtableArray = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      firstGlyphIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      lastGlyphIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      subtable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $415d3f0073d22090$var$IndexSubtable)
    });
    var $415d3f0073d22090$var$BitmapSizeTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      indexSubTableArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($415d3f0073d22090$var$IndexSubtableArray, 1), {
        type: "parent"
      }),
      indexTablesSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      numberOfIndexSubTables: $parcel$interopDefault($lzfo4$restructure).uint32,
      colorRef: $parcel$interopDefault($lzfo4$restructure).uint32,
      hori: $415d3f0073d22090$var$SBitLineMetrics,
      vert: $415d3f0073d22090$var$SBitLineMetrics,
      startGlyphIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      endGlyphIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      ppemX: $parcel$interopDefault($lzfo4$restructure).uint8,
      ppemY: $parcel$interopDefault($lzfo4$restructure).uint8,
      bitDepth: $parcel$interopDefault($lzfo4$restructure).uint8,
      flags: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint8, [
        "horizontal",
        "vertical"
      ])
    });
    var $415d3f0073d22090$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint32,
      numSizes: $parcel$interopDefault($lzfo4$restructure).uint32,
      sizes: new ($parcel$interopDefault($lzfo4$restructure)).Array($415d3f0073d22090$var$BitmapSizeTable, "numSizes")
    });
    var $95fc167908565fc1$var$ImageTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      ppem: $parcel$interopDefault($lzfo4$restructure).uint16,
      resolution: $parcel$interopDefault($lzfo4$restructure).uint16,
      imageOffsets: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, "void"),
        (t) => t.parent.parent.maxp.numGlyphs + 1
      )
    });
    var $95fc167908565fc1$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      flags: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
        "renderOutlines"
      ]),
      numImgTables: $parcel$interopDefault($lzfo4$restructure).uint32,
      imageTables: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $95fc167908565fc1$var$ImageTable), "numImgTables")
    });
    var $ee5a058727c0db64$var$LayerRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      gid: $parcel$interopDefault($lzfo4$restructure).uint16,
      paletteIndex: $parcel$interopDefault($lzfo4$restructure).uint16
      // Index value to use in the appropriate palette. This value must
    });
    var $ee5a058727c0db64$var$BaseGlyphRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      gid: $parcel$interopDefault($lzfo4$restructure).uint16,
      // and is not rendered for color.
      firstLayerIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      // There will be numLayers consecutive entries for this base glyph.
      numLayers: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $ee5a058727c0db64$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numBaseGlyphRecords: $parcel$interopDefault($lzfo4$restructure).uint16,
      baseGlyphRecord: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($ee5a058727c0db64$var$BaseGlyphRecord, "numBaseGlyphRecords")),
      layerRecords: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($ee5a058727c0db64$var$LayerRecord, "numLayerRecords"), {
        lazy: true
      }),
      numLayerRecords: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $23ee004c2c56be61$var$ColorRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      blue: $parcel$interopDefault($lzfo4$restructure).uint8,
      green: $parcel$interopDefault($lzfo4$restructure).uint8,
      red: $parcel$interopDefault($lzfo4$restructure).uint8,
      alpha: $parcel$interopDefault($lzfo4$restructure).uint8
    });
    var $23ee004c2c56be61$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      header: {
        numPaletteEntries: $parcel$interopDefault($lzfo4$restructure).uint16,
        numPalettes: $parcel$interopDefault($lzfo4$restructure).uint16,
        numColorRecords: $parcel$interopDefault($lzfo4$restructure).uint16,
        colorRecords: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($23ee004c2c56be61$var$ColorRecord, "numColorRecords")),
        colorRecordIndices: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numPalettes")
      },
      0: {},
      1: {
        offsetPaletteTypeArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, "numPalettes")),
        offsetPaletteLabelArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numPalettes")),
        offsetPaletteEntryLabelArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numPaletteEntries"))
      }
    });
    var $4745757aab3ee679$var$BaseCoord = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        coordinate: $parcel$interopDefault($lzfo4$restructure).int16
        // X or Y value, in design units
      },
      2: {
        coordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        referenceGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        baseCoordPoint: $parcel$interopDefault($lzfo4$restructure).uint16
        // Index of contour point on the referenceGlyph
      },
      3: {
        coordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        deviceTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10)
        // Device table for X or Y value
      }
    });
    var $4745757aab3ee679$var$BaseValues = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      defaultIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      baseCoordCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      baseCoords: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseCoord), "baseCoordCount")
    });
    var $4745757aab3ee679$var$FeatMinMaxRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      minCoord: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseCoord, {
        type: "parent"
      }),
      maxCoord: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseCoord, {
        type: "parent"
      })
      // May be NULL
    });
    var $4745757aab3ee679$var$MinMax = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      minCoord: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseCoord),
      maxCoord: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseCoord),
      featMinMaxCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      featMinMaxRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($4745757aab3ee679$var$FeatMinMaxRecord, "featMinMaxCount")
      // In alphabetical order
    });
    var $4745757aab3ee679$var$BaseLangSysRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      minMax: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$MinMax, {
        type: "parent"
      })
    });
    var $4745757aab3ee679$var$BaseScript = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      baseValues: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseValues),
      defaultMinMax: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$MinMax),
      baseLangSysCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      baseLangSysRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($4745757aab3ee679$var$BaseLangSysRecord, "baseLangSysCount")
      // in alphabetical order by BaseLangSysTag
    });
    var $4745757aab3ee679$var$BaseScriptRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      script: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseScript, {
        type: "parent"
      })
    });
    var $4745757aab3ee679$var$BaseScriptList = new ($parcel$interopDefault($lzfo4$restructure)).Array($4745757aab3ee679$var$BaseScriptRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $4745757aab3ee679$var$BaseTagList = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).String(4), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $4745757aab3ee679$var$Axis = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      baseTagList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseTagList),
      baseScriptList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$BaseScriptList)
    });
    var $4745757aab3ee679$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint32, {
      header: {
        horizAxis: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$Axis),
        vertAxis: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $4745757aab3ee679$var$Axis)
        // May be NULL
      },
      65536: {},
      65537: {
        itemVariationStore: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$export$fe1b122a2710f241)
      }
    });
    var $e587dbe605efb582$var$AttachPoint = new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $e587dbe605efb582$var$AttachList = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
      glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      attachPoints: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$AttachPoint), "glyphCount")
    });
    var $e587dbe605efb582$var$CaretValue = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        coordinate: $parcel$interopDefault($lzfo4$restructure).int16
      },
      2: {
        caretValuePoint: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      3: {
        coordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        deviceTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10)
      }
    });
    var $e587dbe605efb582$var$LigGlyph = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$CaretValue), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $e587dbe605efb582$var$LigCaretList = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
      ligGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      ligGlyphs: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$LigGlyph), "ligGlyphCount")
    });
    var $e587dbe605efb582$var$MarkGlyphSetsDef = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      markSetTableFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
      markSetCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      coverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $02fa1fdbd31163f6$export$17608c3f81a6111), "markSetCount")
    });
    var $e587dbe605efb582$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint32, {
      header: {
        glyphClassDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
        attachList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$AttachList),
        ligCaretList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$LigCaretList),
        markAttachClassDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71)
      },
      65536: {},
      65538: {
        markGlyphSetsDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$MarkGlyphSetsDef)
      },
      65539: {
        markGlyphSetsDef: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e587dbe605efb582$var$MarkGlyphSetsDef),
        itemVariationStore: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$export$fe1b122a2710f241)
      }
    });
    var $68e365289aac05c8$var$ValueFormat = new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
      "xPlacement",
      "yPlacement",
      "xAdvance",
      "yAdvance",
      "xPlaDevice",
      "yPlaDevice",
      "xAdvDevice",
      "yAdvDevice"
    ]);
    var $68e365289aac05c8$var$types = {
      xPlacement: $parcel$interopDefault($lzfo4$restructure).int16,
      yPlacement: $parcel$interopDefault($lzfo4$restructure).int16,
      xAdvance: $parcel$interopDefault($lzfo4$restructure).int16,
      yAdvance: $parcel$interopDefault($lzfo4$restructure).int16,
      xPlaDevice: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10, {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      yPlaDevice: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10, {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      xAdvDevice: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10, {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      }),
      yAdvDevice: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10, {
        type: "global",
        relativeTo: (ctx) => ctx.rel
      })
    };
    var $68e365289aac05c8$var$ValueRecord = class {
      buildStruct(parent) {
        let struct = parent;
        while (!struct[this.key] && struct.parent)
          struct = struct.parent;
        if (!struct[this.key])
          return;
        let fields = {};
        fields.rel = () => struct._startOffset;
        let format = struct[this.key];
        for (let key in format)
          if (format[key])
            fields[key] = $68e365289aac05c8$var$types[key];
        return new ($parcel$interopDefault($lzfo4$restructure)).Struct(fields);
      }
      size(val, ctx) {
        return this.buildStruct(ctx).size(val, ctx);
      }
      decode(stream, parent) {
        let res = this.buildStruct(parent).decode(stream, parent);
        delete res.rel;
        return res;
      }
      constructor(key = "valueFormat") {
        this.key = key;
      }
    };
    var $68e365289aac05c8$var$PairValueRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      secondGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
      value1: new $68e365289aac05c8$var$ValueRecord("valueFormat1"),
      value2: new $68e365289aac05c8$var$ValueRecord("valueFormat2")
    });
    var $68e365289aac05c8$var$PairSet = new ($parcel$interopDefault($lzfo4$restructure)).Array($68e365289aac05c8$var$PairValueRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $68e365289aac05c8$var$Class2Record = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      value1: new $68e365289aac05c8$var$ValueRecord("valueFormat1"),
      value2: new $68e365289aac05c8$var$ValueRecord("valueFormat2")
    });
    var $68e365289aac05c8$var$Anchor = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      1: {
        xCoordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        yCoordinate: $parcel$interopDefault($lzfo4$restructure).int16
      },
      2: {
        xCoordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        yCoordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        anchorPoint: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      3: {
        xCoordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        yCoordinate: $parcel$interopDefault($lzfo4$restructure).int16,
        xDeviceTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10),
        yDeviceTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$8215d14a63d9fb10)
      }
    });
    var $68e365289aac05c8$var$EntryExitRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      entryAnchor: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$Anchor, {
        type: "parent"
      }),
      exitAnchor: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$Anchor, {
        type: "parent"
      })
    });
    var $68e365289aac05c8$var$MarkRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      class: $parcel$interopDefault($lzfo4$restructure).uint16,
      markAnchor: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$Anchor, {
        type: "parent"
      })
    });
    var $68e365289aac05c8$var$MarkArray = new ($parcel$interopDefault($lzfo4$restructure)).Array($68e365289aac05c8$var$MarkRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $68e365289aac05c8$var$BaseRecord = new ($parcel$interopDefault($lzfo4$restructure)).Array(
      new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$Anchor),
      (t) => t.parent.classCount
    );
    var $68e365289aac05c8$var$BaseArray = new ($parcel$interopDefault($lzfo4$restructure)).Array($68e365289aac05c8$var$BaseRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $68e365289aac05c8$var$ComponentRecord = new ($parcel$interopDefault($lzfo4$restructure)).Array(
      new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$Anchor),
      (t) => t.parent.parent.classCount
    );
    var $68e365289aac05c8$var$LigatureAttach = new ($parcel$interopDefault($lzfo4$restructure)).Array($68e365289aac05c8$var$ComponentRecord, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $68e365289aac05c8$var$LigatureArray = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$LigatureAttach), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $68e365289aac05c8$export$73a8cfb19cd43a0f = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("lookupType", {
      1: new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
        1: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          valueFormat: $68e365289aac05c8$var$ValueFormat,
          value: new $68e365289aac05c8$var$ValueRecord()
        },
        2: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          valueFormat: $68e365289aac05c8$var$ValueFormat,
          valueCount: $parcel$interopDefault($lzfo4$restructure).uint16,
          values: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new $68e365289aac05c8$var$ValueRecord(), "valueCount")
        }
      }),
      2: new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
        1: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          valueFormat1: $68e365289aac05c8$var$ValueFormat,
          valueFormat2: $68e365289aac05c8$var$ValueFormat,
          pairSetCount: $parcel$interopDefault($lzfo4$restructure).uint16,
          pairSets: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$PairSet), "pairSetCount")
        },
        2: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          valueFormat1: $68e365289aac05c8$var$ValueFormat,
          valueFormat2: $68e365289aac05c8$var$ValueFormat,
          classDef1: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
          classDef2: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$843d551fbbafef71),
          class1Count: $parcel$interopDefault($lzfo4$restructure).uint16,
          class2Count: $parcel$interopDefault($lzfo4$restructure).uint16,
          classRecords: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($68e365289aac05c8$var$Class2Record, "class2Count"), "class1Count")
        }
      }),
      3: {
        format: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        entryExitCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        entryExitRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($68e365289aac05c8$var$EntryExitRecord, "entryExitCount")
      },
      4: {
        format: $parcel$interopDefault($lzfo4$restructure).uint16,
        markCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        baseCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        classCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        markArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$MarkArray),
        baseArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$BaseArray)
      },
      5: {
        format: $parcel$interopDefault($lzfo4$restructure).uint16,
        markCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        ligatureCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        classCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        markArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$MarkArray),
        ligatureArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$LigatureArray)
      },
      6: {
        format: $parcel$interopDefault($lzfo4$restructure).uint16,
        mark1Coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        mark2Coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        classCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        mark1Array: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$MarkArray),
        mark2Array: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $68e365289aac05c8$var$BaseArray)
      },
      7: $02fa1fdbd31163f6$export$841858b892ce1f4c,
      8: $02fa1fdbd31163f6$export$5e6d09e6861162f6,
      9: {
        posFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookupType: $parcel$interopDefault($lzfo4$restructure).uint16,
        extension: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, null)
      }
    });
    $68e365289aac05c8$export$73a8cfb19cd43a0f.versions[9].extension.type = $68e365289aac05c8$export$73a8cfb19cd43a0f;
    var $68e365289aac05c8$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint32, {
      header: {
        scriptList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$3e15fc05ce864229),
        featureList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$aa18130def4b6cb4),
        lookupList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new $02fa1fdbd31163f6$export$df0008c6ff2da22a($68e365289aac05c8$export$73a8cfb19cd43a0f))
      },
      65536: {},
      65537: {
        featureVariations: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$export$441b70b7971dd419)
      }
    });
    var $1303c4861d36d148$var$Sequence = new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $1303c4861d36d148$var$AlternateSet = $1303c4861d36d148$var$Sequence;
    var $1303c4861d36d148$var$Ligature = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      glyph: $parcel$interopDefault($lzfo4$restructure).uint16,
      compCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      components: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.compCount - 1
      )
    });
    var $1303c4861d36d148$var$LigatureSet = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $1303c4861d36d148$var$Ligature), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $1303c4861d36d148$var$GSUBLookup = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("lookupType", {
      1: new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
        1: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          deltaGlyphID: $parcel$interopDefault($lzfo4$restructure).int16
        },
        2: {
          coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
          glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
          substitute: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).uint16, "glyphCount")
        }
      }),
      2: {
        substFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        count: $parcel$interopDefault($lzfo4$restructure).uint16,
        sequences: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $1303c4861d36d148$var$Sequence), "count")
      },
      3: {
        substFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        count: $parcel$interopDefault($lzfo4$restructure).uint16,
        alternateSet: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $1303c4861d36d148$var$AlternateSet), "count")
      },
      4: {
        substFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        count: $parcel$interopDefault($lzfo4$restructure).uint16,
        ligatureSets: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $1303c4861d36d148$var$LigatureSet), "count")
      },
      5: $02fa1fdbd31163f6$export$841858b892ce1f4c,
      6: $02fa1fdbd31163f6$export$5e6d09e6861162f6,
      7: {
        substFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookupType: $parcel$interopDefault($lzfo4$restructure).uint16,
        extension: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, null)
      },
      8: {
        substFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111),
        backtrackCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "backtrackGlyphCount"),
        lookaheadGlyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        lookaheadCoverage: new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$17608c3f81a6111), "lookaheadGlyphCount"),
        glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        substitutes: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "glyphCount")
      }
    });
    $1303c4861d36d148$var$GSUBLookup.versions[7].extension.type = $1303c4861d36d148$var$GSUBLookup;
    var $1303c4861d36d148$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint32, {
      header: {
        scriptList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$3e15fc05ce864229),
        featureList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $02fa1fdbd31163f6$export$aa18130def4b6cb4),
        lookupList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new $02fa1fdbd31163f6$export$df0008c6ff2da22a($1303c4861d36d148$var$GSUBLookup))
      },
      65536: {},
      65537: {
        featureVariations: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$export$441b70b7971dd419)
      }
    });
    var $a27d24eee1e03991$var$JstfGSUBModList = new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, $parcel$interopDefault($lzfo4$restructure).uint16);
    var $a27d24eee1e03991$var$JstfPriority = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      shrinkageEnableGSUB: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      shrinkageDisableGSUB: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      shrinkageEnableGPOS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      shrinkageDisableGPOS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      shrinkageJstfMax: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new $02fa1fdbd31163f6$export$df0008c6ff2da22a($68e365289aac05c8$export$73a8cfb19cd43a0f)),
      extensionEnableGSUB: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      extensionDisableGSUB: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      extensionEnableGPOS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      extensionDisableGPOS: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfGSUBModList),
      extensionJstfMax: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new $02fa1fdbd31163f6$export$df0008c6ff2da22a($68e365289aac05c8$export$73a8cfb19cd43a0f))
    });
    var $a27d24eee1e03991$var$JstfLangSys = new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfPriority), $parcel$interopDefault($lzfo4$restructure).uint16);
    var $a27d24eee1e03991$var$JstfLangSysRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      jstfLangSys: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfLangSys)
    });
    var $a27d24eee1e03991$var$JstfScript = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      extenderGlyphs: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, $parcel$interopDefault($lzfo4$restructure).uint16)),
      defaultLangSys: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfLangSys),
      langSysCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      langSysRecords: new ($parcel$interopDefault($lzfo4$restructure)).Array($a27d24eee1e03991$var$JstfLangSysRecord, "langSysCount")
    });
    var $a27d24eee1e03991$var$JstfScriptRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      script: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $a27d24eee1e03991$var$JstfScript, {
        type: "parent"
      })
    });
    var $a27d24eee1e03991$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint32,
      scriptCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      scriptList: new ($parcel$interopDefault($lzfo4$restructure)).Array($a27d24eee1e03991$var$JstfScriptRecord, "scriptCount")
    });
    var $2d882978d51e3645$var$VariableSizeNumber = class {
      decode(stream, parent) {
        switch (this.size(0, parent)) {
          case 1:
            return stream.readUInt8();
          case 2:
            return stream.readUInt16BE();
          case 3:
            return stream.readUInt24BE();
          case 4:
            return stream.readUInt32BE();
        }
      }
      size(val, parent) {
        return $lzfo4$restructuresrcutilsjs.resolveLength(this._size, null, parent);
      }
      constructor(size) {
        this._size = size;
      }
    };
    var $2d882978d51e3645$var$MapDataEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      entry: new $2d882978d51e3645$var$VariableSizeNumber(
        (t) => ((t.parent.entryFormat & 48) >> 4) + 1
      ),
      outerIndex: (t) => t.entry >> (t.parent.entryFormat & 15) + 1,
      innerIndex: (t) => t.entry & (1 << (t.parent.entryFormat & 15) + 1) - 1
    });
    var $2d882978d51e3645$var$DeltaSetIndexMap = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      entryFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
      mapCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      mapData: new ($parcel$interopDefault($lzfo4$restructure)).Array($2d882978d51e3645$var$MapDataEntry, "mapCount")
    });
    var $2d882978d51e3645$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      majorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      minorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      itemVariationStore: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $f7d48077c0582beb$export$fe1b122a2710f241),
      advanceWidthMapping: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $2d882978d51e3645$var$DeltaSetIndexMap),
      LSBMapping: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $2d882978d51e3645$var$DeltaSetIndexMap),
      RSBMapping: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $2d882978d51e3645$var$DeltaSetIndexMap)
    });
    var $116b2de32b06b858$var$Signature = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      format: $parcel$interopDefault($lzfo4$restructure).uint32,
      length: $parcel$interopDefault($lzfo4$restructure).uint32,
      offset: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $116b2de32b06b858$var$SignatureBlock = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16, 2),
      cbSignature: $parcel$interopDefault($lzfo4$restructure).uint32,
      signature: new ($parcel$interopDefault($lzfo4$restructure)).Buffer("cbSignature")
    });
    var $116b2de32b06b858$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      ulVersion: $parcel$interopDefault($lzfo4$restructure).uint32,
      usNumSigs: $parcel$interopDefault($lzfo4$restructure).uint16,
      usFlag: $parcel$interopDefault($lzfo4$restructure).uint16,
      signatures: new ($parcel$interopDefault($lzfo4$restructure)).Array($116b2de32b06b858$var$Signature, "usNumSigs"),
      signatureBlocks: new ($parcel$interopDefault($lzfo4$restructure)).Array($116b2de32b06b858$var$SignatureBlock, "usNumSigs")
    });
    var $7dc81c3b51e4c43a$var$GaspRange = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      rangeMaxPPEM: $parcel$interopDefault($lzfo4$restructure).uint16,
      rangeGaspBehavior: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint16, [
        "grayscale",
        "gridfit",
        "symmetricSmoothing",
        "symmetricGridfit"
        // only in version 1, for ClearType
      ])
    });
    var $7dc81c3b51e4c43a$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numRanges: $parcel$interopDefault($lzfo4$restructure).uint16,
      gaspRanges: new ($parcel$interopDefault($lzfo4$restructure)).Array($7dc81c3b51e4c43a$var$GaspRange, "numRanges")
      // Sorted by ppem
    });
    var $5bcc7800bd7e22c5$var$DeviceRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      pixelSize: $parcel$interopDefault($lzfo4$restructure).uint8,
      maximumWidth: $parcel$interopDefault($lzfo4$restructure).uint8,
      widths: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint8,
        (t) => t.parent.parent.maxp.numGlyphs
      )
    });
    var $5bcc7800bd7e22c5$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numRecords: $parcel$interopDefault($lzfo4$restructure).int16,
      sizeDeviceRecord: $parcel$interopDefault($lzfo4$restructure).int32,
      records: new ($parcel$interopDefault($lzfo4$restructure)).Array($5bcc7800bd7e22c5$var$DeviceRecord, "numRecords")
    });
    var $21356b986524a925$var$KernPair = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      left: $parcel$interopDefault($lzfo4$restructure).uint16,
      right: $parcel$interopDefault($lzfo4$restructure).uint16,
      value: $parcel$interopDefault($lzfo4$restructure).int16
    });
    var $21356b986524a925$var$ClassTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      firstGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
      nGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
      offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "nGlyphs"),
      max: (t) => t.offsets.length && Math.max.apply(Math, t.offsets)
    });
    var $21356b986524a925$var$Kern2Array = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      off: (t) => t._startOffset - t.parent.parent._startOffset,
      len: (t) => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),
      values: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray($parcel$interopDefault($lzfo4$restructure).int16, "len")
    });
    var $21356b986524a925$var$KernSubtable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("format", {
      0: {
        nPairs: $parcel$interopDefault($lzfo4$restructure).uint16,
        searchRange: $parcel$interopDefault($lzfo4$restructure).uint16,
        entrySelector: $parcel$interopDefault($lzfo4$restructure).uint16,
        rangeShift: $parcel$interopDefault($lzfo4$restructure).uint16,
        pairs: new ($parcel$interopDefault($lzfo4$restructure)).Array($21356b986524a925$var$KernPair, "nPairs")
      },
      2: {
        rowWidth: $parcel$interopDefault($lzfo4$restructure).uint16,
        leftTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $21356b986524a925$var$ClassTable, {
          type: "parent"
        }),
        rightTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $21356b986524a925$var$ClassTable, {
          type: "parent"
        }),
        array: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $21356b986524a925$var$Kern2Array, {
          type: "parent"
        })
      },
      3: {
        glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
        kernValueCount: $parcel$interopDefault($lzfo4$restructure).uint8,
        leftClassCount: $parcel$interopDefault($lzfo4$restructure).uint8,
        rightClassCount: $parcel$interopDefault($lzfo4$restructure).uint8,
        flags: $parcel$interopDefault($lzfo4$restructure).uint8,
        kernValue: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int16, "kernValueCount"),
        leftClass: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, "glyphCount"),
        rightClass: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, "glyphCount"),
        kernIndex: new ($parcel$interopDefault($lzfo4$restructure)).Array(
          $parcel$interopDefault($lzfo4$restructure).uint8,
          (t) => t.leftClassCount * t.rightClassCount
        )
      }
    });
    var $21356b986524a925$var$KernTable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("version", {
      0: {
        subVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
        length: $parcel$interopDefault($lzfo4$restructure).uint16,
        format: $parcel$interopDefault($lzfo4$restructure).uint8,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint8, [
          "horizontal",
          "minimum",
          "crossStream",
          "override"
          // If set to 1 the value in this table replaces the accumulated value
        ]),
        subtable: $21356b986524a925$var$KernSubtable,
        padding: new ($parcel$interopDefault($lzfo4$restructure)).Reserved(
          $parcel$interopDefault($lzfo4$restructure).uint8,
          (t) => t.length - t._currentOffset
        )
      },
      1: {
        length: $parcel$interopDefault($lzfo4$restructure).uint32,
        coverage: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint8, [
          null,
          null,
          null,
          null,
          null,
          "variation",
          "crossStream",
          "vertical"
          // Set if table has vertical kerning values
        ]),
        format: $parcel$interopDefault($lzfo4$restructure).uint8,
        tupleIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
        subtable: $21356b986524a925$var$KernSubtable,
        padding: new ($parcel$interopDefault($lzfo4$restructure)).Reserved(
          $parcel$interopDefault($lzfo4$restructure).uint8,
          (t) => t.length - t._currentOffset
        )
      }
    });
    var $21356b986524a925$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
      0: {
        nTables: $parcel$interopDefault($lzfo4$restructure).uint16,
        tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($21356b986524a925$var$KernTable, "nTables")
      },
      1: {
        reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
        nTables: $parcel$interopDefault($lzfo4$restructure).uint32,
        tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($21356b986524a925$var$KernTable, "nTables")
      }
    });
    var $c7bc0d0d5cc6d685$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
      yPels: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, "numGlyphs")
    });
    var $8bee01cf059cb725$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      fontNumber: $parcel$interopDefault($lzfo4$restructure).uint32,
      pitch: $parcel$interopDefault($lzfo4$restructure).uint16,
      xHeight: $parcel$interopDefault($lzfo4$restructure).uint16,
      style: $parcel$interopDefault($lzfo4$restructure).uint16,
      typeFamily: $parcel$interopDefault($lzfo4$restructure).uint16,
      capHeight: $parcel$interopDefault($lzfo4$restructure).uint16,
      symbolSet: $parcel$interopDefault($lzfo4$restructure).uint16,
      typeface: new ($parcel$interopDefault($lzfo4$restructure)).String(16),
      characterComplement: new ($parcel$interopDefault($lzfo4$restructure)).String(8),
      fileName: new ($parcel$interopDefault($lzfo4$restructure)).String(6),
      strokeWeight: new ($parcel$interopDefault($lzfo4$restructure)).String(1),
      widthType: new ($parcel$interopDefault($lzfo4$restructure)).String(1),
      serifStyle: $parcel$interopDefault($lzfo4$restructure).uint8,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint8)
    });
    var $fcf1a0f1b278e42d$var$Ratio = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      bCharSet: $parcel$interopDefault($lzfo4$restructure).uint8,
      xRatio: $parcel$interopDefault($lzfo4$restructure).uint8,
      yStartRatio: $parcel$interopDefault($lzfo4$restructure).uint8,
      yEndRatio: $parcel$interopDefault($lzfo4$restructure).uint8
      // Ending y-Ratio value
    });
    var $fcf1a0f1b278e42d$var$vTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      yPelHeight: $parcel$interopDefault($lzfo4$restructure).uint16,
      yMax: $parcel$interopDefault($lzfo4$restructure).int16,
      yMin: $parcel$interopDefault($lzfo4$restructure).int16
      // Minimum value (in pels) for this yPelHeight
    });
    var $fcf1a0f1b278e42d$var$VdmxGroup = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      recs: $parcel$interopDefault($lzfo4$restructure).uint16,
      startsz: $parcel$interopDefault($lzfo4$restructure).uint8,
      endsz: $parcel$interopDefault($lzfo4$restructure).uint8,
      entries: new ($parcel$interopDefault($lzfo4$restructure)).Array($fcf1a0f1b278e42d$var$vTable, "recs")
      // The VDMX records
    });
    var $fcf1a0f1b278e42d$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      numRecs: $parcel$interopDefault($lzfo4$restructure).uint16,
      numRatios: $parcel$interopDefault($lzfo4$restructure).uint16,
      ratioRanges: new ($parcel$interopDefault($lzfo4$restructure)).Array($fcf1a0f1b278e42d$var$Ratio, "numRatios"),
      offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numRatios"),
      groups: new ($parcel$interopDefault($lzfo4$restructure)).Array($fcf1a0f1b278e42d$var$VdmxGroup, "numRecs")
      // The actual VDMX groupings
    });
    var $6b7dea390387f6ff$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      ascent: $parcel$interopDefault($lzfo4$restructure).int16,
      descent: $parcel$interopDefault($lzfo4$restructure).int16,
      lineGap: $parcel$interopDefault($lzfo4$restructure).int16,
      advanceHeightMax: $parcel$interopDefault($lzfo4$restructure).int16,
      minTopSideBearing: $parcel$interopDefault($lzfo4$restructure).int16,
      minBottomSideBearing: $parcel$interopDefault($lzfo4$restructure).int16,
      yMaxExtent: $parcel$interopDefault($lzfo4$restructure).int16,
      caretSlopeRise: $parcel$interopDefault($lzfo4$restructure).int16,
      caretSlopeRun: $parcel$interopDefault($lzfo4$restructure).int16,
      caretOffset: $parcel$interopDefault($lzfo4$restructure).int16,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).int16, 4),
      metricDataFormat: $parcel$interopDefault($lzfo4$restructure).int16,
      numberOfMetrics: $parcel$interopDefault($lzfo4$restructure).uint16
      // Number of advance heights in the Vertical Metrics table
    });
    var $1cd1ccbdfeff8d2f$var$VmtxEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      advance: $parcel$interopDefault($lzfo4$restructure).uint16,
      bearing: $parcel$interopDefault($lzfo4$restructure).int16
      // The top sidebearing of the glyph
    });
    var $1cd1ccbdfeff8d2f$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      metrics: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(
        $1cd1ccbdfeff8d2f$var$VmtxEntry,
        (t) => t.parent.vhea.numberOfMetrics
      ),
      bearings: new ($parcel$interopDefault($lzfo4$restructure)).LazyArray(
        $parcel$interopDefault($lzfo4$restructure).int16,
        (t) => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics
      )
    });
    var $2b61ce22494b8a7d$var$shortFrac = new ($parcel$interopDefault($lzfo4$restructure)).Fixed(16, "BE", 14);
    var $2b61ce22494b8a7d$var$Correspondence = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      fromCoord: $2b61ce22494b8a7d$var$shortFrac,
      toCoord: $2b61ce22494b8a7d$var$shortFrac
    });
    var $2b61ce22494b8a7d$var$Segment = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      pairCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      correspondence: new ($parcel$interopDefault($lzfo4$restructure)).Array($2b61ce22494b8a7d$var$Correspondence, "pairCount")
    });
    var $2b61ce22494b8a7d$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      axisCount: $parcel$interopDefault($lzfo4$restructure).uint32,
      segment: new ($parcel$interopDefault($lzfo4$restructure)).Array($2b61ce22494b8a7d$var$Segment, "axisCount")
    });
    var $ad5453f9e5579f22$var$UnboundedArrayAccessor = class {
      getItem(index) {
        if (this._items[index] == null) {
          let pos = this.stream.pos;
          this.stream.pos = this.base + this.type.size(null, this.parent) * index;
          this._items[index] = this.type.decode(this.stream, this.parent);
          this.stream.pos = pos;
        }
        return this._items[index];
      }
      inspect() {
        return `[UnboundedArray ${this.type.constructor.name}]`;
      }
      constructor(type, stream, parent) {
        this.type = type;
        this.stream = stream;
        this.parent = parent;
        this.base = this.stream.pos;
        this._items = [];
      }
    };
    var $ad5453f9e5579f22$export$c5af1eebc882e39a = class extends $parcel$interopDefault($lzfo4$restructure).Array {
      decode(stream, parent) {
        return new $ad5453f9e5579f22$var$UnboundedArrayAccessor(this.type, stream, parent);
      }
      constructor(type) {
        super(type, 0);
      }
    };
    var $ad5453f9e5579f22$export$8351f8c2ae2f103c = function(ValueType = $parcel$interopDefault($lzfo4$restructure).uint16) {
      class Shadow {
        decode(stream, ctx) {
          ctx = ctx.parent.parent;
          return this.type.decode(stream, ctx);
        }
        size(val, ctx) {
          ctx = ctx.parent.parent;
          return this.type.size(val, ctx);
        }
        encode(stream, val, ctx) {
          ctx = ctx.parent.parent;
          return this.type.encode(stream, val, ctx);
        }
        constructor(type) {
          this.type = type;
        }
      }
      ValueType = new Shadow(ValueType);
      let BinarySearchHeader = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        unitSize: $parcel$interopDefault($lzfo4$restructure).uint16,
        nUnits: $parcel$interopDefault($lzfo4$restructure).uint16,
        searchRange: $parcel$interopDefault($lzfo4$restructure).uint16,
        entrySelector: $parcel$interopDefault($lzfo4$restructure).uint16,
        rangeShift: $parcel$interopDefault($lzfo4$restructure).uint16
      });
      let LookupSegmentSingle = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        lastGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        firstGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        value: ValueType
      });
      let LookupSegmentArray = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        lastGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        firstGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        values: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new ($parcel$interopDefault($lzfo4$restructure)).Array(
          ValueType,
          (t) => t.lastGlyph - t.firstGlyph + 1
        ), {
          type: "parent"
        })
      });
      let LookupSingle = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        glyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        value: ValueType
      });
      return new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint16, {
        0: {
          values: new $ad5453f9e5579f22$export$c5af1eebc882e39a(ValueType)
          // length == number of glyphs maybe?
        },
        2: {
          binarySearchHeader: BinarySearchHeader,
          segments: new ($parcel$interopDefault($lzfo4$restructure)).Array(
            LookupSegmentSingle,
            (t) => t.binarySearchHeader.nUnits
          )
        },
        4: {
          binarySearchHeader: BinarySearchHeader,
          segments: new ($parcel$interopDefault($lzfo4$restructure)).Array(
            LookupSegmentArray,
            (t) => t.binarySearchHeader.nUnits
          )
        },
        6: {
          binarySearchHeader: BinarySearchHeader,
          segments: new ($parcel$interopDefault($lzfo4$restructure)).Array(
            LookupSingle,
            (t) => t.binarySearchHeader.nUnits
          )
        },
        8: {
          firstGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
          count: $parcel$interopDefault($lzfo4$restructure).uint16,
          values: new ($parcel$interopDefault($lzfo4$restructure)).Array(ValueType, "count")
        }
      });
    };
    function $ad5453f9e5579f22$export$79f7d93d790934ba(entryData = {}, lookupType = $parcel$interopDefault($lzfo4$restructure).uint16) {
      let entry = Object.assign({
        newState: $parcel$interopDefault($lzfo4$restructure).uint16,
        flags: $parcel$interopDefault($lzfo4$restructure).uint16
      }, entryData);
      let Entry = new ($parcel$interopDefault($lzfo4$restructure)).Struct(entry);
      let StateArray = new $ad5453f9e5579f22$export$c5af1eebc882e39a(new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.nClasses
      ));
      let StateHeader = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        nClasses: $parcel$interopDefault($lzfo4$restructure).uint32,
        classTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$8351f8c2ae2f103c(lookupType)),
        stateArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, StateArray),
        entryTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$c5af1eebc882e39a(Entry))
      });
      return StateHeader;
    }
    function $ad5453f9e5579f22$export$105027425199cc51(entryData = {}, lookupType = $parcel$interopDefault($lzfo4$restructure).uint16) {
      let ClassLookupTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        version() {
          return 8;
        },
        firstGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        values: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, $parcel$interopDefault($lzfo4$restructure).uint16)
      });
      let entry = Object.assign({
        newStateOffset: $parcel$interopDefault($lzfo4$restructure).uint16,
        // convert offset to stateArray index
        newState: (t) => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,
        flags: $parcel$interopDefault($lzfo4$restructure).uint16
      }, entryData);
      let Entry = new ($parcel$interopDefault($lzfo4$restructure)).Struct(entry);
      let StateArray = new $ad5453f9e5579f22$export$c5af1eebc882e39a(new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).uint8,
        (t) => t.nClasses
      ));
      let StateHeader1 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
        nClasses: $parcel$interopDefault($lzfo4$restructure).uint16,
        classTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, ClassLookupTable),
        stateArray: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, StateArray),
        entryTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new $ad5453f9e5579f22$export$c5af1eebc882e39a(Entry))
      });
      return StateHeader1;
    }
    var $d96812815f65600e$var$BslnSubtable = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("format", {
      0: {
        deltas: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int16, 32)
      },
      1: {
        deltas: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).int16, 32),
        mappingData: new $ad5453f9e5579f22$export$8351f8c2ae2f103c($parcel$interopDefault($lzfo4$restructure).uint16)
      },
      2: {
        standardGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        controlPoints: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, 32)
      },
      3: {
        standardGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        controlPoints: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, 32),
        mappingData: new $ad5453f9e5579f22$export$8351f8c2ae2f103c($parcel$interopDefault($lzfo4$restructure).uint16)
      }
    });
    var $d96812815f65600e$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      format: $parcel$interopDefault($lzfo4$restructure).uint16,
      defaultBaseline: $parcel$interopDefault($lzfo4$restructure).uint16,
      subtable: $d96812815f65600e$var$BslnSubtable
    });
    var $03d9c1eb48643b7a$var$Setting = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      setting: $parcel$interopDefault($lzfo4$restructure).uint16,
      nameIndex: $parcel$interopDefault($lzfo4$restructure).int16,
      name: (t) => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]
    });
    var $03d9c1eb48643b7a$var$FeatureName = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      feature: $parcel$interopDefault($lzfo4$restructure).uint16,
      nSettings: $parcel$interopDefault($lzfo4$restructure).uint16,
      settingTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array($03d9c1eb48643b7a$var$Setting, "nSettings"), {
        type: "parent"
      }),
      featureFlags: new ($parcel$interopDefault($lzfo4$restructure)).Bitfield($parcel$interopDefault($lzfo4$restructure).uint8, [
        null,
        null,
        null,
        null,
        null,
        null,
        "hasDefault",
        "exclusive"
      ]),
      defaultSetting: $parcel$interopDefault($lzfo4$restructure).uint8,
      nameIndex: $parcel$interopDefault($lzfo4$restructure).int16,
      name: (t) => t.parent.parent.name.records.fontFeatures[t.nameIndex]
    });
    var $03d9c1eb48643b7a$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      featureNameCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      reserved1: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      reserved2: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint32),
      featureNames: new ($parcel$interopDefault($lzfo4$restructure)).Array($03d9c1eb48643b7a$var$FeatureName, "featureNameCount")
    });
    var $2db446770962f79d$var$Axis = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      axisTag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      minValue: $parcel$interopDefault($lzfo4$restructure).fixed32,
      defaultValue: $parcel$interopDefault($lzfo4$restructure).fixed32,
      maxValue: $parcel$interopDefault($lzfo4$restructure).fixed32,
      flags: $parcel$interopDefault($lzfo4$restructure).uint16,
      nameID: $parcel$interopDefault($lzfo4$restructure).uint16,
      name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID]
    });
    var $2db446770962f79d$var$Instance = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      nameID: $parcel$interopDefault($lzfo4$restructure).uint16,
      name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID],
      flags: $parcel$interopDefault($lzfo4$restructure).uint16,
      coord: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $parcel$interopDefault($lzfo4$restructure).fixed32,
        (t) => t.parent.axisCount
      ),
      postscriptNameID: new ($parcel$interopDefault($lzfo4$restructure)).Optional(
        $parcel$interopDefault($lzfo4$restructure).uint16,
        (t) => t.parent.instanceSize - t._currentOffset > 0
      )
    });
    var $2db446770962f79d$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      offsetToData: $parcel$interopDefault($lzfo4$restructure).uint16,
      countSizePairs: $parcel$interopDefault($lzfo4$restructure).uint16,
      axisCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      axisSize: $parcel$interopDefault($lzfo4$restructure).uint16,
      instanceCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      instanceSize: $parcel$interopDefault($lzfo4$restructure).uint16,
      axis: new ($parcel$interopDefault($lzfo4$restructure)).Array($2db446770962f79d$var$Axis, "axisCount"),
      instance: new ($parcel$interopDefault($lzfo4$restructure)).Array($2db446770962f79d$var$Instance, "instanceCount")
    });
    var $9b2a13e02edeea86$var$shortFrac = new ($parcel$interopDefault($lzfo4$restructure)).Fixed(16, "BE", 14);
    var $9b2a13e02edeea86$var$Offset = class {
      static decode(stream, parent) {
        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
      }
    };
    var $9b2a13e02edeea86$var$gvar = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      axisCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      globalCoordCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      globalCoords: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new ($parcel$interopDefault($lzfo4$restructure)).Array(new ($parcel$interopDefault($lzfo4$restructure)).Array($9b2a13e02edeea86$var$shortFrac, "axisCount"), "globalCoordCount")),
      glyphCount: $parcel$interopDefault($lzfo4$restructure).uint16,
      flags: $parcel$interopDefault($lzfo4$restructure).uint16,
      offsetToData: $parcel$interopDefault($lzfo4$restructure).uint32,
      offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        new ($parcel$interopDefault($lzfo4$restructure)).Pointer($9b2a13e02edeea86$var$Offset, "void", {
          relativeTo: (ctx) => ctx.offsetToData,
          allowNull: false
        }),
        (t) => t.glyphCount + 1
      )
    });
    var $9b2a13e02edeea86$export$2e2bcd8739ae039 = $9b2a13e02edeea86$var$gvar;
    var $e59e1b842b4890cf$var$ClassTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      length: $parcel$interopDefault($lzfo4$restructure).uint16,
      coverage: $parcel$interopDefault($lzfo4$restructure).uint16,
      subFeatureFlags: $parcel$interopDefault($lzfo4$restructure).uint32,
      stateTable: new $ad5453f9e5579f22$export$105027425199cc51()
    });
    var $e59e1b842b4890cf$var$WidthDeltaRecord = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      justClass: $parcel$interopDefault($lzfo4$restructure).uint32,
      beforeGrowLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
      beforeShrinkLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
      afterGrowLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
      afterShrinkLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
      growFlags: $parcel$interopDefault($lzfo4$restructure).uint16,
      shrinkFlags: $parcel$interopDefault($lzfo4$restructure).uint16
    });
    var $e59e1b842b4890cf$var$WidthDeltaCluster = new ($parcel$interopDefault($lzfo4$restructure)).Array($e59e1b842b4890cf$var$WidthDeltaRecord, $parcel$interopDefault($lzfo4$restructure).uint32);
    var $e59e1b842b4890cf$var$ActionData = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("actionType", {
      0: {
        lowerLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
        upperLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
        order: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyphs: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, $parcel$interopDefault($lzfo4$restructure).uint16)
      },
      1: {
        addGlyph: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      2: {
        substThreshold: $parcel$interopDefault($lzfo4$restructure).fixed32,
        addGlyph: $parcel$interopDefault($lzfo4$restructure).uint16,
        substGlyph: $parcel$interopDefault($lzfo4$restructure).uint16
      },
      3: {},
      4: {
        variationAxis: $parcel$interopDefault($lzfo4$restructure).uint32,
        minimumLimit: $parcel$interopDefault($lzfo4$restructure).fixed32,
        noStretchValue: $parcel$interopDefault($lzfo4$restructure).fixed32,
        maximumLimit: $parcel$interopDefault($lzfo4$restructure).fixed32
      },
      5: {
        flags: $parcel$interopDefault($lzfo4$restructure).uint16,
        glyph: $parcel$interopDefault($lzfo4$restructure).uint16
      }
    });
    var $e59e1b842b4890cf$var$Action = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      actionClass: $parcel$interopDefault($lzfo4$restructure).uint16,
      actionType: $parcel$interopDefault($lzfo4$restructure).uint16,
      actionLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      actionData: $e59e1b842b4890cf$var$ActionData,
      padding: new ($parcel$interopDefault($lzfo4$restructure)).Reserved(
        $parcel$interopDefault($lzfo4$restructure).uint8,
        (t) => t.actionLength - t._currentOffset
      )
    });
    var $e59e1b842b4890cf$var$PostcompensationAction = new ($parcel$interopDefault($lzfo4$restructure)).Array($e59e1b842b4890cf$var$Action, $parcel$interopDefault($lzfo4$restructure).uint32);
    var $e59e1b842b4890cf$var$PostCompensationTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      lookupTable: new $ad5453f9e5579f22$export$8351f8c2ae2f103c(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$PostcompensationAction))
    });
    var $e59e1b842b4890cf$var$JustificationTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      classTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$ClassTable, {
        type: "parent"
      }),
      wdcOffset: $parcel$interopDefault($lzfo4$restructure).uint16,
      postCompensationTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$PostCompensationTable, {
        type: "parent"
      }),
      widthDeltaClusters: new $ad5453f9e5579f22$export$8351f8c2ae2f103c(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$WidthDeltaCluster, {
        type: "parent",
        relativeTo: (ctx) => ctx.wdcOffset
      }))
    });
    var $e59e1b842b4890cf$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint32,
      format: $parcel$interopDefault($lzfo4$restructure).uint16,
      horizontal: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$JustificationTable),
      vertical: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $e59e1b842b4890cf$var$JustificationTable)
    });
    var $06adb7326c86c9e4$var$LigatureData = {
      action: $parcel$interopDefault($lzfo4$restructure).uint16
    };
    var $06adb7326c86c9e4$var$ContextualData = {
      markIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      currentIndex: $parcel$interopDefault($lzfo4$restructure).uint16
    };
    var $06adb7326c86c9e4$var$InsertionData = {
      currentInsertIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      markedInsertIndex: $parcel$interopDefault($lzfo4$restructure).uint16
    };
    var $06adb7326c86c9e4$var$SubstitutionTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      items: new $ad5453f9e5579f22$export$c5af1eebc882e39a(new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$8351f8c2ae2f103c()))
    });
    var $06adb7326c86c9e4$var$SubtableData = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct("type", {
      0: {
        stateTable: new $ad5453f9e5579f22$export$79f7d93d790934ba()
      },
      1: {
        stateTable: new $ad5453f9e5579f22$export$79f7d93d790934ba($06adb7326c86c9e4$var$ContextualData),
        substitutionTable: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $06adb7326c86c9e4$var$SubstitutionTable)
      },
      2: {
        stateTable: new $ad5453f9e5579f22$export$79f7d93d790934ba($06adb7326c86c9e4$var$LigatureData),
        ligatureActions: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$c5af1eebc882e39a($parcel$interopDefault($lzfo4$restructure).uint32)),
        components: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$c5af1eebc882e39a($parcel$interopDefault($lzfo4$restructure).uint16)),
        ligatureList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$c5af1eebc882e39a($parcel$interopDefault($lzfo4$restructure).uint16))
      },
      4: {
        lookupTable: new $ad5453f9e5579f22$export$8351f8c2ae2f103c()
      },
      5: {
        stateTable: new $ad5453f9e5579f22$export$79f7d93d790934ba($06adb7326c86c9e4$var$InsertionData),
        insertionActions: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, new $ad5453f9e5579f22$export$c5af1eebc882e39a($parcel$interopDefault($lzfo4$restructure).uint16))
      }
    });
    var $06adb7326c86c9e4$var$Subtable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      length: $parcel$interopDefault($lzfo4$restructure).uint32,
      coverage: $parcel$interopDefault($lzfo4$restructure).uint24,
      type: $parcel$interopDefault($lzfo4$restructure).uint8,
      subFeatureFlags: $parcel$interopDefault($lzfo4$restructure).uint32,
      table: $06adb7326c86c9e4$var$SubtableData,
      padding: new ($parcel$interopDefault($lzfo4$restructure)).Reserved(
        $parcel$interopDefault($lzfo4$restructure).uint8,
        (t) => t.length - t._currentOffset
      )
    });
    var $06adb7326c86c9e4$var$FeatureEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      featureType: $parcel$interopDefault($lzfo4$restructure).uint16,
      featureSetting: $parcel$interopDefault($lzfo4$restructure).uint16,
      enableFlags: $parcel$interopDefault($lzfo4$restructure).uint32,
      disableFlags: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $06adb7326c86c9e4$var$MorxChain = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      defaultFlags: $parcel$interopDefault($lzfo4$restructure).uint32,
      chainLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      nFeatureEntries: $parcel$interopDefault($lzfo4$restructure).uint32,
      nSubtables: $parcel$interopDefault($lzfo4$restructure).uint32,
      features: new ($parcel$interopDefault($lzfo4$restructure)).Array($06adb7326c86c9e4$var$FeatureEntry, "nFeatureEntries"),
      subtables: new ($parcel$interopDefault($lzfo4$restructure)).Array($06adb7326c86c9e4$var$Subtable, "nSubtables")
    });
    var $06adb7326c86c9e4$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint16,
      unused: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      nChains: $parcel$interopDefault($lzfo4$restructure).uint32,
      chains: new ($parcel$interopDefault($lzfo4$restructure)).Array($06adb7326c86c9e4$var$MorxChain, "nChains")
    });
    var $7c2349d24ed9a62f$var$OpticalBounds = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      left: $parcel$interopDefault($lzfo4$restructure).int16,
      top: $parcel$interopDefault($lzfo4$restructure).int16,
      right: $parcel$interopDefault($lzfo4$restructure).int16,
      bottom: $parcel$interopDefault($lzfo4$restructure).int16
    });
    var $7c2349d24ed9a62f$export$2e2bcd8739ae039 = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).fixed32,
      format: $parcel$interopDefault($lzfo4$restructure).uint16,
      lookupTable: new $ad5453f9e5579f22$export$8351f8c2ae2f103c($7c2349d24ed9a62f$var$OpticalBounds)
    });
    var $6cd727f8bf15b50a$var$tables = {};
    var $6cd727f8bf15b50a$export$2e2bcd8739ae039 = $6cd727f8bf15b50a$var$tables;
    $6cd727f8bf15b50a$var$tables.cmap = $f6569fe31dc9e2a4$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.head = $e1b51afd73796719$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.hhea = $af15e8c2ca202685$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.hmtx = $cbee70d452c87a2f$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.maxp = $62b43947ebb31537$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.name = $7cfee716e27b503e$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables["OS/2"] = $5e9fda50085d9beb$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.post = $8fb96ffb3c5b1cd6$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.fpgm = $2b37abe4b96e3c42$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.loca = $8cebe4fe43d5c208$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.prep = $75c86c4a9179fd24$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables["cvt "] = $e85635aafda425ab$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.glyf = $1edb604f0b10eb6a$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables["CFF "] = $af4e76a81d73e13e$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables["CFF2"] = $af4e76a81d73e13e$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.VORG = $a037a9ab8e35d2e2$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.EBLC = $415d3f0073d22090$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.CBLC = $6cd727f8bf15b50a$var$tables.EBLC;
    $6cd727f8bf15b50a$var$tables.sbix = $95fc167908565fc1$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.COLR = $ee5a058727c0db64$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.CPAL = $23ee004c2c56be61$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.BASE = $4745757aab3ee679$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.GDEF = $e587dbe605efb582$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.GPOS = $68e365289aac05c8$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.GSUB = $1303c4861d36d148$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.JSTF = $a27d24eee1e03991$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.HVAR = $2d882978d51e3645$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.DSIG = $116b2de32b06b858$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.gasp = $7dc81c3b51e4c43a$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.hdmx = $5bcc7800bd7e22c5$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.kern = $21356b986524a925$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.LTSH = $c7bc0d0d5cc6d685$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.PCLT = $8bee01cf059cb725$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.VDMX = $fcf1a0f1b278e42d$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.vhea = $6b7dea390387f6ff$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.vmtx = $1cd1ccbdfeff8d2f$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.avar = $2b61ce22494b8a7d$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.bsln = $d96812815f65600e$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.feat = $03d9c1eb48643b7a$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.fvar = $2db446770962f79d$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.gvar = $9b2a13e02edeea86$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.just = $e59e1b842b4890cf$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.morx = $06adb7326c86c9e4$export$2e2bcd8739ae039;
    $6cd727f8bf15b50a$var$tables.opbd = $7c2349d24ed9a62f$export$2e2bcd8739ae039;
    var $58b5e8ab8241ced9$var$TableEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      checkSum: $parcel$interopDefault($lzfo4$restructure).uint32,
      offset: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, "void", {
        type: "global"
      }),
      length: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $58b5e8ab8241ced9$var$Directory = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      numTables: $parcel$interopDefault($lzfo4$restructure).uint16,
      searchRange: $parcel$interopDefault($lzfo4$restructure).uint16,
      entrySelector: $parcel$interopDefault($lzfo4$restructure).uint16,
      rangeShift: $parcel$interopDefault($lzfo4$restructure).uint16,
      tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($58b5e8ab8241ced9$var$TableEntry, "numTables")
    });
    $58b5e8ab8241ced9$var$Directory.process = function() {
      let tables = {};
      for (let table of this.tables)
        tables[table.tag] = table;
      this.tables = tables;
    };
    $58b5e8ab8241ced9$var$Directory.preEncode = function(stream) {
      let tables = [];
      for (let tag in this.tables) {
        let table = this.tables[tag];
        if (table)
          tables.push({
            tag,
            checkSum: 0,
            offset: new ($parcel$interopDefault($lzfo4$restructure)).VoidPointer($6cd727f8bf15b50a$export$2e2bcd8739ae039[tag], table),
            length: $6cd727f8bf15b50a$export$2e2bcd8739ae039[tag].size(table)
          });
      }
      this.tag = "true";
      this.numTables = tables.length;
      this.tables = tables;
      let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
      let maxPowerOf2 = Math.pow(2, maxExponentFor2);
      this.searchRange = maxPowerOf2 * 16;
      this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
      this.rangeShift = this.numTables * 16 - this.searchRange;
    };
    var $58b5e8ab8241ced9$export$2e2bcd8739ae039 = $58b5e8ab8241ced9$var$Directory;
    function $c07919491d3366c0$export$2e0ae67339d5f1ac(arr, cmp) {
      let min = 0;
      let max = arr.length - 1;
      while (min <= max) {
        let mid = min + max >> 1;
        let res = cmp(arr[mid]);
        if (res < 0)
          max = mid - 1;
        else if (res > 0)
          min = mid + 1;
        else
          return mid;
      }
      return -1;
    }
    function $c07919491d3366c0$export$d02631cccf789723(index, end) {
      let $c07919491d3366c0$export$d02631cccf7897232 = [];
      while (index < end)
        $c07919491d3366c0$export$d02631cccf7897232.push(index++);
      return $c07919491d3366c0$export$d02631cccf7897232;
    }
    var _class;
    var $1be0370b015c0ead$export$2e2bcd8739ae039 = (_class = class $1be0370b015c0ead$export$2e2bcd8739ae039 {
      findSubtable(cmapTable, pairs) {
        for (let [platformID, encodingID] of pairs)
          for (let cmap of cmapTable.tables) {
            if (cmap.platformID === platformID && cmap.encodingID === encodingID)
              return cmap.table;
          }
        return null;
      }
      lookup(codepoint, variationSelector) {
        if (this.encoding) {
          let buf = $parcel$interopDefault($lzfo4$iconvlitecjs).encode(String.fromCodePoint(codepoint), this.encoding);
          codepoint = 0;
          for (let i2 = 0; i2 < buf.length; i2++)
            codepoint = codepoint << 8 | buf[i2];
        } else if (variationSelector) {
          let gid = this.getVariationSelector(codepoint, variationSelector);
          if (gid)
            return gid;
        }
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0:
            return cmap.codeMap.get(codepoint) || 0;
          case 4: {
            let min = 0;
            let max = cmap.segCount - 1;
            while (min <= max) {
              let mid = min + max >> 1;
              if (codepoint < cmap.startCode.get(mid))
                max = mid - 1;
              else if (codepoint > cmap.endCode.get(mid))
                min = mid + 1;
              else {
                let rangeOffset = cmap.idRangeOffset.get(mid);
                let gid;
                if (rangeOffset === 0)
                  gid = codepoint + cmap.idDelta.get(mid);
                else {
                  let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                  gid = cmap.glyphIndexArray.get(index) || 0;
                  if (gid !== 0)
                    gid += cmap.idDelta.get(mid);
                }
                return gid & 65535;
              }
            }
            return 0;
          }
          case 8:
            throw new Error("TODO: cmap format 8");
          case 6:
          case 10:
            return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
          case 12:
          case 13: {
            let min = 0;
            let max = cmap.nGroups - 1;
            while (min <= max) {
              let mid = min + max >> 1;
              let group = cmap.groups.get(mid);
              if (codepoint < group.startCharCode)
                max = mid - 1;
              else if (codepoint > group.endCharCode)
                min = mid + 1;
              else {
                if (cmap.version === 12)
                  return group.glyphID + (codepoint - group.startCharCode);
                else
                  return group.glyphID;
              }
            }
            return 0;
          }
          case 14:
            throw new Error("TODO: cmap format 14");
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      getVariationSelector(codepoint, variationSelector) {
        if (!this.uvs)
          return 0;
        let selectors = this.uvs.varSelectors.toArray();
        let i2 = $c07919491d3366c0$export$2e0ae67339d5f1ac(
          selectors,
          (x) => variationSelector - x.varSelector
        );
        let sel = selectors[i2];
        if (i2 !== -1 && sel.defaultUVS)
          i2 = $c07919491d3366c0$export$2e0ae67339d5f1ac(
            sel.defaultUVS,
            (x) => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0
          );
        if (i2 !== -1 && sel.nonDefaultUVS) {
          i2 = $c07919491d3366c0$export$2e0ae67339d5f1ac(
            sel.nonDefaultUVS,
            (x) => codepoint - x.unicodeValue
          );
          if (i2 !== -1)
            return sel.nonDefaultUVS[i2].glyphID;
        }
        return 0;
      }
      getCharacterSet() {
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0:
            return $c07919491d3366c0$export$d02631cccf789723(0, cmap.codeMap.length);
          case 4: {
            let res = [];
            let endCodes = cmap.endCode.toArray();
            for (let i2 = 0; i2 < endCodes.length; i2++) {
              let tail = endCodes[i2] + 1;
              let start = cmap.startCode.get(i2);
              res.push(...$c07919491d3366c0$export$d02631cccf789723(start, tail));
            }
            return res;
          }
          case 8:
            throw new Error("TODO: cmap format 8");
          case 6:
          case 10:
            return $c07919491d3366c0$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
          case 12:
          case 13: {
            let res = [];
            for (let group of cmap.groups.toArray())
              res.push(...$c07919491d3366c0$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
            return res;
          }
          case 14:
            throw new Error("TODO: cmap format 14");
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      codePointsForGlyph(gid) {
        let cmap = this.cmap;
        switch (cmap.version) {
          case 0: {
            let res = [];
            for (let i2 = 0; i2 < 256; i2++)
              if (cmap.codeMap.get(i2) === gid)
                res.push(i2);
            return res;
          }
          case 4: {
            let res = [];
            for (let i2 = 0; i2 < cmap.segCount; i2++) {
              let end = cmap.endCode.get(i2);
              let start = cmap.startCode.get(i2);
              let rangeOffset = cmap.idRangeOffset.get(i2);
              let delta = cmap.idDelta.get(i2);
              for (var c = start; c <= end; c++) {
                let g = 0;
                if (rangeOffset === 0)
                  g = c + delta;
                else {
                  let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i2);
                  g = cmap.glyphIndexArray.get(index) || 0;
                  if (g !== 0)
                    g += delta;
                }
                if (g === gid)
                  res.push(c);
              }
            }
            return res;
          }
          case 12: {
            let res = [];
            for (let group of cmap.groups.toArray())
              if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode))
                res.push(group.startCharCode + (gid - group.glyphID));
            return res;
          }
          case 13: {
            let res = [];
            for (let group of cmap.groups.toArray())
              if (gid === group.glyphID)
                res.push(...$c07919491d3366c0$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
            return res;
          }
          default:
            throw new Error(`Unknown cmap format ${cmap.version}`);
        }
      }
      constructor(cmapTable) {
        this.encoding = null;
        this.cmap = this.findSubtable(cmapTable, [
          // 32-bit subtables
          [
            3,
            10
          ],
          [
            0,
            6
          ],
          [
            0,
            4
          ],
          // 16-bit subtables
          [
            3,
            1
          ],
          [
            0,
            3
          ],
          [
            0,
            2
          ],
          [
            0,
            1
          ],
          [
            0,
            0
          ]
        ]);
        if (!this.cmap && $parcel$interopDefault($lzfo4$iconvlitecjs))
          for (let cmap of cmapTable.tables) {
            let encoding = $d8b54c41212776fe$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
            if ($parcel$interopDefault($lzfo4$iconvlitecjs).encodingExists(encoding)) {
              this.cmap = cmap.table;
              this.encoding = encoding;
            }
          }
        if (!this.cmap)
          throw new Error("Could not find a supported cmap table");
        this.uvs = this.findSubtable(cmapTable, [
          [
            0,
            5
          ]
        ]);
        if (this.uvs && this.uvs.version !== 14)
          this.uvs = null;
      }
    }, $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "getCharacterSet", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "getCharacterSet"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "codePointsForGlyph", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "codePointsForGlyph"), _class.prototype), _class);
    var $392dfa2b44d72edd$export$2e2bcd8739ae039 = class {
      process(glyphs, positions) {
        for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {
          let left = glyphs[glyphIndex].id;
          let right = glyphs[glyphIndex + 1].id;
          positions[glyphIndex].xAdvance += this.getKerning(left, right);
        }
      }
      getKerning(left, right) {
        let res = 0;
        for (let table of this.kern.tables) {
          if (table.coverage.crossStream)
            continue;
          switch (table.version) {
            case 0:
              if (!table.coverage.horizontal)
                continue;
              break;
            case 1:
              if (table.coverage.vertical || table.coverage.variation)
                continue;
              break;
            default:
              throw new Error(`Unsupported kerning table version ${table.version}`);
          }
          let val = 0;
          let s = table.subtable;
          switch (table.format) {
            case 0:
              let pairIdx = $c07919491d3366c0$export$2e0ae67339d5f1ac(s.pairs, function(pair) {
                return left - pair.left || right - pair.right;
              });
              if (pairIdx >= 0)
                val = s.pairs[pairIdx].value;
              break;
            case 2:
              let leftOffset = 0, rightOffset = 0;
              if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs)
                leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
              else
                leftOffset = s.array.off;
              if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs)
                rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
              let index = (leftOffset + rightOffset - s.array.off) / 2;
              val = s.array.values.get(index);
              break;
            case 3:
              if (left >= s.glyphCount || right >= s.glyphCount)
                return 0;
              val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
              break;
            default:
              throw new Error(`Unsupported kerning sub-table format ${table.format}`);
          }
          if (table.coverage.override)
            res = val;
          else
            res += val;
        }
        return res;
      }
      constructor(font) {
        this.kern = font.kern;
      }
    };
    var $c2c165353b6a2650$export$2e2bcd8739ae039 = class {
      positionGlyphs(glyphs, positions) {
        let clusterStart = 0;
        let clusterEnd = 0;
        for (let index = 0; index < glyphs.length; index++) {
          let glyph = glyphs[index];
          if (glyph.isMark)
            clusterEnd = index;
          else {
            if (clusterStart !== clusterEnd)
              this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
            clusterStart = clusterEnd = index;
          }
        }
        if (clusterStart !== clusterEnd)
          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        return positions;
      }
      positionCluster(glyphs, positions, clusterStart, clusterEnd) {
        let base = glyphs[clusterStart];
        let baseBox = base.cbox.copy();
        if (base.codePoints.length > 1)
          baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
        let xOffset = -positions[clusterStart].xAdvance;
        let yOffset = 0;
        let yGap = this.font.unitsPerEm / 16;
        for (let index = clusterStart + 1; index <= clusterEnd; index++) {
          let mark = glyphs[index];
          let markBox = mark.cbox;
          let position = positions[index];
          let combiningClass = this.getCombiningClass(mark.codePoints[0]);
          if (combiningClass !== "Not_Reordered") {
            position.xOffset = position.yOffset = 0;
            switch (combiningClass) {
              case "Double_Above":
              case "Double_Below":
                position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                break;
              case "Attached_Below_Left":
              case "Below_Left":
              case "Above_Left":
                position.xOffset += baseBox.minX - markBox.minX;
                break;
              case "Attached_Above_Right":
              case "Below_Right":
              case "Above_Right":
                position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                break;
              default:
                position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
            }
            switch (combiningClass) {
              case "Double_Below":
              case "Below_Left":
              case "Below":
              case "Below_Right":
              case "Attached_Below_Left":
              case "Attached_Below":
                if (combiningClass === "Attached_Below_Left" || combiningClass === "Attached_Below")
                  baseBox.minY += yGap;
                position.yOffset = -baseBox.minY - markBox.maxY;
                baseBox.minY += markBox.height;
                break;
              case "Double_Above":
              case "Above_Left":
              case "Above":
              case "Above_Right":
              case "Attached_Above":
              case "Attached_Above_Right":
                if (combiningClass === "Attached_Above" || combiningClass === "Attached_Above_Right")
                  baseBox.maxY += yGap;
                position.yOffset = baseBox.maxY - markBox.minY;
                baseBox.maxY += markBox.height;
                break;
            }
            position.xAdvance = position.yAdvance = 0;
            position.xOffset += xOffset;
            position.yOffset += yOffset;
          } else {
            xOffset -= position.xAdvance;
            yOffset -= position.yAdvance;
          }
        }
        return;
      }
      getCombiningClass(codePoint) {
        let combiningClass = $parcel$interopDefault($lzfo4$unicodeproperties).getCombiningClass(codePoint);
        if ((codePoint & -256) === 3584) {
          if (combiningClass === "Not_Reordered")
            switch (codePoint) {
              case 3633:
              case 3636:
              case 3637:
              case 3638:
              case 3639:
              case 3655:
              case 3660:
              case 3645:
              case 3662:
                return "Above_Right";
              case 3761:
              case 3764:
              case 3765:
              case 3766:
              case 3767:
              case 3771:
              case 3788:
              case 3789:
                return "Above";
              case 3772:
                return "Below";
            }
          else if (codePoint === 3642)
            return "Below_Right";
        }
        switch (combiningClass) {
          case "CCC10":
          case "CCC11":
          case "CCC12":
          case "CCC13":
          case "CCC14":
          case "CCC15":
          case "CCC16":
          case "CCC17":
          case "CCC18":
          case "CCC20":
          case "CCC22":
            return "Below";
          case "CCC23":
            return "Attached_Above";
          case "CCC24":
            return "Above_Right";
          case "CCC25":
          case "CCC19":
            return "Above_Left";
          case "CCC26":
            return "Above";
          case "CCC21":
            break;
          case "CCC27":
          case "CCC28":
          case "CCC30":
          case "CCC31":
          case "CCC33":
          case "CCC34":
          case "CCC35":
          case "CCC36":
            return "Above";
          case "CCC29":
          case "CCC32":
            return "Below";
          case "CCC103":
            return "Below_Right";
          case "CCC107":
            return "Above_Right";
          case "CCC118":
            return "Below";
          case "CCC122":
            return "Above";
          case "CCC129":
          case "CCC132":
            return "Below";
          case "CCC130":
            return "Above";
        }
        return combiningClass;
      }
      constructor(font) {
        this.font = font;
      }
    };
    var $6d619c173ebabb82$export$2e2bcd8739ae039 = class _$6d619c173ebabb82$export$2e2bcd8739ae039 {
      /**
      * The width of the bounding box
      * @type {number}
      */
      get width() {
        return this.maxX - this.minX;
      }
      /**
      * The height of the bounding box
      * @type {number}
      */
      get height() {
        return this.maxY - this.minY;
      }
      addPoint(x, y) {
        if (Math.abs(x) !== Infinity) {
          if (x < this.minX)
            this.minX = x;
          if (x > this.maxX)
            this.maxX = x;
        }
        if (Math.abs(y) !== Infinity) {
          if (y < this.minY)
            this.minY = y;
          if (y > this.maxY)
            this.maxY = y;
        }
      }
      copy() {
        return new _$6d619c173ebabb82$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
      }
      constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {
        this.minX = minX;
        this.minY = minY;
        this.maxX = maxX;
        this.maxY = maxY;
      }
    };
    var $2e3a795a88d7e002$var$UNICODE_SCRIPTS = {
      Caucasian_Albanian: "aghb",
      Arabic: "arab",
      Imperial_Aramaic: "armi",
      Armenian: "armn",
      Avestan: "avst",
      Balinese: "bali",
      Bamum: "bamu",
      Bassa_Vah: "bass",
      Batak: "batk",
      Bengali: [
        "bng2",
        "beng"
      ],
      Bopomofo: "bopo",
      Brahmi: "brah",
      Braille: "brai",
      Buginese: "bugi",
      Buhid: "buhd",
      Chakma: "cakm",
      Canadian_Aboriginal: "cans",
      Carian: "cari",
      Cham: "cham",
      Cherokee: "cher",
      Coptic: "copt",
      Cypriot: "cprt",
      Cyrillic: "cyrl",
      Devanagari: [
        "dev2",
        "deva"
      ],
      Deseret: "dsrt",
      Duployan: "dupl",
      Egyptian_Hieroglyphs: "egyp",
      Elbasan: "elba",
      Ethiopic: "ethi",
      Georgian: "geor",
      Glagolitic: "glag",
      Gothic: "goth",
      Grantha: "gran",
      Greek: "grek",
      Gujarati: [
        "gjr2",
        "gujr"
      ],
      Gurmukhi: [
        "gur2",
        "guru"
      ],
      Hangul: "hang",
      Han: "hani",
      Hanunoo: "hano",
      Hebrew: "hebr",
      Hiragana: "hira",
      Pahawh_Hmong: "hmng",
      Katakana_Or_Hiragana: "hrkt",
      Old_Italic: "ital",
      Javanese: "java",
      Kayah_Li: "kali",
      Katakana: "kana",
      Kharoshthi: "khar",
      Khmer: "khmr",
      Khojki: "khoj",
      Kannada: [
        "knd2",
        "knda"
      ],
      Kaithi: "kthi",
      Tai_Tham: "lana",
      Lao: "lao ",
      Latin: "latn",
      Lepcha: "lepc",
      Limbu: "limb",
      Linear_A: "lina",
      Linear_B: "linb",
      Lisu: "lisu",
      Lycian: "lyci",
      Lydian: "lydi",
      Mahajani: "mahj",
      Mandaic: "mand",
      Manichaean: "mani",
      Mende_Kikakui: "mend",
      Meroitic_Cursive: "merc",
      Meroitic_Hieroglyphs: "mero",
      Malayalam: [
        "mlm2",
        "mlym"
      ],
      Modi: "modi",
      Mongolian: "mong",
      Mro: "mroo",
      Meetei_Mayek: "mtei",
      Myanmar: [
        "mym2",
        "mymr"
      ],
      Old_North_Arabian: "narb",
      Nabataean: "nbat",
      Nko: "nko ",
      Ogham: "ogam",
      Ol_Chiki: "olck",
      Old_Turkic: "orkh",
      Oriya: [
        "ory2",
        "orya"
      ],
      Osmanya: "osma",
      Palmyrene: "palm",
      Pau_Cin_Hau: "pauc",
      Old_Permic: "perm",
      Phags_Pa: "phag",
      Inscriptional_Pahlavi: "phli",
      Psalter_Pahlavi: "phlp",
      Phoenician: "phnx",
      Miao: "plrd",
      Inscriptional_Parthian: "prti",
      Rejang: "rjng",
      Runic: "runr",
      Samaritan: "samr",
      Old_South_Arabian: "sarb",
      Saurashtra: "saur",
      Shavian: "shaw",
      Sharada: "shrd",
      Siddham: "sidd",
      Khudawadi: "sind",
      Sinhala: "sinh",
      Sora_Sompeng: "sora",
      Sundanese: "sund",
      Syloti_Nagri: "sylo",
      Syriac: "syrc",
      Tagbanwa: "tagb",
      Takri: "takr",
      Tai_Le: "tale",
      New_Tai_Lue: "talu",
      Tamil: [
        "tml2",
        "taml"
      ],
      Tai_Viet: "tavt",
      Telugu: [
        "tel2",
        "telu"
      ],
      Tifinagh: "tfng",
      Tagalog: "tglg",
      Thaana: "thaa",
      Thai: "thai",
      Tibetan: "tibt",
      Tirhuta: "tirh",
      Ugaritic: "ugar",
      Vai: "vai ",
      Warang_Citi: "wara",
      Old_Persian: "xpeo",
      Cuneiform: "xsux",
      Yi: "yi  ",
      Inherited: "zinh",
      Common: "zyyy",
      Unknown: "zzzz"
    };
    var $2e3a795a88d7e002$var$OPENTYPE_SCRIPTS = {};
    for (let script in $2e3a795a88d7e002$var$UNICODE_SCRIPTS) {
      let tag = $2e3a795a88d7e002$var$UNICODE_SCRIPTS[script];
      if (Array.isArray(tag))
        for (let t of tag)
          $2e3a795a88d7e002$var$OPENTYPE_SCRIPTS[t] = script;
      else
        $2e3a795a88d7e002$var$OPENTYPE_SCRIPTS[tag] = script;
    }
    function $2e3a795a88d7e002$export$ce50e82f12a827a4(tag) {
      return $2e3a795a88d7e002$var$OPENTYPE_SCRIPTS[tag];
    }
    function $2e3a795a88d7e002$export$e5cb25e204fb8450(string) {
      let len = string.length;
      let idx = 0;
      while (idx < len) {
        let code = string.charCodeAt(idx++);
        if (55296 <= code && code <= 56319 && idx < len) {
          let next = string.charCodeAt(idx);
          if (56320 <= next && next <= 57343) {
            idx++;
            code = ((code & 1023) << 10) + (next & 1023) + 65536;
          }
        }
        let script2 = $parcel$interopDefault($lzfo4$unicodeproperties).getScript(code);
        if (script2 !== "Common" && script2 !== "Inherited" && script2 !== "Unknown")
          return $2e3a795a88d7e002$var$UNICODE_SCRIPTS[script2];
      }
      return $2e3a795a88d7e002$var$UNICODE_SCRIPTS.Unknown;
    }
    function $2e3a795a88d7e002$export$16fab0757cfc223d(codePoints) {
      for (let i2 = 0; i2 < codePoints.length; i2++) {
        let codePoint = codePoints[i2];
        let script3 = $parcel$interopDefault($lzfo4$unicodeproperties).getScript(codePoint);
        if (script3 !== "Common" && script3 !== "Inherited" && script3 !== "Unknown")
          return $2e3a795a88d7e002$var$UNICODE_SCRIPTS[script3];
      }
      return $2e3a795a88d7e002$var$UNICODE_SCRIPTS.Unknown;
    }
    var $2e3a795a88d7e002$var$RTL = {
      arab: true,
      hebr: true,
      syrc: true,
      thaa: true,
      cprt: true,
      khar: true,
      phnx: true,
      "nko ": true,
      lydi: true,
      avst: true,
      armi: true,
      phli: true,
      prti: true,
      sarb: true,
      orkh: true,
      samr: true,
      mand: true,
      merc: true,
      mero: true,
      // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
      mani: true,
      mend: true,
      nbat: true,
      narb: true,
      palm: true,
      phlp: true
      // Psalter Pahlavi
    };
    function $2e3a795a88d7e002$export$9fddb9d0dd7d8a54(script4) {
      if ($2e3a795a88d7e002$var$RTL[script4])
        return "rtl";
      return "ltr";
    }
    var $9ee490eecf5a30a9$export$2e2bcd8739ae039 = class {
      /**
      * The total advance width of the run.
      * @type {number}
      */
      get advanceWidth() {
        let width = 0;
        for (let position of this.positions)
          width += position.xAdvance;
        return width;
      }
      /**
      * The total advance height of the run.
      * @type {number}
      */
      get advanceHeight() {
        let height = 0;
        for (let position of this.positions)
          height += position.yAdvance;
        return height;
      }
      /**
      * The bounding box containing all glyphs in the run.
      * @type {BBox}
      */
      get bbox() {
        let bbox = new $6d619c173ebabb82$export$2e2bcd8739ae039();
        let x = 0;
        let y = 0;
        for (let index = 0; index < this.glyphs.length; index++) {
          let glyph = this.glyphs[index];
          let p = this.positions[index];
          let b = glyph.bbox;
          bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
          bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
          x += p.xAdvance;
          y += p.yAdvance;
        }
        return bbox;
      }
      constructor(glyphs, features, script, language, direction) {
        this.glyphs = glyphs;
        this.positions = null;
        this.script = script;
        this.language = language || null;
        this.direction = direction || $2e3a795a88d7e002$export$9fddb9d0dd7d8a54(script);
        this.features = {};
        if (Array.isArray(features))
          for (let tag of features)
            this.features[tag] = true;
        else if (typeof features === "object")
          this.features = features;
      }
    };
    var $745bead61c15c3c9$export$2e2bcd8739ae039 = class {
      constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {
        this.xAdvance = xAdvance;
        this.yAdvance = yAdvance;
        this.xOffset = xOffset;
        this.yOffset = yOffset;
      }
    };
    var $38911a2c3f8fd728$var$features = {
      allTypographicFeatures: {
        code: 0,
        exclusive: false,
        allTypeFeatures: 0
      },
      ligatures: {
        code: 1,
        exclusive: false,
        requiredLigatures: 0,
        commonLigatures: 2,
        rareLigatures: 4,
        // logos: 6
        rebusPictures: 8,
        diphthongLigatures: 10,
        squaredLigatures: 12,
        abbrevSquaredLigatures: 14,
        symbolLigatures: 16,
        contextualLigatures: 18,
        historicalLigatures: 20
      },
      cursiveConnection: {
        code: 2,
        exclusive: true,
        unconnected: 0,
        partiallyConnected: 1,
        cursive: 2
      },
      letterCase: {
        code: 3,
        exclusive: true
      },
      // upperAndLowerCase: 0          # deprecated
      // allCaps: 1                    # deprecated
      // allLowerCase: 2               # deprecated
      // smallCaps: 3                  # deprecated
      // initialCaps: 4                # deprecated
      // initialCapsAndSmallCaps: 5    # deprecated
      verticalSubstitution: {
        code: 4,
        exclusive: false,
        substituteVerticalForms: 0
      },
      linguisticRearrangement: {
        code: 5,
        exclusive: false,
        linguisticRearrangement: 0
      },
      numberSpacing: {
        code: 6,
        exclusive: true,
        monospacedNumbers: 0,
        proportionalNumbers: 1,
        thirdWidthNumbers: 2,
        quarterWidthNumbers: 3
      },
      smartSwash: {
        code: 8,
        exclusive: false,
        wordInitialSwashes: 0,
        wordFinalSwashes: 2,
        // lineInitialSwashes: 4
        // lineFinalSwashes: 6
        nonFinalSwashes: 8
      },
      diacritics: {
        code: 9,
        exclusive: true,
        showDiacritics: 0,
        hideDiacritics: 1,
        decomposeDiacritics: 2
      },
      verticalPosition: {
        code: 10,
        exclusive: true,
        normalPosition: 0,
        superiors: 1,
        inferiors: 2,
        ordinals: 3,
        scientificInferiors: 4
      },
      fractions: {
        code: 11,
        exclusive: true,
        noFractions: 0,
        verticalFractions: 1,
        diagonalFractions: 2
      },
      overlappingCharacters: {
        code: 13,
        exclusive: false,
        preventOverlap: 0
      },
      typographicExtras: {
        code: 14,
        exclusive: false,
        // hyphensToEmDash: 0
        // hyphenToEnDash: 2
        slashedZero: 4
      },
      // formInterrobang: 6
      // smartQuotes: 8
      // periodsToEllipsis: 10
      mathematicalExtras: {
        code: 15,
        exclusive: false,
        // hyphenToMinus: 0
        // asteristoMultiply: 2
        // slashToDivide: 4
        // inequalityLigatures: 6
        // exponents: 8
        mathematicalGreek: 10
      },
      ornamentSets: {
        code: 16,
        exclusive: true,
        noOrnaments: 0,
        dingbats: 1,
        piCharacters: 2,
        fleurons: 3,
        decorativeBorders: 4,
        internationalSymbols: 5,
        mathSymbols: 6
      },
      characterAlternatives: {
        code: 17,
        exclusive: true,
        noAlternates: 0
      },
      // user defined options
      designComplexity: {
        code: 18,
        exclusive: true,
        designLevel1: 0,
        designLevel2: 1,
        designLevel3: 2,
        designLevel4: 3,
        designLevel5: 4
      },
      styleOptions: {
        code: 19,
        exclusive: true,
        noStyleOptions: 0,
        displayText: 1,
        engravedText: 2,
        illuminatedCaps: 3,
        titlingCaps: 4,
        tallCaps: 5
      },
      characterShape: {
        code: 20,
        exclusive: true,
        traditionalCharacters: 0,
        simplifiedCharacters: 1,
        JIS1978Characters: 2,
        JIS1983Characters: 3,
        JIS1990Characters: 4,
        traditionalAltOne: 5,
        traditionalAltTwo: 6,
        traditionalAltThree: 7,
        traditionalAltFour: 8,
        traditionalAltFive: 9,
        expertCharacters: 10,
        JIS2004Characters: 11,
        hojoCharacters: 12,
        NLCCharacters: 13,
        traditionalNamesCharacters: 14
      },
      numberCase: {
        code: 21,
        exclusive: true,
        lowerCaseNumbers: 0,
        upperCaseNumbers: 1
      },
      textSpacing: {
        code: 22,
        exclusive: true,
        proportionalText: 0,
        monospacedText: 1,
        halfWidthText: 2,
        thirdWidthText: 3,
        quarterWidthText: 4,
        altProportionalText: 5,
        altHalfWidthText: 6
      },
      transliteration: {
        code: 23,
        exclusive: true,
        noTransliteration: 0
      },
      // hanjaToHangul: 1
      // hiraganaToKatakana: 2
      // katakanaToHiragana: 3
      // kanaToRomanization: 4
      // romanizationToHiragana: 5
      // romanizationToKatakana: 6
      // hanjaToHangulAltOne: 7
      // hanjaToHangulAltTwo: 8
      // hanjaToHangulAltThree: 9
      annotation: {
        code: 24,
        exclusive: true,
        noAnnotation: 0,
        boxAnnotation: 1,
        roundedBoxAnnotation: 2,
        circleAnnotation: 3,
        invertedCircleAnnotation: 4,
        parenthesisAnnotation: 5,
        periodAnnotation: 6,
        romanNumeralAnnotation: 7,
        diamondAnnotation: 8,
        invertedBoxAnnotation: 9,
        invertedRoundedBoxAnnotation: 10
      },
      kanaSpacing: {
        code: 25,
        exclusive: true,
        fullWidthKana: 0,
        proportionalKana: 1
      },
      ideographicSpacing: {
        code: 26,
        exclusive: true,
        fullWidthIdeographs: 0,
        proportionalIdeographs: 1,
        halfWidthIdeographs: 2
      },
      unicodeDecomposition: {
        code: 27,
        exclusive: false,
        canonicalComposition: 0,
        compatibilityComposition: 2,
        transcodingComposition: 4
      },
      rubyKana: {
        code: 28,
        exclusive: false,
        // noRubyKana: 0     # deprecated - use rubyKanaOff instead
        // rubyKana: 1     # deprecated - use rubyKanaOn instead
        rubyKana: 2
      },
      CJKSymbolAlternatives: {
        code: 29,
        exclusive: true,
        noCJKSymbolAlternatives: 0,
        CJKSymbolAltOne: 1,
        CJKSymbolAltTwo: 2,
        CJKSymbolAltThree: 3,
        CJKSymbolAltFour: 4,
        CJKSymbolAltFive: 5
      },
      ideographicAlternatives: {
        code: 30,
        exclusive: true,
        noIdeographicAlternatives: 0,
        ideographicAltOne: 1,
        ideographicAltTwo: 2,
        ideographicAltThree: 3,
        ideographicAltFour: 4,
        ideographicAltFive: 5
      },
      CJKVerticalRomanPlacement: {
        code: 31,
        exclusive: true,
        CJKVerticalRomanCentered: 0,
        CJKVerticalRomanHBaseline: 1
      },
      italicCJKRoman: {
        code: 32,
        exclusive: false,
        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
        CJKItalicRoman: 2
      },
      caseSensitiveLayout: {
        code: 33,
        exclusive: false,
        caseSensitiveLayout: 0,
        caseSensitiveSpacing: 2
      },
      alternateKana: {
        code: 34,
        exclusive: false,
        alternateHorizKana: 0,
        alternateVertKana: 2
      },
      stylisticAlternatives: {
        code: 35,
        exclusive: false,
        noStylisticAlternates: 0,
        stylisticAltOne: 2,
        stylisticAltTwo: 4,
        stylisticAltThree: 6,
        stylisticAltFour: 8,
        stylisticAltFive: 10,
        stylisticAltSix: 12,
        stylisticAltSeven: 14,
        stylisticAltEight: 16,
        stylisticAltNine: 18,
        stylisticAltTen: 20,
        stylisticAltEleven: 22,
        stylisticAltTwelve: 24,
        stylisticAltThirteen: 26,
        stylisticAltFourteen: 28,
        stylisticAltFifteen: 30,
        stylisticAltSixteen: 32,
        stylisticAltSeventeen: 34,
        stylisticAltEighteen: 36,
        stylisticAltNineteen: 38,
        stylisticAltTwenty: 40
      },
      contextualAlternates: {
        code: 36,
        exclusive: false,
        contextualAlternates: 0,
        swashAlternates: 2,
        contextualSwashAlternates: 4
      },
      lowerCase: {
        code: 37,
        exclusive: true,
        defaultLowerCase: 0,
        lowerCaseSmallCaps: 1,
        lowerCasePetiteCaps: 2
      },
      upperCase: {
        code: 38,
        exclusive: true,
        defaultUpperCase: 0,
        upperCaseSmallCaps: 1,
        upperCasePetiteCaps: 2
      },
      languageTag: {
        code: 39,
        exclusive: true
      },
      CJKRomanSpacing: {
        code: 103,
        exclusive: true,
        halfWidthCJKRoman: 0,
        proportionalCJKRoman: 1,
        defaultCJKRoman: 2,
        fullWidthCJKRoman: 3
      }
    };
    var $38911a2c3f8fd728$var$feature = (name, selector) => [
      $38911a2c3f8fd728$var$features[name].code,
      $38911a2c3f8fd728$var$features[name][selector]
    ];
    var $38911a2c3f8fd728$var$OTMapping = {
      rlig: $38911a2c3f8fd728$var$feature("ligatures", "requiredLigatures"),
      clig: $38911a2c3f8fd728$var$feature("ligatures", "contextualLigatures"),
      dlig: $38911a2c3f8fd728$var$feature("ligatures", "rareLigatures"),
      hlig: $38911a2c3f8fd728$var$feature("ligatures", "historicalLigatures"),
      liga: $38911a2c3f8fd728$var$feature("ligatures", "commonLigatures"),
      hist: $38911a2c3f8fd728$var$feature("ligatures", "historicalLigatures"),
      smcp: $38911a2c3f8fd728$var$feature("lowerCase", "lowerCaseSmallCaps"),
      pcap: $38911a2c3f8fd728$var$feature("lowerCase", "lowerCasePetiteCaps"),
      frac: $38911a2c3f8fd728$var$feature("fractions", "diagonalFractions"),
      dnom: $38911a2c3f8fd728$var$feature("fractions", "diagonalFractions"),
      numr: $38911a2c3f8fd728$var$feature("fractions", "diagonalFractions"),
      afrc: $38911a2c3f8fd728$var$feature("fractions", "verticalFractions"),
      // aalt
      // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
      // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
      // unic, vatu, vhal, vjmo, vpal, vrt2
      // dist -> trak table?
      // kern, vkrn -> kern table
      // lfbd + opbd + rtbd -> opbd table?
      // mark, mkmk -> acnt table?
      // locl -> languageTag + ltag table
      case: $38911a2c3f8fd728$var$feature("caseSensitiveLayout", "caseSensitiveLayout"),
      ccmp: $38911a2c3f8fd728$var$feature("unicodeDecomposition", "canonicalComposition"),
      cpct: $38911a2c3f8fd728$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
      valt: $38911a2c3f8fd728$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
      swsh: $38911a2c3f8fd728$var$feature("contextualAlternates", "swashAlternates"),
      cswh: $38911a2c3f8fd728$var$feature("contextualAlternates", "contextualSwashAlternates"),
      curs: $38911a2c3f8fd728$var$feature("cursiveConnection", "cursive"),
      c2pc: $38911a2c3f8fd728$var$feature("upperCase", "upperCasePetiteCaps"),
      c2sc: $38911a2c3f8fd728$var$feature("upperCase", "upperCaseSmallCaps"),
      init: $38911a2c3f8fd728$var$feature("smartSwash", "wordInitialSwashes"),
      fin2: $38911a2c3f8fd728$var$feature("smartSwash", "wordFinalSwashes"),
      medi: $38911a2c3f8fd728$var$feature("smartSwash", "nonFinalSwashes"),
      med2: $38911a2c3f8fd728$var$feature("smartSwash", "nonFinalSwashes"),
      fin3: $38911a2c3f8fd728$var$feature("smartSwash", "wordFinalSwashes"),
      fina: $38911a2c3f8fd728$var$feature("smartSwash", "wordFinalSwashes"),
      pkna: $38911a2c3f8fd728$var$feature("kanaSpacing", "proportionalKana"),
      half: $38911a2c3f8fd728$var$feature("textSpacing", "halfWidthText"),
      halt: $38911a2c3f8fd728$var$feature("textSpacing", "altHalfWidthText"),
      hkna: $38911a2c3f8fd728$var$feature("alternateKana", "alternateHorizKana"),
      vkna: $38911a2c3f8fd728$var$feature("alternateKana", "alternateVertKana"),
      // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
      ital: $38911a2c3f8fd728$var$feature("italicCJKRoman", "CJKItalicRoman"),
      lnum: $38911a2c3f8fd728$var$feature("numberCase", "upperCaseNumbers"),
      onum: $38911a2c3f8fd728$var$feature("numberCase", "lowerCaseNumbers"),
      mgrk: $38911a2c3f8fd728$var$feature("mathematicalExtras", "mathematicalGreek"),
      // nalt: not enough info. what type of annotation?
      // ornm: ditto, which ornament style?
      calt: $38911a2c3f8fd728$var$feature("contextualAlternates", "contextualAlternates"),
      vrt2: $38911a2c3f8fd728$var$feature("verticalSubstitution", "substituteVerticalForms"),
      vert: $38911a2c3f8fd728$var$feature("verticalSubstitution", "substituteVerticalForms"),
      tnum: $38911a2c3f8fd728$var$feature("numberSpacing", "monospacedNumbers"),
      pnum: $38911a2c3f8fd728$var$feature("numberSpacing", "proportionalNumbers"),
      sups: $38911a2c3f8fd728$var$feature("verticalPosition", "superiors"),
      subs: $38911a2c3f8fd728$var$feature("verticalPosition", "inferiors"),
      ordn: $38911a2c3f8fd728$var$feature("verticalPosition", "ordinals"),
      pwid: $38911a2c3f8fd728$var$feature("textSpacing", "proportionalText"),
      hwid: $38911a2c3f8fd728$var$feature("textSpacing", "halfWidthText"),
      qwid: $38911a2c3f8fd728$var$feature("textSpacing", "quarterWidthText"),
      twid: $38911a2c3f8fd728$var$feature("textSpacing", "thirdWidthText"),
      fwid: $38911a2c3f8fd728$var$feature("textSpacing", "proportionalText"),
      palt: $38911a2c3f8fd728$var$feature("textSpacing", "altProportionalText"),
      trad: $38911a2c3f8fd728$var$feature("characterShape", "traditionalCharacters"),
      smpl: $38911a2c3f8fd728$var$feature("characterShape", "simplifiedCharacters"),
      jp78: $38911a2c3f8fd728$var$feature("characterShape", "JIS1978Characters"),
      jp83: $38911a2c3f8fd728$var$feature("characterShape", "JIS1983Characters"),
      jp90: $38911a2c3f8fd728$var$feature("characterShape", "JIS1990Characters"),
      jp04: $38911a2c3f8fd728$var$feature("characterShape", "JIS2004Characters"),
      expt: $38911a2c3f8fd728$var$feature("characterShape", "expertCharacters"),
      hojo: $38911a2c3f8fd728$var$feature("characterShape", "hojoCharacters"),
      nlck: $38911a2c3f8fd728$var$feature("characterShape", "NLCCharacters"),
      tnam: $38911a2c3f8fd728$var$feature("characterShape", "traditionalNamesCharacters"),
      ruby: $38911a2c3f8fd728$var$feature("rubyKana", "rubyKana"),
      titl: $38911a2c3f8fd728$var$feature("styleOptions", "titlingCaps"),
      zero: $38911a2c3f8fd728$var$feature("typographicExtras", "slashedZero"),
      ss01: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltOne"),
      ss02: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltTwo"),
      ss03: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltThree"),
      ss04: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltFour"),
      ss05: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltFive"),
      ss06: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltSix"),
      ss07: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltSeven"),
      ss08: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltEight"),
      ss09: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltNine"),
      ss10: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltTen"),
      ss11: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltEleven"),
      ss12: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltTwelve"),
      ss13: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltThirteen"),
      ss14: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltFourteen"),
      ss15: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltFifteen"),
      ss16: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltSixteen"),
      ss17: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltSeventeen"),
      ss18: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltEighteen"),
      ss19: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltNineteen"),
      ss20: $38911a2c3f8fd728$var$feature("stylisticAlternatives", "stylisticAltTwenty")
    };
    for (let i2 = 1; i2 <= 99; i2++)
      $38911a2c3f8fd728$var$OTMapping[`cv${`00${i2}`.slice(-2)}`] = [
        $38911a2c3f8fd728$var$features.characterAlternatives.code,
        i2
      ];
    var $38911a2c3f8fd728$var$AATMapping = {};
    for (let ot in $38911a2c3f8fd728$var$OTMapping) {
      let aat = $38911a2c3f8fd728$var$OTMapping[ot];
      if ($38911a2c3f8fd728$var$AATMapping[aat[0]] == null)
        $38911a2c3f8fd728$var$AATMapping[aat[0]] = {};
      $38911a2c3f8fd728$var$AATMapping[aat[0]][aat[1]] = ot;
    }
    function $38911a2c3f8fd728$export$b813f7d2a1677c16(features) {
      let res = {};
      for (let k in features) {
        let r;
        if (r = $38911a2c3f8fd728$var$OTMapping[k]) {
          if (res[r[0]] == null)
            res[r[0]] = {};
          res[r[0]][r[1]] = features[k];
        }
      }
      return res;
    }
    function $38911a2c3f8fd728$var$mapFeatureStrings(f) {
      let [type, setting] = f;
      if (isNaN(type))
        var typeCode = $38911a2c3f8fd728$var$features[type] && $38911a2c3f8fd728$var$features[type].code;
      else
        var typeCode = type;
      if (isNaN(setting))
        var settingCode = $38911a2c3f8fd728$var$features[type] && $38911a2c3f8fd728$var$features[type][setting];
      else
        var settingCode = setting;
      return [
        typeCode,
        settingCode
      ];
    }
    function $38911a2c3f8fd728$export$bd6df347a4f391c4(features) {
      let res = {};
      if (Array.isArray(features))
        for (let k = 0; k < features.length; k++) {
          let r;
          let f = $38911a2c3f8fd728$var$mapFeatureStrings(features[k]);
          if (r = $38911a2c3f8fd728$var$AATMapping[f[0]] && $38911a2c3f8fd728$var$AATMapping[f[0]][f[1]])
            res[r] = true;
        }
      else if (typeof features === "object")
        for (let type in features) {
          let feature = features[type];
          for (let setting in feature) {
            let r;
            let f = $38911a2c3f8fd728$var$mapFeatureStrings([
              type,
              setting
            ]);
            if (feature[setting] && (r = $38911a2c3f8fd728$var$AATMapping[f[0]] && $38911a2c3f8fd728$var$AATMapping[f[0]][f[1]]))
              res[r] = true;
          }
        }
      return Object.keys(res);
    }
    var _class;
    var $c2212a1e30c3e5e2$export$2e2bcd8739ae039 = (_class = class $c2212a1e30c3e5e2$export$2e2bcd8739ae039 {
      lookup(glyph) {
        switch (this.table.version) {
          case 0:
            return this.table.values.getItem(glyph);
          case 2:
          case 4: {
            let min = 0;
            let max = this.table.binarySearchHeader.nUnits - 1;
            while (min <= max) {
              var mid = min + max >> 1;
              var seg = this.table.segments[mid];
              if (seg.firstGlyph === 65535)
                return null;
              if (glyph < seg.firstGlyph)
                max = mid - 1;
              else if (glyph > seg.lastGlyph)
                min = mid + 1;
              else {
                if (this.table.version === 2)
                  return seg.value;
                else
                  return seg.values[glyph - seg.firstGlyph];
              }
            }
            return null;
          }
          case 6: {
            let min = 0;
            let max = this.table.binarySearchHeader.nUnits - 1;
            while (min <= max) {
              var mid = min + max >> 1;
              var seg = this.table.segments[mid];
              if (seg.glyph === 65535)
                return null;
              if (glyph < seg.glyph)
                max = mid - 1;
              else if (glyph > seg.glyph)
                min = mid + 1;
              else
                return seg.value;
            }
            return null;
          }
          case 8:
            return this.table.values[glyph - this.table.firstGlyph];
          default:
            throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
      }
      glyphsForValue(classValue) {
        let res = [];
        switch (this.table.version) {
          case 2:
          case 4:
            for (let segment of this.table.segments)
              if (this.table.version === 2 && segment.value === classValue)
                res.push(...$c07919491d3366c0$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));
              else {
                for (let index = 0; index < segment.values.length; index++)
                  if (segment.values[index] === classValue)
                    res.push(segment.firstGlyph + index);
              }
            break;
          case 6:
            for (let segment1 of this.table.segments)
              if (segment1.value === classValue)
                res.push(segment1.glyph);
            break;
          case 8:
            for (let i2 = 0; i2 < this.table.values.length; i2++)
              if (this.table.values[i2] === classValue)
                res.push(this.table.firstGlyph + i2);
            break;
          default:
            throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
        return res;
      }
      constructor(table) {
        this.table = table;
      }
    }, $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "glyphsForValue", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "glyphsForValue"), _class.prototype), _class);
    var $301debcb54a1563f$var$START_OF_TEXT_STATE = 0;
    var $301debcb54a1563f$var$END_OF_TEXT_CLASS = 0;
    var $301debcb54a1563f$var$OUT_OF_BOUNDS_CLASS = 1;
    var $301debcb54a1563f$var$DELETED_GLYPH_CLASS = 2;
    var $301debcb54a1563f$var$DONT_ADVANCE = 16384;
    var $301debcb54a1563f$export$2e2bcd8739ae039 = class {
      process(glyphs, reverse, processEntry) {
        let currentState = $301debcb54a1563f$var$START_OF_TEXT_STATE;
        let index = reverse ? glyphs.length - 1 : 0;
        let dir = reverse ? -1 : 1;
        while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {
          let glyph = null;
          let classCode = $301debcb54a1563f$var$OUT_OF_BOUNDS_CLASS;
          let shouldAdvance = true;
          if (index === glyphs.length || index === -1)
            classCode = $301debcb54a1563f$var$END_OF_TEXT_CLASS;
          else {
            glyph = glyphs[index];
            if (glyph.id === 65535)
              classCode = $301debcb54a1563f$var$DELETED_GLYPH_CLASS;
            else {
              classCode = this.lookupTable.lookup(glyph.id);
              if (classCode == null)
                classCode = $301debcb54a1563f$var$OUT_OF_BOUNDS_CLASS;
            }
          }
          let row = this.stateTable.stateArray.getItem(currentState);
          let entryIndex = row[classCode];
          let entry = this.stateTable.entryTable.getItem(entryIndex);
          if (classCode !== $301debcb54a1563f$var$END_OF_TEXT_CLASS && classCode !== $301debcb54a1563f$var$DELETED_GLYPH_CLASS) {
            processEntry(glyph, entry, index);
            shouldAdvance = !(entry.flags & $301debcb54a1563f$var$DONT_ADVANCE);
          }
          currentState = entry.newState;
          if (shouldAdvance)
            index += dir;
        }
        return glyphs;
      }
      /**
      * Performs a depth-first traversal of the glyph strings
      * represented by the state machine.
      */
      traverse(opts, state = 0, visited = /* @__PURE__ */ new Set()) {
        if (visited.has(state))
          return;
        visited.add(state);
        let { nClasses, stateArray, entryTable } = this.stateTable;
        let row = stateArray.getItem(state);
        for (let classCode = 4; classCode < nClasses; classCode++) {
          let entryIndex = row[classCode];
          let entry = entryTable.getItem(entryIndex);
          for (let glyph of this.lookupTable.glyphsForValue(classCode)) {
            if (opts.enter)
              opts.enter(glyph, entry);
            if (entry.newState !== 0)
              this.traverse(opts, entry.newState, visited);
            if (opts.exit)
              opts.exit(glyph, entry);
          }
        }
      }
      constructor(stateTable) {
        this.stateTable = stateTable;
        this.lookupTable = new $c2212a1e30c3e5e2$export$2e2bcd8739ae039(stateTable.classTable);
      }
    };
    var _class;
    var $2dec272f88a4e9d9$var$MARK_FIRST = 32768;
    var $2dec272f88a4e9d9$var$MARK_LAST = 8192;
    var $2dec272f88a4e9d9$var$VERB = 15;
    var $2dec272f88a4e9d9$var$SET_MARK = 32768;
    var $2dec272f88a4e9d9$var$SET_COMPONENT = 32768;
    var $2dec272f88a4e9d9$var$PERFORM_ACTION = 8192;
    var $2dec272f88a4e9d9$var$LAST_MASK = 2147483648;
    var $2dec272f88a4e9d9$var$STORE_MASK = 1073741824;
    var $2dec272f88a4e9d9$var$OFFSET_MASK = 1073741823;
    var $2dec272f88a4e9d9$var$REVERSE_DIRECTION = 4194304;
    var $2dec272f88a4e9d9$var$CURRENT_INSERT_BEFORE = 2048;
    var $2dec272f88a4e9d9$var$MARKED_INSERT_BEFORE = 1024;
    var $2dec272f88a4e9d9$var$CURRENT_INSERT_COUNT = 992;
    var $2dec272f88a4e9d9$var$MARKED_INSERT_COUNT = 31;
    var $2dec272f88a4e9d9$export$2e2bcd8739ae039 = (_class = class $2dec272f88a4e9d9$export$2e2bcd8739ae039 {
      // Processes an array of glyphs and applies the specified features
      // Features should be in the form of {featureType:{featureSetting:boolean}}
      process(glyphs, features = {}) {
        for (let chain of this.morx.chains) {
          let flags = chain.defaultFlags;
          for (let feature of chain.features) {
            let f;
            if (f = features[feature.featureType]) {
              if (f[feature.featureSetting]) {
                flags &= feature.disableFlags;
                flags |= feature.enableFlags;
              } else if (f[feature.featureSetting] === false) {
                flags |= ~feature.disableFlags;
                flags &= ~feature.enableFlags;
              }
            }
          }
          for (let subtable of chain.subtables)
            if (subtable.subFeatureFlags & flags)
              this.processSubtable(subtable, glyphs);
        }
        let index = glyphs.length - 1;
        while (index >= 0) {
          if (glyphs[index].id === 65535)
            glyphs.splice(index, 1);
          index--;
        }
        return glyphs;
      }
      processSubtable(subtable, glyphs) {
        this.subtable = subtable;
        this.glyphs = glyphs;
        if (this.subtable.type === 4) {
          this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
          return;
        }
        this.ligatureStack = [];
        this.markedGlyph = null;
        this.firstGlyph = null;
        this.lastGlyph = null;
        this.markedIndex = null;
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let reverse = !!(this.subtable.coverage & $2dec272f88a4e9d9$var$REVERSE_DIRECTION);
        return stateMachine.process(this.glyphs, reverse, process);
      }
      getStateMachine(subtable) {
        return new $301debcb54a1563f$export$2e2bcd8739ae039(subtable.table.stateTable);
      }
      getProcessor() {
        switch (this.subtable.type) {
          case 0:
            return this.processIndicRearragement;
          case 1:
            return this.processContextualSubstitution;
          case 2:
            return this.processLigature;
          case 4:
            return this.processNoncontextualSubstitutions;
          case 5:
            return this.processGlyphInsertion;
          default:
            throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
        }
      }
      processIndicRearragement(glyph, entry, index) {
        if (entry.flags & $2dec272f88a4e9d9$var$MARK_FIRST)
          this.firstGlyph = index;
        if (entry.flags & $2dec272f88a4e9d9$var$MARK_LAST)
          this.lastGlyph = index;
        $2dec272f88a4e9d9$var$reorderGlyphs(this.glyphs, entry.flags & $2dec272f88a4e9d9$var$VERB, this.firstGlyph, this.lastGlyph);
      }
      processContextualSubstitution(glyph, entry, index) {
        let subsitutions = this.subtable.table.substitutionTable.items;
        if (entry.markIndex !== 65535) {
          let lookup = subsitutions.getItem(entry.markIndex);
          let lookupTable = new $c2212a1e30c3e5e2$export$2e2bcd8739ae039(lookup);
          glyph = this.glyphs[this.markedGlyph];
          var gid = lookupTable.lookup(glyph.id);
          if (gid)
            this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.currentIndex !== 65535) {
          let lookup = subsitutions.getItem(entry.currentIndex);
          let lookupTable = new $c2212a1e30c3e5e2$export$2e2bcd8739ae039(lookup);
          glyph = this.glyphs[index];
          var gid = lookupTable.lookup(glyph.id);
          if (gid)
            this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.flags & $2dec272f88a4e9d9$var$SET_MARK)
          this.markedGlyph = index;
      }
      processLigature(glyph, entry, index) {
        if (entry.flags & $2dec272f88a4e9d9$var$SET_COMPONENT)
          this.ligatureStack.push(index);
        if (entry.flags & $2dec272f88a4e9d9$var$PERFORM_ACTION) {
          let actions = this.subtable.table.ligatureActions;
          let components = this.subtable.table.components;
          let ligatureList = this.subtable.table.ligatureList;
          let actionIndex = entry.action;
          let last = false;
          let ligatureIndex = 0;
          let codePoints = [];
          let ligatureGlyphs = [];
          while (!last) {
            let componentGlyph = this.ligatureStack.pop();
            codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
            let action = actions.getItem(actionIndex++);
            last = !!(action & $2dec272f88a4e9d9$var$LAST_MASK);
            let store = !!(action & $2dec272f88a4e9d9$var$STORE_MASK);
            let offset = (action & $2dec272f88a4e9d9$var$OFFSET_MASK) << 2 >> 2;
            offset += this.glyphs[componentGlyph].id;
            let component = components.getItem(offset);
            ligatureIndex += component;
            if (last || store) {
              let ligatureEntry = ligatureList.getItem(ligatureIndex);
              this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
              ligatureGlyphs.push(componentGlyph);
              ligatureIndex = 0;
              codePoints = [];
            } else
              this.glyphs[componentGlyph] = this.font.getGlyph(65535);
          }
          this.ligatureStack.push(...ligatureGlyphs);
        }
      }
      processNoncontextualSubstitutions(subtable, glyphs, index) {
        let lookupTable = new $c2212a1e30c3e5e2$export$2e2bcd8739ae039(subtable.table.lookupTable);
        for (index = 0; index < glyphs.length; index++) {
          let glyph = glyphs[index];
          if (glyph.id !== 65535) {
            let gid = lookupTable.lookup(glyph.id);
            if (gid)
              glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
          }
        }
      }
      _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
        let insertions = [];
        while (count--) {
          let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
          insertions.push(this.font.getGlyph(gid));
        }
        if (!isBefore)
          glyphIndex++;
        this.glyphs.splice(glyphIndex, 0, ...insertions);
      }
      processGlyphInsertion(glyph, entry, index) {
        if (entry.flags & $2dec272f88a4e9d9$var$SET_MARK)
          this.markedIndex = index;
        if (entry.markedInsertIndex !== 65535) {
          let count = (entry.flags & $2dec272f88a4e9d9$var$MARKED_INSERT_COUNT) >>> 5;
          let isBefore = !!(entry.flags & $2dec272f88a4e9d9$var$MARKED_INSERT_BEFORE);
          this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
        }
        if (entry.currentInsertIndex !== 65535) {
          let count = (entry.flags & $2dec272f88a4e9d9$var$CURRENT_INSERT_COUNT) >>> 5;
          let isBefore = !!(entry.flags & $2dec272f88a4e9d9$var$CURRENT_INSERT_BEFORE);
          this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
        }
      }
      getSupportedFeatures() {
        let features = [];
        for (let chain of this.morx.chains)
          for (let feature of chain.features)
            features.push([
              feature.featureType,
              feature.featureSetting
            ]);
        return features;
      }
      generateInputs(gid) {
        if (!this.inputCache)
          this.generateInputCache();
        return this.inputCache[gid] || [];
      }
      generateInputCache() {
        this.inputCache = {};
        for (let chain of this.morx.chains) {
          let flags = chain.defaultFlags;
          for (let subtable of chain.subtables)
            if (subtable.subFeatureFlags & flags)
              this.generateInputsForSubtable(subtable);
        }
      }
      generateInputsForSubtable(subtable) {
        if (subtable.type !== 2)
          return;
        let reverse = !!(subtable.coverage & $2dec272f88a4e9d9$var$REVERSE_DIRECTION);
        if (reverse)
          throw new Error("Reverse subtable, not supported.");
        this.subtable = subtable;
        this.ligatureStack = [];
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let input = [];
        let stack = [];
        this.glyphs = [];
        stateMachine.traverse({
          enter: (glyph, entry) => {
            let glyphs = this.glyphs;
            stack.push({
              glyphs: glyphs.slice(),
              ligatureStack: this.ligatureStack.slice()
            });
            let g1 = this.font.getGlyph(glyph);
            input.push(g1);
            glyphs.push(input[input.length - 1]);
            process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
            let count = 0;
            let found = 0;
            for (let i2 = 0; i2 < glyphs.length && count <= 1; i2++)
              if (glyphs[i2].id !== 65535) {
                count++;
                found = glyphs[i2].id;
              }
            if (count === 1) {
              let result = input.map(
                (g) => g.id
              );
              let cache = this.inputCache[found];
              if (cache)
                cache.push(result);
              else
                this.inputCache[found] = [
                  result
                ];
            }
          },
          exit: () => {
            ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());
            input.pop();
          }
        });
      }
      constructor(font) {
        this.processIndicRearragement = this.processIndicRearragement.bind(this);
        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
        this.processLigature = this.processLigature.bind(this);
        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
        this.font = font;
        this.morx = font.morx;
        this.inputCache = null;
      }
    }, $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "getStateMachine", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "getStateMachine"), _class.prototype), _class);
    function $2dec272f88a4e9d9$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
      let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
      if (reverseB)
        end.reverse();
      let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
      if (reverseA)
        start.reverse();
      glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
      return glyphs;
    }
    function $2dec272f88a4e9d9$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
      let length = lastGlyph - firstGlyph + 1;
      switch (verb) {
        case 0:
          return glyphs;
        case 1:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            0
          ]);
        case 2:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            1
          ]);
        case 3:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            1
          ]);
        case 4:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            0
          ]);
        case 5:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            0
          ], true, false);
        case 6:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            2
          ]);
        case 7:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            0
          ], [
            lastGlyph,
            2
          ], false, true);
        case 8:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            2
          ]);
        case 9:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            1
          ], [
            lastGlyph,
            2
          ], false, true);
        case 10:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            1
          ]);
        case 11:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            1
          ], true, false);
        case 12:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ]);
        case 13:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], true, false);
        case 14:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], false, true);
        case 15:
          return $2dec272f88a4e9d9$var$swap(glyphs, [
            firstGlyph,
            2
          ], [
            lastGlyph,
            2
          ], true, true);
        default:
          throw new Error(`Unknown verb: ${verb}`);
      }
    }
    var $7cff22d3cf7aa55a$export$2e2bcd8739ae039 = class {
      substitute(glyphRun) {
        if (glyphRun.direction === "rtl")
          glyphRun.glyphs.reverse();
        this.morxProcessor.process(glyphRun.glyphs, $38911a2c3f8fd728$export$b813f7d2a1677c16(glyphRun.features));
      }
      getAvailableFeatures(script, language) {
        return $38911a2c3f8fd728$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
      }
      stringsForGlyph(gid) {
        let glyphStrings = this.morxProcessor.generateInputs(gid);
        let result = /* @__PURE__ */ new Set();
        for (let glyphs of glyphStrings)
          this._addStrings(glyphs, 0, result, "");
        return result;
      }
      _addStrings(glyphs, index, strings, string) {
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
        for (let codePoint of codePoints) {
          let s = string + String.fromCodePoint(codePoint);
          if (index < glyphs.length - 1)
            this._addStrings(glyphs, index + 1, strings, s);
          else
            strings.add(s);
        }
      }
      constructor(font) {
        this.font = font;
        this.morxProcessor = new $2dec272f88a4e9d9$export$2e2bcd8739ae039(font);
        this.fallbackPosition = false;
      }
    };
    var $6703eaa61400de19$export$2e2bcd8739ae039 = class {
      /**
      * Adds the given features to the last stage.
      * Ignores features that have already been applied.
      */
      _addFeatures(features, global2) {
        let stageIndex = this.stages.length - 1;
        let stage = this.stages[stageIndex];
        for (let feature of features)
          if (this.allFeatures[feature] == null) {
            stage.push(feature);
            this.allFeatures[feature] = stageIndex;
            if (global2)
              this.globalFeatures[feature] = true;
          }
      }
      /**
      * Add features to the last stage
      */
      add(arg, global2 = true) {
        if (this.stages.length === 0)
          this.stages.push([]);
        if (typeof arg === "string")
          arg = [
            arg
          ];
        if (Array.isArray(arg))
          this._addFeatures(arg, global2);
        else if (typeof arg === "object") {
          this._addFeatures(arg.global || [], true);
          this._addFeatures(arg.local || [], false);
        } else
          throw new Error("Unsupported argument to ShapingPlan#add");
      }
      /**
      * Add a new stage
      */
      addStage(arg, global2) {
        if (typeof arg === "function")
          this.stages.push(arg, []);
        else {
          this.stages.push([]);
          this.add(arg, global2);
        }
      }
      setFeatureOverrides(features) {
        if (Array.isArray(features))
          this.add(features);
        else if (typeof features === "object")
          for (let tag in features) {
            if (features[tag])
              this.add(tag);
            else if (this.allFeatures[tag] != null) {
              let stage = this.stages[this.allFeatures[tag]];
              stage.splice(stage.indexOf(tag), 1);
              delete this.allFeatures[tag];
              delete this.globalFeatures[tag];
            }
          }
      }
      /**
      * Assigns the global features to the given glyphs
      */
      assignGlobalFeatures(glyphs) {
        for (let glyph of glyphs)
          for (let feature in this.globalFeatures)
            glyph.features[feature] = true;
      }
      /**
      * Executes the planned stages using the given OTProcessor
      */
      process(processor, glyphs, positions) {
        for (let stage of this.stages) {
          if (typeof stage === "function") {
            if (!positions)
              stage(this.font, glyphs, this);
          } else if (stage.length > 0)
            processor.applyFeatures(stage, glyphs, positions);
        }
      }
      constructor(font, script, direction) {
        this.font = font;
        this.script = script;
        this.direction = direction;
        this.stages = [];
        this.globalFeatures = {};
        this.allFeatures = {};
      }
    };
    var $4f61fb8204be1a7c$var$VARIATION_FEATURES = [
      "rvrn"
    ];
    var $4f61fb8204be1a7c$var$COMMON_FEATURES = [
      "ccmp",
      "locl",
      "rlig",
      "mark",
      "mkmk"
    ];
    var $4f61fb8204be1a7c$var$FRACTIONAL_FEATURES = [
      "frac",
      "numr",
      "dnom"
    ];
    var $4f61fb8204be1a7c$var$HORIZONTAL_FEATURES = [
      "calt",
      "clig",
      "liga",
      "rclt",
      "curs",
      "kern"
    ];
    var $4f61fb8204be1a7c$var$DIRECTIONAL_FEATURES = {
      ltr: [
        "ltra",
        "ltrm"
      ],
      rtl: [
        "rtla",
        "rtlm"
      ]
    };
    var $4f61fb8204be1a7c$export$2e2bcd8739ae039 = class {
      static plan(plan, glyphs, features) {
        this.planPreprocessing(plan);
        this.planFeatures(plan);
        this.planPostprocessing(plan, features);
        plan.assignGlobalFeatures(glyphs);
        this.assignFeatures(plan, glyphs);
      }
      static planPreprocessing(plan) {
        plan.add({
          global: [
            ...$4f61fb8204be1a7c$var$VARIATION_FEATURES,
            ...$4f61fb8204be1a7c$var$DIRECTIONAL_FEATURES[plan.direction]
          ],
          local: $4f61fb8204be1a7c$var$FRACTIONAL_FEATURES
        });
      }
      static planFeatures(plan) {
      }
      static planPostprocessing(plan, userFeatures) {
        plan.add([
          ...$4f61fb8204be1a7c$var$COMMON_FEATURES,
          ...$4f61fb8204be1a7c$var$HORIZONTAL_FEATURES
        ]);
        plan.setFeatureOverrides(userFeatures);
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          let glyph = glyphs[i2];
          if (glyph.codePoints[0] === 8260) {
            let start = i2;
            let end = i2 + 1;
            while (start > 0 && $parcel$interopDefault($lzfo4$unicodeproperties).isDigit(glyphs[start - 1].codePoints[0])) {
              glyphs[start - 1].features.numr = true;
              glyphs[start - 1].features.frac = true;
              start--;
            }
            while (end < glyphs.length && $parcel$interopDefault($lzfo4$unicodeproperties).isDigit(glyphs[end].codePoints[0])) {
              glyphs[end].features.dnom = true;
              glyphs[end].features.frac = true;
              end++;
            }
            glyph.features.frac = true;
            i2 = end - 1;
          }
        }
      }
    };
    $lzfo4$swchelpers.defineProperty($4f61fb8204be1a7c$export$2e2bcd8739ae039, "zeroMarkWidths", "AFTER_GPOS");
    var $38a185bbdd6946f1$require$Buffer = $lzfo4$buffer.Buffer;
    var $38a185bbdd6946f1$var$trie = new ($parcel$interopDefault($lzfo4$unicodetrie))($38a185bbdd6946f1$require$Buffer.from("ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=", "base64"));
    var $38a185bbdd6946f1$var$FEATURES = [
      "isol",
      "fina",
      "fin2",
      "fin3",
      "medi",
      "med2",
      "init"
    ];
    var $38a185bbdd6946f1$var$ShapingClasses = {
      Non_Joining: 0,
      Left_Joining: 1,
      Right_Joining: 2,
      Dual_Joining: 3,
      Join_Causing: 3,
      ALAPH: 4,
      "DALATH RISH": 5,
      Transparent: 6
    };
    var $38a185bbdd6946f1$var$ISOL = "isol";
    var $38a185bbdd6946f1$var$FINA = "fina";
    var $38a185bbdd6946f1$var$FIN2 = "fin2";
    var $38a185bbdd6946f1$var$FIN3 = "fin3";
    var $38a185bbdd6946f1$var$MEDI = "medi";
    var $38a185bbdd6946f1$var$MED2 = "med2";
    var $38a185bbdd6946f1$var$INIT = "init";
    var $38a185bbdd6946f1$var$NONE = null;
    var $38a185bbdd6946f1$var$STATE_TABLE = [
      //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
      // State 0: prev was U,  not willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          6
        ]
      ],
      // State 1: prev was R or ISOL/ALAPH,  not willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$FIN2,
          5
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          6
        ]
      ],
      // State 2: prev was D/L in ISOL form,  willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$INIT,
          $38a185bbdd6946f1$var$FINA,
          1
        ],
        [
          $38a185bbdd6946f1$var$INIT,
          $38a185bbdd6946f1$var$FINA,
          3
        ],
        [
          $38a185bbdd6946f1$var$INIT,
          $38a185bbdd6946f1$var$FINA,
          4
        ],
        [
          $38a185bbdd6946f1$var$INIT,
          $38a185bbdd6946f1$var$FINA,
          6
        ]
      ],
      // State 3: prev was D in FINA form,  willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$MEDI,
          $38a185bbdd6946f1$var$FINA,
          1
        ],
        [
          $38a185bbdd6946f1$var$MEDI,
          $38a185bbdd6946f1$var$FINA,
          3
        ],
        [
          $38a185bbdd6946f1$var$MEDI,
          $38a185bbdd6946f1$var$FINA,
          4
        ],
        [
          $38a185bbdd6946f1$var$MEDI,
          $38a185bbdd6946f1$var$FINA,
          6
        ]
      ],
      // State 4: prev was FINA ALAPH,  not willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$MED2,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$MED2,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$MED2,
          $38a185bbdd6946f1$var$FIN2,
          5
        ],
        [
          $38a185bbdd6946f1$var$MED2,
          $38a185bbdd6946f1$var$ISOL,
          6
        ]
      ],
      // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$ISOL,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$ISOL,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$ISOL,
          $38a185bbdd6946f1$var$FIN2,
          5
        ],
        [
          $38a185bbdd6946f1$var$ISOL,
          $38a185bbdd6946f1$var$ISOL,
          6
        ]
      ],
      // State 6: prev was DALATH/RISH,  not willing to join.
      [
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$NONE,
          0
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          1
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          2
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$FIN3,
          5
        ],
        [
          $38a185bbdd6946f1$var$NONE,
          $38a185bbdd6946f1$var$ISOL,
          6
        ]
      ]
    ];
    var $38a185bbdd6946f1$export$2e2bcd8739ae039 = class extends $4f61fb8204be1a7c$export$2e2bcd8739ae039 {
      static planFeatures(plan) {
        plan.add([
          "ccmp",
          "locl"
        ]);
        for (let i2 = 0; i2 < $38a185bbdd6946f1$var$FEATURES.length; i2++) {
          let feature = $38a185bbdd6946f1$var$FEATURES[i2];
          plan.addStage(feature, false);
        }
        plan.addStage("mset");
      }
      static assignFeatures(plan, glyphs) {
        super.assignFeatures(plan, glyphs);
        let prev = -1;
        let state = 0;
        let actions = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          let curAction, prevAction;
          var glyph = glyphs[i2];
          let type = $38a185bbdd6946f1$var$getShapingClass(glyph.codePoints[0]);
          if (type === $38a185bbdd6946f1$var$ShapingClasses.Transparent) {
            actions[i2] = $38a185bbdd6946f1$var$NONE;
            continue;
          }
          [prevAction, curAction, state] = $38a185bbdd6946f1$var$STATE_TABLE[state][type];
          if (prevAction !== $38a185bbdd6946f1$var$NONE && prev !== -1)
            actions[prev] = prevAction;
          actions[i2] = curAction;
          prev = i2;
        }
        for (let index = 0; index < glyphs.length; index++) {
          let feature;
          var glyph = glyphs[index];
          if (feature = actions[index])
            glyph.features[feature] = true;
        }
      }
    };
    function $38a185bbdd6946f1$var$getShapingClass(codePoint) {
      let res = $38a185bbdd6946f1$var$trie.get(codePoint);
      if (res)
        return res - 1;
      let category = $parcel$interopDefault($lzfo4$unicodeproperties).getCategory(codePoint);
      if (category === "Mn" || category === "Me" || category === "Cf")
        return $38a185bbdd6946f1$var$ShapingClasses.Transparent;
      return $38a185bbdd6946f1$var$ShapingClasses.Non_Joining;
    }
    var $9b0d9f7995eda7b8$export$2e2bcd8739ae039 = class {
      reset(options = {}, index = 0) {
        this.options = options;
        this.flags = options.flags || {};
        this.markAttachmentType = options.markAttachmentType || 0;
        this.index = index;
      }
      get cur() {
        return this.glyphs[this.index] || null;
      }
      shouldIgnore(glyph) {
        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
      }
      move(dir) {
        this.index += dir;
        while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))
          this.index += dir;
        if (0 > this.index || this.index >= this.glyphs.length)
          return null;
        return this.glyphs[this.index];
      }
      next() {
        return this.move(1);
      }
      prev() {
        return this.move(-1);
      }
      peek(count = 1) {
        let idx = this.index;
        let res = this.increment(count);
        this.index = idx;
        return res;
      }
      peekIndex(count = 1) {
        let idx = this.index;
        this.increment(count);
        let res = this.index;
        this.index = idx;
        return res;
      }
      increment(count = 1) {
        let dir = count < 0 ? -1 : 1;
        count = Math.abs(count);
        while (count--)
          this.move(dir);
        return this.glyphs[this.index];
      }
      constructor(glyphs, options) {
        this.glyphs = glyphs;
        this.reset(options);
      }
    };
    var $cca6af4639973976$var$DEFAULT_SCRIPTS = [
      "DFLT",
      "dflt",
      "latn"
    ];
    var $cca6af4639973976$export$2e2bcd8739ae039 = class {
      findScript(script) {
        if (this.table.scriptList == null)
          return null;
        if (!Array.isArray(script))
          script = [
            script
          ];
        for (let s of script)
          for (let entry of this.table.scriptList) {
            if (entry.tag === s)
              return entry;
          }
        return null;
      }
      selectScript(script, language, direction) {
        let changed = false;
        let entry;
        if (!this.script || script !== this.scriptTag) {
          entry = this.findScript(script);
          if (!entry)
            entry = this.findScript($cca6af4639973976$var$DEFAULT_SCRIPTS);
          if (!entry)
            return this.scriptTag;
          this.scriptTag = entry.tag;
          this.script = entry.script;
          this.language = null;
          this.languageTag = null;
          changed = true;
        }
        if (!direction || direction !== this.direction)
          this.direction = direction || $2e3a795a88d7e002$export$9fddb9d0dd7d8a54(script);
        if (language && language.length < 4)
          language += " ".repeat(4 - language.length);
        if (!language || language !== this.languageTag) {
          this.language = null;
          for (let lang of this.script.langSysRecords)
            if (lang.tag === language) {
              this.language = lang.langSys;
              this.languageTag = lang.tag;
              break;
            }
          if (!this.language) {
            this.language = this.script.defaultLangSys;
            this.languageTag = null;
          }
          changed = true;
        }
        if (changed) {
          this.features = {};
          if (this.language)
            for (let featureIndex of this.language.featureIndexes) {
              let record = this.table.featureList[featureIndex];
              let substituteFeature = this.substituteFeatureForVariations(featureIndex);
              this.features[record.tag] = substituteFeature || record.feature;
            }
        }
        return this.scriptTag;
      }
      lookupsForFeatures(userFeatures = [], exclude) {
        let lookups = [];
        for (let tag of userFeatures) {
          let feature = this.features[tag];
          if (!feature)
            continue;
          for (let lookupIndex of feature.lookupListIndexes) {
            if (exclude && exclude.indexOf(lookupIndex) !== -1)
              continue;
            lookups.push({
              feature: tag,
              index: lookupIndex,
              lookup: this.table.lookupList.get(lookupIndex)
            });
          }
        }
        lookups.sort(
          (a, b) => a.index - b.index
        );
        return lookups;
      }
      substituteFeatureForVariations(featureIndex) {
        if (this.variationsIndex === -1)
          return null;
        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
        let substitutions = record.featureTableSubstitution.substitutions;
        for (let substitution of substitutions) {
          if (substitution.featureIndex === featureIndex)
            return substitution.alternateFeatureTable;
        }
        return null;
      }
      findVariationsIndex(coords) {
        let variations = this.table.featureVariations;
        if (!variations)
          return -1;
        let records = variations.featureVariationRecords;
        for (let i2 = 0; i2 < records.length; i2++) {
          let conditions = records[i2].conditionSet.conditionTable;
          if (this.variationConditionsMatch(conditions, coords))
            return i2;
        }
        return -1;
      }
      variationConditionsMatch(conditions, coords) {
        return conditions.every((condition) => {
          let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
          return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
        });
      }
      applyFeatures(userFeatures, glyphs, advances) {
        let lookups = this.lookupsForFeatures(userFeatures);
        this.applyLookups(lookups, glyphs, advances);
      }
      applyLookups(lookups, glyphs, positions) {
        this.glyphs = glyphs;
        this.positions = positions;
        this.glyphIterator = new $9b0d9f7995eda7b8$export$2e2bcd8739ae039(glyphs);
        for (let { feature, lookup } of lookups) {
          this.currentFeature = feature;
          this.glyphIterator.reset(lookup.flags);
          while (this.glyphIterator.index < glyphs.length) {
            if (!(feature in this.glyphIterator.cur.features)) {
              this.glyphIterator.next();
              continue;
            }
            for (let table of lookup.subTables) {
              let res = this.applyLookup(lookup.lookupType, table);
              if (res)
                break;
            }
            this.glyphIterator.next();
          }
        }
      }
      applyLookup(lookup, table) {
        throw new Error("applyLookup must be implemented by subclasses");
      }
      applyLookupList(lookupRecords) {
        let options = this.glyphIterator.options;
        let glyphIndex = this.glyphIterator.index;
        for (let lookupRecord of lookupRecords) {
          this.glyphIterator.reset(options, glyphIndex);
          this.glyphIterator.increment(lookupRecord.sequenceIndex);
          let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
          this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
          for (let table of lookup.subTables) {
            if (this.applyLookup(lookup.lookupType, table))
              break;
          }
        }
        this.glyphIterator.reset(options, glyphIndex);
        return true;
      }
      coverageIndex(coverage, glyph) {
        if (glyph == null)
          glyph = this.glyphIterator.cur.id;
        switch (coverage.version) {
          case 1:
            return coverage.glyphs.indexOf(glyph);
          case 2:
            for (let range of coverage.rangeRecords) {
              if (range.start <= glyph && glyph <= range.end)
                return range.startCoverageIndex + glyph - range.start;
            }
            break;
        }
        return -1;
      }
      match(sequenceIndex, sequence, fn, matched) {
        let pos = this.glyphIterator.index;
        let glyph = this.glyphIterator.increment(sequenceIndex);
        let idx = 0;
        while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {
          if (matched)
            matched.push(this.glyphIterator.index);
          idx++;
          glyph = this.glyphIterator.next();
        }
        this.glyphIterator.index = pos;
        if (idx < sequence.length)
          return false;
        return matched || true;
      }
      sequenceMatches(sequenceIndex, sequence) {
        return this.match(
          sequenceIndex,
          sequence,
          (component, glyph) => component === glyph.id
        );
      }
      sequenceMatchIndices(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph) => {
          if (!(this.currentFeature in glyph.features))
            return false;
          return component === glyph.id;
        }, []);
      }
      coverageSequenceMatches(sequenceIndex, sequence) {
        return this.match(
          sequenceIndex,
          sequence,
          (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0
        );
      }
      getClassID(glyph, classDef) {
        switch (classDef.version) {
          case 1:
            let i2 = glyph - classDef.startGlyph;
            if (i2 >= 0 && i2 < classDef.classValueArray.length)
              return classDef.classValueArray[i2];
            break;
          case 2:
            for (let range of classDef.classRangeRecord) {
              if (range.start <= glyph && glyph <= range.end)
                return range.class;
            }
            break;
        }
        return 0;
      }
      classSequenceMatches(sequenceIndex, sequence, classDef) {
        return this.match(
          sequenceIndex,
          sequence,
          (classID, glyph) => classID === this.getClassID(glyph.id, classDef)
        );
      }
      applyContext(table) {
        let index, set;
        switch (table.version) {
          case 1:
            index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            set = table.ruleSets[index];
            for (let rule of set) {
              if (this.sequenceMatches(1, rule.input))
                return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 2:
            if (this.coverageIndex(table.coverage) === -1)
              return false;
            index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
            if (index === -1)
              return false;
            set = table.classSet[index];
            for (let rule1 of set) {
              if (this.classSequenceMatches(1, rule1.classes, table.classDef))
                return this.applyLookupList(rule1.lookupRecords);
            }
            break;
          case 3:
            if (this.coverageSequenceMatches(0, table.coverages))
              return this.applyLookupList(table.lookupRecords);
            break;
        }
        return false;
      }
      applyChainingContext(table) {
        let index;
        switch (table.version) {
          case 1:
            index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            let set = table.chainRuleSets[index];
            for (let rule of set) {
              if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead))
                return this.applyLookupList(rule.lookupRecords);
            }
            break;
          case 2:
            if (this.coverageIndex(table.coverage) === -1)
              return false;
            index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
            let rules = table.chainClassSet[index];
            if (!rules)
              return false;
            for (let rule2 of rules) {
              if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef))
                return this.applyLookupList(rule2.lookupRecords);
            }
            break;
          case 3:
            if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage))
              return this.applyLookupList(table.lookupRecords);
            break;
        }
        return false;
      }
      constructor(font, table) {
        this.font = font;
        this.table = table;
        this.script = null;
        this.scriptTag = null;
        this.language = null;
        this.languageTag = null;
        this.features = {};
        this.lookups = {};
        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
        this.selectScript();
        this.glyphs = [];
        this.positions = [];
        this.ligatureID = 1;
        this.currentFeature = null;
      }
    };
    var $535fa31b81f74b90$export$2e2bcd8739ae039 = class _$535fa31b81f74b90$export$2e2bcd8739ae039 {
      get id() {
        return this._id;
      }
      set id(id) {
        this._id = id;
        this.substituted = true;
        let GDEF = this._font.GDEF;
        if (GDEF && GDEF.glyphClassDef) {
          let classID = $cca6af4639973976$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);
          this.isBase = classID === 1;
          this.isLigature = classID === 2;
          this.isMark = classID === 3;
          this.markAttachmentType = GDEF.markAttachClassDef ? $cca6af4639973976$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
        } else {
          this.isMark = this.codePoints.length > 0 && this.codePoints.every($parcel$interopDefault($lzfo4$unicodeproperties).isMark);
          this.isBase = !this.isMark;
          this.isLigature = this.codePoints.length > 1;
          this.markAttachmentType = 0;
        }
      }
      copy() {
        return new _$535fa31b81f74b90$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
      }
      constructor(font, id, codePoints = [], features) {
        this._font = font;
        this.codePoints = codePoints;
        this.id = id;
        this.features = {};
        if (Array.isArray(features))
          for (let i2 = 0; i2 < features.length; i2++) {
            let feature = features[i2];
            this.features[feature] = true;
          }
        else if (typeof features === "object")
          Object.assign(this.features, features);
        this.ligatureID = null;
        this.ligatureComponent = null;
        this.isLigated = false;
        this.cursiveAttachment = null;
        this.markAttachment = null;
        this.shaperInfo = null;
        this.substituted = false;
        this.isMultiplied = false;
      }
    };
    var $643b4d234d3e305f$export$2e2bcd8739ae039 = class extends $4f61fb8204be1a7c$export$2e2bcd8739ae039 {
      static planFeatures(plan) {
        plan.add([
          "ljmo",
          "vjmo",
          "tjmo"
        ], false);
      }
      static assignFeatures(plan, glyphs) {
        let state = 0;
        let i2 = 0;
        while (i2 < glyphs.length) {
          let action;
          let glyph = glyphs[i2];
          let code = glyph.codePoints[0];
          let type = $643b4d234d3e305f$var$getType(code);
          [action, state] = $643b4d234d3e305f$var$STATE_TABLE[state][type];
          switch (action) {
            case $643b4d234d3e305f$var$DECOMPOSE:
              if (!plan.font.hasGlyphForCodePoint(code))
                i2 = $643b4d234d3e305f$var$decompose(glyphs, i2, plan.font);
              break;
            case $643b4d234d3e305f$var$COMPOSE:
              i2 = $643b4d234d3e305f$var$compose(glyphs, i2, plan.font);
              break;
            case $643b4d234d3e305f$var$TONE_MARK:
              $643b4d234d3e305f$var$reorderToneMark(glyphs, i2, plan.font);
              break;
            case $643b4d234d3e305f$var$INVALID:
              i2 = $643b4d234d3e305f$var$insertDottedCircle(glyphs, i2, plan.font);
              break;
          }
          i2++;
        }
      }
    };
    $lzfo4$swchelpers.defineProperty($643b4d234d3e305f$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
    var $643b4d234d3e305f$var$HANGUL_BASE = 44032;
    var $643b4d234d3e305f$var$HANGUL_END = 55204;
    var $643b4d234d3e305f$var$HANGUL_COUNT = $643b4d234d3e305f$var$HANGUL_END - $643b4d234d3e305f$var$HANGUL_BASE + 1;
    var $643b4d234d3e305f$var$L_BASE = 4352;
    var $643b4d234d3e305f$var$V_BASE = 4449;
    var $643b4d234d3e305f$var$T_BASE = 4519;
    var $643b4d234d3e305f$var$L_COUNT = 19;
    var $643b4d234d3e305f$var$V_COUNT = 21;
    var $643b4d234d3e305f$var$T_COUNT = 28;
    var $643b4d234d3e305f$var$L_END = $643b4d234d3e305f$var$L_BASE + $643b4d234d3e305f$var$L_COUNT - 1;
    var $643b4d234d3e305f$var$V_END = $643b4d234d3e305f$var$V_BASE + $643b4d234d3e305f$var$V_COUNT - 1;
    var $643b4d234d3e305f$var$T_END = $643b4d234d3e305f$var$T_BASE + $643b4d234d3e305f$var$T_COUNT - 1;
    var $643b4d234d3e305f$var$DOTTED_CIRCLE = 9676;
    var $643b4d234d3e305f$var$isL = (code) => 4352 <= code && code <= 4447 || 43360 <= code && code <= 43388;
    var $643b4d234d3e305f$var$isV = (code) => 4448 <= code && code <= 4519 || 55216 <= code && code <= 55238;
    var $643b4d234d3e305f$var$isT = (code) => 4520 <= code && code <= 4607 || 55243 <= code && code <= 55291;
    var $643b4d234d3e305f$var$isTone = (code) => 12334 <= code && code <= 12335;
    var $643b4d234d3e305f$var$isLVT = (code) => $643b4d234d3e305f$var$HANGUL_BASE <= code && code <= $643b4d234d3e305f$var$HANGUL_END;
    var $643b4d234d3e305f$var$isLV = (code) => code - $643b4d234d3e305f$var$HANGUL_BASE < $643b4d234d3e305f$var$HANGUL_COUNT && (code - $643b4d234d3e305f$var$HANGUL_BASE) % $643b4d234d3e305f$var$T_COUNT === 0;
    var $643b4d234d3e305f$var$isCombiningL = (code) => $643b4d234d3e305f$var$L_BASE <= code && code <= $643b4d234d3e305f$var$L_END;
    var $643b4d234d3e305f$var$isCombiningV = (code) => $643b4d234d3e305f$var$V_BASE <= code && code <= $643b4d234d3e305f$var$V_END;
    var $643b4d234d3e305f$var$isCombiningT = (code) => $643b4d234d3e305f$var$T_BASE + 1 && 1 <= code && code <= $643b4d234d3e305f$var$T_END;
    var $643b4d234d3e305f$var$X = 0;
    var $643b4d234d3e305f$var$L = 1;
    var $643b4d234d3e305f$var$V = 2;
    var $643b4d234d3e305f$var$T = 3;
    var $643b4d234d3e305f$var$LV = 4;
    var $643b4d234d3e305f$var$LVT = 5;
    var $643b4d234d3e305f$var$M = 6;
    function $643b4d234d3e305f$var$getType(code) {
      if ($643b4d234d3e305f$var$isL(code))
        return $643b4d234d3e305f$var$L;
      if ($643b4d234d3e305f$var$isV(code))
        return $643b4d234d3e305f$var$V;
      if ($643b4d234d3e305f$var$isT(code))
        return $643b4d234d3e305f$var$T;
      if ($643b4d234d3e305f$var$isLV(code))
        return $643b4d234d3e305f$var$LV;
      if ($643b4d234d3e305f$var$isLVT(code))
        return $643b4d234d3e305f$var$LVT;
      if ($643b4d234d3e305f$var$isTone(code))
        return $643b4d234d3e305f$var$M;
      return $643b4d234d3e305f$var$X;
    }
    var $643b4d234d3e305f$var$NO_ACTION = 0;
    var $643b4d234d3e305f$var$DECOMPOSE = 1;
    var $643b4d234d3e305f$var$COMPOSE = 2;
    var $643b4d234d3e305f$var$TONE_MARK = 4;
    var $643b4d234d3e305f$var$INVALID = 5;
    var $643b4d234d3e305f$var$STATE_TABLE = [
      //       X                 L                 V                T                  LV                LVT               M
      // State 0: start state
      [
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          1
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          2
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          3
        ],
        [
          $643b4d234d3e305f$var$INVALID,
          0
        ]
      ],
      // State 1: <L>
      [
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          1
        ],
        [
          $643b4d234d3e305f$var$COMPOSE,
          2
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          2
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          3
        ],
        [
          $643b4d234d3e305f$var$INVALID,
          0
        ]
      ],
      // State 2: <L,V> or <LV>
      [
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          1
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$COMPOSE,
          3
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          2
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          3
        ],
        [
          $643b4d234d3e305f$var$TONE_MARK,
          0
        ]
      ],
      // State 3: <L,V,T> or <LVT>
      [
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          1
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$NO_ACTION,
          0
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          2
        ],
        [
          $643b4d234d3e305f$var$DECOMPOSE,
          3
        ],
        [
          $643b4d234d3e305f$var$TONE_MARK,
          0
        ]
      ]
    ];
    function $643b4d234d3e305f$var$getGlyph(font, code, features) {
      return new $535fa31b81f74b90$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [
        code
      ], features);
    }
    function $643b4d234d3e305f$var$decompose(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyph.codePoints[0];
      let s = code - $643b4d234d3e305f$var$HANGUL_BASE;
      let t = $643b4d234d3e305f$var$T_BASE + s % $643b4d234d3e305f$var$T_COUNT;
      s = s / $643b4d234d3e305f$var$T_COUNT | 0;
      let l = $643b4d234d3e305f$var$L_BASE + s / $643b4d234d3e305f$var$V_COUNT | 0;
      let v = $643b4d234d3e305f$var$V_BASE + s % $643b4d234d3e305f$var$V_COUNT;
      if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $643b4d234d3e305f$var$T_BASE && !font.hasGlyphForCodePoint(t))
        return i2;
      let ljmo = $643b4d234d3e305f$var$getGlyph(font, l, glyph.features);
      ljmo.features.ljmo = true;
      let vjmo = $643b4d234d3e305f$var$getGlyph(font, v, glyph.features);
      vjmo.features.vjmo = true;
      let insert = [
        ljmo,
        vjmo
      ];
      if (t > $643b4d234d3e305f$var$T_BASE) {
        let tjmo = $643b4d234d3e305f$var$getGlyph(font, t, glyph.features);
        tjmo.features.tjmo = true;
        insert.push(tjmo);
      }
      glyphs.splice(i2, 1, ...insert);
      return i2 + insert.length - 1;
    }
    function $643b4d234d3e305f$var$compose(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      let type = $643b4d234d3e305f$var$getType(code);
      let prev = glyphs[i2 - 1].codePoints[0];
      let prevType = $643b4d234d3e305f$var$getType(prev);
      let lv, ljmo, vjmo, tjmo;
      if (prevType === $643b4d234d3e305f$var$LV && type === $643b4d234d3e305f$var$T) {
        lv = prev;
        tjmo = glyph;
      } else {
        if (type === $643b4d234d3e305f$var$V) {
          ljmo = glyphs[i2 - 1];
          vjmo = glyph;
        } else {
          ljmo = glyphs[i2 - 2];
          vjmo = glyphs[i2 - 1];
          tjmo = glyph;
        }
        let l = ljmo.codePoints[0];
        let v = vjmo.codePoints[0];
        if ($643b4d234d3e305f$var$isCombiningL(l) && $643b4d234d3e305f$var$isCombiningV(v))
          lv = $643b4d234d3e305f$var$HANGUL_BASE + ((l - $643b4d234d3e305f$var$L_BASE) * $643b4d234d3e305f$var$V_COUNT + (v - $643b4d234d3e305f$var$V_BASE)) * $643b4d234d3e305f$var$T_COUNT;
      }
      let t = tjmo && tjmo.codePoints[0] || $643b4d234d3e305f$var$T_BASE;
      if (lv != null && (t === $643b4d234d3e305f$var$T_BASE || $643b4d234d3e305f$var$isCombiningT(t))) {
        let s = lv + (t - $643b4d234d3e305f$var$T_BASE);
        if (font.hasGlyphForCodePoint(s)) {
          let del = prevType === $643b4d234d3e305f$var$V ? 3 : 2;
          glyphs.splice(i2 - del + 1, del, $643b4d234d3e305f$var$getGlyph(font, s, glyph.features));
          return i2 - del + 1;
        }
      }
      if (ljmo)
        ljmo.features.ljmo = true;
      if (vjmo)
        vjmo.features.vjmo = true;
      if (tjmo)
        tjmo.features.tjmo = true;
      if (prevType === $643b4d234d3e305f$var$LV) {
        $643b4d234d3e305f$var$decompose(glyphs, i2 - 1, font);
        return i2 + 1;
      }
      return i2;
    }
    function $643b4d234d3e305f$var$getLength(code) {
      switch ($643b4d234d3e305f$var$getType(code)) {
        case $643b4d234d3e305f$var$LV:
        case $643b4d234d3e305f$var$LVT:
          return 1;
        case $643b4d234d3e305f$var$V:
          return 2;
        case $643b4d234d3e305f$var$T:
          return 3;
      }
    }
    function $643b4d234d3e305f$var$reorderToneMark(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      if (font.glyphForCodePoint(code).advanceWidth === 0)
        return;
      let prev = glyphs[i2 - 1].codePoints[0];
      let len = $643b4d234d3e305f$var$getLength(prev);
      glyphs.splice(i2, 1);
      return glyphs.splice(i2 - len, 0, glyph);
    }
    function $643b4d234d3e305f$var$insertDottedCircle(glyphs, i2, font) {
      let glyph = glyphs[i2];
      let code = glyphs[i2].codePoints[0];
      if (font.hasGlyphForCodePoint($643b4d234d3e305f$var$DOTTED_CIRCLE)) {
        let dottedCircle = $643b4d234d3e305f$var$getGlyph(font, $643b4d234d3e305f$var$DOTTED_CIRCLE, glyph.features);
        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i2 : i2 + 1;
        glyphs.splice(idx, 0, dottedCircle);
        i2++;
      }
      return i2;
    }
    var $e319ffc9285ff10a$exports = {};
    $e319ffc9285ff10a$exports = JSON.parse('{"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],"accepting":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],"tags":[[],["broken_cluster"],["consonant_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],[],["broken_cluster"],["symbol_cluster"],[],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["symbol_cluster"],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],[],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],[],[],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],["consonant_syllable"],["vowel_syllable"],["standalone_cluster"]]}');
    var $440f7c22deab646c$exports = {};
    $440f7c22deab646c$exports = JSON.parse('{"categories":["O","IND","S","GB","B","FM","CGJ","VMAbv","VMPst","VAbv","VPst","CMBlw","VPre","VBlw","H","VMBlw","CMAbv","MBlw","CS","R","SUB","MPst","MPre","FAbv","FPst","FBlw","SMAbv","SMBlw","VMPre","ZWNJ","ZWJ","WJ","VS","N","HN","MAbv"],"decompositions":{"2507":[2503,2494],"2508":[2503,2519],"2888":[2887,2902],"2891":[2887,2878],"2892":[2887,2903],"3018":[3014,3006],"3019":[3015,3006],"3020":[3014,3031],"3144":[3142,3158],"3264":[3263,3285],"3271":[3270,3285],"3272":[3270,3286],"3274":[3270,3266],"3275":[3270,3266,3285],"3402":[3398,3390],"3403":[3399,3390],"3404":[3398,3415],"3546":[3545,3530],"3548":[3545,3535],"3549":[3545,3535,3530],"3550":[3545,3551],"3635":[3661,3634],"3763":[3789,3762],"3955":[3953,3954],"3957":[3953,3956],"3958":[4018,3968],"3959":[4018,3953,3968],"3960":[4019,3968],"3961":[4019,3953,3968],"3969":[3953,3968],"6971":[6970,6965],"6973":[6972,6965],"6976":[6974,6965],"6977":[6975,6965],"6979":[6978,6965],"69934":[69937,69927],"69935":[69938,69927],"70475":[70471,70462],"70476":[70471,70487],"70843":[70841,70842],"70844":[70841,70832],"70846":[70841,70845],"71098":[71096,71087],"71099":[71097,71087]},"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],"accepting":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"tags":[[],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["symbol_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["virama_terminated_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["number_joiner_terminated_cluster"],["standard_cluster"],["standard_cluster"],["numeral_cluster"]]}');
    var $76a40fa3f66cc629$export$a513ea61a7bee91c = {
      X: 1,
      C: 2,
      V: 4,
      N: 8,
      H: 16,
      ZWNJ: 32,
      ZWJ: 64,
      M: 128,
      SM: 256,
      VD: 512,
      A: 1024,
      Placeholder: 2048,
      Dotted_Circle: 4096,
      RS: 8192,
      Coeng: 16384,
      Repha: 32768,
      Ra: 65536,
      CM: 131072,
      Symbol: 262144
      // Avagraha, etc that take marks (SM,A,VD).
    };
    var $76a40fa3f66cc629$export$1a1f61c9c4dd9df0 = {
      Start: 1,
      Ra_To_Become_Reph: 2,
      Pre_M: 4,
      Pre_C: 8,
      Base_C: 16,
      After_Main: 32,
      Above_C: 64,
      Before_Sub: 128,
      Below_C: 256,
      After_Sub: 512,
      Before_Post: 1024,
      Post_C: 2048,
      After_Post: 4096,
      Final_C: 8192,
      SMVD: 16384,
      End: 32768
    };
    var $76a40fa3f66cc629$export$8519deaa7de2b07 = $76a40fa3f66cc629$export$a513ea61a7bee91c.C | $76a40fa3f66cc629$export$a513ea61a7bee91c.Ra | $76a40fa3f66cc629$export$a513ea61a7bee91c.CM | $76a40fa3f66cc629$export$a513ea61a7bee91c.V | $76a40fa3f66cc629$export$a513ea61a7bee91c.Placeholder | $76a40fa3f66cc629$export$a513ea61a7bee91c.Dotted_Circle;
    var $76a40fa3f66cc629$export$bbcd928767338e0d = $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWJ | $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWNJ;
    var $76a40fa3f66cc629$export$ca9599b2a300afc = $76a40fa3f66cc629$export$a513ea61a7bee91c.H | $76a40fa3f66cc629$export$a513ea61a7bee91c.Coeng;
    var $76a40fa3f66cc629$export$e99d119da76a0fc5 = {
      Default: {
        hasOldSpec: false,
        virama: 0,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Devanagari: {
        hasOldSpec: true,
        virama: 2381,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Bengali: {
        hasOldSpec: true,
        virama: 2509,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Gurmukhi: {
        hasOldSpec: true,
        virama: 2637,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Before_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Gujarati: {
        hasOldSpec: true,
        virama: 2765,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Oriya: {
        hasOldSpec: true,
        virama: 2893,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Tamil: {
        hasOldSpec: true,
        virama: 3021,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
      },
      Telugu: {
        hasOldSpec: true,
        virama: 3149,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Explicit",
        blwfMode: "Post_Only"
      },
      Kannada: {
        hasOldSpec: true,
        virama: 3277,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Post_Only"
      },
      Malayalam: {
        hasOldSpec: true,
        virama: 3405,
        basePos: "Last",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Log_Repha",
        blwfMode: "Pre_And_Post"
      },
      // Handled by UniversalShaper
      // Sinhala: {
      //   hasOldSpec: false,
      //   virama: 0x0DCA,
      //   basePos: 'Last_Sinhala',
      //   rephPos: POSITIONS.After_Main,
      //   rephMode: 'Explicit',
      //   blwfMode: 'Pre_And_Post'
      // },
      Khmer: {
        hasOldSpec: false,
        virama: 6098,
        basePos: "First",
        rephPos: $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
        rephMode: "Vis_Repha",
        blwfMode: "Pre_And_Post"
      }
    };
    var $76a40fa3f66cc629$export$f647c9cfdd77d95a = {
      // Khmer
      6078: [
        6081,
        6078
      ],
      6079: [
        6081,
        6079
      ],
      6080: [
        6081,
        6080
      ],
      6084: [
        6081,
        6084
      ],
      6085: [
        6081,
        6085
      ]
    };
    var $88aa30158a161372$require$Buffer = $lzfo4$buffer.Buffer;
    var { decompositions: $88aa30158a161372$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault($440f7c22deab646c$exports);
    var $88aa30158a161372$var$trie = new ($parcel$interopDefault($lzfo4$unicodetrie))($88aa30158a161372$require$Buffer.from("AAARAAAAAACgwgAAAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf", "base64"));
    var $88aa30158a161372$var$stateMachine = new ($parcel$interopDefault($lzfo4$dfa))(/* @__PURE__ */ $parcel$interopDefault($e319ffc9285ff10a$exports));
    var $88aa30158a161372$export$2e2bcd8739ae039 = class extends $4f61fb8204be1a7c$export$2e2bcd8739ae039 {
      static planFeatures(plan) {
        plan.addStage($88aa30158a161372$var$setupSyllables);
        plan.addStage([
          "locl",
          "ccmp"
        ]);
        plan.addStage($88aa30158a161372$var$initialReordering);
        plan.addStage("nukt");
        plan.addStage("akhn");
        plan.addStage("rphf", false);
        plan.addStage("rkrf");
        plan.addStage("pref", false);
        plan.addStage("blwf", false);
        plan.addStage("abvf", false);
        plan.addStage("half", false);
        plan.addStage("pstf", false);
        plan.addStage("vatu");
        plan.addStage("cjct");
        plan.addStage("cfar", false);
        plan.addStage($88aa30158a161372$var$finalReordering);
        plan.addStage({
          local: [
            "init"
          ],
          global: [
            "pres",
            "abvs",
            "blws",
            "psts",
            "haln",
            "dist",
            "abvm",
            "blwm",
            "calt",
            "clig"
          ]
        });
        plan.unicodeScript = $2e3a795a88d7e002$export$ce50e82f12a827a4(plan.script);
        plan.indicConfig = $76a40fa3f66cc629$export$e99d119da76a0fc5[plan.unicodeScript] || $76a40fa3f66cc629$export$e99d119da76a0fc5.Default;
        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== "2";
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = glyphs.length - 1; i2 >= 0; i2--) {
          let codepoint = glyphs[i2].codePoints[0];
          let d = $76a40fa3f66cc629$export$f647c9cfdd77d95a[codepoint] || $88aa30158a161372$var$decompositions[codepoint];
          if (d) {
            let decomposed = d.map((c) => {
              let g = plan.font.glyphForCodePoint(c);
              return new $535fa31b81f74b90$export$2e2bcd8739ae039(plan.font, g.id, [
                c
              ], glyphs[i2].features);
            });
            glyphs.splice(i2, 1, ...decomposed);
          }
        }
      }
    };
    $lzfo4$swchelpers.defineProperty($88aa30158a161372$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
    function $88aa30158a161372$var$indicCategory(glyph) {
      return $88aa30158a161372$var$trie.get(glyph.codePoints[0]) >> 8;
    }
    function $88aa30158a161372$var$indicPosition(glyph) {
      return 1 << ($88aa30158a161372$var$trie.get(glyph.codePoints[0]) & 255);
    }
    var $88aa30158a161372$var$IndicInfo = class {
      constructor(category, position, syllableType, syllable) {
        this.category = category;
        this.position = position;
        this.syllableType = syllableType;
        this.syllable = syllable;
      }
    };
    function $88aa30158a161372$var$setupSyllables(font, glyphs) {
      let syllable = 0;
      let last = 0;
      for (let [start, end, tags] of $88aa30158a161372$var$stateMachine.match(glyphs.map($88aa30158a161372$var$indicCategory))) {
        if (start > last) {
          ++syllable;
          for (let i2 = last; i2 < start; i2++)
            glyphs[i2].shaperInfo = new $88aa30158a161372$var$IndicInfo($76a40fa3f66cc629$export$a513ea61a7bee91c.X, $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
        }
        ++syllable;
        for (let i2 = start; i2 <= end; i2++)
          glyphs[i2].shaperInfo = new $88aa30158a161372$var$IndicInfo(1 << $88aa30158a161372$var$indicCategory(glyphs[i2]), $88aa30158a161372$var$indicPosition(glyphs[i2]), tags[0], syllable);
        last = end + 1;
      }
      if (last < glyphs.length) {
        ++syllable;
        for (let i2 = last; i2 < glyphs.length; i2++)
          glyphs[i2].shaperInfo = new $88aa30158a161372$var$IndicInfo($76a40fa3f66cc629$export$a513ea61a7bee91c.X, $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.End, "non_indic_cluster", syllable);
      }
    }
    function $88aa30158a161372$var$isConsonant(glyph) {
      return glyph.shaperInfo.category & $76a40fa3f66cc629$export$8519deaa7de2b07;
    }
    function $88aa30158a161372$var$isJoiner(glyph) {
      return glyph.shaperInfo.category & $76a40fa3f66cc629$export$bbcd928767338e0d;
    }
    function $88aa30158a161372$var$isHalantOrCoeng(glyph) {
      return glyph.shaperInfo.category & $76a40fa3f66cc629$export$ca9599b2a300afc;
    }
    function $88aa30158a161372$var$wouldSubstitute(glyphs, feature) {
      for (let glyph of glyphs)
        glyph.features = {
          [feature]: true
        };
      let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
      GSUB.applyFeatures([
        feature
      ], glyphs);
      return glyphs.length === 1;
    }
    function $88aa30158a161372$var$consonantPosition(font, consonant, virama) {
      let glyphs = [
        virama,
        consonant,
        virama
      ];
      if ($88aa30158a161372$var$wouldSubstitute(glyphs.slice(0, 2), "blwf") || $88aa30158a161372$var$wouldSubstitute(glyphs.slice(1, 3), "blwf"))
        return $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Below_C;
      else if ($88aa30158a161372$var$wouldSubstitute(glyphs.slice(0, 2), "pstf") || $88aa30158a161372$var$wouldSubstitute(glyphs.slice(1, 3), "pstf"))
        return $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Post_C;
      else if ($88aa30158a161372$var$wouldSubstitute(glyphs.slice(0, 2), "pref") || $88aa30158a161372$var$wouldSubstitute(glyphs.slice(1, 3), "pref"))
        return $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Post_C;
      return $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C;
    }
    function $88aa30158a161372$var$initialReordering(font, glyphs, plan) {
      let indicConfig = plan.indicConfig;
      let features = font._layoutEngine.engine.GSUBProcessor.features;
      let dottedCircle = font.glyphForCodePoint(9676).id;
      let virama = font.glyphForCodePoint(indicConfig.virama).id;
      if (virama) {
        let info = new $535fa31b81f74b90$export$2e2bcd8739ae039(font, virama, [
          indicConfig.virama
        ]);
        for (let i2 = 0; i2 < glyphs.length; i2++)
          if (glyphs[i2].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C)
            glyphs[i2].shaperInfo.position = $88aa30158a161372$var$consonantPosition(font, glyphs[i2].copy(), info);
      }
      for (let start = 0, end = $88aa30158a161372$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $88aa30158a161372$var$nextSyllable(glyphs, start)) {
        let { category, syllableType } = glyphs[start].shaperInfo;
        if (syllableType === "symbol_cluster" || syllableType === "non_indic_cluster")
          continue;
        if (syllableType === "broken_cluster" && dottedCircle) {
          let g = new $535fa31b81f74b90$export$2e2bcd8739ae039(font, dottedCircle, [
            9676
          ]);
          g.shaperInfo = new $88aa30158a161372$var$IndicInfo(1 << $88aa30158a161372$var$indicCategory(g), $88aa30158a161372$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
          let i2 = start;
          while (i2 < end && glyphs[i2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.Repha)
            i2++;
          glyphs.splice(i2++, 0, g);
          end++;
        }
        let base = end;
        let limit = start;
        let hasReph = false;
        if (indicConfig.rephPos !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === "Implicit" && !$88aa30158a161372$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === "Explicit" && glyphs[start + 2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWJ)) {
          let g = [
            glyphs[start].copy(),
            glyphs[start + 1].copy(),
            glyphs[start + 2].copy()
          ];
          if ($88aa30158a161372$var$wouldSubstitute(g.slice(0, 2), "rphf") || indicConfig.rephMode === "Explicit" && $88aa30158a161372$var$wouldSubstitute(g, "rphf")) {
            limit += 2;
            while (limit < end && $88aa30158a161372$var$isJoiner(glyphs[limit]))
              limit++;
            base = start;
            hasReph = true;
          }
        } else if (indicConfig.rephMode === "Log_Repha" && glyphs[start].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.Repha) {
          limit++;
          while (limit < end && $88aa30158a161372$var$isJoiner(glyphs[limit]))
            limit++;
          base = start;
          hasReph = true;
        }
        switch (indicConfig.basePos) {
          case "Last": {
            let i2 = end;
            let seenBelow = false;
            do {
              let info = glyphs[--i2].shaperInfo;
              if ($88aa30158a161372$var$isConsonant(glyphs[i2])) {
                if (info.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {
                  base = i2;
                  break;
                }
                if (info.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Below_C)
                  seenBelow = true;
                base = i2;
              } else if (start < i2 && info.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWJ && glyphs[i2 - 1].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.H)
                break;
            } while (i2 > limit);
            break;
          }
          case "First":
            base = start;
            for (let i2 = base + 1; i2 < end; i2++)
              if ($88aa30158a161372$var$isConsonant(glyphs[i2]))
                glyphs[i2].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Below_C;
        }
        if (hasReph && base === start && limit - base <= 2)
          hasReph = false;
        for (let i1 = start; i1 < base; i1++) {
          let info = glyphs[i1].shaperInfo;
          info.position = Math.min($76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_C, info.position);
        }
        if (base < end)
          glyphs[base].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C;
        for (let i2 = base + 1; i2 < end; i2++)
          if (glyphs[i2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.M) {
            for (let j = i2 + 1; j < end; j++)
              if ($88aa30158a161372$var$isConsonant(glyphs[j])) {
                glyphs[j].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Final_C;
                break;
              }
            break;
          }
        if (hasReph)
          glyphs[start].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;
        if (plan.isOldSpec) {
          let disallowDoubleHalants = plan.unicodeScript !== "Malayalam";
          for (let i2 = base + 1; i2 < end; i2++)
            if (glyphs[i2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.H) {
              let j;
              for (j = end - 1; j > i2; j--) {
                if ($88aa30158a161372$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.H)
                  break;
              }
              if (glyphs[j].shaperInfo.category !== $76a40fa3f66cc629$export$a513ea61a7bee91c.H && j > i2) {
                let t = glyphs[i2];
                glyphs.splice(i2, 0, ...glyphs.splice(i2 + 1, j - i2));
                glyphs[j] = t;
              }
              break;
            }
        }
        let lastPos = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Start;
        for (let i3 = start; i3 < end; i3++) {
          let info = glyphs[i3].shaperInfo;
          if (info.category & ($76a40fa3f66cc629$export$bbcd928767338e0d | $76a40fa3f66cc629$export$a513ea61a7bee91c.N | $76a40fa3f66cc629$export$a513ea61a7bee91c.RS | $76a40fa3f66cc629$export$a513ea61a7bee91c.CM | $76a40fa3f66cc629$export$ca9599b2a300afc & info.category)) {
            info.position = lastPos;
            if (info.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.H && info.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M) {
              for (let j = i3; j > start; j--)
                if (glyphs[j - 1].shaperInfo.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M) {
                  info.position = glyphs[j - 1].shaperInfo.position;
                  break;
                }
            }
          } else if (info.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.SMVD)
            lastPos = info.position;
        }
        let last = base;
        for (let i4 = base + 1; i4 < end; i4++) {
          if ($88aa30158a161372$var$isConsonant(glyphs[i4])) {
            for (let j = last + 1; j < i4; j++)
              if (glyphs[j].shaperInfo.position < $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.SMVD)
                glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;
            last = i4;
          } else if (glyphs[i4].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.M)
            last = i4;
        }
        let arr = glyphs.slice(start, end);
        arr.sort(
          (a, b) => a.shaperInfo.position - b.shaperInfo.position
        );
        glyphs.splice(start, arr.length, ...arr);
        for (let i5 = start; i5 < end; i5++)
          if (glyphs[i5].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C) {
            base = i5;
            break;
          }
        for (let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++)
          glyphs[i6].features.rphf = true;
        let blwf = !plan.isOldSpec && indicConfig.blwfMode === "Pre_And_Post";
        for (let i7 = start; i7 < base; i7++) {
          glyphs[i7].features.half = true;
          if (blwf)
            glyphs[i7].features.blwf = true;
        }
        for (let i8 = base + 1; i8 < end; i8++) {
          glyphs[i8].features.abvf = true;
          glyphs[i8].features.pstf = true;
          glyphs[i8].features.blwf = true;
        }
        if (plan.isOldSpec && plan.unicodeScript === "Devanagari") {
          for (let i2 = start; i2 + 1 < base; i2++)
            if (glyphs[i2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.Ra && glyphs[i2 + 1].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.H && (i2 + 1 === base || glyphs[i2 + 2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWJ)) {
              glyphs[i2].features.blwf = true;
              glyphs[i2 + 1].features.blwf = true;
            }
        }
        let prefLen = 2;
        if (features.pref && base + prefLen < end)
          for (let i9 = base + 1; i9 + prefLen - 1 < end; i9++) {
            let g = [
              glyphs[i9].copy(),
              glyphs[i9 + 1].copy()
            ];
            if ($88aa30158a161372$var$wouldSubstitute(g, "pref")) {
              for (let j = 0; j < prefLen; j++)
                glyphs[i9++].features.pref = true;
              if (features.cfar)
                for (; i9 < end; i9++)
                  glyphs[i9].features.cfar = true;
              break;
            }
          }
        for (let i10 = start + 1; i10 < end; i10++)
          if ($88aa30158a161372$var$isJoiner(glyphs[i10])) {
            let nonJoiner = glyphs[i10].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWNJ;
            let j = i10;
            do {
              j--;
              if (nonJoiner)
                delete glyphs[j].features.half;
            } while (j > start && !$88aa30158a161372$var$isConsonant(glyphs[j]));
          }
      }
    }
    function $88aa30158a161372$var$finalReordering(font, glyphs, plan) {
      let indicConfig = plan.indicConfig;
      let features = font._layoutEngine.engine.GSUBProcessor.features;
      for (let start = 0, end = $88aa30158a161372$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $88aa30158a161372$var$nextSyllable(glyphs, start)) {
        let tryPref = !!features.pref;
        let base = start;
        for (; base < end; base++)
          if (glyphs[base].shaperInfo.position >= $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C) {
            if (tryPref && base + 1 < end) {
              for (let i2 = base + 1; i2 < end; i2++)
                if (glyphs[i2].features.pref) {
                  if (!(glyphs[i2].substituted && glyphs[i2].isLigated && !glyphs[i2].isMultiplied)) {
                    base = i2;
                    while (base < end && $88aa30158a161372$var$isHalantOrCoeng(glyphs[base]))
                      base++;
                    glyphs[base].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.BASE_C;
                    tryPref = false;
                  }
                  break;
                }
            }
            if (plan.unicodeScript === "Malayalam")
              for (let i2 = base + 1; i2 < end; i2++) {
                while (i2 < end && $88aa30158a161372$var$isJoiner(glyphs[i2]))
                  i2++;
                if (i2 === end || !$88aa30158a161372$var$isHalantOrCoeng(glyphs[i2]))
                  break;
                i2++;
                while (i2 < end && $88aa30158a161372$var$isJoiner(glyphs[i2]))
                  i2++;
                if (i2 < end && $88aa30158a161372$var$isConsonant(glyphs[i2]) && glyphs[i2].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Below_C) {
                  base = i2;
                  glyphs[base].shaperInfo.position = $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C;
                }
              }
            if (start < base && glyphs[base].shaperInfo.position > $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Base_C)
              base--;
            break;
          }
        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.ZWJ)
          base--;
        if (base < end)
          while (start < base && glyphs[base].shaperInfo.category & ($76a40fa3f66cc629$export$a513ea61a7bee91c.N | $76a40fa3f66cc629$export$ca9599b2a300afc))
            base--;
        if (start + 1 < end && start < base) {
          let newPos = base === end ? base - 2 : base - 1;
          if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
            while (newPos > start && !(glyphs[newPos].shaperInfo.category & ($76a40fa3f66cc629$export$a513ea61a7bee91c.M | $76a40fa3f66cc629$export$ca9599b2a300afc)))
              newPos--;
            if ($88aa30158a161372$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M) {
              if (newPos + 1 < end && $88aa30158a161372$var$isJoiner(glyphs[newPos + 1]))
                newPos++;
            } else
              newPos = start;
          }
          if (start < newPos && glyphs[newPos].shaperInfo.position !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M) {
            for (let i2 = newPos; i2 > start; i2--)
              if (glyphs[i2 - 1].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M) {
                let oldPos = i2 - 1;
                if (oldPos < base && base <= newPos)
                  base--;
                let tmp = glyphs[oldPos];
                glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
                glyphs[newPos] = tmp;
                newPos--;
              }
          }
        }
        if (start + 1 < end && glyphs[start].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
          let newRephPos;
          let rephPos = indicConfig.rephPos;
          let found = false;
          if (rephPos !== $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Post) {
            newRephPos = start + 1;
            while (newRephPos < base && !$88aa30158a161372$var$isHalantOrCoeng(glyphs[newRephPos]))
              newRephPos++;
            if (newRephPos < base && $88aa30158a161372$var$isHalantOrCoeng(glyphs[newRephPos])) {
              if (newRephPos + 1 < base && $88aa30158a161372$var$isJoiner(glyphs[newRephPos + 1]))
                newRephPos++;
              found = true;
            }
            if (!found && rephPos === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Main) {
              newRephPos = base;
              while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Main)
                newRephPos++;
              found = newRephPos < end;
            }
            if (!found && rephPos === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Sub) {
              newRephPos = base;
              while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Post_C | $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.After_Post | $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.SMVD)))
                newRephPos++;
              found = newRephPos < end;
            }
          }
          if (!found) {
            newRephPos = start + 1;
            while (newRephPos < base && !$88aa30158a161372$var$isHalantOrCoeng(glyphs[newRephPos]))
              newRephPos++;
            if (newRephPos < base && $88aa30158a161372$var$isHalantOrCoeng(glyphs[newRephPos])) {
              if (newRephPos + 1 < base && $88aa30158a161372$var$isJoiner(glyphs[newRephPos + 1]))
                newRephPos++;
              found = true;
            }
          }
          if (!found) {
            newRephPos = end - 1;
            while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.SMVD)
              newRephPos--;
            if ($88aa30158a161372$var$isHalantOrCoeng(glyphs[newRephPos])) {
              for (let i2 = base + 1; i2 < newRephPos; i2++)
                if (glyphs[i2].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.M)
                  newRephPos--;
            }
          }
          let reph = glyphs[start];
          glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
          glyphs[newRephPos] = reph;
          if (start < base && base <= newRephPos)
            base--;
        }
        if (tryPref && base + 1 < end) {
          for (let i2 = base + 1; i2 < end; i2++)
            if (glyphs[i2].features.pref) {
              if (glyphs[i2].isLigated && !glyphs[i2].isMultiplied) {
                let newPos = base;
                if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
                  while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($76a40fa3f66cc629$export$a513ea61a7bee91c.M | $76a40fa3f66cc629$export$ca9599b2a300afc)))
                    newPos--;
                  if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.M) {
                    let oldPos2 = i2;
                    for (let j = base + 1; j < oldPos2; j++)
                      if (glyphs[j].shaperInfo.category === $76a40fa3f66cc629$export$a513ea61a7bee91c.M) {
                        newPos--;
                        break;
                      }
                  }
                }
                if (newPos > start && $88aa30158a161372$var$isHalantOrCoeng(glyphs[newPos - 1])) {
                  if (newPos < end && $88aa30158a161372$var$isJoiner(glyphs[newPos]))
                    newPos++;
                }
                let oldPos = i2;
                let tmp = glyphs[oldPos];
                glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
                glyphs[newPos] = tmp;
                if (newPos <= base && base < oldPos)
                  base++;
              }
              break;
            }
        }
        if (glyphs[start].shaperInfo.position === $76a40fa3f66cc629$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test($parcel$interopDefault($lzfo4$unicodeproperties).getCategory(glyphs[start - 1].codePoints[0]))))
          glyphs[start].features.init = true;
      }
    }
    function $88aa30158a161372$var$nextSyllable(glyphs, start) {
      if (start >= glyphs.length)
        return start;
      let syllable = glyphs[start].shaperInfo.syllable;
      while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable)
        ;
      return start;
    }
    var $15cb744015661546$require$Buffer = $lzfo4$buffer.Buffer;
    var { categories: $15cb744015661546$var$categories, decompositions: $15cb744015661546$var$decompositions } = /* @__PURE__ */ $parcel$interopDefault($440f7c22deab646c$exports);
    var $15cb744015661546$var$trie = new ($parcel$interopDefault($lzfo4$unicodetrie))($15cb744015661546$require$Buffer.from("AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=", "base64"));
    var $15cb744015661546$var$stateMachine = new ($parcel$interopDefault($lzfo4$dfa))(/* @__PURE__ */ $parcel$interopDefault($440f7c22deab646c$exports));
    var $15cb744015661546$export$2e2bcd8739ae039 = class extends $4f61fb8204be1a7c$export$2e2bcd8739ae039 {
      static planFeatures(plan) {
        plan.addStage($15cb744015661546$var$setupSyllables);
        plan.addStage([
          "locl",
          "ccmp",
          "nukt",
          "akhn"
        ]);
        plan.addStage($15cb744015661546$var$clearSubstitutionFlags);
        plan.addStage([
          "rphf"
        ], false);
        plan.addStage($15cb744015661546$var$recordRphf);
        plan.addStage($15cb744015661546$var$clearSubstitutionFlags);
        plan.addStage([
          "pref"
        ]);
        plan.addStage($15cb744015661546$var$recordPref);
        plan.addStage([
          "rkrf",
          "abvf",
          "blwf",
          "half",
          "pstf",
          "vatu",
          "cjct"
        ]);
        plan.addStage($15cb744015661546$var$reorder);
        plan.addStage([
          "abvs",
          "blws",
          "pres",
          "psts",
          "dist",
          "abvm",
          "blwm"
        ]);
      }
      static assignFeatures(plan, glyphs) {
        for (let i2 = glyphs.length - 1; i2 >= 0; i2--) {
          let codepoint = glyphs[i2].codePoints[0];
          if ($15cb744015661546$var$decompositions[codepoint]) {
            let decomposed = $15cb744015661546$var$decompositions[codepoint].map((c) => {
              let g = plan.font.glyphForCodePoint(c);
              return new $535fa31b81f74b90$export$2e2bcd8739ae039(plan.font, g.id, [
                c
              ], glyphs[i2].features);
            });
            glyphs.splice(i2, 1, ...decomposed);
          }
        }
      }
    };
    $lzfo4$swchelpers.defineProperty($15cb744015661546$export$2e2bcd8739ae039, "zeroMarkWidths", "BEFORE_GPOS");
    function $15cb744015661546$var$useCategory(glyph) {
      return $15cb744015661546$var$trie.get(glyph.codePoints[0]);
    }
    var $15cb744015661546$var$USEInfo = class {
      constructor(category, syllableType, syllable) {
        this.category = category;
        this.syllableType = syllableType;
        this.syllable = syllable;
      }
    };
    function $15cb744015661546$var$setupSyllables(font, glyphs) {
      let syllable = 0;
      for (let [start, end, tags] of $15cb744015661546$var$stateMachine.match(glyphs.map($15cb744015661546$var$useCategory))) {
        ++syllable;
        for (let i2 = start; i2 <= end; i2++)
          glyphs[i2].shaperInfo = new $15cb744015661546$var$USEInfo($15cb744015661546$var$categories[$15cb744015661546$var$useCategory(glyphs[i2])], tags[0], syllable);
        let limit = glyphs[start].shaperInfo.category === "R" ? 1 : Math.min(3, end - start);
        for (let i1 = start; i1 < start + limit; i1++)
          glyphs[i1].features.rphf = true;
      }
    }
    function $15cb744015661546$var$clearSubstitutionFlags(font, glyphs) {
      for (let glyph of glyphs)
        glyph.substituted = false;
    }
    function $15cb744015661546$var$recordRphf(font, glyphs) {
      for (let glyph of glyphs)
        if (glyph.substituted && glyph.features.rphf)
          glyph.shaperInfo.category = "R";
    }
    function $15cb744015661546$var$recordPref(font, glyphs) {
      for (let glyph of glyphs)
        if (glyph.substituted)
          glyph.shaperInfo.category = "VPre";
    }
    function $15cb744015661546$var$reorder(font, glyphs) {
      let dottedCircle = font.glyphForCodePoint(9676).id;
      for (let start = 0, end = $15cb744015661546$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $15cb744015661546$var$nextSyllable(glyphs, start)) {
        let i2, j;
        let info = glyphs[start].shaperInfo;
        let type = info.syllableType;
        if (type !== "virama_terminated_cluster" && type !== "standard_cluster" && type !== "broken_cluster")
          continue;
        if (type === "broken_cluster" && dottedCircle) {
          let g = new $535fa31b81f74b90$export$2e2bcd8739ae039(font, dottedCircle, [
            9676
          ]);
          g.shaperInfo = info;
          for (i2 = start; i2 < end && glyphs[i2].shaperInfo.category === "R"; i2++)
            ;
          glyphs.splice(++i2, 0, g);
          end++;
        }
        if (info.category === "R" && end - start > 1)
          for (i2 = start + 1; i2 < end; i2++) {
            info = glyphs[i2].shaperInfo;
            if ($15cb744015661546$var$isBase(info) || $15cb744015661546$var$isHalant(glyphs[i2])) {
              if ($15cb744015661546$var$isHalant(glyphs[i2]))
                i2--;
              glyphs.splice(start, 0, ...glyphs.splice(start + 1, i2 - start), glyphs[i2]);
              break;
            }
          }
        for (i2 = start, j = end; i2 < end; i2++) {
          info = glyphs[i2].shaperInfo;
          if ($15cb744015661546$var$isBase(info) || $15cb744015661546$var$isHalant(glyphs[i2]))
            j = $15cb744015661546$var$isHalant(glyphs[i2]) ? i2 + 1 : i2;
          else if ((info.category === "VPre" || info.category === "VMPre") && j < i2)
            glyphs.splice(j, 1, glyphs[i2], ...glyphs.splice(j, i2 - j));
        }
      }
    }
    function $15cb744015661546$var$nextSyllable(glyphs, start) {
      if (start >= glyphs.length)
        return start;
      let syllable = glyphs[start].shaperInfo.syllable;
      while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable)
        ;
      return start;
    }
    function $15cb744015661546$var$isHalant(glyph) {
      return glyph.shaperInfo.category === "H" && !glyph.isLigated;
    }
    function $15cb744015661546$var$isBase(info) {
      return info.category === "B" || info.category === "GB";
    }
    var $936111a4a5a2e9d6$var$SHAPERS = {
      arab: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      mong: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      syrc: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      "nko ": $38a185bbdd6946f1$export$2e2bcd8739ae039,
      phag: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      mand: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      mani: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      phlp: $38a185bbdd6946f1$export$2e2bcd8739ae039,
      hang: $643b4d234d3e305f$export$2e2bcd8739ae039,
      bng2: $88aa30158a161372$export$2e2bcd8739ae039,
      beng: $88aa30158a161372$export$2e2bcd8739ae039,
      dev2: $88aa30158a161372$export$2e2bcd8739ae039,
      deva: $88aa30158a161372$export$2e2bcd8739ae039,
      gjr2: $88aa30158a161372$export$2e2bcd8739ae039,
      gujr: $88aa30158a161372$export$2e2bcd8739ae039,
      guru: $88aa30158a161372$export$2e2bcd8739ae039,
      gur2: $88aa30158a161372$export$2e2bcd8739ae039,
      knda: $88aa30158a161372$export$2e2bcd8739ae039,
      knd2: $88aa30158a161372$export$2e2bcd8739ae039,
      mlm2: $88aa30158a161372$export$2e2bcd8739ae039,
      mlym: $88aa30158a161372$export$2e2bcd8739ae039,
      ory2: $88aa30158a161372$export$2e2bcd8739ae039,
      orya: $88aa30158a161372$export$2e2bcd8739ae039,
      taml: $88aa30158a161372$export$2e2bcd8739ae039,
      tml2: $88aa30158a161372$export$2e2bcd8739ae039,
      telu: $88aa30158a161372$export$2e2bcd8739ae039,
      tel2: $88aa30158a161372$export$2e2bcd8739ae039,
      khmr: $88aa30158a161372$export$2e2bcd8739ae039,
      bali: $15cb744015661546$export$2e2bcd8739ae039,
      batk: $15cb744015661546$export$2e2bcd8739ae039,
      brah: $15cb744015661546$export$2e2bcd8739ae039,
      bugi: $15cb744015661546$export$2e2bcd8739ae039,
      buhd: $15cb744015661546$export$2e2bcd8739ae039,
      cakm: $15cb744015661546$export$2e2bcd8739ae039,
      cham: $15cb744015661546$export$2e2bcd8739ae039,
      dupl: $15cb744015661546$export$2e2bcd8739ae039,
      egyp: $15cb744015661546$export$2e2bcd8739ae039,
      gran: $15cb744015661546$export$2e2bcd8739ae039,
      hano: $15cb744015661546$export$2e2bcd8739ae039,
      java: $15cb744015661546$export$2e2bcd8739ae039,
      kthi: $15cb744015661546$export$2e2bcd8739ae039,
      kali: $15cb744015661546$export$2e2bcd8739ae039,
      khar: $15cb744015661546$export$2e2bcd8739ae039,
      khoj: $15cb744015661546$export$2e2bcd8739ae039,
      sind: $15cb744015661546$export$2e2bcd8739ae039,
      lepc: $15cb744015661546$export$2e2bcd8739ae039,
      limb: $15cb744015661546$export$2e2bcd8739ae039,
      mahj: $15cb744015661546$export$2e2bcd8739ae039,
      // mand: UniversalShaper, // Mandaic
      // mani: UniversalShaper, // Manichaean
      mtei: $15cb744015661546$export$2e2bcd8739ae039,
      modi: $15cb744015661546$export$2e2bcd8739ae039,
      // mong: UniversalShaper, // Mongolian
      // 'nko ': UniversalShaper, // N’Ko
      hmng: $15cb744015661546$export$2e2bcd8739ae039,
      // phag: UniversalShaper, // Phags-pa
      // phlp: UniversalShaper, // Psalter Pahlavi
      rjng: $15cb744015661546$export$2e2bcd8739ae039,
      saur: $15cb744015661546$export$2e2bcd8739ae039,
      shrd: $15cb744015661546$export$2e2bcd8739ae039,
      sidd: $15cb744015661546$export$2e2bcd8739ae039,
      sinh: $88aa30158a161372$export$2e2bcd8739ae039,
      sund: $15cb744015661546$export$2e2bcd8739ae039,
      sylo: $15cb744015661546$export$2e2bcd8739ae039,
      tglg: $15cb744015661546$export$2e2bcd8739ae039,
      tagb: $15cb744015661546$export$2e2bcd8739ae039,
      tale: $15cb744015661546$export$2e2bcd8739ae039,
      lana: $15cb744015661546$export$2e2bcd8739ae039,
      tavt: $15cb744015661546$export$2e2bcd8739ae039,
      takr: $15cb744015661546$export$2e2bcd8739ae039,
      tibt: $15cb744015661546$export$2e2bcd8739ae039,
      tfng: $15cb744015661546$export$2e2bcd8739ae039,
      tirh: $15cb744015661546$export$2e2bcd8739ae039,
      latn: $4f61fb8204be1a7c$export$2e2bcd8739ae039,
      DFLT: $4f61fb8204be1a7c$export$2e2bcd8739ae039
      // Default
    };
    function $936111a4a5a2e9d6$export$7877a478dd30fd3d(script) {
      if (!Array.isArray(script))
        script = [
          script
        ];
      for (let s of script) {
        let shaper = $936111a4a5a2e9d6$var$SHAPERS[s];
        if (shaper)
          return shaper;
      }
      return $4f61fb8204be1a7c$export$2e2bcd8739ae039;
    }
    var $baa3ae21ed64fb80$export$2e2bcd8739ae039 = class extends $cca6af4639973976$export$2e2bcd8739ae039 {
      applyLookup(lookupType, table) {
        switch (lookupType) {
          case 1: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            let glyph = this.glyphIterator.cur;
            switch (table.version) {
              case 1:
                glyph.id = glyph.id + table.deltaGlyphID & 65535;
                break;
              case 2:
                glyph.id = table.substitute.get(index);
                break;
            }
            return true;
          }
          case 2: {
            let index = this.coverageIndex(table.coverage);
            if (index !== -1) {
              let sequence = table.sequences.get(index);
              if (sequence.length === 0) {
                this.glyphs.splice(this.glyphIterator.index, 1);
                return true;
              }
              this.glyphIterator.cur.id = sequence[0];
              this.glyphIterator.cur.ligatureComponent = 0;
              let features = this.glyphIterator.cur.features;
              let curGlyph = this.glyphIterator.cur;
              let replacement = sequence.slice(1).map((gid, i2) => {
                let glyph = new $535fa31b81f74b90$export$2e2bcd8739ae039(this.font, gid, void 0, features);
                glyph.shaperInfo = curGlyph.shaperInfo;
                glyph.isLigated = curGlyph.isLigated;
                glyph.ligatureComponent = i2 + 1;
                glyph.substituted = true;
                glyph.isMultiplied = true;
                return glyph;
              });
              this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
              return true;
            }
            return false;
          }
          case 3: {
            let index = this.coverageIndex(table.coverage);
            if (index !== -1) {
              let USER_INDEX = 0;
              this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
              return true;
            }
            return false;
          }
          case 4: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            for (let ligature of table.ligatureSets.get(index)) {
              let matched = this.sequenceMatchIndices(1, ligature.components);
              if (!matched)
                continue;
              let curGlyph = this.glyphIterator.cur;
              let characters = curGlyph.codePoints.slice();
              for (let index2 of matched)
                characters.push(...this.glyphs[index2].codePoints);
              let ligatureGlyph = new $535fa31b81f74b90$export$2e2bcd8739ae039(this.font, ligature.glyph, characters, curGlyph.features);
              ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
              ligatureGlyph.isLigated = true;
              ligatureGlyph.substituted = true;
              let isMarkLigature = curGlyph.isMark;
              for (let i2 = 0; i2 < matched.length && isMarkLigature; i2++)
                isMarkLigature = this.glyphs[matched[i2]].isMark;
              ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
              let lastLigID = curGlyph.ligatureID;
              let lastNumComps = curGlyph.codePoints.length;
              let curComps = lastNumComps;
              let idx = this.glyphIterator.index + 1;
              for (let matchIndex of matched) {
                if (isMarkLigature)
                  idx = matchIndex;
                else
                  while (idx < matchIndex) {
                    var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                    this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                    this.glyphs[idx].ligatureComponent = ligatureComponent;
                    idx++;
                  }
                lastLigID = this.glyphs[idx].ligatureID;
                lastNumComps = this.glyphs[idx].codePoints.length;
                curComps += lastNumComps;
                idx++;
              }
              if (lastLigID && !isMarkLigature)
                for (let i1 = idx; i1 < this.glyphs.length; i1++) {
                  if (this.glyphs[i1].ligatureID === lastLigID) {
                    var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);
                    this.glyphs[i1].ligatureComponent = ligatureComponent;
                  } else
                    break;
                }
              for (let i2 = matched.length - 1; i2 >= 0; i2--)
                this.glyphs.splice(matched[i2], 1);
              this.glyphs[this.glyphIterator.index] = ligatureGlyph;
              return true;
            }
            return false;
          }
          case 5:
            return this.applyContext(table);
          case 6:
            return this.applyChainingContext(table);
          case 7:
            return this.applyLookup(table.lookupType, table.extension);
          default:
            throw new Error(`GSUB lookupType ${lookupType} is not supported`);
        }
      }
    };
    var $1ab772dcf2da50dd$export$2e2bcd8739ae039 = class extends $cca6af4639973976$export$2e2bcd8739ae039 {
      applyPositionValue(sequenceIndex, value) {
        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
        if (value.xAdvance != null)
          position.xAdvance += value.xAdvance;
        if (value.yAdvance != null)
          position.yAdvance += value.yAdvance;
        if (value.xPlacement != null)
          position.xOffset += value.xPlacement;
        if (value.yPlacement != null)
          position.yOffset += value.yPlacement;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
          if (value.xPlaDevice)
            position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
          if (value.yPlaDevice)
            position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
          if (value.xAdvDevice)
            position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
          if (value.yAdvDevice)
            position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
        }
      }
      applyLookup(lookupType, table) {
        switch (lookupType) {
          case 1: {
            let index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            switch (table.version) {
              case 1:
                this.applyPositionValue(0, table.value);
                break;
              case 2:
                this.applyPositionValue(0, table.values.get(index));
                break;
            }
            return true;
          }
          case 2: {
            let nextGlyph = this.glyphIterator.peek();
            if (!nextGlyph)
              return false;
            let index = this.coverageIndex(table.coverage);
            if (index === -1)
              return false;
            switch (table.version) {
              case 1:
                let set = table.pairSets.get(index);
                for (let pair of set)
                  if (pair.secondGlyph === nextGlyph.id) {
                    this.applyPositionValue(0, pair.value1);
                    this.applyPositionValue(1, pair.value2);
                    return true;
                  }
                return false;
              case 2:
                let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                let class2 = this.getClassID(nextGlyph.id, table.classDef2);
                if (class1 === -1 || class2 === -1)
                  return false;
                var pair1 = table.classRecords.get(class1).get(class2);
                this.applyPositionValue(0, pair1.value1);
                this.applyPositionValue(1, pair1.value2);
                return true;
            }
          }
          case 3: {
            let nextIndex = this.glyphIterator.peekIndex();
            let nextGlyph = this.glyphs[nextIndex];
            if (!nextGlyph)
              return false;
            let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
            if (!curRecord || !curRecord.exitAnchor)
              return false;
            let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
            if (!nextRecord || !nextRecord.entryAnchor)
              return false;
            let entry = this.getAnchor(nextRecord.entryAnchor);
            let exit = this.getAnchor(curRecord.exitAnchor);
            let cur = this.positions[this.glyphIterator.index];
            let next = this.positions[nextIndex];
            let d;
            switch (this.direction) {
              case "ltr":
                cur.xAdvance = exit.x + cur.xOffset;
                d = entry.x + next.xOffset;
                next.xAdvance -= d;
                next.xOffset -= d;
                break;
              case "rtl":
                d = exit.x + cur.xOffset;
                cur.xAdvance -= d;
                cur.xOffset -= d;
                next.xAdvance = entry.x + next.xOffset;
                break;
            }
            if (this.glyphIterator.flags.rightToLeft) {
              this.glyphIterator.cur.cursiveAttachment = nextIndex;
              cur.yOffset = entry.y - exit.y;
            } else {
              nextGlyph.cursiveAttachment = this.glyphIterator.index;
              cur.yOffset = exit.y - entry.y;
            }
            return true;
          }
          case 4: {
            let markIndex = this.coverageIndex(table.markCoverage);
            if (markIndex === -1)
              return false;
            let baseGlyphIndex = this.glyphIterator.index;
            while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0))
              ;
            if (baseGlyphIndex < 0)
              return false;
            let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
            if (baseIndex === -1)
              return false;
            let markRecord = table.markArray[markIndex];
            let baseAnchor = table.baseArray[baseIndex][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
            return true;
          }
          case 5: {
            let markIndex = this.coverageIndex(table.markCoverage);
            if (markIndex === -1)
              return false;
            let baseGlyphIndex = this.glyphIterator.index;
            while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark)
              ;
            if (baseGlyphIndex < 0)
              return false;
            let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
            if (ligIndex === -1)
              return false;
            let ligAttach = table.ligatureArray[ligIndex];
            let markGlyph = this.glyphIterator.cur;
            let ligGlyph = this.glyphs[baseGlyphIndex];
            let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
            let markRecord = table.markArray[markIndex];
            let baseAnchor = ligAttach[compIndex][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
            return true;
          }
          case 6: {
            let mark1Index = this.coverageIndex(table.mark1Coverage);
            if (mark1Index === -1)
              return false;
            let prevIndex = this.glyphIterator.peekIndex(-1);
            let prev = this.glyphs[prevIndex];
            if (!prev || !prev.isMark)
              return false;
            let cur = this.glyphIterator.cur;
            let good = false;
            if (cur.ligatureID === prev.ligatureID) {
              if (!cur.ligatureID)
                good = true;
              else if (cur.ligatureComponent === prev.ligatureComponent)
                good = true;
            } else if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent)
              good = true;
            if (!good)
              return false;
            let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
            if (mark2Index === -1)
              return false;
            let markRecord = table.mark1Array[mark1Index];
            let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
            this.applyAnchor(markRecord, baseAnchor, prevIndex);
            return true;
          }
          case 7:
            return this.applyContext(table);
          case 8:
            return this.applyChainingContext(table);
          case 9:
            return this.applyLookup(table.lookupType, table.extension);
          default:
            throw new Error(`Unsupported GPOS table: ${lookupType}`);
        }
      }
      applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
        let baseCoords = this.getAnchor(baseAnchor);
        let markCoords = this.getAnchor(markRecord.markAnchor);
        let basePos = this.positions[baseGlyphIndex];
        let markPos = this.positions[this.glyphIterator.index];
        markPos.xOffset = baseCoords.x - markCoords.x;
        markPos.yOffset = baseCoords.y - markCoords.y;
        this.glyphIterator.cur.markAttachment = baseGlyphIndex;
      }
      getAnchor(anchor) {
        let x = anchor.xCoordinate;
        let y = anchor.yCoordinate;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
          if (anchor.xDeviceTable)
            x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
          if (anchor.yDeviceTable)
            y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
        }
        return {
          x,
          y
        };
      }
      applyFeatures(userFeatures, glyphs, advances) {
        super.applyFeatures(userFeatures, glyphs, advances);
        for (var i2 = 0; i2 < this.glyphs.length; i2++)
          this.fixCursiveAttachment(i2);
        this.fixMarkAttachment();
      }
      fixCursiveAttachment(i2) {
        let glyph = this.glyphs[i2];
        if (glyph.cursiveAttachment != null) {
          let j = glyph.cursiveAttachment;
          glyph.cursiveAttachment = null;
          this.fixCursiveAttachment(j);
          this.positions[i2].yOffset += this.positions[j].yOffset;
        }
      }
      fixMarkAttachment() {
        for (let i2 = 0; i2 < this.glyphs.length; i2++) {
          let glyph = this.glyphs[i2];
          if (glyph.markAttachment != null) {
            let j = glyph.markAttachment;
            this.positions[i2].xOffset += this.positions[j].xOffset;
            this.positions[i2].yOffset += this.positions[j].yOffset;
            if (this.direction === "ltr")
              for (let k = j; k < i2; k++) {
                this.positions[i2].xOffset -= this.positions[k].xAdvance;
                this.positions[i2].yOffset -= this.positions[k].yAdvance;
              }
            else
              for (let k1 = j + 1; k1 < i2 + 1; k1++) {
                this.positions[i2].xOffset += this.positions[k1].xAdvance;
                this.positions[i2].yOffset += this.positions[k1].yAdvance;
              }
          }
        }
      }
    };
    var $2ec9b66dcab54746$export$2e2bcd8739ae039 = class {
      setup(glyphRun) {
        this.glyphInfos = glyphRun.glyphs.map(
          (glyph) => new $535fa31b81f74b90$export$2e2bcd8739ae039(this.font, glyph.id, [
            ...glyph.codePoints
          ])
        );
        let script = null;
        if (this.GPOSProcessor)
          script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        if (this.GSUBProcessor)
          script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        this.shaper = $936111a4a5a2e9d6$export$7877a478dd30fd3d(script);
        this.plan = new $6703eaa61400de19$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);
        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
        for (let key in this.plan.allFeatures)
          glyphRun.features[key] = true;
      }
      substitute(glyphRun) {
        if (this.GSUBProcessor) {
          this.plan.process(this.GSUBProcessor, this.glyphInfos);
          glyphRun.glyphs = this.glyphInfos.map(
            (glyphInfo) => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints)
          );
        }
      }
      position(glyphRun) {
        if (this.shaper.zeroMarkWidths === "BEFORE_GPOS")
          this.zeroMarkAdvances(glyphRun.positions);
        if (this.GPOSProcessor)
          this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
        if (this.shaper.zeroMarkWidths === "AFTER_GPOS")
          this.zeroMarkAdvances(glyphRun.positions);
        if (glyphRun.direction === "rtl") {
          glyphRun.glyphs.reverse();
          glyphRun.positions.reverse();
        }
        return this.GPOSProcessor && this.GPOSProcessor.features;
      }
      zeroMarkAdvances(positions) {
        for (let i2 = 0; i2 < this.glyphInfos.length; i2++)
          if (this.glyphInfos[i2].isMark) {
            positions[i2].xAdvance = 0;
            positions[i2].yAdvance = 0;
          }
      }
      cleanup() {
        this.glyphInfos = null;
        this.plan = null;
        this.shaper = null;
      }
      getAvailableFeatures(script, language) {
        let features = [];
        if (this.GSUBProcessor) {
          this.GSUBProcessor.selectScript(script, language);
          features.push(...Object.keys(this.GSUBProcessor.features));
        }
        if (this.GPOSProcessor) {
          this.GPOSProcessor.selectScript(script, language);
          features.push(...Object.keys(this.GPOSProcessor.features));
        }
        return features;
      }
      constructor(font) {
        this.font = font;
        this.glyphInfos = null;
        this.plan = null;
        this.GSUBProcessor = null;
        this.GPOSProcessor = null;
        this.fallbackPosition = true;
        if (font.GSUB)
          this.GSUBProcessor = new $baa3ae21ed64fb80$export$2e2bcd8739ae039(font, font.GSUB);
        if (font.GPOS)
          this.GPOSProcessor = new $1ab772dcf2da50dd$export$2e2bcd8739ae039(font, font.GPOS);
      }
    };
    var $8fe7395fdc229fa3$export$2e2bcd8739ae039 = class {
      layout(string, features, script, language, direction) {
        if (typeof features === "string") {
          direction = language;
          language = script;
          script = features;
          features = [];
        }
        if (typeof string === "string") {
          if (script == null)
            script = $2e3a795a88d7e002$export$e5cb25e204fb8450(string);
          var glyphs = this.font.glyphsForString(string);
        } else {
          if (script == null) {
            let codePoints = [];
            for (let glyph of string)
              codePoints.push(...glyph.codePoints);
            script = $2e3a795a88d7e002$export$16fab0757cfc223d(codePoints);
          }
          var glyphs = string;
        }
        let glyphRun = new $9ee490eecf5a30a9$export$2e2bcd8739ae039(glyphs, features, script, language, direction);
        if (glyphs.length === 0) {
          glyphRun.positions = [];
          return glyphRun;
        }
        if (this.engine && this.engine.setup)
          this.engine.setup(glyphRun);
        this.substitute(glyphRun);
        this.position(glyphRun);
        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
        if (this.engine && this.engine.cleanup)
          this.engine.cleanup();
        return glyphRun;
      }
      substitute(glyphRun) {
        if (this.engine && this.engine.substitute)
          this.engine.substitute(glyphRun);
      }
      position(glyphRun) {
        glyphRun.positions = glyphRun.glyphs.map(
          (glyph) => new $745bead61c15c3c9$export$2e2bcd8739ae039(glyph.advanceWidth)
        );
        let positioned = null;
        if (this.engine && this.engine.position)
          positioned = this.engine.position(glyphRun);
        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
          if (!this.unicodeLayoutEngine)
            this.unicodeLayoutEngine = new $c2c165353b6a2650$export$2e2bcd8739ae039(this.font);
          this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
        }
        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
          if (!this.kernProcessor)
            this.kernProcessor = new $392dfa2b44d72edd$export$2e2bcd8739ae039(this.font);
          this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
          glyphRun.features.kern = true;
        }
      }
      hideDefaultIgnorables(glyphs, positions) {
        let space = this.font.glyphForCodePoint(32);
        for (let i2 = 0; i2 < glyphs.length; i2++)
          if (this.isDefaultIgnorable(glyphs[i2].codePoints[0])) {
            glyphs[i2] = space;
            positions[i2].xAdvance = 0;
            positions[i2].yAdvance = 0;
          }
      }
      isDefaultIgnorable(ch) {
        let plane = ch >> 16;
        if (plane === 0)
          switch (ch >> 8) {
            case 0:
              return ch === 173;
            case 3:
              return ch === 847;
            case 6:
              return ch === 1564;
            case 23:
              return 6068 <= ch && ch <= 6069;
            case 24:
              return 6155 <= ch && ch <= 6158;
            case 32:
              return 8203 <= ch && ch <= 8207 || 8234 <= ch && ch <= 8238 || 8288 <= ch && ch <= 8303;
            case 254:
              return 65024 <= ch && ch <= 65039 || ch === 65279;
            case 255:
              return 65520 <= ch && ch <= 65528;
            default:
              return false;
          }
        else
          switch (plane) {
            case 1:
              return 113824 <= ch && ch <= 113827 || 119155 <= ch && ch <= 119162;
            case 14:
              return 917504 <= ch && ch <= 921599;
            default:
              return false;
          }
      }
      getAvailableFeatures(script, language) {
        let features = [];
        if (this.engine)
          features.push(...this.engine.getAvailableFeatures(script, language));
        if (this.font.kern && features.indexOf("kern") === -1)
          features.push("kern");
        return features;
      }
      stringsForGlyph(gid) {
        let result = /* @__PURE__ */ new Set();
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
        for (let codePoint of codePoints)
          result.add(String.fromCodePoint(codePoint));
        if (this.engine && this.engine.stringsForGlyph)
          for (let string of this.engine.stringsForGlyph(gid))
            result.add(string);
        return Array.from(result);
      }
      constructor(font) {
        this.font = font;
        this.unicodeLayoutEngine = null;
        this.kernProcessor = null;
        if (this.font.morx)
          this.engine = new $7cff22d3cf7aa55a$export$2e2bcd8739ae039(this.font);
        else if (this.font.GSUB || this.font.GPOS)
          this.engine = new $2ec9b66dcab54746$export$2e2bcd8739ae039(this.font);
      }
    };
    var $77603c74293666bc$var$SVG_COMMANDS = {
      moveTo: "M",
      lineTo: "L",
      quadraticCurveTo: "Q",
      bezierCurveTo: "C",
      closePath: "Z"
    };
    var $77603c74293666bc$export$2e2bcd8739ae039 = class _$77603c74293666bc$export$2e2bcd8739ae039 {
      /**
      * Compiles the path to a JavaScript function that can be applied with
      * a graphics context in order to render the path.
      * @return {string}
      */
      toFunction() {
        return (ctx) => {
          this.commands.forEach((c) => {
            return ctx[c.command].apply(ctx, c.args);
          });
        };
      }
      /**
      * Converts the path to an SVG path data string
      * @return {string}
      */
      toSVG() {
        let cmds = this.commands.map((c) => {
          let args = c.args.map(
            (arg) => Math.round(arg * 100) / 100
          );
          return `${$77603c74293666bc$var$SVG_COMMANDS[c.command]}${args.join(" ")}`;
        });
        return cmds.join("");
      }
      /**
      * Gets the "control box" of a path.
      * This is like the bounding box, but it includes all points including
      * control points of bezier segments and is much faster to compute than
      * the real bounding box.
      * @type {BBox}
      */
      get cbox() {
        if (!this._cbox) {
          let cbox = new $6d619c173ebabb82$export$2e2bcd8739ae039();
          for (let command1 of this.commands)
            for (let i2 = 0; i2 < command1.args.length; i2 += 2)
              cbox.addPoint(command1.args[i2], command1.args[i2 + 1]);
          this._cbox = Object.freeze(cbox);
        }
        return this._cbox;
      }
      /**
      * Gets the exact bounding box of the path by evaluating curve segments.
      * Slower to compute than the control box, but more accurate.
      * @type {BBox}
      */
      get bbox() {
        if (this._bbox)
          return this._bbox;
        let bbox = new $6d619c173ebabb82$export$2e2bcd8739ae039();
        let cx = 0, cy = 0;
        let f = (t) => Math.pow(1 - t, 3) * p0[i2] + 3 * Math.pow(1 - t, 2) * t * p1[i2] + 3 * (1 - t) * Math.pow(t, 2) * p2[i2] + Math.pow(t, 3) * p3[i2];
        for (let c of this.commands)
          switch (c.command) {
            case "moveTo":
            case "lineTo":
              let [x, y] = c.args;
              bbox.addPoint(x, y);
              cx = x;
              cy = y;
              break;
            case "quadraticCurveTo":
            case "bezierCurveTo":
              if (c.command === "quadraticCurveTo") {
                var [qp1x, qp1y, p3x, p3y] = c.args;
                var cp1x = cx + 2 / 3 * (qp1x - cx);
                var cp1y = cy + 2 / 3 * (qp1y - cy);
                var cp2x = p3x + 2 / 3 * (qp1x - p3x);
                var cp2y = p3y + 2 / 3 * (qp1y - p3y);
              } else
                var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;
              bbox.addPoint(p3x, p3y);
              var p0 = [
                cx,
                cy
              ];
              var p1 = [
                cp1x,
                cp1y
              ];
              var p2 = [
                cp2x,
                cp2y
              ];
              var p3 = [
                p3x,
                p3y
              ];
              for (var i2 = 0; i2 <= 1; i2++) {
                let b = 6 * p0[i2] - 12 * p1[i2] + 6 * p2[i2];
                let a = -3 * p0[i2] + 9 * p1[i2] - 9 * p2[i2] + 3 * p3[i2];
                c = 3 * p1[i2] - 3 * p0[i2];
                if (a === 0) {
                  if (b === 0)
                    continue;
                  let t = -c / b;
                  if (0 < t && t < 1) {
                    if (i2 === 0)
                      bbox.addPoint(f(t), bbox.maxY);
                    else if (i2 === 1)
                      bbox.addPoint(bbox.maxX, f(t));
                  }
                  continue;
                }
                let b2ac = Math.pow(b, 2) - 4 * c * a;
                if (b2ac < 0)
                  continue;
                let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                if (0 < t1 && t1 < 1) {
                  if (i2 === 0)
                    bbox.addPoint(f(t1), bbox.maxY);
                  else if (i2 === 1)
                    bbox.addPoint(bbox.maxX, f(t1));
                }
                let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                if (0 < t2 && t2 < 1) {
                  if (i2 === 0)
                    bbox.addPoint(f(t2), bbox.maxY);
                  else if (i2 === 1)
                    bbox.addPoint(bbox.maxX, f(t2));
                }
              }
              cx = p3x;
              cy = p3y;
              break;
          }
        return this._bbox = Object.freeze(bbox);
      }
      /**
      * Applies a mapping function to each point in the path.
      * @param {function} fn
      * @return {Path}
      */
      mapPoints(fn) {
        let path = new _$77603c74293666bc$export$2e2bcd8739ae039();
        for (let c of this.commands) {
          let args = [];
          for (let i2 = 0; i2 < c.args.length; i2 += 2) {
            let [x, y] = fn(c.args[i2], c.args[i2 + 1]);
            args.push(x, y);
          }
          path[c.command](...args);
        }
        return path;
      }
      /**
      * Transforms the path by the given matrix.
      */
      transform(m0, m1, m2, m3, m4, m5) {
        return this.mapPoints((x, y) => {
          const tx = m0 * x + m2 * y + m4;
          const ty = m1 * x + m3 * y + m5;
          return [
            tx,
            ty
          ];
        });
      }
      /**
      * Translates the path by the given offset.
      */
      translate(x, y) {
        return this.transform(1, 0, 0, 1, x, y);
      }
      /**
      * Rotates the path by the given angle (in radians).
      */
      rotate(angle) {
        let cos = Math.cos(angle);
        let sin = Math.sin(angle);
        return this.transform(cos, sin, -sin, cos, 0, 0);
      }
      /**
      * Scales the path.
      */
      scale(scaleX, scaleY = scaleX) {
        return this.transform(scaleX, 0, 0, scaleY, 0, 0);
      }
      constructor() {
        this.commands = [];
        this._bbox = null;
        this._cbox = null;
      }
    };
    for (let command of [
      "moveTo",
      "lineTo",
      "quadraticCurveTo",
      "bezierCurveTo",
      "closePath"
    ])
      $77603c74293666bc$export$2e2bcd8739ae039.prototype[command] = function(...args) {
        this._bbox = this._cbox = null;
        this.commands.push({
          command,
          args
        });
        return this;
      };
    var $1ffba156ee058250$export$2e2bcd8739ae039 = [
      ".notdef",
      ".null",
      "nonmarkingreturn",
      "space",
      "exclam",
      "quotedbl",
      "numbersign",
      "dollar",
      "percent",
      "ampersand",
      "quotesingle",
      "parenleft",
      "parenright",
      "asterisk",
      "plus",
      "comma",
      "hyphen",
      "period",
      "slash",
      "zero",
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "colon",
      "semicolon",
      "less",
      "equal",
      "greater",
      "question",
      "at",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "bracketleft",
      "backslash",
      "bracketright",
      "asciicircum",
      "underscore",
      "grave",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "braceleft",
      "bar",
      "braceright",
      "asciitilde",
      "Adieresis",
      "Aring",
      "Ccedilla",
      "Eacute",
      "Ntilde",
      "Odieresis",
      "Udieresis",
      "aacute",
      "agrave",
      "acircumflex",
      "adieresis",
      "atilde",
      "aring",
      "ccedilla",
      "eacute",
      "egrave",
      "ecircumflex",
      "edieresis",
      "iacute",
      "igrave",
      "icircumflex",
      "idieresis",
      "ntilde",
      "oacute",
      "ograve",
      "ocircumflex",
      "odieresis",
      "otilde",
      "uacute",
      "ugrave",
      "ucircumflex",
      "udieresis",
      "dagger",
      "degree",
      "cent",
      "sterling",
      "section",
      "bullet",
      "paragraph",
      "germandbls",
      "registered",
      "copyright",
      "trademark",
      "acute",
      "dieresis",
      "notequal",
      "AE",
      "Oslash",
      "infinity",
      "plusminus",
      "lessequal",
      "greaterequal",
      "yen",
      "mu",
      "partialdiff",
      "summation",
      "product",
      "pi",
      "integral",
      "ordfeminine",
      "ordmasculine",
      "Omega",
      "ae",
      "oslash",
      "questiondown",
      "exclamdown",
      "logicalnot",
      "radical",
      "florin",
      "approxequal",
      "Delta",
      "guillemotleft",
      "guillemotright",
      "ellipsis",
      "nonbreakingspace",
      "Agrave",
      "Atilde",
      "Otilde",
      "OE",
      "oe",
      "endash",
      "emdash",
      "quotedblleft",
      "quotedblright",
      "quoteleft",
      "quoteright",
      "divide",
      "lozenge",
      "ydieresis",
      "Ydieresis",
      "fraction",
      "currency",
      "guilsinglleft",
      "guilsinglright",
      "fi",
      "fl",
      "daggerdbl",
      "periodcentered",
      "quotesinglbase",
      "quotedblbase",
      "perthousand",
      "Acircumflex",
      "Ecircumflex",
      "Aacute",
      "Edieresis",
      "Egrave",
      "Iacute",
      "Icircumflex",
      "Idieresis",
      "Igrave",
      "Oacute",
      "Ocircumflex",
      "apple",
      "Ograve",
      "Uacute",
      "Ucircumflex",
      "Ugrave",
      "dotlessi",
      "circumflex",
      "tilde",
      "macron",
      "breve",
      "dotaccent",
      "ring",
      "cedilla",
      "hungarumlaut",
      "ogonek",
      "caron",
      "Lslash",
      "lslash",
      "Scaron",
      "scaron",
      "Zcaron",
      "zcaron",
      "brokenbar",
      "Eth",
      "eth",
      "Yacute",
      "yacute",
      "Thorn",
      "thorn",
      "minus",
      "multiply",
      "onesuperior",
      "twosuperior",
      "threesuperior",
      "onehalf",
      "onequarter",
      "threequarters",
      "franc",
      "Gbreve",
      "gbreve",
      "Idotaccent",
      "Scedilla",
      "scedilla",
      "Cacute",
      "cacute",
      "Ccaron",
      "ccaron",
      "dcroat"
    ];
    var _class;
    var $499b081c6bd05466$export$2e2bcd8739ae039 = (_class = class $499b081c6bd05466$export$2e2bcd8739ae039 {
      _getPath() {
        return new $77603c74293666bc$export$2e2bcd8739ae039();
      }
      _getCBox() {
        return this.path.cbox;
      }
      _getBBox() {
        return this.path.bbox;
      }
      _getTableMetrics(table) {
        if (this.id < table.metrics.length)
          return table.metrics.get(this.id);
        let metric = table.metrics.get(table.metrics.length - 1);
        let res = {
          advance: metric ? metric.advance : 0,
          bearing: table.bearings.get(this.id - table.metrics.length) || 0
        };
        return res;
      }
      _getMetrics(cbox) {
        if (this._metrics)
          return this._metrics;
        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);
        if (this._font.vmtx)
          var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);
        else {
          let os2;
          if (typeof cbox === "undefined" || cbox === null)
            ({ cbox } = this);
          if ((os2 = this._font["OS/2"]) && os2.version > 0) {
            var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
            var topBearing = os2.typoAscender - cbox.maxY;
          } else {
            let { hhea } = this._font;
            var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
            var topBearing = hhea.ascent - cbox.maxY;
          }
        }
        if (this._font._variationProcessor && this._font.HVAR)
          advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
        return this._metrics = {
          advanceWidth,
          advanceHeight,
          leftBearing,
          topBearing
        };
      }
      /**
      * The glyph’s control box.
      * This is often the same as the bounding box, but is faster to compute.
      * Because of the way bezier curves are defined, some of the control points
      * can be outside of the bounding box. Where `bbox` takes this into account,
      * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
      * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
      * for a more detailed description.
      *
      * @type {BBox}
      */
      get cbox() {
        return this._getCBox();
      }
      /**
      * The glyph’s bounding box, i.e. the rectangle that encloses the
      * glyph outline as tightly as possible.
      * @type {BBox}
      */
      get bbox() {
        return this._getBBox();
      }
      /**
      * A vector Path object representing the glyph outline.
      * @type {Path}
      */
      get path() {
        return this._getPath();
      }
      /**
      * Returns a path scaled to the given font size.
      * @param {number} size
      * @return {Path}
      */
      getScaledPath(size) {
        let scale = 1 / this._font.unitsPerEm * size;
        return this.path.scale(scale);
      }
      /**
      * The glyph's advance width.
      * @type {number}
      */
      get advanceWidth() {
        return this._getMetrics().advanceWidth;
      }
      /**
      * The glyph's advance height.
      * @type {number}
      */
      get advanceHeight() {
        return this._getMetrics().advanceHeight;
      }
      get ligatureCaretPositions() {
      }
      _getName() {
        let { post } = this._font;
        if (!post)
          return null;
        switch (post.version) {
          case 1:
            return $1ffba156ee058250$export$2e2bcd8739ae039[this.id];
          case 2:
            let id = post.glyphNameIndex[this.id];
            if (id < $1ffba156ee058250$export$2e2bcd8739ae039.length)
              return $1ffba156ee058250$export$2e2bcd8739ae039[id];
            return post.names[id - $1ffba156ee058250$export$2e2bcd8739ae039.length];
          case 2.5:
            return $1ffba156ee058250$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];
          case 4:
            return String.fromCharCode(post.map[this.id]);
        }
      }
      /**
      * The glyph's name
      * @type {string}
      */
      get name() {
        return this._getName();
      }
      /**
      * Renders the glyph to the given graphics context, at the specified font size.
      * @param {CanvasRenderingContext2d} ctx
      * @param {number} size
      */
      render(ctx, size) {
        ctx.save();
        let scale = 1 / this._font.head.unitsPerEm * size;
        ctx.scale(scale, scale);
        let fn = this.path.toFunction();
        fn(ctx);
        ctx.fill();
        ctx.restore();
      }
      constructor(id, codePoints, font) {
        this.id = id;
        this.codePoints = codePoints;
        this._font = font;
        this.isMark = this.codePoints.length > 0 && this.codePoints.every($parcel$interopDefault($lzfo4$unicodeproperties).isMark);
        this.isLigature = this.codePoints.length > 1;
      }
    }, $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "cbox", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "cbox"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "bbox", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "path", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "path"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "advanceWidth", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "advanceWidth"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "advanceHeight", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "advanceHeight"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "name", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "name"), _class.prototype), _class);
    var $f71300a5bebbfea9$var$GlyfHeader = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      numberOfContours: $parcel$interopDefault($lzfo4$restructure).int16,
      xMin: $parcel$interopDefault($lzfo4$restructure).int16,
      yMin: $parcel$interopDefault($lzfo4$restructure).int16,
      xMax: $parcel$interopDefault($lzfo4$restructure).int16,
      yMax: $parcel$interopDefault($lzfo4$restructure).int16
    });
    var $f71300a5bebbfea9$var$ON_CURVE = 1;
    var $f71300a5bebbfea9$var$X_SHORT_VECTOR = 2;
    var $f71300a5bebbfea9$var$Y_SHORT_VECTOR = 4;
    var $f71300a5bebbfea9$var$REPEAT = 8;
    var $f71300a5bebbfea9$var$SAME_X = 16;
    var $f71300a5bebbfea9$var$SAME_Y = 32;
    var $f71300a5bebbfea9$var$ARG_1_AND_2_ARE_WORDS = 1;
    var $f71300a5bebbfea9$var$WE_HAVE_A_SCALE = 8;
    var $f71300a5bebbfea9$var$MORE_COMPONENTS = 32;
    var $f71300a5bebbfea9$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
    var $f71300a5bebbfea9$var$WE_HAVE_A_TWO_BY_TWO = 128;
    var $f71300a5bebbfea9$var$WE_HAVE_INSTRUCTIONS = 256;
    var $f71300a5bebbfea9$export$baf26146a414f24a = class _$f71300a5bebbfea9$export$baf26146a414f24a {
      copy() {
        return new _$f71300a5bebbfea9$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
      }
      constructor(onCurve, endContour, x = 0, y = 0) {
        this.onCurve = onCurve;
        this.endContour = endContour;
        this.x = x;
        this.y = y;
      }
    };
    var $f71300a5bebbfea9$var$Component = class {
      constructor(glyphID, dx, dy) {
        this.glyphID = glyphID;
        this.dx = dx;
        this.dy = dy;
        this.pos = 0;
        this.scaleX = this.scaleY = 1;
        this.scale01 = this.scale10 = 0;
      }
    };
    var $f71300a5bebbfea9$export$2e2bcd8739ae039 = class extends $499b081c6bd05466$export$2e2bcd8739ae039 {
      // Parses just the glyph header and returns the bounding box
      _getCBox(internal) {
        if (this._font._variationProcessor && !internal)
          return this.path.cbox;
        let stream = this._font._getTableStream("glyf");
        stream.pos += this._font.loca.offsets[this.id];
        let glyph = $f71300a5bebbfea9$var$GlyfHeader.decode(stream);
        let cbox = new $6d619c173ebabb82$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
        return Object.freeze(cbox);
      }
      // Parses a single glyph coordinate
      _parseGlyphCoord(stream, prev, short, same) {
        if (short) {
          var val = stream.readUInt8();
          if (!same)
            val = -val;
          val += prev;
        } else if (same)
          var val = prev;
        else
          var val = prev + stream.readInt16BE();
        return val;
      }
      // Decodes the glyph data into points for simple glyphs,
      // or components for composite glyphs
      _decode() {
        let glyfPos = this._font.loca.offsets[this.id];
        let nextPos = this._font.loca.offsets[this.id + 1];
        if (glyfPos === nextPos)
          return null;
        let stream = this._font._getTableStream("glyf");
        stream.pos += glyfPos;
        let startPos = stream.pos;
        let glyph = $f71300a5bebbfea9$var$GlyfHeader.decode(stream);
        if (glyph.numberOfContours > 0)
          this._decodeSimple(glyph, stream);
        else if (glyph.numberOfContours < 0)
          this._decodeComposite(glyph, stream, startPos);
        return glyph;
      }
      _decodeSimple(glyph, stream) {
        glyph.points = [];
        let endPtsOfContours = new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, glyph.numberOfContours).decode(stream);
        glyph.instructions = new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, $parcel$interopDefault($lzfo4$restructure).uint16).decode(stream);
        let flags = [];
        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
        while (flags.length < numCoords) {
          var flag = stream.readUInt8();
          flags.push(flag);
          if (flag & $f71300a5bebbfea9$var$REPEAT) {
            let count = stream.readUInt8();
            for (let j = 0; j < count; j++)
              flags.push(flag);
          }
        }
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          let point = new $f71300a5bebbfea9$export$baf26146a414f24a(!!(flag & $f71300a5bebbfea9$var$ON_CURVE), endPtsOfContours.indexOf(i2) >= 0, 0, 0);
          glyph.points.push(point);
        }
        let px = 0;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          glyph.points[i2].x = px = this._parseGlyphCoord(stream, px, flag & $f71300a5bebbfea9$var$X_SHORT_VECTOR, flag & $f71300a5bebbfea9$var$SAME_X);
        }
        let py = 0;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags[i2];
          glyph.points[i2].y = py = this._parseGlyphCoord(stream, py, flag & $f71300a5bebbfea9$var$Y_SHORT_VECTOR, flag & $f71300a5bebbfea9$var$SAME_Y);
        }
        if (this._font._variationProcessor) {
          let points = glyph.points.slice();
          points.push(...this._getPhantomPoints(glyph));
          this._font._variationProcessor.transformPoints(this.id, points);
          glyph.phantomPoints = points.slice(-4);
        }
        return;
      }
      _decodeComposite(glyph, stream, offset = 0) {
        glyph.components = [];
        let haveInstructions = false;
        let flags = $f71300a5bebbfea9$var$MORE_COMPONENTS;
        while (flags & $f71300a5bebbfea9$var$MORE_COMPONENTS) {
          flags = stream.readUInt16BE();
          let gPos = stream.pos - offset;
          let glyphID = stream.readUInt16BE();
          if (!haveInstructions)
            haveInstructions = (flags & $f71300a5bebbfea9$var$WE_HAVE_INSTRUCTIONS) !== 0;
          if (flags & $f71300a5bebbfea9$var$ARG_1_AND_2_ARE_WORDS) {
            var dx = stream.readInt16BE();
            var dy = stream.readInt16BE();
          } else {
            var dx = stream.readInt8();
            var dy = stream.readInt8();
          }
          var component = new $f71300a5bebbfea9$var$Component(glyphID, dx, dy);
          component.pos = gPos;
          if (flags & $f71300a5bebbfea9$var$WE_HAVE_A_SCALE)
            component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          else if (flags & $f71300a5bebbfea9$var$WE_HAVE_AN_X_AND_Y_SCALE) {
            component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          } else if (flags & $f71300a5bebbfea9$var$WE_HAVE_A_TWO_BY_TWO) {
            component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
          }
          glyph.components.push(component);
        }
        if (this._font._variationProcessor) {
          let points = [];
          for (let j = 0; j < glyph.components.length; j++) {
            var component = glyph.components[j];
            points.push(new $f71300a5bebbfea9$export$baf26146a414f24a(true, true, component.dx, component.dy));
          }
          points.push(...this._getPhantomPoints(glyph));
          this._font._variationProcessor.transformPoints(this.id, points);
          glyph.phantomPoints = points.splice(-4, 4);
          for (let i2 = 0; i2 < points.length; i2++) {
            let point = points[i2];
            glyph.components[i2].dx = point.x;
            glyph.components[i2].dy = point.y;
          }
        }
        return haveInstructions;
      }
      _getPhantomPoints(glyph) {
        let cbox = this._getCBox(true);
        if (this._metrics == null)
          this._metrics = $499b081c6bd05466$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);
        let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;
        return [
          new $f71300a5bebbfea9$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
          new $f71300a5bebbfea9$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
          new $f71300a5bebbfea9$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
          new $f71300a5bebbfea9$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
        ];
      }
      // Decodes font data, resolves composite glyphs, and returns an array of contours
      _getContours() {
        let glyph = this._decode();
        if (!glyph)
          return [];
        let points = [];
        if (glyph.numberOfContours < 0)
          for (let component of glyph.components) {
            let contours2 = this._font.getGlyph(component.glyphID)._getContours();
            for (let i2 = 0; i2 < contours2.length; i2++) {
              let contour = contours2[i2];
              for (let j = 0; j < contour.length; j++) {
                let point2 = contour[j];
                let x = point2.x * component.scaleX + point2.y * component.scale01 + component.dx;
                let y = point2.y * component.scaleY + point2.x * component.scale10 + component.dy;
                points.push(new $f71300a5bebbfea9$export$baf26146a414f24a(point2.onCurve, point2.endContour, x, y));
              }
            }
          }
        else
          points = glyph.points || [];
        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
          this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
          this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
          this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
          this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
        }
        let contours = [];
        let cur = [];
        for (let k = 0; k < points.length; k++) {
          var point = points[k];
          cur.push(point);
          if (point.endContour) {
            contours.push(cur);
            cur = [];
          }
        }
        return contours;
      }
      _getMetrics() {
        if (this._metrics)
          return this._metrics;
        let cbox = this._getCBox(true);
        super._getMetrics(cbox);
        if (this._font._variationProcessor && !this._font.HVAR)
          this.path;
        return this._metrics;
      }
      // Converts contours to a Path object that can be rendered
      _getPath() {
        let contours = this._getContours();
        let path = new $77603c74293666bc$export$2e2bcd8739ae039();
        for (let i2 = 0; i2 < contours.length; i2++) {
          let contour = contours[i2];
          let firstPt = contour[0];
          let lastPt = contour[contour.length - 1];
          let start = 0;
          if (firstPt.onCurve) {
            var curvePt = null;
            start = 1;
          } else {
            if (lastPt.onCurve)
              firstPt = lastPt;
            else
              firstPt = new $f71300a5bebbfea9$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
            var curvePt = firstPt;
          }
          path.moveTo(firstPt.x, firstPt.y);
          for (let j = start; j < contour.length; j++) {
            let pt = contour[j];
            let prevPt = j === 0 ? firstPt : contour[j - 1];
            if (prevPt.onCurve && pt.onCurve)
              path.lineTo(pt.x, pt.y);
            else if (prevPt.onCurve && !pt.onCurve)
              var curvePt = pt;
            else if (!prevPt.onCurve && !pt.onCurve) {
              let midX = (prevPt.x + pt.x) / 2;
              let midY = (prevPt.y + pt.y) / 2;
              path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
              var curvePt = pt;
            } else if (!prevPt.onCurve && pt.onCurve) {
              path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
              var curvePt = null;
            } else
              throw new Error("Unknown TTF path state");
          }
          if (curvePt)
            path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
          path.closePath();
        }
        return path;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "TTF");
      }
    };
    var $e3cf8415f0436224$export$2e2bcd8739ae039 = class extends $499b081c6bd05466$export$2e2bcd8739ae039 {
      _getName() {
        if (this._font.CFF2)
          return super._getName();
        return this._font["CFF "].getGlyphName(this.id);
      }
      bias(s) {
        if (s.length < 1240)
          return 107;
        else if (s.length < 33900)
          return 1131;
        else
          return 32768;
      }
      _getPath() {
        let cff = this._font.CFF2 || this._font["CFF "];
        let { stream } = cff;
        let str = cff.topDict.CharStrings[this.id];
        let end = str.offset + str.length;
        stream.pos = str.offset;
        let path = new $77603c74293666bc$export$2e2bcd8739ae039();
        let stack = [];
        let trans = [];
        let width = null;
        let nStems = 0;
        let x1 = 0, y1 = 0;
        let usedGsubrs;
        let usedSubrs;
        let open = false;
        this._usedGsubrs = usedGsubrs = {};
        this._usedSubrs = usedSubrs = {};
        let gsubrs = cff.globalSubrIndex || [];
        let gsubrsBias = this.bias(gsubrs);
        let privateDict = cff.privateDictForGlyph(this.id) || {};
        let subrs = privateDict.Subrs || [];
        let subrsBias = this.bias(subrs);
        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
        let vsindex = privateDict.vsindex;
        let variationProcessor = this._font._variationProcessor;
        function checkWidth() {
          if (width == null)
            width = stack.shift() + privateDict.nominalWidthX;
        }
        function parseStems() {
          if (stack.length % 2 !== 0)
            checkWidth();
          nStems += stack.length >> 1;
          return stack.length = 0;
        }
        function moveTo(x, y) {
          if (open)
            path.closePath();
          path.moveTo(x, y);
          open = true;
        }
        let parse = function() {
          while (stream.pos < end) {
            let op = stream.readUInt8();
            if (op < 32) {
              let index, subr, phase;
              switch (op) {
                case 1:
                case 3:
                case 18:
                case 23:
                  parseStems();
                  break;
                case 4:
                  if (stack.length > 1)
                    checkWidth();
                  y1 += stack.shift();
                  moveTo(x1, y1);
                  break;
                case 5:
                  while (stack.length >= 2) {
                    x1 += stack.shift();
                    y1 += stack.shift();
                    path.lineTo(x1, y1);
                  }
                  break;
                case 6:
                case 7:
                  phase = op === 6;
                  while (stack.length >= 1) {
                    if (phase)
                      x1 += stack.shift();
                    else
                      y1 += stack.shift();
                    path.lineTo(x1, y1);
                    phase = !phase;
                  }
                  break;
                case 8:
                  while (stack.length > 0) {
                    var c1x = x1 + stack.shift();
                    var c1y = y1 + stack.shift();
                    var c2x = c1x + stack.shift();
                    var c2y = c1y + stack.shift();
                    x1 = c2x + stack.shift();
                    y1 = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                  }
                  break;
                case 10:
                  index = stack.pop() + subrsBias;
                  subr = subrs[index];
                  if (subr) {
                    usedSubrs[index] = true;
                    var p = stream.pos;
                    var e = end;
                    stream.pos = subr.offset;
                    end = subr.offset + subr.length;
                    parse();
                    stream.pos = p;
                    end = e;
                  }
                  break;
                case 11:
                  if (cff.version >= 2)
                    break;
                  return;
                case 14:
                  if (cff.version >= 2)
                    break;
                  if (stack.length > 0)
                    checkWidth();
                  if (open) {
                    path.closePath();
                    open = false;
                  }
                  break;
                case 15:
                  if (cff.version < 2)
                    throw new Error("vsindex operator not supported in CFF v1");
                  vsindex = stack.pop();
                  break;
                case 16: {
                  if (cff.version < 2)
                    throw new Error("blend operator not supported in CFF v1");
                  if (!variationProcessor)
                    throw new Error("blend operator in non-variation font");
                  let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                  let numBlends = stack.pop();
                  let numOperands = numBlends * blendVector.length;
                  let delta = stack.length - numOperands;
                  let base = delta - numBlends;
                  for (let i2 = 0; i2 < numBlends; i2++) {
                    let sum = stack[base + i2];
                    for (let j = 0; j < blendVector.length; j++)
                      sum += blendVector[j] * stack[delta++];
                    stack[base + i2] = sum;
                  }
                  while (numOperands--)
                    stack.pop();
                  break;
                }
                case 19:
                case 20:
                  parseStems();
                  stream.pos += nStems + 7 >> 3;
                  break;
                case 21:
                  if (stack.length > 2)
                    checkWidth();
                  x1 += stack.shift();
                  y1 += stack.shift();
                  moveTo(x1, y1);
                  break;
                case 22:
                  if (stack.length > 1)
                    checkWidth();
                  x1 += stack.shift();
                  moveTo(x1, y1);
                  break;
                case 24:
                  while (stack.length >= 8) {
                    var c1x = x1 + stack.shift();
                    var c1y = y1 + stack.shift();
                    var c2x = c1x + stack.shift();
                    var c2y = c1y + stack.shift();
                    x1 = c2x + stack.shift();
                    y1 = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                  }
                  x1 += stack.shift();
                  y1 += stack.shift();
                  path.lineTo(x1, y1);
                  break;
                case 25:
                  while (stack.length >= 8) {
                    x1 += stack.shift();
                    y1 += stack.shift();
                    path.lineTo(x1, y1);
                  }
                  var c1x = x1 + stack.shift();
                  var c1y = y1 + stack.shift();
                  var c2x = c1x + stack.shift();
                  var c2y = c1y + stack.shift();
                  x1 = c2x + stack.shift();
                  y1 = c2y + stack.shift();
                  path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                  break;
                case 26:
                  if (stack.length % 2)
                    x1 += stack.shift();
                  while (stack.length >= 4) {
                    c1x = x1;
                    c1y = y1 + stack.shift();
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x1 = c2x;
                    y1 = c2y + stack.shift();
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                  }
                  break;
                case 27:
                  if (stack.length % 2)
                    y1 += stack.shift();
                  while (stack.length >= 4) {
                    c1x = x1 + stack.shift();
                    c1y = y1;
                    c2x = c1x + stack.shift();
                    c2y = c1y + stack.shift();
                    x1 = c2x + stack.shift();
                    y1 = c2y;
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                  }
                  break;
                case 28:
                  stack.push(stream.readInt16BE());
                  break;
                case 29:
                  index = stack.pop() + gsubrsBias;
                  subr = gsubrs[index];
                  if (subr) {
                    usedGsubrs[index] = true;
                    var p = stream.pos;
                    var e = end;
                    stream.pos = subr.offset;
                    end = subr.offset + subr.length;
                    parse();
                    stream.pos = p;
                    end = e;
                  }
                  break;
                case 30:
                case 31:
                  phase = op === 31;
                  while (stack.length >= 4) {
                    if (phase) {
                      c1x = x1 + stack.shift();
                      c1y = y1;
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      y1 = c2y + stack.shift();
                      x1 = c2x + (stack.length === 1 ? stack.shift() : 0);
                    } else {
                      c1x = x1;
                      c1y = y1 + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      x1 = c2x + stack.shift();
                      y1 = c2y + (stack.length === 1 ? stack.shift() : 0);
                    }
                    path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                    phase = !phase;
                  }
                  break;
                case 12:
                  op = stream.readUInt8();
                  switch (op) {
                    case 3:
                      let a = stack.pop();
                      let b = stack.pop();
                      stack.push(a && b ? 1 : 0);
                      break;
                    case 4:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a || b ? 1 : 0);
                      break;
                    case 5:
                      a = stack.pop();
                      stack.push(a ? 0 : 1);
                      break;
                    case 9:
                      a = stack.pop();
                      stack.push(Math.abs(a));
                      break;
                    case 10:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a + b);
                      break;
                    case 11:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a - b);
                      break;
                    case 12:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a / b);
                      break;
                    case 14:
                      a = stack.pop();
                      stack.push(-a);
                      break;
                    case 15:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a === b ? 1 : 0);
                      break;
                    case 18:
                      stack.pop();
                      break;
                    case 20:
                      let val = stack.pop();
                      let idx = stack.pop();
                      trans[idx] = val;
                      break;
                    case 21:
                      idx = stack.pop();
                      stack.push(trans[idx] || 0);
                      break;
                    case 22:
                      let s1 = stack.pop();
                      let s2 = stack.pop();
                      let v1 = stack.pop();
                      let v2 = stack.pop();
                      stack.push(v1 <= v2 ? s1 : s2);
                      break;
                    case 23:
                      stack.push(Math.random());
                      break;
                    case 24:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(a * b);
                      break;
                    case 26:
                      a = stack.pop();
                      stack.push(Math.sqrt(a));
                      break;
                    case 27:
                      a = stack.pop();
                      stack.push(a, a);
                      break;
                    case 28:
                      a = stack.pop();
                      b = stack.pop();
                      stack.push(b, a);
                      break;
                    case 29:
                      idx = stack.pop();
                      if (idx < 0)
                        idx = 0;
                      else if (idx > stack.length - 1)
                        idx = stack.length - 1;
                      stack.push(stack[idx]);
                      break;
                    case 30:
                      let n = stack.pop();
                      let j = stack.pop();
                      if (j >= 0)
                        while (j > 0) {
                          var t = stack[n - 1];
                          for (let i2 = n - 2; i2 >= 0; i2--)
                            stack[i2 + 1] = stack[i2];
                          stack[0] = t;
                          j--;
                        }
                      else
                        while (j < 0) {
                          var t = stack[0];
                          for (let i2 = 0; i2 <= n; i2++)
                            stack[i2] = stack[i2 + 1];
                          stack[n - 1] = t;
                          j++;
                        }
                      break;
                    case 34:
                      c1x = x1 + stack.shift();
                      c1y = y1;
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      let c3x = c2x + stack.shift();
                      let c3y = c2y;
                      let c4x = c3x + stack.shift();
                      let c4y = c3y;
                      let c5x = c4x + stack.shift();
                      let c5y = c4y;
                      let c6x = c5x + stack.shift();
                      let c6y = c5y;
                      x1 = c6x;
                      y1 = c6y;
                      path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                      path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                      break;
                    case 35:
                      let pts = [];
                      for (let i2 = 0; i2 <= 5; i2++) {
                        x1 += stack.shift();
                        y1 += stack.shift();
                        pts.push(x1, y1);
                      }
                      path.bezierCurveTo(...pts.slice(0, 6));
                      path.bezierCurveTo(...pts.slice(6));
                      stack.shift();
                      break;
                    case 36:
                      c1x = x1 + stack.shift();
                      c1y = y1 + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      c3x = c2x + stack.shift();
                      c3y = c2y;
                      c4x = c3x + stack.shift();
                      c4y = c3y;
                      c5x = c4x + stack.shift();
                      c5y = c4y + stack.shift();
                      c6x = c5x + stack.shift();
                      c6y = c5y;
                      x1 = c6x;
                      y1 = c6y;
                      path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                      path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                      break;
                    case 37:
                      let startx = x1;
                      let starty = y1;
                      pts = [];
                      for (let i1 = 0; i1 <= 4; i1++) {
                        x1 += stack.shift();
                        y1 += stack.shift();
                        pts.push(x1, y1);
                      }
                      if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {
                        x1 += stack.shift();
                        y1 = starty;
                      } else {
                        x1 = startx;
                        y1 += stack.shift();
                      }
                      pts.push(x1, y1);
                      path.bezierCurveTo(...pts.slice(0, 6));
                      path.bezierCurveTo(...pts.slice(6));
                      break;
                    default:
                      throw new Error(`Unknown op: 12 ${op}`);
                  }
                  break;
                default:
                  throw new Error(`Unknown op: ${op}`);
              }
            } else if (op < 247)
              stack.push(op - 139);
            else if (op < 251) {
              var b1 = stream.readUInt8();
              stack.push((op - 247) * 256 + b1 + 108);
            } else if (op < 255) {
              var b1 = stream.readUInt8();
              stack.push(-(op - 251) * 256 - b1 - 108);
            } else
              stack.push(stream.readInt32BE() / 65536);
          }
        };
        parse();
        if (open)
          path.closePath();
        return path;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "CFF");
      }
    };
    var $832cade1c5195e7c$var$SBIXImage = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      originX: $parcel$interopDefault($lzfo4$restructure).uint16,
      originY: $parcel$interopDefault($lzfo4$restructure).uint16,
      type: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      data: new ($parcel$interopDefault($lzfo4$restructure)).Buffer(
        (t) => t.parent.buflen - t._currentOffset
      )
    });
    var $832cade1c5195e7c$export$2e2bcd8739ae039 = class extends $f71300a5bebbfea9$export$2e2bcd8739ae039 {
      /**
      * Returns an object representing a glyph image at the given point size.
      * The object has a data property with a Buffer containing the actual image data,
      * along with the image type, and origin.
      *
      * @param {number} size
      * @return {object}
      */
      getImageForSize(size) {
        for (let i2 = 0; i2 < this._font.sbix.imageTables.length; i2++) {
          var table = this._font.sbix.imageTables[i2];
          if (table.ppem >= size)
            break;
        }
        let offsets = table.imageOffsets;
        let start = offsets[this.id];
        let end = offsets[this.id + 1];
        if (start === end)
          return null;
        this._font.stream.pos = start;
        return $832cade1c5195e7c$var$SBIXImage.decode(this._font.stream, {
          buflen: end - start
        });
      }
      render(ctx, size) {
        let img = this.getImageForSize(size);
        if (img != null) {
          let scale = size / this._font.unitsPerEm;
          ctx.image(img.data, {
            height: size,
            x: img.originX,
            y: (this.bbox.minY - img.originY) * scale
          });
        }
        if (this._font.sbix.flags.renderOutlines)
          super.render(ctx, size);
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "SBIX");
      }
    };
    var $8976e72033f2ead9$var$COLRLayer = class {
      constructor(glyph, color) {
        this.glyph = glyph;
        this.color = color;
      }
    };
    var $8976e72033f2ead9$export$2e2bcd8739ae039 = class extends $499b081c6bd05466$export$2e2bcd8739ae039 {
      _getBBox() {
        let bbox = new $6d619c173ebabb82$export$2e2bcd8739ae039();
        for (let i2 = 0; i2 < this.layers.length; i2++) {
          let layer = this.layers[i2];
          let b = layer.glyph.bbox;
          bbox.addPoint(b.minX, b.minY);
          bbox.addPoint(b.maxX, b.maxY);
        }
        return bbox;
      }
      /**
      * Returns an array of objects containing the glyph and color for
      * each layer in the composite color glyph.
      * @type {object[]}
      */
      get layers() {
        let cpal = this._font.CPAL;
        let colr = this._font.COLR;
        let low = 0;
        let high = colr.baseGlyphRecord.length - 1;
        while (low <= high) {
          let mid = low + high >> 1;
          var rec = colr.baseGlyphRecord[mid];
          if (this.id < rec.gid)
            high = mid - 1;
          else if (this.id > rec.gid)
            low = mid + 1;
          else {
            var baseLayer = rec;
            break;
          }
        }
        if (baseLayer == null) {
          var g = this._font._getBaseGlyph(this.id);
          var color = {
            red: 0,
            green: 0,
            blue: 0,
            alpha: 255
          };
          return [
            new $8976e72033f2ead9$var$COLRLayer(g, color)
          ];
        }
        let layers = [];
        for (let i2 = baseLayer.firstLayerIndex; i2 < baseLayer.firstLayerIndex + baseLayer.numLayers; i2++) {
          var rec = colr.layerRecords[i2];
          var color = cpal.colorRecords[rec.paletteIndex];
          var g = this._font._getBaseGlyph(rec.gid);
          layers.push(new $8976e72033f2ead9$var$COLRLayer(g, color));
        }
        return layers;
      }
      render(ctx, size) {
        for (let { glyph, color } of this.layers) {
          ctx.fillColor([
            color.red,
            color.green,
            color.blue
          ], color.alpha / 255 * 100);
          glyph.render(ctx, size);
        }
        return;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "COLR");
      }
    };
    var $edb915616d019c4e$var$TUPLES_SHARE_POINT_NUMBERS = 32768;
    var $edb915616d019c4e$var$TUPLE_COUNT_MASK = 4095;
    var $edb915616d019c4e$var$EMBEDDED_TUPLE_COORD = 32768;
    var $edb915616d019c4e$var$INTERMEDIATE_TUPLE = 16384;
    var $edb915616d019c4e$var$PRIVATE_POINT_NUMBERS = 8192;
    var $edb915616d019c4e$var$TUPLE_INDEX_MASK = 4095;
    var $edb915616d019c4e$var$POINTS_ARE_WORDS = 128;
    var $edb915616d019c4e$var$POINT_RUN_COUNT_MASK = 127;
    var $edb915616d019c4e$var$DELTAS_ARE_ZERO = 128;
    var $edb915616d019c4e$var$DELTAS_ARE_WORDS = 64;
    var $edb915616d019c4e$var$DELTA_RUN_COUNT_MASK = 63;
    var $edb915616d019c4e$export$2e2bcd8739ae039 = class {
      normalizeCoords(coords) {
        let normalized = [];
        for (var i2 = 0; i2 < this.font.fvar.axis.length; i2++) {
          let axis = this.font.fvar.axis[i2];
          if (coords[i2] < axis.defaultValue)
            normalized.push((coords[i2] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
          else
            normalized.push((coords[i2] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
        }
        if (this.font.avar)
          for (var i2 = 0; i2 < this.font.avar.segment.length; i2++) {
            let segment = this.font.avar.segment[i2];
            for (let j = 0; j < segment.correspondence.length; j++) {
              let pair = segment.correspondence[j];
              if (j >= 1 && normalized[i2] < pair.fromCoord) {
                let prev = segment.correspondence[j - 1];
                normalized[i2] = ((normalized[i2] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
                break;
              }
            }
          }
        return normalized;
      }
      transformPoints(gid, glyphPoints) {
        if (!this.font.fvar || !this.font.gvar)
          return;
        let { gvar } = this.font;
        if (gid >= gvar.glyphCount)
          return;
        let offset = gvar.offsets[gid];
        if (offset === gvar.offsets[gid + 1])
          return;
        let { stream } = this.font;
        stream.pos = offset;
        if (stream.pos >= stream.length)
          return;
        let tupleCount = stream.readUInt16BE();
        let offsetToData = offset + stream.readUInt16BE();
        if (tupleCount & $edb915616d019c4e$var$TUPLES_SHARE_POINT_NUMBERS) {
          var here = stream.pos;
          stream.pos = offsetToData;
          var sharedPoints = this.decodePoints();
          offsetToData = stream.pos;
          stream.pos = here;
        }
        let origPoints = glyphPoints.map(
          (pt) => pt.copy()
        );
        tupleCount &= $edb915616d019c4e$var$TUPLE_COUNT_MASK;
        for (let i2 = 0; i2 < tupleCount; i2++) {
          let tupleDataSize = stream.readUInt16BE();
          let tupleIndex = stream.readUInt16BE();
          if (tupleIndex & $edb915616d019c4e$var$EMBEDDED_TUPLE_COORD) {
            var tupleCoords = [];
            for (let a = 0; a < gvar.axisCount; a++)
              tupleCoords.push(stream.readInt16BE() / 16384);
          } else {
            if ((tupleIndex & $edb915616d019c4e$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount)
              throw new Error("Invalid gvar table");
            var tupleCoords = gvar.globalCoords[tupleIndex & $edb915616d019c4e$var$TUPLE_INDEX_MASK];
          }
          if (tupleIndex & $edb915616d019c4e$var$INTERMEDIATE_TUPLE) {
            var startCoords = [];
            for (let a = 0; a < gvar.axisCount; a++)
              startCoords.push(stream.readInt16BE() / 16384);
            var endCoords = [];
            for (let a1 = 0; a1 < gvar.axisCount; a1++)
              endCoords.push(stream.readInt16BE() / 16384);
          }
          let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
          if (factor === 0) {
            offsetToData += tupleDataSize;
            continue;
          }
          var here = stream.pos;
          stream.pos = offsetToData;
          if (tupleIndex & $edb915616d019c4e$var$PRIVATE_POINT_NUMBERS)
            var points = this.decodePoints();
          else
            var points = sharedPoints;
          let nPoints = points.length === 0 ? glyphPoints.length : points.length;
          let xDeltas = this.decodeDeltas(nPoints);
          let yDeltas = this.decodeDeltas(nPoints);
          if (points.length === 0)
            for (let i3 = 0; i3 < glyphPoints.length; i3++) {
              var point = glyphPoints[i3];
              point.x += Math.round(xDeltas[i3] * factor);
              point.y += Math.round(yDeltas[i3] * factor);
            }
          else {
            let outPoints = origPoints.map(
              (pt) => pt.copy()
            );
            let hasDelta = glyphPoints.map(
              () => false
            );
            for (let i3 = 0; i3 < points.length; i3++) {
              let idx = points[i3];
              if (idx < glyphPoints.length) {
                let point2 = outPoints[idx];
                hasDelta[idx] = true;
                point2.x += Math.round(xDeltas[i3] * factor);
                point2.y += Math.round(yDeltas[i3] * factor);
              }
            }
            this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
            for (let i1 = 0; i1 < glyphPoints.length; i1++) {
              let deltaX = outPoints[i1].x - origPoints[i1].x;
              let deltaY = outPoints[i1].y - origPoints[i1].y;
              glyphPoints[i1].x += deltaX;
              glyphPoints[i1].y += deltaY;
            }
          }
          offsetToData += tupleDataSize;
          stream.pos = here;
        }
      }
      decodePoints() {
        let stream = this.font.stream;
        let count = stream.readUInt8();
        if (count & $edb915616d019c4e$var$POINTS_ARE_WORDS)
          count = (count & $edb915616d019c4e$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
        let points = new Uint16Array(count);
        let i2 = 0;
        let point = 0;
        while (i2 < count) {
          let run = stream.readUInt8();
          let runCount = (run & $edb915616d019c4e$var$POINT_RUN_COUNT_MASK) + 1;
          let fn = run & $edb915616d019c4e$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;
          for (let j = 0; j < runCount && i2 < count; j++) {
            point += fn.call(stream);
            points[i2++] = point;
          }
        }
        return points;
      }
      decodeDeltas(count) {
        let stream = this.font.stream;
        let i2 = 0;
        let deltas = new Int16Array(count);
        while (i2 < count) {
          let run = stream.readUInt8();
          let runCount = (run & $edb915616d019c4e$var$DELTA_RUN_COUNT_MASK) + 1;
          if (run & $edb915616d019c4e$var$DELTAS_ARE_ZERO)
            i2 += runCount;
          else {
            let fn = run & $edb915616d019c4e$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
            for (let j = 0; j < runCount && i2 < count; j++)
              deltas[i2++] = fn.call(stream);
          }
        }
        return deltas;
      }
      tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
        let normalized = this.normalizedCoords;
        let { gvar } = this.font;
        let factor = 1;
        for (let i2 = 0; i2 < gvar.axisCount; i2++) {
          if (tupleCoords[i2] === 0)
            continue;
          if (normalized[i2] === 0)
            return 0;
          if ((tupleIndex & $edb915616d019c4e$var$INTERMEDIATE_TUPLE) === 0) {
            if (normalized[i2] < Math.min(0, tupleCoords[i2]) || normalized[i2] > Math.max(0, tupleCoords[i2]))
              return 0;
            factor = (factor * normalized[i2] + Number.EPSILON) / (tupleCoords[i2] + Number.EPSILON);
          } else {
            if (normalized[i2] < startCoords[i2] || normalized[i2] > endCoords[i2])
              return 0;
            else if (normalized[i2] < tupleCoords[i2])
              factor = factor * (normalized[i2] - startCoords[i2] + Number.EPSILON) / (tupleCoords[i2] - startCoords[i2] + Number.EPSILON);
            else
              factor = factor * (endCoords[i2] - normalized[i2] + Number.EPSILON) / (endCoords[i2] - tupleCoords[i2] + Number.EPSILON);
          }
        }
        return factor;
      }
      // Interpolates points without delta values.
      // Needed for the Ø and Q glyphs in Skia.
      // Algorithm from Freetype.
      interpolateMissingDeltas(points, inPoints, hasDelta) {
        if (points.length === 0)
          return;
        let point = 0;
        while (point < points.length) {
          let firstPoint = point;
          let endPoint = point;
          let pt = points[endPoint];
          while (!pt.endContour)
            pt = points[++endPoint];
          while (point <= endPoint && !hasDelta[point])
            point++;
          if (point > endPoint)
            continue;
          let firstDelta = point;
          let curDelta = point;
          point++;
          while (point <= endPoint) {
            if (hasDelta[point]) {
              this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
              curDelta = point;
            }
            point++;
          }
          if (curDelta === firstDelta)
            this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
          else {
            this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
            if (firstDelta > 0)
              this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
          }
          point = endPoint + 1;
        }
      }
      deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
        if (p1 > p2)
          return;
        let iterable = [
          "x",
          "y"
        ];
        for (let i2 = 0; i2 < iterable.length; i2++) {
          let k = iterable[i2];
          if (inPoints[ref1][k] > inPoints[ref2][k]) {
            var p = ref1;
            ref1 = ref2;
            ref2 = p;
          }
          let in1 = inPoints[ref1][k];
          let in2 = inPoints[ref2][k];
          let out1 = outPoints[ref1][k];
          let out2 = outPoints[ref2][k];
          if (in1 !== in2 || out1 === out2) {
            let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
            for (let p3 = p1; p3 <= p2; p3++) {
              let out = inPoints[p3][k];
              if (out <= in1)
                out += out1 - in1;
              else if (out >= in2)
                out += out2 - in2;
              else
                out = out1 + (out - in1) * scale;
              outPoints[p3][k] = out;
            }
          }
        }
      }
      deltaShift(p1, p2, ref, inPoints, outPoints) {
        let deltaX = outPoints[ref].x - inPoints[ref].x;
        let deltaY = outPoints[ref].y - inPoints[ref].y;
        if (deltaX === 0 && deltaY === 0)
          return;
        for (let p = p1; p <= p2; p++)
          if (p !== ref) {
            outPoints[p].x += deltaX;
            outPoints[p].y += deltaY;
          }
      }
      getAdvanceAdjustment(gid, table) {
        let outerIndex, innerIndex;
        if (table.advanceWidthMapping) {
          let idx = gid;
          if (idx >= table.advanceWidthMapping.mapCount)
            idx = table.advanceWidthMapping.mapCount - 1;
          let entryFormat = table.advanceWidthMapping.entryFormat;
          ({ outerIndex, innerIndex } = table.advanceWidthMapping.mapData[idx]);
        } else {
          outerIndex = 0;
          innerIndex = gid;
        }
        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
      }
      // See pseudo code from `Font Variations Overview'
      // in the OpenType specification.
      getDelta(itemStore, outerIndex, innerIndex) {
        if (outerIndex >= itemStore.itemVariationData.length)
          return 0;
        let varData = itemStore.itemVariationData[outerIndex];
        if (innerIndex >= varData.deltaSets.length)
          return 0;
        let deltaSet = varData.deltaSets[innerIndex];
        let blendVector = this.getBlendVector(itemStore, outerIndex);
        let netAdjustment = 0;
        for (let master = 0; master < varData.regionIndexCount; master++)
          netAdjustment += deltaSet.deltas[master] * blendVector[master];
        return netAdjustment;
      }
      getBlendVector(itemStore, outerIndex) {
        let varData = itemStore.itemVariationData[outerIndex];
        if (this.blendVectors.has(varData))
          return this.blendVectors.get(varData);
        let normalizedCoords = this.normalizedCoords;
        let blendVector = [];
        for (let master = 0; master < varData.regionIndexCount; master++) {
          let scalar = 1;
          let regionIndex = varData.regionIndexes[master];
          let axes = itemStore.variationRegionList.variationRegions[regionIndex];
          for (let j = 0; j < axes.length; j++) {
            let axis = axes[j];
            let axisScalar;
            if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord)
              axisScalar = 1;
            else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0)
              axisScalar = 1;
            else if (axis.peakCoord === 0)
              axisScalar = 1;
            else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord)
              axisScalar = 0;
            else {
              if (normalizedCoords[j] === axis.peakCoord)
                axisScalar = 1;
              else if (normalizedCoords[j] < axis.peakCoord)
                axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
              else
                axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
            }
            scalar *= axisScalar;
          }
          blendVector[master] = scalar;
        }
        this.blendVectors.set(varData, blendVector);
        return blendVector;
      }
      constructor(font, coords) {
        this.font = font;
        this.normalizedCoords = this.normalizeCoords(coords);
        this.blendVectors = /* @__PURE__ */ new Map();
      }
    };
    var $ce4b1bce7aca5902$var$resolved = Promise.resolve();
    var $ce4b1bce7aca5902$export$2e2bcd8739ae039 = class {
      includeGlyph(glyph) {
        if (typeof glyph === "object")
          glyph = glyph.id;
        if (this.mapping[glyph] == null) {
          this.glyphs.push(glyph);
          this.mapping[glyph] = this.glyphs.length - 1;
        }
        return this.mapping[glyph];
      }
      encodeStream() {
        let s = new ($parcel$interopDefault($lzfo4$restructure)).EncodeStream();
        $ce4b1bce7aca5902$var$resolved.then(() => {
          this.encode(s);
          return s.end();
        });
        return s;
      }
      constructor(font) {
        this.font = font;
        this.glyphs = [];
        this.mapping = {};
        this.includeGlyph(0);
      }
    };
    var $54e221f7ab127ab6$var$ON_CURVE = 1;
    var $54e221f7ab127ab6$var$X_SHORT_VECTOR = 2;
    var $54e221f7ab127ab6$var$Y_SHORT_VECTOR = 4;
    var $54e221f7ab127ab6$var$REPEAT = 8;
    var $54e221f7ab127ab6$var$SAME_X = 16;
    var $54e221f7ab127ab6$var$SAME_Y = 32;
    var $54e221f7ab127ab6$var$Point = class {
      static size(val) {
        return val >= 0 && val <= 255 ? 1 : 2;
      }
      static encode(stream, value) {
        if (value >= 0 && value <= 255)
          stream.writeUInt8(value);
        else
          stream.writeInt16BE(value);
      }
    };
    var $54e221f7ab127ab6$var$Glyf = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      numberOfContours: $parcel$interopDefault($lzfo4$restructure).int16,
      xMin: $parcel$interopDefault($lzfo4$restructure).int16,
      yMin: $parcel$interopDefault($lzfo4$restructure).int16,
      xMax: $parcel$interopDefault($lzfo4$restructure).int16,
      yMax: $parcel$interopDefault($lzfo4$restructure).int16,
      endPtsOfContours: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint16, "numberOfContours"),
      instructions: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, $parcel$interopDefault($lzfo4$restructure).uint16),
      flags: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint8, 0),
      xPoints: new ($parcel$interopDefault($lzfo4$restructure)).Array($54e221f7ab127ab6$var$Point, 0),
      yPoints: new ($parcel$interopDefault($lzfo4$restructure)).Array($54e221f7ab127ab6$var$Point, 0)
    });
    var $54e221f7ab127ab6$export$2e2bcd8739ae039 = class {
      encodeSimple(path, instructions = []) {
        let endPtsOfContours = [];
        let xPoints = [];
        let yPoints = [];
        let flags = [];
        let same = 0;
        let lastX = 0, lastY = 0, lastFlag = 0;
        let pointCount = 0;
        for (let i2 = 0; i2 < path.commands.length; i2++) {
          let c = path.commands[i2];
          for (let j = 0; j < c.args.length; j += 2) {
            let x = c.args[j];
            let y = c.args[j + 1];
            let flag = 0;
            if (c.command === "quadraticCurveTo" && j === 2) {
              let next = path.commands[i2 + 1];
              if (next && next.command === "quadraticCurveTo") {
                let midX = (lastX + next.args[0]) / 2;
                let midY = (lastY + next.args[1]) / 2;
                if (x === midX && y === midY)
                  continue;
              }
            }
            if (!(c.command === "quadraticCurveTo" && j === 0))
              flag |= $54e221f7ab127ab6$var$ON_CURVE;
            flag = this._encodePoint(x, lastX, xPoints, flag, $54e221f7ab127ab6$var$X_SHORT_VECTOR, $54e221f7ab127ab6$var$SAME_X);
            flag = this._encodePoint(y, lastY, yPoints, flag, $54e221f7ab127ab6$var$Y_SHORT_VECTOR, $54e221f7ab127ab6$var$SAME_Y);
            if (flag === lastFlag && same < 255) {
              flags[flags.length - 1] |= $54e221f7ab127ab6$var$REPEAT;
              same++;
            } else {
              if (same > 0) {
                flags.push(same);
                same = 0;
              }
              flags.push(flag);
              lastFlag = flag;
            }
            lastX = x;
            lastY = y;
            pointCount++;
          }
          if (c.command === "closePath")
            endPtsOfContours.push(pointCount - 1);
        }
        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== "closePath")
          endPtsOfContours.push(pointCount - 1);
        let bbox = path.bbox;
        let glyf = {
          numberOfContours: endPtsOfContours.length,
          xMin: bbox.minX,
          yMin: bbox.minY,
          xMax: bbox.maxX,
          yMax: bbox.maxY,
          endPtsOfContours,
          instructions,
          flags,
          xPoints,
          yPoints
        };
        let size = $54e221f7ab127ab6$var$Glyf.size(glyf);
        let tail = 4 - size % 4;
        let stream = new ($parcel$interopDefault($lzfo4$restructure)).EncodeStream(size + tail);
        $54e221f7ab127ab6$var$Glyf.encode(stream, glyf);
        if (tail !== 0)
          stream.fill(0, tail);
        return stream.buffer;
      }
      _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
        let diff = value - last;
        if (value === last)
          flag |= sameFlag;
        else {
          if (-255 <= diff && diff <= 255) {
            flag |= shortFlag;
            if (diff < 0)
              diff = -diff;
            else
              flag |= sameFlag;
          }
          points.push(diff);
        }
        return flag;
      }
    };
    var $6c87995b36333c4c$require$Buffer = $lzfo4$buffer.Buffer;
    var $6c87995b36333c4c$export$2e2bcd8739ae039 = class extends $ce4b1bce7aca5902$export$2e2bcd8739ae039 {
      _addGlyph(gid) {
        let glyph = this.font.getGlyph(gid);
        let glyf = glyph._decode();
        let curOffset = this.font.loca.offsets[gid];
        let nextOffset = this.font.loca.offsets[gid + 1];
        let stream = this.font._getTableStream("glyf");
        stream.pos += curOffset;
        let buffer = stream.readBuffer(nextOffset - curOffset);
        if (glyf && glyf.numberOfContours < 0) {
          buffer = $6c87995b36333c4c$require$Buffer.from(buffer);
          for (let component of glyf.components) {
            gid = this.includeGlyph(component.glyphID);
            buffer.writeUInt16BE(gid, component.pos);
          }
        } else if (glyf && this.font._variationProcessor)
          buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
        this.glyf.push(buffer);
        this.loca.offsets.push(this.offset);
        this.hmtx.metrics.push({
          advance: glyph.advanceWidth,
          bearing: glyph._getMetrics().leftBearing
        });
        this.offset += buffer.length;
        return this.glyf.length - 1;
      }
      encode(stream) {
        this.glyf = [];
        this.offset = 0;
        this.loca = {
          offsets: [],
          version: this.font.loca.version
        };
        this.hmtx = {
          metrics: [],
          bearings: []
        };
        let i2 = 0;
        while (i2 < this.glyphs.length)
          this._addGlyph(this.glyphs[i2++]);
        let maxp = $parcel$interopDefault($lzfo4$clone)(this.font.maxp);
        maxp.numGlyphs = this.glyf.length;
        this.loca.offsets.push(this.offset);
        let head = $parcel$interopDefault($lzfo4$clone)(this.font.head);
        head.indexToLocFormat = this.loca.version;
        let hhea = $parcel$interopDefault($lzfo4$clone)(this.font.hhea);
        hhea.numberOfMetrics = this.hmtx.metrics.length;
        $58b5e8ab8241ced9$export$2e2bcd8739ae039.encode(stream, {
          tables: {
            head,
            hhea,
            loca: this.loca,
            maxp,
            "cvt ": this.font["cvt "],
            prep: this.font.prep,
            glyf: this.glyf,
            hmtx: this.hmtx,
            fpgm: this.font.fpgm
          }
        });
      }
      constructor(font) {
        super(font);
        this.glyphEncoder = new $54e221f7ab127ab6$export$2e2bcd8739ae039();
      }
    };
    var $63d0003ac9d86481$require$Buffer = $lzfo4$buffer.Buffer;
    var $63d0003ac9d86481$export$2e2bcd8739ae039 = class extends $ce4b1bce7aca5902$export$2e2bcd8739ae039 {
      subsetCharstrings() {
        this.charstrings = [];
        let gsubrs = {};
        for (let gid of this.glyphs) {
          this.charstrings.push(this.cff.getCharString(gid));
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedGsubrs)
            gsubrs[subr] = true;
        }
        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
      }
      subsetSubrs(subrs, used) {
        let res = [];
        for (let i2 = 0; i2 < subrs.length; i2++) {
          let subr = subrs[i2];
          if (used[i2]) {
            this.cff.stream.pos = subr.offset;
            res.push(this.cff.stream.readBuffer(subr.length));
          } else
            res.push($63d0003ac9d86481$require$Buffer.from([
              11
            ]));
        }
        return res;
      }
      subsetFontdict(topDict) {
        topDict.FDArray = [];
        topDict.FDSelect = {
          version: 0,
          fds: []
        };
        let used_fds = {};
        let used_subrs = [];
        let fd_select = {};
        for (let gid of this.glyphs) {
          let fd = this.cff.fdForGlyph(gid);
          if (fd == null)
            continue;
          if (!used_fds[fd]) {
            topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
            used_subrs.push({});
            fd_select[fd] = topDict.FDArray.length - 1;
          }
          used_fds[fd] = true;
          topDict.FDSelect.fds.push(fd_select[fd]);
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedSubrs)
            used_subrs[fd_select[fd]][subr] = true;
        }
        for (let i2 = 0; i2 < topDict.FDArray.length; i2++) {
          let dict = topDict.FDArray[i2];
          delete dict.FontName;
          if (dict.Private && dict.Private.Subrs) {
            dict.Private = Object.assign({}, dict.Private);
            dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i2]);
          }
        }
        return;
      }
      createCIDFontdict(topDict) {
        let used_subrs = {};
        for (let gid of this.glyphs) {
          let glyph = this.font.getGlyph(gid);
          let path = glyph.path;
          for (let subr in glyph._usedSubrs)
            used_subrs[subr] = true;
        }
        let privateDict = Object.assign({}, this.cff.topDict.Private);
        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs)
          privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
        topDict.FDArray = [
          {
            Private: privateDict
          }
        ];
        return topDict.FDSelect = {
          version: 3,
          nRanges: 1,
          ranges: [
            {
              first: 0,
              fd: 0
            }
          ],
          sentinel: this.charstrings.length
        };
      }
      addString(string) {
        if (!string)
          return null;
        if (!this.strings)
          this.strings = [];
        this.strings.push(string);
        return $4292bb2f086bd070$export$2e2bcd8739ae039.length + this.strings.length - 1;
      }
      encode(stream) {
        this.subsetCharstrings();
        let charset = {
          version: this.charstrings.length > 255 ? 2 : 1,
          ranges: [
            {
              first: 1,
              nLeft: this.charstrings.length - 2
            }
          ]
        };
        let topDict = Object.assign({}, this.cff.topDict);
        topDict.Private = null;
        topDict.charset = charset;
        topDict.Encoding = null;
        topDict.CharStrings = this.charstrings;
        for (let key of [
          "version",
          "Notice",
          "Copyright",
          "FullName",
          "FamilyName",
          "Weight",
          "PostScript",
          "BaseFontName",
          "FontName"
        ])
          topDict[key] = this.addString(this.cff.string(topDict[key]));
        topDict.ROS = [
          this.addString("Adobe"),
          this.addString("Identity"),
          0
        ];
        topDict.CIDCount = this.charstrings.length;
        if (this.cff.isCIDFont)
          this.subsetFontdict(topDict);
        else
          this.createCIDFontdict(topDict);
        let top = {
          version: 1,
          hdrSize: this.cff.hdrSize,
          offSize: 4,
          header: this.cff.header,
          nameIndex: [
            this.cff.postscriptName
          ],
          topDictIndex: [
            topDict
          ],
          stringIndex: this.strings,
          globalSubrIndex: this.gsubrs
        };
        $5d220daacf51f8dc$export$2e2bcd8739ae039.encode(stream, top);
      }
      constructor(font) {
        super(font);
        this.cff = this.font["CFF "];
        if (!this.cff)
          throw new Error("Not a CFF Font");
      }
    };
    var _class;
    var $4eebb3cdbf303bc9$export$2e2bcd8739ae039 = (_class = class $4eebb3cdbf303bc9$export$2e2bcd8739ae0392 {
      static probe(buffer) {
        let format = buffer.toString("ascii", 0, 4);
        return format === "true" || format === "OTTO" || format === String.fromCharCode(0, 1, 0, 0);
      }
      setDefaultLanguage(lang = null) {
        this.defaultLanguage = lang;
      }
      _getTable(table) {
        if (!(table.tag in this._tables))
          try {
            this._tables[table.tag] = this._decodeTable(table);
          } catch (e) {
            if ($a35dad4d16c8d1df$export$bd5c5d8b8dcafd78) {
              console.error(`Error decoding table ${table.tag}`);
              console.error(e.stack);
            }
          }
        return this._tables[table.tag];
      }
      _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
          this.stream.pos = table.offset;
          return this.stream;
        }
        return null;
      }
      _decodeDirectory() {
        return this.directory = $58b5e8ab8241ced9$export$2e2bcd8739ae039.decode(this.stream, {
          _startOffset: 0
        });
      }
      _decodeTable(table) {
        let pos = this.stream.pos;
        let stream = this._getTableStream(table.tag);
        let result = $6cd727f8bf15b50a$export$2e2bcd8739ae039[table.tag].decode(stream, this, table.length);
        this.stream.pos = pos;
        return result;
      }
      /**
      * Gets a string from the font's `name` table
      * `lang` is a BCP-47 language code.
      * @return {string}
      */
      getName(key, lang = this.defaultLanguage || $a35dad4d16c8d1df$export$42940898df819940) {
        let record = this.name && this.name.records[key];
        if (record)
          return record[lang] || record[this.defaultLanguage] || record[$a35dad4d16c8d1df$export$42940898df819940] || record["en"] || record[Object.keys(record)[0]] || null;
        return null;
      }
      /**
      * The unique PostScript name for this font, e.g. "Helvetica-Bold"
      * @type {string}
      */
      get postscriptName() {
        return this.getName("postscriptName");
      }
      /**
      * The font's full name, e.g. "Helvetica Bold"
      * @type {string}
      */
      get fullName() {
        return this.getName("fullName");
      }
      /**
      * The font's family name, e.g. "Helvetica"
      * @type {string}
      */
      get familyName() {
        return this.getName("fontFamily");
      }
      /**
      * The font's sub-family, e.g. "Bold".
      * @type {string}
      */
      get subfamilyName() {
        return this.getName("fontSubfamily");
      }
      /**
      * The font's copyright information
      * @type {string}
      */
      get copyright() {
        return this.getName("copyright");
      }
      /**
      * The font's version number
      * @type {string}
      */
      get version() {
        return this.getName("version");
      }
      /**
      * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
      * @type {number}
      */
      get ascent() {
        return this.hhea.ascent;
      }
      /**
      * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
      * @type {number}
      */
      get descent() {
        return this.hhea.descent;
      }
      /**
      * The amount of space that should be included between lines
      * @type {number}
      */
      get lineGap() {
        return this.hhea.lineGap;
      }
      /**
      * The offset from the normal underline position that should be used
      * @type {number}
      */
      get underlinePosition() {
        return this.post.underlinePosition;
      }
      /**
      * The weight of the underline that should be used
      * @type {number}
      */
      get underlineThickness() {
        return this.post.underlineThickness;
      }
      /**
      * If this is an italic font, the angle the cursor should be drawn at to match the font design
      * @type {number}
      */
      get italicAngle() {
        return this.post.italicAngle;
      }
      /**
      * The height of capital letters above the baseline.
      * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
      * @type {number}
      */
      get capHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.capHeight : this.ascent;
      }
      /**
      * The height of lower case letters in the font.
      * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
      * @type {number}
      */
      get xHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.xHeight : 0;
      }
      /**
      * The number of glyphs in the font.
      * @type {number}
      */
      get numGlyphs() {
        return this.maxp.numGlyphs;
      }
      /**
      * The size of the font’s internal coordinate grid
      * @type {number}
      */
      get unitsPerEm() {
        return this.head.unitsPerEm;
      }
      /**
      * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
      * @type {BBox}
      */
      get bbox() {
        return Object.freeze(new $6d619c173ebabb82$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
      }
      get _cmapProcessor() {
        return new $1be0370b015c0ead$export$2e2bcd8739ae039(this.cmap);
      }
      /**
      * An array of all of the unicode code points supported by the font.
      * @type {number[]}
      */
      get characterSet() {
        return this._cmapProcessor.getCharacterSet();
      }
      /**
      * Returns whether there is glyph in the font for the given unicode code point.
      *
      * @param {number} codePoint
      * @return {boolean}
      */
      hasGlyphForCodePoint(codePoint) {
        return !!this._cmapProcessor.lookup(codePoint);
      }
      /**
      * Maps a single unicode code point to a Glyph object.
      * Does not perform any advanced substitutions (there is no context to do so).
      *
      * @param {number} codePoint
      * @return {Glyph}
      */
      glyphForCodePoint(codePoint) {
        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
          codePoint
        ]);
      }
      /**
      * Returns an array of Glyph objects for the given string.
      * This is only a one-to-one mapping from characters to glyphs.
      * For most uses, you should use font.layout (described below), which
      * provides a much more advanced mapping supporting AAT and OpenType shaping.
      *
      * @param {string} string
      * @return {Glyph[]}
      */
      glyphsForString(string) {
        let glyphs = [];
        let len = string.length;
        let idx = 0;
        let last = -1;
        let state = -1;
        while (idx <= len) {
          let code = 0;
          let nextState = 0;
          if (idx < len) {
            code = string.charCodeAt(idx++);
            if (55296 <= code && code <= 56319 && idx < len) {
              let next = string.charCodeAt(idx);
              if (56320 <= next && next <= 57343) {
                idx++;
                code = ((code & 1023) << 10) + (next & 1023) + 65536;
              }
            }
            nextState = 65024 <= code && code <= 65039 || 917760 <= code && code <= 917999 ? 1 : 0;
          } else
            idx++;
          if (state === 0 && nextState === 1)
            glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [
              last,
              code
            ]));
          else if (state === 0 && nextState === 0)
            glyphs.push(this.glyphForCodePoint(last));
          last = code;
          state = nextState;
        }
        return glyphs;
      }
      get _layoutEngine() {
        return new $8fe7395fdc229fa3$export$2e2bcd8739ae039(this);
      }
      /**
      * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
      *
      * @param {string} string
      * @param {string[]} [userFeatures]
      * @param {string} [script]
      * @param {string} [language]
      * @param {string} [direction]
      * @return {GlyphRun}
      */
      layout(string, userFeatures, script, language, direction) {
        return this._layoutEngine.layout(string, userFeatures, script, language, direction);
      }
      /**
      * Returns an array of strings that map to the given glyph id.
      * @param {number} gid - glyph id
      */
      stringsForGlyph(gid) {
        return this._layoutEngine.stringsForGlyph(gid);
      }
      /**
      * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
      * (or mapped AAT tags) supported by the font.
      * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
      * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
      *
      * @type {string[]}
      */
      get availableFeatures() {
        return this._layoutEngine.getAvailableFeatures();
      }
      getAvailableFeatures(script, language) {
        return this._layoutEngine.getAvailableFeatures(script, language);
      }
      _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.glyf)
            this._glyphs[glyph] = new $f71300a5bebbfea9$export$2e2bcd8739ae039(glyph, characters, this);
          else if (this.directory.tables["CFF "] || this.directory.tables.CFF2)
            this._glyphs[glyph] = new $e3cf8415f0436224$export$2e2bcd8739ae039(glyph, characters, this);
        }
        return this._glyphs[glyph] || null;
      }
      /**
      * Returns a glyph object for the given glyph id.
      * You can pass the array of code points this glyph represents for
      * your use later, and it will be stored in the glyph object.
      *
      * @param {number} glyph
      * @param {number[]} characters
      * @return {Glyph}
      */
      getGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.sbix)
            this._glyphs[glyph] = new $832cade1c5195e7c$export$2e2bcd8739ae039(glyph, characters, this);
          else if (this.directory.tables.COLR && this.directory.tables.CPAL)
            this._glyphs[glyph] = new $8976e72033f2ead9$export$2e2bcd8739ae039(glyph, characters, this);
          else
            this._getBaseGlyph(glyph, characters);
        }
        return this._glyphs[glyph] || null;
      }
      /**
      * Returns a Subset for this font.
      * @return {Subset}
      */
      createSubset() {
        if (this.directory.tables["CFF "])
          return new $63d0003ac9d86481$export$2e2bcd8739ae039(this);
        return new $6c87995b36333c4c$export$2e2bcd8739ae039(this);
      }
      /**
      * Returns an object describing the available variation axes
      * that this font supports. Keys are setting tags, and values
      * contain the axis name, range, and default value.
      *
      * @type {object}
      */
      get variationAxes() {
        let res = {};
        if (!this.fvar)
          return res;
        for (let axis of this.fvar.axis)
          res[axis.axisTag.trim()] = {
            name: axis.name.en,
            min: axis.minValue,
            default: axis.defaultValue,
            max: axis.maxValue
          };
        return res;
      }
      /**
      * Returns an object describing the named variation instances
      * that the font designer has specified. Keys are variation names
      * and values are the variation settings for this instance.
      *
      * @type {object}
      */
      get namedVariations() {
        let res = {};
        if (!this.fvar)
          return res;
        for (let instance of this.fvar.instance) {
          let settings = {};
          for (let i2 = 0; i2 < this.fvar.axis.length; i2++) {
            let axis = this.fvar.axis[i2];
            settings[axis.axisTag.trim()] = instance.coord[i2];
          }
          res[instance.name.en] = settings;
        }
        return res;
      }
      /**
      * Returns a new font with the given variation settings applied.
      * Settings can either be an instance name, or an object containing
      * variation tags as specified by the `variationAxes` property.
      *
      * @param {object} settings
      * @return {TTFFont}
      */
      getVariation(settings) {
        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2)))
          throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
        if (typeof settings === "string")
          settings = this.namedVariations[settings];
        if (typeof settings !== "object")
          throw new Error("Variation settings must be either a variation name or settings object.");
        let coords = this.fvar.axis.map((axis, i2) => {
          let axisTag = axis.axisTag.trim();
          if (axisTag in settings)
            return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
          else
            return axis.defaultValue;
        });
        let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this.stream.buffer);
        stream.pos = this._directoryPos;
        let font = new $4eebb3cdbf303bc9$export$2e2bcd8739ae0392(stream, coords);
        font._tables = this._tables;
        return font;
      }
      get _variationProcessor() {
        if (!this.fvar)
          return null;
        let variationCoords = this.variationCoords;
        if (!variationCoords && !this.CFF2)
          return null;
        if (!variationCoords)
          variationCoords = this.fvar.axis.map(
            (axis) => axis.defaultValue
          );
        return new $edb915616d019c4e$export$2e2bcd8739ae039(this, variationCoords);
      }
      // Standardized format plugin API
      getFont(name) {
        return this.getVariation(name);
      }
      constructor(stream, variationCoords = null) {
        $lzfo4$swchelpers.defineProperty(this, "type", "TTF");
        this.defaultLanguage = null;
        this.stream = stream;
        this.variationCoords = variationCoords;
        this._directoryPos = this.stream.pos;
        this._tables = {};
        this._glyphs = {};
        this._decodeDirectory();
        for (let tag in this.directory.tables) {
          let table = this.directory.tables[tag];
          if ($6cd727f8bf15b50a$export$2e2bcd8739ae039[tag] && table.length > 0)
            Object.defineProperty(this, tag, {
              get: this._getTable.bind(this, table)
            });
        }
      }
    }, $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "bbox", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "_cmapProcessor", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "_cmapProcessor"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "characterSet", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "characterSet"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "_layoutEngine", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "_layoutEngine"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "variationAxes", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "variationAxes"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "namedVariations", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "namedVariations"), _class.prototype), $lzfo4$swchelpers.applyDecoratedDescriptor(_class.prototype, "_variationProcessor", [
      $9ea776e3198edd2e$export$69a3209f1a06c04d
    ], Object.getOwnPropertyDescriptor(_class.prototype, "_variationProcessor"), _class.prototype), _class);
    var $42c3b3fb92f0bcfe$var$WOFFDirectoryEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      offset: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, "void", {
        type: "global"
      }),
      compLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      length: $parcel$interopDefault($lzfo4$restructure).uint32,
      origChecksum: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $42c3b3fb92f0bcfe$var$WOFFDirectory = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      flavor: $parcel$interopDefault($lzfo4$restructure).uint32,
      length: $parcel$interopDefault($lzfo4$restructure).uint32,
      numTables: $parcel$interopDefault($lzfo4$restructure).uint16,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      totalSfntSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      majorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      minorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      metaOffset: $parcel$interopDefault($lzfo4$restructure).uint32,
      metaLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      metaOrigLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      privOffset: $parcel$interopDefault($lzfo4$restructure).uint32,
      privLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($42c3b3fb92f0bcfe$var$WOFFDirectoryEntry, "numTables")
    });
    $42c3b3fb92f0bcfe$var$WOFFDirectory.process = function() {
      let tables = {};
      for (let table of this.tables)
        tables[table.tag] = table;
      this.tables = tables;
    };
    var $42c3b3fb92f0bcfe$export$2e2bcd8739ae039 = $42c3b3fb92f0bcfe$var$WOFFDirectory;
    var $d601d2da4b510322$require$Buffer = $lzfo4$buffer.Buffer;
    var $d601d2da4b510322$export$2e2bcd8739ae039 = class extends $4eebb3cdbf303bc9$export$2e2bcd8739ae039 {
      static probe(buffer) {
        return buffer.toString("ascii", 0, 4) === "wOFF";
      }
      _decodeDirectory() {
        this.directory = $42c3b3fb92f0bcfe$export$2e2bcd8739ae039.decode(this.stream, {
          _startOffset: 0
        });
      }
      _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
          this.stream.pos = table.offset;
          if (table.compLength < table.length) {
            this.stream.pos += 2;
            let outBuffer = $d601d2da4b510322$require$Buffer.alloc(table.length);
            let buf = $parcel$interopDefault($lzfo4$tinyinflate)(this.stream.readBuffer(table.compLength - 2), outBuffer);
            return new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(buf);
          } else
            return this.stream;
        }
        return null;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "WOFF");
      }
    };
    var $54119d8499a8b392$export$2e2bcd8739ae039 = class extends $f71300a5bebbfea9$export$2e2bcd8739ae039 {
      _decode() {
        return this._font._transformedGlyphs[this.id];
      }
      _getCBox() {
        return this.path.bbox;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "WOFF2");
      }
    };
    var $020d33b51d78c4b3$var$Base128 = {
      decode(stream) {
        let result = 0;
        let iterable = [
          0,
          1,
          2,
          3,
          4
        ];
        for (let j = 0; j < iterable.length; j++) {
          let i2 = iterable[j];
          let code = stream.readUInt8();
          if (result & 3758096384)
            throw new Error("Overflow");
          result = result << 7 | code & 127;
          if ((code & 128) === 0)
            return result;
        }
        throw new Error("Bad base 128 number");
      }
    };
    var $020d33b51d78c4b3$var$knownTags = [
      "cmap",
      "head",
      "hhea",
      "hmtx",
      "maxp",
      "name",
      "OS/2",
      "post",
      "cvt ",
      "fpgm",
      "glyf",
      "loca",
      "prep",
      "CFF ",
      "VORG",
      "EBDT",
      "EBLC",
      "gasp",
      "hdmx",
      "kern",
      "LTSH",
      "PCLT",
      "VDMX",
      "vhea",
      "vmtx",
      "BASE",
      "GDEF",
      "GPOS",
      "GSUB",
      "EBSC",
      "JSTF",
      "MATH",
      "CBDT",
      "CBLC",
      "COLR",
      "CPAL",
      "SVG ",
      "sbix",
      "acnt",
      "avar",
      "bdat",
      "bloc",
      "bsln",
      "cvar",
      "fdsc",
      "feat",
      "fmtx",
      "fvar",
      "gvar",
      "hsty",
      "just",
      "lcar",
      "mort",
      "morx",
      "opbd",
      "prop",
      "trak",
      "Zapf",
      "Silf",
      "Glat",
      "Gloc",
      "Feat",
      "Sill"
    ];
    var $020d33b51d78c4b3$var$WOFF2DirectoryEntry = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      flags: $parcel$interopDefault($lzfo4$restructure).uint8,
      customTag: new ($parcel$interopDefault($lzfo4$restructure)).Optional(
        new ($parcel$interopDefault($lzfo4$restructure)).String(4),
        (t) => (t.flags & 63) === 63
      ),
      tag: (t) => t.customTag || $020d33b51d78c4b3$var$knownTags[t.flags & 63],
      length: $020d33b51d78c4b3$var$Base128,
      transformVersion: (t) => t.flags >>> 6 & 3,
      transformed: (t) => t.tag === "glyf" || t.tag === "loca" ? t.transformVersion === 0 : t.transformVersion !== 0,
      transformLength: new ($parcel$interopDefault($lzfo4$restructure)).Optional(
        $020d33b51d78c4b3$var$Base128,
        (t) => t.transformed
      )
    });
    var $020d33b51d78c4b3$var$WOFF2Directory = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      tag: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      flavor: $parcel$interopDefault($lzfo4$restructure).uint32,
      length: $parcel$interopDefault($lzfo4$restructure).uint32,
      numTables: $parcel$interopDefault($lzfo4$restructure).uint16,
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint16),
      totalSfntSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      totalCompressedSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      majorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      minorVersion: $parcel$interopDefault($lzfo4$restructure).uint16,
      metaOffset: $parcel$interopDefault($lzfo4$restructure).uint32,
      metaLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      metaOrigLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      privOffset: $parcel$interopDefault($lzfo4$restructure).uint32,
      privLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      tables: new ($parcel$interopDefault($lzfo4$restructure)).Array($020d33b51d78c4b3$var$WOFF2DirectoryEntry, "numTables")
    });
    $020d33b51d78c4b3$var$WOFF2Directory.process = function() {
      let tables = {};
      for (let i2 = 0; i2 < this.tables.length; i2++) {
        let table = this.tables[i2];
        tables[table.tag] = table;
      }
      return this.tables = tables;
    };
    var $020d33b51d78c4b3$export$2e2bcd8739ae039 = $020d33b51d78c4b3$var$WOFF2Directory;
    var $442fd30f53d0bc2b$require$Buffer = $lzfo4$buffer.Buffer;
    var $442fd30f53d0bc2b$export$2e2bcd8739ae039 = class extends $4eebb3cdbf303bc9$export$2e2bcd8739ae039 {
      static probe(buffer) {
        return buffer.toString("ascii", 0, 4) === "wOF2";
      }
      _decodeDirectory() {
        this.directory = $020d33b51d78c4b3$export$2e2bcd8739ae039.decode(this.stream);
        this._dataPos = this.stream.pos;
      }
      _decompress() {
        if (!this._decompressed) {
          this.stream.pos = this._dataPos;
          let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
          let decompressedSize = 0;
          for (let tag in this.directory.tables) {
            let entry = this.directory.tables[tag];
            entry.offset = decompressedSize;
            decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
          }
          let decompressed = $parcel$interopDefault($lzfo4$brotlidecompressjs)(buffer, decompressedSize);
          if (!decompressed)
            throw new Error("Error decoding compressed data in WOFF2");
          this.stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream($442fd30f53d0bc2b$require$Buffer.from(decompressed));
          this._decompressed = true;
        }
      }
      _decodeTable(table) {
        this._decompress();
        return super._decodeTable(table);
      }
      // Override this method to get a glyph and return our
      // custom subclass if there is a glyf table.
      _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
          if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
            if (!this._transformedGlyphs)
              this._transformGlyfTable();
            return this._glyphs[glyph] = new $54119d8499a8b392$export$2e2bcd8739ae039(glyph, characters, this);
          } else
            return super._getBaseGlyph(glyph, characters);
        }
      }
      _transformGlyfTable() {
        this._decompress();
        this.stream.pos = this.directory.tables.glyf.offset;
        let table = $442fd30f53d0bc2b$var$GlyfTable.decode(this.stream);
        let glyphs = [];
        for (let index = 0; index < table.numGlyphs; index++) {
          let glyph = {};
          let nContours = table.nContours.readInt16BE();
          glyph.numberOfContours = nContours;
          if (nContours > 0) {
            let nPoints = [];
            let totalPoints = 0;
            for (let i2 = 0; i2 < nContours; i2++) {
              let r = $442fd30f53d0bc2b$var$read255UInt16(table.nPoints);
              totalPoints += r;
              nPoints.push(totalPoints);
            }
            glyph.points = $442fd30f53d0bc2b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
            for (let i1 = 0; i1 < nContours; i1++)
              glyph.points[nPoints[i1] - 1].endContour = true;
            var instructionSize = $442fd30f53d0bc2b$var$read255UInt16(table.glyphs);
          } else if (nContours < 0) {
            let haveInstructions = $f71300a5bebbfea9$export$2e2bcd8739ae039.prototype._decodeComposite.call({
              _font: this
            }, glyph, table.composites);
            if (haveInstructions)
              var instructionSize = $442fd30f53d0bc2b$var$read255UInt16(table.glyphs);
          }
          glyphs.push(glyph);
        }
        this._transformedGlyphs = glyphs;
      }
      constructor(...args) {
        super(...args);
        $lzfo4$swchelpers.defineProperty(this, "type", "WOFF2");
      }
    };
    var $442fd30f53d0bc2b$var$Substream = class {
      decode(stream, parent) {
        return new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this._buf.decode(stream, parent));
      }
      constructor(length) {
        this.length = length;
        this._buf = new ($parcel$interopDefault($lzfo4$restructure)).Buffer(length);
      }
    };
    var $442fd30f53d0bc2b$var$GlyfTable = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      version: $parcel$interopDefault($lzfo4$restructure).uint32,
      numGlyphs: $parcel$interopDefault($lzfo4$restructure).uint16,
      indexFormat: $parcel$interopDefault($lzfo4$restructure).uint16,
      nContourStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      nPointsStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      flagStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      glyphStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      compositeStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      bboxStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      instructionStreamSize: $parcel$interopDefault($lzfo4$restructure).uint32,
      nContours: new $442fd30f53d0bc2b$var$Substream("nContourStreamSize"),
      nPoints: new $442fd30f53d0bc2b$var$Substream("nPointsStreamSize"),
      flags: new $442fd30f53d0bc2b$var$Substream("flagStreamSize"),
      glyphs: new $442fd30f53d0bc2b$var$Substream("glyphStreamSize"),
      composites: new $442fd30f53d0bc2b$var$Substream("compositeStreamSize"),
      bboxes: new $442fd30f53d0bc2b$var$Substream("bboxStreamSize"),
      instructions: new $442fd30f53d0bc2b$var$Substream("instructionStreamSize")
    });
    var $442fd30f53d0bc2b$var$WORD_CODE = 253;
    var $442fd30f53d0bc2b$var$ONE_MORE_BYTE_CODE2 = 254;
    var $442fd30f53d0bc2b$var$ONE_MORE_BYTE_CODE1 = 255;
    var $442fd30f53d0bc2b$var$LOWEST_U_CODE = 253;
    function $442fd30f53d0bc2b$var$read255UInt16(stream) {
      let code = stream.readUInt8();
      if (code === $442fd30f53d0bc2b$var$WORD_CODE)
        return stream.readUInt16BE();
      if (code === $442fd30f53d0bc2b$var$ONE_MORE_BYTE_CODE1)
        return stream.readUInt8() + $442fd30f53d0bc2b$var$LOWEST_U_CODE;
      if (code === $442fd30f53d0bc2b$var$ONE_MORE_BYTE_CODE2)
        return stream.readUInt8() + $442fd30f53d0bc2b$var$LOWEST_U_CODE * 2;
      return code;
    }
    function $442fd30f53d0bc2b$var$withSign(flag, baseval) {
      return flag & 1 ? baseval : -baseval;
    }
    function $442fd30f53d0bc2b$var$decodeTriplet(flags, glyphs, nPoints) {
      let y;
      let x = y = 0;
      let res = [];
      for (let i2 = 0; i2 < nPoints; i2++) {
        let dx = 0, dy = 0;
        let flag = flags.readUInt8();
        let onCurve = !(flag >> 7);
        flag &= 127;
        if (flag < 10) {
          dx = 0;
          dy = $442fd30f53d0bc2b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
        } else if (flag < 20) {
          dx = $442fd30f53d0bc2b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
          dy = 0;
        } else if (flag < 84) {
          var b0 = flag - 20;
          var b1 = glyphs.readUInt8();
          dx = $442fd30f53d0bc2b$var$withSign(flag, 1 + (b0 & 48) + (b1 >> 4));
          dy = $442fd30f53d0bc2b$var$withSign(flag >> 1, 1 + ((b0 & 12) << 2) + (b1 & 15));
        } else if (flag < 120) {
          var b0 = flag - 84;
          dx = $442fd30f53d0bc2b$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
          dy = $442fd30f53d0bc2b$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
        } else if (flag < 124) {
          var b1 = glyphs.readUInt8();
          let b2 = glyphs.readUInt8();
          dx = $442fd30f53d0bc2b$var$withSign(flag, (b1 << 4) + (b2 >> 4));
          dy = $442fd30f53d0bc2b$var$withSign(flag >> 1, ((b2 & 15) << 8) + glyphs.readUInt8());
        } else {
          dx = $442fd30f53d0bc2b$var$withSign(flag, glyphs.readUInt16BE());
          dy = $442fd30f53d0bc2b$var$withSign(flag >> 1, glyphs.readUInt16BE());
        }
        x += dx;
        y += dy;
        res.push(new $f71300a5bebbfea9$export$baf26146a414f24a(onCurve, false, x, y));
      }
      return res;
    }
    var $c161ea4b70ba661a$require$Buffer = $lzfo4$buffer.Buffer;
    var $c161ea4b70ba661a$var$TTCHeader = new ($parcel$interopDefault($lzfo4$restructure)).VersionedStruct($parcel$interopDefault($lzfo4$restructure).uint32, {
      65536: {
        numFonts: $parcel$interopDefault($lzfo4$restructure).uint32,
        offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, "numFonts")
      },
      131072: {
        numFonts: $parcel$interopDefault($lzfo4$restructure).uint32,
        offsets: new ($parcel$interopDefault($lzfo4$restructure)).Array($parcel$interopDefault($lzfo4$restructure).uint32, "numFonts"),
        dsigTag: $parcel$interopDefault($lzfo4$restructure).uint32,
        dsigLength: $parcel$interopDefault($lzfo4$restructure).uint32,
        dsigOffset: $parcel$interopDefault($lzfo4$restructure).uint32
      }
    });
    var $c161ea4b70ba661a$export$2e2bcd8739ae039 = class {
      static probe(buffer) {
        return buffer.toString("ascii", 0, 4) === "ttcf";
      }
      getFont(name) {
        for (let offset of this.header.offsets) {
          let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this.stream.buffer);
          stream.pos = offset;
          let font = new $4eebb3cdbf303bc9$export$2e2bcd8739ae039(stream);
          if ($c161ea4b70ba661a$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name)
            return font;
        }
        return null;
      }
      get fonts() {
        let fonts = [];
        for (let offset of this.header.offsets) {
          let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this.stream.buffer);
          stream.pos = offset;
          fonts.push(new $4eebb3cdbf303bc9$export$2e2bcd8739ae039(stream));
        }
        return fonts;
      }
      constructor(stream) {
        $lzfo4$swchelpers.defineProperty(this, "type", "TTC");
        this.stream = stream;
        if (stream.readString(4) !== "ttcf")
          throw new Error("Not a TrueType collection");
        this.header = $c161ea4b70ba661a$var$TTCHeader.decode(stream);
      }
    };
    var $6856163a969bb62a$require$Buffer = $lzfo4$buffer.Buffer;
    var $6856163a969bb62a$var$DFontName = new ($parcel$interopDefault($lzfo4$restructure)).String($parcel$interopDefault($lzfo4$restructure).uint8);
    var $6856163a969bb62a$var$DFontData = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      len: $parcel$interopDefault($lzfo4$restructure).uint32,
      buf: new ($parcel$interopDefault($lzfo4$restructure)).Buffer("len")
    });
    var $6856163a969bb62a$var$Ref = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      id: $parcel$interopDefault($lzfo4$restructure).uint16,
      nameOffset: $parcel$interopDefault($lzfo4$restructure).int16,
      attr: $parcel$interopDefault($lzfo4$restructure).uint8,
      dataOffset: $parcel$interopDefault($lzfo4$restructure).uint24,
      handle: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $6856163a969bb62a$var$Type = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      name: new ($parcel$interopDefault($lzfo4$restructure)).String(4),
      maxTypeIndex: $parcel$interopDefault($lzfo4$restructure).uint16,
      refList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $6856163a969bb62a$var$Ref,
        (t) => t.maxTypeIndex + 1
      ), {
        type: "parent"
      })
    });
    var $6856163a969bb62a$var$TypeList = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      length: $parcel$interopDefault($lzfo4$restructure).uint16,
      types: new ($parcel$interopDefault($lzfo4$restructure)).Array(
        $6856163a969bb62a$var$Type,
        (t) => t.length + 1
      )
    });
    var $6856163a969bb62a$var$DFontMap = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      reserved: new ($parcel$interopDefault($lzfo4$restructure)).Reserved($parcel$interopDefault($lzfo4$restructure).uint8, 24),
      typeList: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, $6856163a969bb62a$var$TypeList),
      nameListOffset: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint16, "void")
    });
    var $6856163a969bb62a$var$DFontHeader = new ($parcel$interopDefault($lzfo4$restructure)).Struct({
      dataOffset: $parcel$interopDefault($lzfo4$restructure).uint32,
      map: new ($parcel$interopDefault($lzfo4$restructure)).Pointer($parcel$interopDefault($lzfo4$restructure).uint32, $6856163a969bb62a$var$DFontMap),
      dataLength: $parcel$interopDefault($lzfo4$restructure).uint32,
      mapLength: $parcel$interopDefault($lzfo4$restructure).uint32
    });
    var $6856163a969bb62a$export$2e2bcd8739ae039 = class {
      static probe(buffer) {
        let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(buffer);
        try {
          var header = $6856163a969bb62a$var$DFontHeader.decode(stream);
        } catch (e) {
          return false;
        }
        for (let type of header.map.typeList.types) {
          if (type.name === "sfnt")
            return true;
        }
        return false;
      }
      getFont(name) {
        if (!this.sfnt)
          return null;
        for (let ref of this.sfnt.refList) {
          let pos = this.header.dataOffset + ref.dataOffset + 4;
          let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this.stream.buffer.slice(pos));
          let font = new $4eebb3cdbf303bc9$export$2e2bcd8739ae039(stream);
          if ($6856163a969bb62a$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name)
            return font;
        }
        return null;
      }
      get fonts() {
        let fonts = [];
        for (let ref of this.sfnt.refList) {
          let pos = this.header.dataOffset + ref.dataOffset + 4;
          let stream = new ($parcel$interopDefault($lzfo4$restructure)).DecodeStream(this.stream.buffer.slice(pos));
          fonts.push(new $4eebb3cdbf303bc9$export$2e2bcd8739ae039(stream));
        }
        return fonts;
      }
      constructor(stream) {
        $lzfo4$swchelpers.defineProperty(this, "type", "DFont");
        this.stream = stream;
        this.header = $6856163a969bb62a$var$DFontHeader.decode(this.stream);
        for (let type of this.header.map.typeList.types) {
          for (let ref of type.refList)
            if (ref.nameOffset >= 0) {
              this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
              ref.name = $6856163a969bb62a$var$DFontName.decode(this.stream);
            } else
              ref.name = null;
          if (type.name === "sfnt")
            this.sfnt = type;
        }
      }
    };
    $a35dad4d16c8d1df$export$36b2f24e97d43be($4eebb3cdbf303bc9$export$2e2bcd8739ae039);
    $a35dad4d16c8d1df$export$36b2f24e97d43be($d601d2da4b510322$export$2e2bcd8739ae039);
    $a35dad4d16c8d1df$export$36b2f24e97d43be($442fd30f53d0bc2b$export$2e2bcd8739ae039);
    $a35dad4d16c8d1df$export$36b2f24e97d43be($c161ea4b70ba661a$export$2e2bcd8739ae039);
    $a35dad4d16c8d1df$export$36b2f24e97d43be($6856163a969bb62a$export$2e2bcd8739ae039);
    var $7b813caac4971c4b$export$2e2bcd8739ae039 = {
      registerFormat: $a35dad4d16c8d1df$export$36b2f24e97d43be,
      openSync: $a35dad4d16c8d1df$export$fa5499edb1ab414a,
      open: $a35dad4d16c8d1df$export$3ce6949f20cea765,
      create: $a35dad4d16c8d1df$export$185802fd694ee1f5,
      defaultLanguage: $a35dad4d16c8d1df$export$42940898df819940,
      setDefaultLanguage: $a35dad4d16c8d1df$export$5157e7780d44cc36
    };
    $parcel$exportWildcard(module2.exports, $a35dad4d16c8d1df$exports);
  }
});

// node_modules/linebreak/node_modules/base64-js/lib/b64.js
var require_b64 = __commonJS({
  "node_modules/linebreak/node_modules/base64-js/lib/b64.js"(exports2) {
    var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    (function(exports3) {
      "use strict";
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var PLUS = "+".charCodeAt(0);
      var SLASH = "/".charCodeAt(0);
      var NUMBER = "0".charCodeAt(0);
      var LOWER = "a".charCodeAt(0);
      var UPPER = "A".charCodeAt(0);
      var PLUS_URL_SAFE = "-".charCodeAt(0);
      var SLASH_URL_SAFE = "_".charCodeAt(0);
      function decode(elt) {
        var code = elt.charCodeAt(0);
        if (code === PLUS || code === PLUS_URL_SAFE)
          return 62;
        if (code === SLASH || code === SLASH_URL_SAFE)
          return 63;
        if (code < NUMBER)
          return -1;
        if (code < NUMBER + 10)
          return code - NUMBER + 26 + 26;
        if (code < UPPER + 26)
          return code - UPPER;
        if (code < LOWER + 26)
          return code - LOWER + 26;
      }
      function b64ToByteArray(b64) {
        var i2, j, l, tmp, placeHolders, arr;
        if (b64.length % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var len = b64.length;
        placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
        arr = new Arr(b64.length * 3 / 4 - placeHolders);
        l = placeHolders > 0 ? b64.length - 4 : b64.length;
        var L = 0;
        function push(v) {
          arr[L++] = v;
        }
        for (i2 = 0, j = 0; i2 < l; i2 += 4, j += 3) {
          tmp = decode(b64.charAt(i2)) << 18 | decode(b64.charAt(i2 + 1)) << 12 | decode(b64.charAt(i2 + 2)) << 6 | decode(b64.charAt(i2 + 3));
          push((tmp & 16711680) >> 16);
          push((tmp & 65280) >> 8);
          push(tmp & 255);
        }
        if (placeHolders === 2) {
          tmp = decode(b64.charAt(i2)) << 2 | decode(b64.charAt(i2 + 1)) >> 4;
          push(tmp & 255);
        } else if (placeHolders === 1) {
          tmp = decode(b64.charAt(i2)) << 10 | decode(b64.charAt(i2 + 1)) << 4 | decode(b64.charAt(i2 + 2)) >> 2;
          push(tmp >> 8 & 255);
          push(tmp & 255);
        }
        return arr;
      }
      function uint8ToBase64(uint8) {
        var i2, extraBytes = uint8.length % 3, output = "", temp, length;
        function encode(num) {
          return lookup.charAt(num);
        }
        function tripletToBase64(num) {
          return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
        }
        for (i2 = 0, length = uint8.length - extraBytes; i2 < length; i2 += 3) {
          temp = (uint8[i2] << 16) + (uint8[i2 + 1] << 8) + uint8[i2 + 2];
          output += tripletToBase64(temp);
        }
        switch (extraBytes) {
          case 1:
            temp = uint8[uint8.length - 1];
            output += encode(temp >> 2);
            output += encode(temp << 4 & 63);
            output += "==";
            break;
          case 2:
            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
            output += encode(temp >> 10);
            output += encode(temp >> 4 & 63);
            output += encode(temp << 2 & 63);
            output += "=";
            break;
        }
        return output;
      }
      exports3.toByteArray = b64ToByteArray;
      exports3.fromByteArray = uint8ToBase64;
    })(typeof exports2 === "undefined" ? exports2.base64js = {} : exports2);
  }
});

// node_modules/linebreak/dist/main.cjs
var require_main3 = __commonJS({
  "node_modules/linebreak/dist/main.cjs"(exports2, module2) {
    var $kQ2hT$unicodetrie = require_unicode_trie();
    var $kQ2hT$base64js = require_b64();
    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    var $60ff486a304db230$export$fb4028874a74450 = 5;
    var $60ff486a304db230$export$1bb1140fe1358b00 = 12;
    var $60ff486a304db230$export$f3e416a182673355 = 13;
    var $60ff486a304db230$export$24aa617c849a894a = 16;
    var $60ff486a304db230$export$a73c4d14459b698d = 17;
    var $60ff486a304db230$export$9e5d732f3676a9ba = 22;
    var $60ff486a304db230$export$1dff41d5c0caca01 = 28;
    var $60ff486a304db230$export$30a74a373318dec6 = 31;
    var $60ff486a304db230$export$d710c5f50fc7496a = 33;
    var $60ff486a304db230$export$66498d28055820a9 = 34;
    var $60ff486a304db230$export$eb6c6d0b7c8826f2 = 35;
    var $60ff486a304db230$export$de92be486109a1df = 36;
    var $60ff486a304db230$export$606cfc2a8896c91f = 37;
    var $60ff486a304db230$export$e51d3c675bb0140d = 38;
    var $60ff486a304db230$export$da51c6332ad11d7b = 39;
    var $60ff486a304db230$export$bea437c40441867d = 40;
    var $60ff486a304db230$export$c4c7eecbfed13dc9 = 41;
    var $60ff486a304db230$export$98e1f8a379849661 = 42;
    var $1b6fba3281342923$export$98f50d781a474745 = 0;
    var $1b6fba3281342923$export$12ee1f8f5315ca7e = 1;
    var $1b6fba3281342923$export$e4965ce242860454 = 2;
    var $1b6fba3281342923$export$8f14048969dcd45e = 3;
    var $1b6fba3281342923$export$133eb141bf58aff4 = 4;
    var $1b6fba3281342923$export$5bdb8ccbf5c57afc = [
      //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB
      [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$8f14048969dcd45e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ],
      [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
      ]
      // CB
    ];
    var $f898ea50f3b38ab8$var$data = $parcel$interopDefault($kQ2hT$base64js).toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
    var $f898ea50f3b38ab8$var$classTrie = new ($parcel$interopDefault($kQ2hT$unicodetrie))($f898ea50f3b38ab8$var$data);
    var $f898ea50f3b38ab8$var$mapClass = function(c) {
      switch (c) {
        case $60ff486a304db230$export$d710c5f50fc7496a:
          return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$da51c6332ad11d7b:
        case $60ff486a304db230$export$bea437c40441867d:
        case $60ff486a304db230$export$98e1f8a379849661:
          return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$eb6c6d0b7c8826f2:
          return $60ff486a304db230$export$fb4028874a74450;
        default:
          return c;
      }
    };
    var $f898ea50f3b38ab8$var$mapFirst = function(c) {
      switch (c) {
        case $60ff486a304db230$export$606cfc2a8896c91f:
        case $60ff486a304db230$export$e51d3c675bb0140d:
          return $60ff486a304db230$export$66498d28055820a9;
        case $60ff486a304db230$export$c4c7eecbfed13dc9:
          return $60ff486a304db230$export$9e5d732f3676a9ba;
        default:
          return c;
      }
    };
    var $f898ea50f3b38ab8$var$Break = class {
      constructor(position, required = false) {
        this.position = position;
        this.required = required;
      }
    };
    var $f898ea50f3b38ab8$var$LineBreaker = class {
      nextCodePoint() {
        const code = this.string.charCodeAt(this.pos++);
        const next = this.string.charCodeAt(this.pos);
        if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {
          this.pos++;
          return (code - 55296) * 1024 + (next - 56320) + 65536;
        }
        return code;
      }
      nextCharClass() {
        return $f898ea50f3b38ab8$var$mapClass($f898ea50f3b38ab8$var$classTrie.get(this.nextCodePoint()));
      }
      getSimpleBreak() {
        switch (this.nextClass) {
          case $60ff486a304db230$export$c4c7eecbfed13dc9:
            return false;
          case $60ff486a304db230$export$66498d28055820a9:
          case $60ff486a304db230$export$606cfc2a8896c91f:
          case $60ff486a304db230$export$e51d3c675bb0140d:
            this.curClass = $60ff486a304db230$export$66498d28055820a9;
            return false;
          case $60ff486a304db230$export$de92be486109a1df:
            this.curClass = $60ff486a304db230$export$de92be486109a1df;
            return false;
        }
        return null;
      }
      getPairTableBreak(lastClass) {
        let shouldBreak = false;
        switch ($1b6fba3281342923$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]) {
          case $1b6fba3281342923$export$98f50d781a474745:
            shouldBreak = true;
            break;
          case $1b6fba3281342923$export$12ee1f8f5315ca7e:
            shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
            break;
          case $1b6fba3281342923$export$e4965ce242860454:
            shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
            if (!shouldBreak) {
              shouldBreak = false;
              return shouldBreak;
            }
            break;
          case $1b6fba3281342923$export$8f14048969dcd45e:
            if (lastClass !== $60ff486a304db230$export$c4c7eecbfed13dc9)
              return shouldBreak;
            break;
          case $1b6fba3281342923$export$133eb141bf58aff4:
            break;
        }
        if (this.LB8a)
          shouldBreak = false;
        if (this.LB21a && (this.curClass === $60ff486a304db230$export$24aa617c849a894a || this.curClass === $60ff486a304db230$export$a73c4d14459b698d)) {
          shouldBreak = false;
          this.LB21a = false;
        } else
          this.LB21a = this.curClass === $60ff486a304db230$export$f3e416a182673355;
        if (this.curClass === $60ff486a304db230$export$1dff41d5c0caca01) {
          this.LB30a++;
          if (this.LB30a == 2 && this.nextClass === $60ff486a304db230$export$1dff41d5c0caca01) {
            shouldBreak = true;
            this.LB30a = 0;
          }
        } else
          this.LB30a = 0;
        this.curClass = this.nextClass;
        return shouldBreak;
      }
      nextBreak() {
        if (this.curClass == null) {
          let firstClass = this.nextCharClass();
          this.curClass = $f898ea50f3b38ab8$var$mapFirst(firstClass);
          this.nextClass = firstClass;
          this.LB8a = firstClass === $60ff486a304db230$export$30a74a373318dec6;
          this.LB30a = 0;
        }
        while (this.pos < this.string.length) {
          this.lastPos = this.pos;
          const lastClass = this.nextClass;
          this.nextClass = this.nextCharClass();
          if (this.curClass === $60ff486a304db230$export$66498d28055820a9 || this.curClass === $60ff486a304db230$export$de92be486109a1df && this.nextClass !== $60ff486a304db230$export$606cfc2a8896c91f) {
            this.curClass = $f898ea50f3b38ab8$var$mapFirst($f898ea50f3b38ab8$var$mapClass(this.nextClass));
            return new $f898ea50f3b38ab8$var$Break(this.lastPos, true);
          }
          let shouldBreak = this.getSimpleBreak();
          if (shouldBreak === null)
            shouldBreak = this.getPairTableBreak(lastClass);
          this.LB8a = this.nextClass === $60ff486a304db230$export$30a74a373318dec6;
          if (shouldBreak)
            return new $f898ea50f3b38ab8$var$Break(this.lastPos);
        }
        if (this.lastPos < this.string.length) {
          this.lastPos = this.string.length;
          return new $f898ea50f3b38ab8$var$Break(this.string.length);
        }
        return null;
      }
      constructor(string) {
        this.string = string;
        this.pos = 0;
        this.lastPos = 0;
        this.curClass = null;
        this.nextClass = null;
        this.LB8a = false;
        this.LB21a = false;
        this.LB30a = 0;
      }
    };
    module2.exports = $f898ea50f3b38ab8$var$LineBreaker;
  }
});

// node_modules/png-js/png-node.js
var require_png_node = __commonJS({
  "node_modules/png-js/png-node.js"(exports2, module2) {
    var fs = require("fs");
    var zlib = require("zlib");
    module2.exports = class PNG {
      static decode(path, fn) {
        return fs.readFile(path, function(err, file) {
          const png = new PNG(file);
          return png.decode((pixels) => fn(pixels));
        });
      }
      static load(path) {
        const file = fs.readFileSync(path);
        return new PNG(file);
      }
      constructor(data) {
        let i2;
        this.data = data;
        this.pos = 8;
        this.palette = [];
        this.imgData = [];
        this.transparency = {};
        this.text = {};
        while (true) {
          const chunkSize = this.readUInt32();
          let section = "";
          for (i2 = 0; i2 < 4; i2++) {
            section += String.fromCharCode(this.data[this.pos++]);
          }
          switch (section) {
            case "IHDR":
              this.width = this.readUInt32();
              this.height = this.readUInt32();
              this.bits = this.data[this.pos++];
              this.colorType = this.data[this.pos++];
              this.compressionMethod = this.data[this.pos++];
              this.filterMethod = this.data[this.pos++];
              this.interlaceMethod = this.data[this.pos++];
              break;
            case "PLTE":
              this.palette = this.read(chunkSize);
              break;
            case "IDAT":
              for (i2 = 0; i2 < chunkSize; i2++) {
                this.imgData.push(this.data[this.pos++]);
              }
              break;
            case "tRNS":
              this.transparency = {};
              switch (this.colorType) {
                case 3:
                  this.transparency.indexed = this.read(chunkSize);
                  var short = 255 - this.transparency.indexed.length;
                  if (short > 0) {
                    for (i2 = 0; i2 < short; i2++) {
                      this.transparency.indexed.push(255);
                    }
                  }
                  break;
                case 0:
                  this.transparency.grayscale = this.read(chunkSize)[0];
                  break;
                case 2:
                  this.transparency.rgb = this.read(chunkSize);
                  break;
              }
              break;
            case "tEXt":
              var text = this.read(chunkSize);
              var index = text.indexOf(0);
              var key = String.fromCharCode.apply(String, text.slice(0, index));
              this.text[key] = String.fromCharCode.apply(
                String,
                text.slice(index + 1)
              );
              break;
            case "IEND":
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  this.colors = 1;
                  break;
                case 2:
                case 6:
                  this.colors = 3;
                  break;
              }
              this.hasAlphaChannel = [4, 6].includes(this.colorType);
              var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
              this.pixelBitlength = this.bits * colors;
              switch (this.colors) {
                case 1:
                  this.colorSpace = "DeviceGray";
                  break;
                case 3:
                  this.colorSpace = "DeviceRGB";
                  break;
              }
              this.imgData = new Buffer(this.imgData);
              return;
              break;
            default:
              this.pos += chunkSize;
          }
          this.pos += 4;
          if (this.pos > this.data.length) {
            throw new Error("Incomplete or corrupt PNG file");
          }
        }
      }
      read(bytes) {
        const result = new Array(bytes);
        for (let i2 = 0; i2 < bytes; i2++) {
          result[i2] = this.data[this.pos++];
        }
        return result;
      }
      readUInt32() {
        const b1 = this.data[this.pos++] << 24;
        const b2 = this.data[this.pos++] << 16;
        const b3 = this.data[this.pos++] << 8;
        const b4 = this.data[this.pos++];
        return b1 | b2 | b3 | b4;
      }
      readUInt16() {
        const b1 = this.data[this.pos++] << 8;
        const b2 = this.data[this.pos++];
        return b1 | b2;
      }
      decodePixels(fn) {
        return zlib.inflate(this.imgData, (err, data) => {
          if (err) {
            throw err;
          }
          const { width, height } = this;
          const pixelBytes = this.pixelBitlength / 8;
          const pixels = new Buffer(width * height * pixelBytes);
          const { length } = data;
          let pos = 0;
          function pass(x0, y0, dx, dy, singlePass = false) {
            const w = Math.ceil((width - x0) / dx);
            const h = Math.ceil((height - y0) / dy);
            const scanlineLength = pixelBytes * w;
            const buffer = singlePass ? pixels : new Buffer(scanlineLength * h);
            let row = 0;
            let c = 0;
            while (row < h && pos < length) {
              var byte, col, i2, left, upper;
              switch (data[pos++]) {
                case 0:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    buffer[c++] = data[pos++];
                  }
                  break;
                case 1:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    buffer[c++] = (byte + left) % 256;
                  }
                  break;
                case 2:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    buffer[c++] = (upper + byte) % 256;
                  }
                  break;
                case 3:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                    buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                  }
                  break;
                case 4:
                  for (i2 = 0; i2 < scanlineLength; i2++) {
                    var paeth, upperLeft;
                    byte = data[pos++];
                    col = (i2 - i2 % pixelBytes) / pixelBytes;
                    left = i2 < pixelBytes ? 0 : buffer[c - pixelBytes];
                    if (row === 0) {
                      upper = upperLeft = 0;
                    } else {
                      upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i2 % pixelBytes];
                      upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i2 % pixelBytes];
                    }
                    const p = left + upper - upperLeft;
                    const pa = Math.abs(p - left);
                    const pb = Math.abs(p - upper);
                    const pc = Math.abs(p - upperLeft);
                    if (pa <= pb && pa <= pc) {
                      paeth = left;
                    } else if (pb <= pc) {
                      paeth = upper;
                    } else {
                      paeth = upperLeft;
                    }
                    buffer[c++] = (byte + paeth) % 256;
                  }
                  break;
                default:
                  throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
              }
              if (!singlePass) {
                let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
                let bufferPos = row * scanlineLength;
                for (i2 = 0; i2 < w; i2++) {
                  for (let j = 0; j < pixelBytes; j++)
                    pixels[pixelsPos++] = buffer[bufferPos++];
                  pixelsPos += (dx - 1) * pixelBytes;
                }
              }
              row++;
            }
          }
          if (this.interlaceMethod === 1) {
            pass(0, 0, 8, 8);
            pass(4, 0, 8, 8);
            pass(0, 4, 4, 8);
            pass(2, 0, 4, 4);
            pass(0, 2, 2, 4);
            pass(1, 0, 2, 2);
            pass(0, 1, 1, 2);
          } else {
            pass(0, 0, 1, 1, true);
          }
          return fn(pixels);
        });
      }
      decodePalette() {
        const { palette } = this;
        const { length } = palette;
        const transparency = this.transparency.indexed || [];
        const ret = new Buffer(transparency.length + length);
        let pos = 0;
        let c = 0;
        for (let i2 = 0; i2 < length; i2 += 3) {
          var left;
          ret[pos++] = palette[i2];
          ret[pos++] = palette[i2 + 1];
          ret[pos++] = palette[i2 + 2];
          ret[pos++] = (left = transparency[c++]) != null ? left : 255;
        }
        return ret;
      }
      copyToImageData(imageData, pixels) {
        let j, k;
        let { colors } = this;
        let palette = null;
        let alpha = this.hasAlphaChannel;
        if (this.palette.length) {
          palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
          colors = 4;
          alpha = true;
        }
        const data = imageData.data || imageData;
        const { length } = data;
        const input = palette || pixels;
        let i2 = j = 0;
        if (colors === 1) {
          while (i2 < length) {
            k = palette ? pixels[i2 / 4] * 4 : j;
            const v = input[k++];
            data[i2++] = v;
            data[i2++] = v;
            data[i2++] = v;
            data[i2++] = alpha ? input[k++] : 255;
            j = k;
          }
        } else {
          while (i2 < length) {
            k = palette ? pixels[i2 / 4] * 4 : j;
            data[i2++] = input[k++];
            data[i2++] = input[k++];
            data[i2++] = input[k++];
            data[i2++] = alpha ? input[k++] : 255;
            j = k;
          }
        }
      }
      decode(fn) {
        const ret = new Buffer(this.width * this.height * 4);
        return this.decodePixels((pixels) => {
          this.copyToImageData(ret, pixels);
          return fn(ret);
        });
      }
    };
  }
});

// node_modules/pdfkit/js/pdfkit.js
var require_pdfkit = __commonJS({
  "node_modules/pdfkit/js/pdfkit.js"(exports2, module2) {
    "use strict";
    var stream = require("stream");
    var fs = require("fs");
    var zlib = require("zlib");
    var CryptoJS = require_crypto_js();
    var fontkit = require_main2();
    var events = require("events");
    var LineBreaker = require_main3();
    var PNG = require_png_node();
    var PDFAbstractReference = class {
      toString() {
        throw new Error("Must be implemented by subclasses");
      }
    };
    var PDFTree = class {
      constructor(options = {}) {
        this._items = {};
        this.limits = typeof options.limits === "boolean" ? options.limits : true;
      }
      add(key, val) {
        return this._items[key] = val;
      }
      get(key) {
        return this._items[key];
      }
      toString() {
        const sortedKeys = Object.keys(this._items).sort((a, b) => this._compareKeys(a, b));
        const out = ["<<"];
        if (this.limits && sortedKeys.length > 1) {
          const first2 = sortedKeys[0], last2 = sortedKeys[sortedKeys.length - 1];
          out.push(`  /Limits ${PDFObject.convert([this._dataForKey(first2), this._dataForKey(last2)])}`);
        }
        out.push(`  /${this._keysName()} [`);
        for (let key of sortedKeys) {
          out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);
        }
        out.push("]");
        out.push(">>");
        return out.join("\n");
      }
      _compareKeys() {
        throw new Error("Must be implemented by subclasses");
      }
      _keysName() {
        throw new Error("Must be implemented by subclasses");
      }
      _dataForKey() {
        throw new Error("Must be implemented by subclasses");
      }
    };
    var pad = (str, length) => (Array(length + 1).join("0") + str).slice(-length);
    var escapableRe = /[\n\r\t\b\f()\\]/g;
    var escapable = {
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t",
      "\b": "\\b",
      "\f": "\\f",
      "\\": "\\\\",
      "(": "\\(",
      ")": "\\)"
    };
    var swapBytes = function(buff) {
      const l = buff.length;
      if (l & 1) {
        throw new Error("Buffer length must be even");
      } else {
        for (let i2 = 0, end = l - 1; i2 < end; i2 += 2) {
          const a = buff[i2];
          buff[i2] = buff[i2 + 1];
          buff[i2 + 1] = a;
        }
      }
      return buff;
    };
    var PDFObject = class _PDFObject {
      static convert(object, encryptFn = null) {
        if (typeof object === "string") {
          return `/${object}`;
        } else if (object instanceof String) {
          let string = object;
          let isUnicode = false;
          for (let i2 = 0, end = string.length; i2 < end; i2++) {
            if (string.charCodeAt(i2) > 127) {
              isUnicode = true;
              break;
            }
          }
          let stringBuffer;
          if (isUnicode) {
            stringBuffer = swapBytes(Buffer.from(`\uFEFF${string}`, "utf16le"));
          } else {
            stringBuffer = Buffer.from(string.valueOf(), "ascii");
          }
          if (encryptFn) {
            string = encryptFn(stringBuffer).toString("binary");
          } else {
            string = stringBuffer.toString("binary");
          }
          string = string.replace(escapableRe, (c) => escapable[c]);
          return `(${string})`;
        } else if (Buffer.isBuffer(object)) {
          return `<${object.toString("hex")}>`;
        } else if (object instanceof PDFAbstractReference || object instanceof PDFTree) {
          return object.toString();
        } else if (object instanceof Date) {
          let string = `D:${pad(object.getUTCFullYear(), 4)}` + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + "Z";
          if (encryptFn) {
            string = encryptFn(Buffer.from(string, "ascii")).toString("binary");
            string = string.replace(escapableRe, (c) => escapable[c]);
          }
          return `(${string})`;
        } else if (Array.isArray(object)) {
          const items = object.map((e) => _PDFObject.convert(e, encryptFn)).join(" ");
          return `[${items}]`;
        } else if ({}.toString.call(object) === "[object Object]") {
          const out = ["<<"];
          for (let key in object) {
            const val = object[key];
            out.push(`/${key} ${_PDFObject.convert(val, encryptFn)}`);
          }
          out.push(">>");
          return out.join("\n");
        } else if (typeof object === "number") {
          return _PDFObject.number(object);
        } else {
          return `${object}`;
        }
      }
      static number(n) {
        if (n > -1e21 && n < 1e21) {
          return Math.round(n * 1e6) / 1e6;
        }
        throw new Error(`unsupported number: ${n}`);
      }
    };
    var PDFReference = class extends PDFAbstractReference {
      constructor(document2, id, data = {}) {
        super();
        this.document = document2;
        this.id = id;
        this.data = data;
        this.gen = 0;
        this.compress = this.document.compress && !this.data.Filter;
        this.uncompressedLength = 0;
        this.buffer = [];
      }
      write(chunk) {
        if (!Buffer.isBuffer(chunk)) {
          chunk = Buffer.from(chunk + "\n", "binary");
        }
        this.uncompressedLength += chunk.length;
        if (this.data.Length == null) {
          this.data.Length = 0;
        }
        this.buffer.push(chunk);
        this.data.Length += chunk.length;
        if (this.compress) {
          return this.data.Filter = "FlateDecode";
        }
      }
      end(chunk) {
        if (chunk) {
          this.write(chunk);
        }
        return this.finalize();
      }
      finalize() {
        this.offset = this.document._offset;
        const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
        if (this.buffer.length) {
          this.buffer = Buffer.concat(this.buffer);
          if (this.compress) {
            this.buffer = zlib.deflateSync(this.buffer);
          }
          if (encryptFn) {
            this.buffer = encryptFn(this.buffer);
          }
          this.data.Length = this.buffer.length;
        }
        this.document._write(`${this.id} ${this.gen} obj`);
        this.document._write(PDFObject.convert(this.data, encryptFn));
        if (this.buffer.length) {
          this.document._write("stream");
          this.document._write(this.buffer);
          this.buffer = [];
          this.document._write("\nendstream");
        }
        this.document._write("endobj");
        this.document._refEnd(this);
      }
      toString() {
        return `${this.id} ${this.gen} R`;
      }
    };
    var DEFAULT_MARGINS = {
      top: 72,
      left: 72,
      bottom: 72,
      right: 72
    };
    var SIZES = {
      "4A0": [4767.87, 6740.79],
      "2A0": [3370.39, 4767.87],
      A0: [2383.94, 3370.39],
      A1: [1683.78, 2383.94],
      A2: [1190.55, 1683.78],
      A3: [841.89, 1190.55],
      A4: [595.28, 841.89],
      A5: [419.53, 595.28],
      A6: [297.64, 419.53],
      A7: [209.76, 297.64],
      A8: [147.4, 209.76],
      A9: [104.88, 147.4],
      A10: [73.7, 104.88],
      B0: [2834.65, 4008.19],
      B1: [2004.09, 2834.65],
      B2: [1417.32, 2004.09],
      B3: [1000.63, 1417.32],
      B4: [708.66, 1000.63],
      B5: [498.9, 708.66],
      B6: [354.33, 498.9],
      B7: [249.45, 354.33],
      B8: [175.75, 249.45],
      B9: [124.72, 175.75],
      B10: [87.87, 124.72],
      C0: [2599.37, 3676.54],
      C1: [1836.85, 2599.37],
      C2: [1298.27, 1836.85],
      C3: [918.43, 1298.27],
      C4: [649.13, 918.43],
      C5: [459.21, 649.13],
      C6: [323.15, 459.21],
      C7: [229.61, 323.15],
      C8: [161.57, 229.61],
      C9: [113.39, 161.57],
      C10: [79.37, 113.39],
      RA0: [2437.8, 3458.27],
      RA1: [1729.13, 2437.8],
      RA2: [1218.9, 1729.13],
      RA3: [864.57, 1218.9],
      RA4: [609.45, 864.57],
      SRA0: [2551.18, 3628.35],
      SRA1: [1814.17, 2551.18],
      SRA2: [1275.59, 1814.17],
      SRA3: [907.09, 1275.59],
      SRA4: [637.8, 907.09],
      EXECUTIVE: [521.86, 756],
      FOLIO: [612, 936],
      LEGAL: [612, 1008],
      LETTER: [612, 792],
      TABLOID: [792, 1224]
    };
    var PDFPage = class {
      constructor(document2, options = {}) {
        this.document = document2;
        this.size = options.size || "letter";
        this.layout = options.layout || "portrait";
        if (typeof options.margin === "number") {
          this.margins = {
            top: options.margin,
            left: options.margin,
            bottom: options.margin,
            right: options.margin
          };
        } else {
          this.margins = options.margins || DEFAULT_MARGINS;
        }
        const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
        this.width = dimensions[this.layout === "portrait" ? 0 : 1];
        this.height = dimensions[this.layout === "portrait" ? 1 : 0];
        this.content = this.document.ref();
        this.resources = this.document.ref({
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"]
        });
        this.dictionary = this.document.ref({
          Type: "Page",
          Parent: this.document._root.data.Pages,
          MediaBox: [0, 0, this.width, this.height],
          Contents: this.content,
          Resources: this.resources
        });
        this.markings = [];
      }
      // Lazily create these objects
      get fonts() {
        const data = this.resources.data;
        return data.Font != null ? data.Font : data.Font = {};
      }
      get xobjects() {
        const data = this.resources.data;
        return data.XObject != null ? data.XObject : data.XObject = {};
      }
      get ext_gstates() {
        const data = this.resources.data;
        return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
      }
      get patterns() {
        const data = this.resources.data;
        return data.Pattern != null ? data.Pattern : data.Pattern = {};
      }
      get colorSpaces() {
        const data = this.resources.data;
        return data.ColorSpace || (data.ColorSpace = {});
      }
      get annotations() {
        const data = this.dictionary.data;
        return data.Annots != null ? data.Annots : data.Annots = [];
      }
      get structParentTreeKey() {
        const data = this.dictionary.data;
        return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
      }
      maxY() {
        return this.height - this.margins.bottom;
      }
      write(chunk) {
        return this.content.write(chunk);
      }
      end() {
        this.dictionary.end();
        this.resources.end();
        return this.content.end();
      }
    };
    var PDFNameTree = class extends PDFTree {
      _compareKeys(a, b) {
        return a.localeCompare(b);
      }
      _keysName() {
        return "Names";
      }
      _dataForKey(k) {
        return new String(k);
      }
    };
    function inRange(value, rangeGroup) {
      if (value < rangeGroup[0])
        return false;
      let startRange = 0;
      let endRange = rangeGroup.length / 2;
      while (startRange <= endRange) {
        const middleRange = Math.floor((startRange + endRange) / 2);
        const arrayIndex = middleRange * 2;
        if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
          return true;
        }
        if (value > rangeGroup[arrayIndex + 1]) {
          startRange = middleRange + 1;
        } else {
          endRange = middleRange - 1;
        }
      }
      return false;
    }
    var unassigned_code_points = [545, 545, 564, 591, 686, 687, 751, 767, 848, 863, 880, 883, 886, 889, 891, 893, 895, 899, 907, 907, 909, 909, 930, 930, 975, 975, 1015, 1023, 1159, 1159, 1231, 1231, 1270, 1271, 1274, 1279, 1296, 1328, 1367, 1368, 1376, 1376, 1416, 1416, 1419, 1424, 1442, 1442, 1466, 1466, 1477, 1487, 1515, 1519, 1525, 1547, 1549, 1562, 1564, 1566, 1568, 1568, 1595, 1599, 1622, 1631, 1774, 1775, 1791, 1791, 1806, 1806, 1837, 1839, 1867, 1919, 1970, 2304, 2308, 2308, 2362, 2363, 2382, 2383, 2389, 2391, 2417, 2432, 2436, 2436, 2445, 2446, 2449, 2450, 2473, 2473, 2481, 2481, 2483, 2485, 2490, 2491, 2493, 2493, 2501, 2502, 2505, 2506, 2510, 2518, 2520, 2523, 2526, 2526, 2532, 2533, 2555, 2561, 2563, 2564, 2571, 2574, 2577, 2578, 2601, 2601, 2609, 2609, 2612, 2612, 2615, 2615, 2618, 2619, 2621, 2621, 2627, 2630, 2633, 2634, 2638, 2648, 2653, 2653, 2655, 2661, 2677, 2688, 2692, 2692, 2700, 2700, 2702, 2702, 2706, 2706, 2729, 2729, 2737, 2737, 2740, 2740, 2746, 2747, 2758, 2758, 2762, 2762, 2766, 2767, 2769, 2783, 2785, 2789, 2800, 2816, 2820, 2820, 2829, 2830, 2833, 2834, 2857, 2857, 2865, 2865, 2868, 2869, 2874, 2875, 2884, 2886, 2889, 2890, 2894, 2901, 2904, 2907, 2910, 2910, 2914, 2917, 2929, 2945, 2948, 2948, 2955, 2957, 2961, 2961, 2966, 2968, 2971, 2971, 2973, 2973, 2976, 2978, 2981, 2983, 2987, 2989, 2998, 2998, 3002, 3005, 3011, 3013, 3017, 3017, 3022, 3030, 3032, 3046, 3059, 3072, 3076, 3076, 3085, 3085, 3089, 3089, 3113, 3113, 3124, 3124, 3130, 3133, 3141, 3141, 3145, 3145, 3150, 3156, 3159, 3167, 3170, 3173, 3184, 3201, 3204, 3204, 3213, 3213, 3217, 3217, 3241, 3241, 3252, 3252, 3258, 3261, 3269, 3269, 3273, 3273, 3278, 3284, 3287, 3293, 3295, 3295, 3298, 3301, 3312, 3329, 3332, 3332, 3341, 3341, 3345, 3345, 3369, 3369, 3386, 3389, 3396, 3397, 3401, 3401, 3406, 3414, 3416, 3423, 3426, 3429, 3440, 3457, 3460, 3460, 3479, 3481, 3506, 3506, 3516, 3516, 3518, 3519, 3527, 3529, 3531, 3534, 3541, 3541, 3543, 3543, 3552, 3569, 3573, 3584, 3643, 3646, 3676, 3712, 3715, 3715, 3717, 3718, 3721, 3721, 3723, 3724, 3726, 3731, 3736, 3736, 3744, 3744, 3748, 3748, 3750, 3750, 3752, 3753, 3756, 3756, 3770, 3770, 3774, 3775, 3781, 3781, 3783, 3783, 3790, 3791, 3802, 3803, 3806, 3839, 3912, 3912, 3947, 3952, 3980, 3983, 3992, 3992, 4029, 4029, 4045, 4046, 4048, 4095, 4130, 4130, 4136, 4136, 4139, 4139, 4147, 4149, 4154, 4159, 4186, 4255, 4294, 4303, 4345, 4346, 4348, 4351, 4442, 4446, 4515, 4519, 4602, 4607, 4615, 4615, 4679, 4679, 4681, 4681, 4686, 4687, 4695, 4695, 4697, 4697, 4702, 4703, 4743, 4743, 4745, 4745, 4750, 4751, 4783, 4783, 4785, 4785, 4790, 4791, 4799, 4799, 4801, 4801, 4806, 4807, 4815, 4815, 4823, 4823, 4847, 4847, 4879, 4879, 4881, 4881, 4886, 4887, 4895, 4895, 4935, 4935, 4955, 4960, 4989, 5023, 5109, 5120, 5751, 5759, 5789, 5791, 5873, 5887, 5901, 5901, 5909, 5919, 5943, 5951, 5972, 5983, 5997, 5997, 6001, 6001, 6004, 6015, 6109, 6111, 6122, 6143, 6159, 6159, 6170, 6175, 6264, 6271, 6314, 7679, 7836, 7839, 7930, 7935, 7958, 7959, 7966, 7967, 8006, 8007, 8014, 8015, 8024, 8024, 8026, 8026, 8028, 8028, 8030, 8030, 8062, 8063, 8117, 8117, 8133, 8133, 8148, 8149, 8156, 8156, 8176, 8177, 8181, 8181, 8191, 8191, 8275, 8278, 8280, 8286, 8292, 8297, 8306, 8307, 8335, 8351, 8370, 8399, 8427, 8447, 8507, 8508, 8524, 8530, 8580, 8591, 9167, 9215, 9255, 9279, 9291, 9311, 9471, 9471, 9748, 9749, 9752, 9752, 9854, 9855, 9866, 9984, 9989, 9989, 9994, 9995, 10024, 10024, 10060, 10060, 10062, 10062, 10067, 10069, 10071, 10071, 10079, 10080, 10133, 10135, 10160, 10160, 10175, 10191, 10220, 10223, 11008, 11903, 11930, 11930, 12020, 12031, 12246, 12271, 12284, 12287, 12352, 12352, 12439, 12440, 12544, 12548, 12589, 12592, 12687, 12687, 12728, 12783, 12829, 12831, 12868, 12880, 12924, 12926, 13004, 13007, 13055, 13055, 13175, 13178, 13278, 13279, 13311, 13311, 19894, 19967, 40870, 40959, 42125, 42127, 42183, 44031, 55204, 55295, 64046, 64047, 64107, 64255, 64263, 64274, 64280, 64284, 64311, 64311, 64317, 64317, 64319, 64319, 64322, 64322, 64325, 64325, 64434, 64466, 64832, 64847, 64912, 64913, 64968, 64975, 65021, 65023, 65040, 65055, 65060, 65071, 65095, 65096, 65107, 65107, 65127, 65127, 65132, 65135, 65141, 65141, 65277, 65278, 65280, 65280, 65471, 65473, 65480, 65481, 65488, 65489, 65496, 65497, 65501, 65503, 65511, 65511, 65519, 65528, 65536, 66303, 66335, 66335, 66340, 66351, 66379, 66559, 66598, 66599, 66638, 118783, 119030, 119039, 119079, 119081, 119262, 119807, 119893, 119893, 119965, 119965, 119968, 119969, 119971, 119972, 119975, 119976, 119981, 119981, 119994, 119994, 119996, 119996, 120001, 120001, 120004, 120004, 120070, 120070, 120075, 120076, 120085, 120085, 120093, 120093, 120122, 120122, 120127, 120127, 120133, 120133, 120135, 120137, 120145, 120145, 120484, 120487, 120778, 120781, 120832, 131069, 173783, 194559, 195102, 196605, 196608, 262141, 262144, 327677, 327680, 393213, 393216, 458749, 458752, 524285, 524288, 589821, 589824, 655357, 655360, 720893, 720896, 786429, 786432, 851965, 851968, 917501, 917504, 917504, 917506, 917535, 917632, 983037];
    var isUnassignedCodePoint = (character) => inRange(character, unassigned_code_points);
    var commonly_mapped_to_nothing = [173, 173, 847, 847, 6150, 6150, 6155, 6155, 6156, 6156, 6157, 6157, 8203, 8203, 8204, 8204, 8205, 8205, 8288, 8288, 65024, 65024, 65025, 65025, 65026, 65026, 65027, 65027, 65028, 65028, 65029, 65029, 65030, 65030, 65031, 65031, 65032, 65032, 65033, 65033, 65034, 65034, 65035, 65035, 65036, 65036, 65037, 65037, 65038, 65038, 65039, 65039, 65279, 65279];
    var isCommonlyMappedToNothing = (character) => inRange(character, commonly_mapped_to_nothing);
    var non_ASCII_space_characters = [
      160,
      160,
      5760,
      5760,
      8192,
      8192,
      8193,
      8193,
      8194,
      8194,
      8195,
      8195,
      8196,
      8196,
      8197,
      8197,
      8198,
      8198,
      8199,
      8199,
      8200,
      8200,
      8201,
      8201,
      8202,
      8202,
      8203,
      8203,
      8239,
      8239,
      8287,
      8287,
      12288,
      12288
      /* IDEOGRAPHIC SPACE */
    ];
    var isNonASCIISpaceCharacter = (character) => inRange(character, non_ASCII_space_characters);
    var non_ASCII_controls_characters = [
      /**
       * C.2.2 Non-ASCII control characters
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.2
       */
      128,
      159,
      1757,
      1757,
      1807,
      1807,
      6158,
      6158,
      8204,
      8204,
      8205,
      8205,
      8232,
      8232,
      8233,
      8233,
      8288,
      8288,
      8289,
      8289,
      8290,
      8290,
      8291,
      8291,
      8298,
      8303,
      65279,
      65279,
      65529,
      65532,
      119155,
      119162
      /* [MUSICAL CONTROL CHARACTERS] */
    ];
    var non_character_codepoints = [
      /**
       * C.4 Non-character code points
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.4
       */
      64976,
      65007,
      65534,
      65535,
      131070,
      131071,
      196606,
      196607,
      262142,
      262143,
      327678,
      327679,
      393214,
      393215,
      458750,
      458751,
      524286,
      524287,
      589822,
      589823,
      655358,
      655359,
      720894,
      720895,
      786430,
      786431,
      851966,
      851967,
      917502,
      917503,
      983038,
      983039,
      1114110,
      1114111
      /* [NONCHARACTER CODE POINTS] */
    ];
    var prohibited_characters = [
      /**
       * C.2.1 ASCII control characters
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.2.1
       */
      0,
      31,
      127,
      127,
      /**
       * C.8 Change display properties or are deprecated
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.8
       */
      832,
      832,
      833,
      833,
      8206,
      8206,
      8207,
      8207,
      8234,
      8234,
      8235,
      8235,
      8236,
      8236,
      8237,
      8237,
      8238,
      8238,
      8298,
      8298,
      8299,
      8299,
      8300,
      8300,
      8301,
      8301,
      8302,
      8302,
      8303,
      8303,
      /**
       * C.7 Inappropriate for canonical representation
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.7
       */
      12272,
      12283,
      /**
       * C.5 Surrogate codes
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.5
       */
      55296,
      57343,
      /**
       * C.3 Private use
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
       */
      57344,
      63743,
      /**
       * C.6 Inappropriate for plain text
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.6
       */
      65529,
      65529,
      65530,
      65530,
      65531,
      65531,
      65532,
      65532,
      65533,
      65533,
      /**
       * C.9 Tagging characters
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.9
       */
      917505,
      917505,
      917536,
      917631,
      /**
       * C.3 Private use
       * @link https://tools.ietf.org/html/rfc3454#appendix-C.3
       */
      983040,
      1048573,
      1048576,
      1114109
      /* [PRIVATE USE, PLANE 16] */
    ];
    var isProhibitedCharacter = (character) => inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
    var bidirectional_r_al = [1470, 1470, 1472, 1472, 1475, 1475, 1488, 1514, 1520, 1524, 1563, 1563, 1567, 1567, 1569, 1594, 1600, 1610, 1645, 1647, 1649, 1749, 1757, 1757, 1765, 1766, 1786, 1790, 1792, 1805, 1808, 1808, 1810, 1836, 1920, 1957, 1969, 1969, 8207, 8207, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65020, 65136, 65140, 65142, 65276];
    var isBidirectionalRAL = (character) => inRange(character, bidirectional_r_al);
    var bidirectional_l = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 544, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 1013, 1024, 1154, 1162, 1230, 1232, 1269, 1272, 1273, 1280, 1295, 1329, 1366, 1369, 1375, 1377, 1415, 1417, 1417, 2307, 2307, 2309, 2361, 2365, 2368, 2377, 2380, 2384, 2384, 2392, 2401, 2404, 2416, 2434, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2494, 2496, 2503, 2504, 2507, 2508, 2519, 2519, 2524, 2525, 2527, 2529, 2534, 2545, 2548, 2554, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2622, 2624, 2649, 2652, 2654, 2654, 2662, 2671, 2674, 2676, 2691, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2752, 2761, 2761, 2763, 2764, 2768, 2768, 2784, 2784, 2790, 2799, 2818, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2878, 2880, 2880, 2887, 2888, 2891, 2892, 2903, 2903, 2908, 2909, 2911, 2913, 2918, 2928, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3007, 3009, 3010, 3014, 3016, 3018, 3020, 3031, 3031, 3047, 3058, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3137, 3140, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3262, 3264, 3268, 3271, 3272, 3274, 3275, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3392, 3398, 3400, 3402, 3404, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3535, 3537, 3544, 3551, 3570, 3572, 3585, 3632, 3634, 3635, 3648, 3654, 3663, 3675, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3792, 3801, 3804, 3805, 3840, 3863, 3866, 3892, 3894, 3894, 3896, 3896, 3902, 3911, 3913, 3946, 3967, 3967, 3973, 3973, 3976, 3979, 4030, 4037, 4039, 4044, 4047, 4047, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4140, 4145, 4145, 4152, 4152, 4160, 4183, 4256, 4293, 4304, 4344, 4347, 4347, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4961, 4988, 5024, 5108, 5121, 5750, 5761, 5786, 5792, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5941, 5942, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6070, 6078, 6085, 6087, 6088, 6100, 6106, 6108, 6108, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8206, 8206, 8305, 8305, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8509, 8511, 8517, 8521, 8544, 8579, 9014, 9082, 9109, 9109, 9372, 9449, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12588, 12593, 12686, 12688, 12727, 12784, 12828, 12832, 12867, 12896, 12923, 12927, 12976, 12992, 13003, 13008, 13054, 13056, 13174, 13179, 13277, 13280, 13310, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 55296, 64045, 64048, 64106, 64256, 64262, 64275, 64279, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 66304, 66334, 66336, 66339, 66352, 66378, 66560, 66597, 66600, 66637, 118784, 119029, 119040, 119078, 119082, 119142, 119146, 119154, 119171, 119172, 119180, 119209, 119214, 119261, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 12e4, 120002, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120483, 120488, 120777, 131072, 173782, 194560, 195101, 983040, 1048573, 1048576, 1114109];
    var isBidirectionalL = (character) => inRange(character, bidirectional_l);
    var mapping2space = isNonASCIISpaceCharacter;
    var mapping2nothing = isCommonlyMappedToNothing;
    var getCodePoint = (character) => character.codePointAt(0);
    var first = (x) => x[0];
    var last = (x) => x[x.length - 1];
    function toCodePoints(input) {
      const codepoints = [];
      const size = input.length;
      for (let i2 = 0; i2 < size; i2 += 1) {
        const before = input.charCodeAt(i2);
        if (before >= 55296 && before <= 56319 && size > i2 + 1) {
          const next = input.charCodeAt(i2 + 1);
          if (next >= 56320 && next <= 57343) {
            codepoints.push((before - 55296) * 1024 + next - 56320 + 65536);
            i2 += 1;
            continue;
          }
        }
        codepoints.push(before);
      }
      return codepoints;
    }
    function saslprep(input, opts = {}) {
      if (typeof input !== "string") {
        throw new TypeError("Expected string.");
      }
      if (input.length === 0) {
        return "";
      }
      const mapped_input = toCodePoints(input).map((character) => mapping2space(character) ? 32 : character).filter((character) => !mapping2nothing(character));
      const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize("NFKC");
      const normalized_map = toCodePoints(normalized_input);
      const hasProhibited = normalized_map.some(isProhibitedCharacter);
      if (hasProhibited) {
        throw new Error("Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3");
      }
      if (opts.allowUnassigned !== true) {
        const hasUnassigned = normalized_map.some(isUnassignedCodePoint);
        if (hasUnassigned) {
          throw new Error("Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5");
        }
      }
      const hasBidiRAL = normalized_map.some(isBidirectionalRAL);
      const hasBidiL = normalized_map.some(isBidirectionalL);
      if (hasBidiRAL && hasBidiL) {
        throw new Error("String must not contain RandALCat and LCat at the same time, see https://tools.ietf.org/html/rfc3454#section-6");
      }
      const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
      const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
      if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
        throw new Error("Bidirectional RandALCat character must be the first and the last character of the string, see https://tools.ietf.org/html/rfc3454#section-6");
      }
      return normalized_input;
    }
    var PDFSecurity = class _PDFSecurity {
      static generateFileID(info = {}) {
        let infoStr = `${info.CreationDate.getTime()}
`;
        for (let key in info) {
          if (!info.hasOwnProperty(key)) {
            continue;
          }
          infoStr += `${key}: ${info[key].valueOf()}
`;
        }
        return wordArrayToBuffer(CryptoJS.MD5(infoStr));
      }
      static generateRandomWordArray(bytes) {
        return CryptoJS.lib.WordArray.random(bytes);
      }
      static create(document2, options = {}) {
        if (!options.ownerPassword && !options.userPassword) {
          return null;
        }
        return new _PDFSecurity(document2, options);
      }
      constructor(document2, options = {}) {
        if (!options.ownerPassword && !options.userPassword) {
          throw new Error("None of owner password and user password is defined.");
        }
        this.document = document2;
        this._setupEncryption(options);
      }
      _setupEncryption(options) {
        switch (options.pdfVersion) {
          case "1.4":
          case "1.5":
            this.version = 2;
            break;
          case "1.6":
          case "1.7":
            this.version = 4;
            break;
          case "1.7ext3":
            this.version = 5;
            break;
          default:
            this.version = 1;
            break;
        }
        const encDict = {
          Filter: "Standard"
        };
        switch (this.version) {
          case 1:
          case 2:
          case 4:
            this._setupEncryptionV1V2V4(this.version, encDict, options);
            break;
          case 5:
            this._setupEncryptionV5(encDict, options);
            break;
        }
        this.dictionary = this.document.ref(encDict);
      }
      _setupEncryptionV1V2V4(v, encDict, options) {
        let r, permissions;
        switch (v) {
          case 1:
            r = 2;
            this.keyBits = 40;
            permissions = getPermissionsR2(options.permissions);
            break;
          case 2:
            r = 3;
            this.keyBits = 128;
            permissions = getPermissionsR3(options.permissions);
            break;
          case 4:
            r = 4;
            this.keyBits = 128;
            permissions = getPermissionsR3(options.permissions);
            break;
        }
        const paddedUserPassword = processPasswordR2R3R4(options.userPassword);
        const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
        const ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
        this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
        let userPasswordEntry;
        if (r === 2) {
          userPasswordEntry = getUserPasswordR2(this.encryptionKey);
        } else {
          userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
        }
        encDict.V = v;
        if (v >= 2) {
          encDict.Length = this.keyBits;
        }
        if (v === 4) {
          encDict.CF = {
            StdCF: {
              AuthEvent: "DocOpen",
              CFM: "AESV2",
              Length: this.keyBits / 8
            }
          };
          encDict.StmF = "StdCF";
          encDict.StrF = "StdCF";
        }
        encDict.R = r;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.P = permissions;
      }
      _setupEncryptionV5(encDict, options) {
        this.keyBits = 256;
        const permissions = getPermissionsR3(options.permissions);
        const processedUserPassword = processPasswordR5(options.userPassword);
        const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
        this.encryptionKey = getEncryptionKeyR5(_PDFSecurity.generateRandomWordArray);
        const userPasswordEntry = getUserPasswordR5(processedUserPassword, _PDFSecurity.generateRandomWordArray);
        const userKeySalt = CryptoJS.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
        const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
        const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, _PDFSecurity.generateRandomWordArray);
        const ownerKeySalt = CryptoJS.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
        const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
        const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, _PDFSecurity.generateRandomWordArray);
        encDict.V = 5;
        encDict.Length = this.keyBits;
        encDict.CF = {
          StdCF: {
            AuthEvent: "DocOpen",
            CFM: "AESV3",
            Length: this.keyBits / 8
          }
        };
        encDict.StmF = "StdCF";
        encDict.StrF = "StdCF";
        encDict.R = 5;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
        encDict.P = permissions;
        encDict.Perms = wordArrayToBuffer(permsEntry);
      }
      getEncryptFn(obj, gen) {
        let digest;
        if (this.version < 5) {
          digest = this.encryptionKey.clone().concat(CryptoJS.lib.WordArray.create([(obj & 255) << 24 | (obj & 65280) << 8 | obj >> 8 & 65280 | gen & 255, (gen & 65280) << 16], 5));
        }
        if (this.version === 1 || this.version === 2) {
          let key2 = CryptoJS.MD5(digest);
          key2.sigBytes = Math.min(16, this.keyBits / 8 + 5);
          return (buffer) => wordArrayToBuffer(CryptoJS.RC4.encrypt(CryptoJS.lib.WordArray.create(buffer), key2).ciphertext);
        }
        let key;
        if (this.version === 4) {
          key = CryptoJS.MD5(digest.concat(CryptoJS.lib.WordArray.create([1933667412], 4)));
        } else {
          key = this.encryptionKey;
        }
        const iv = _PDFSecurity.generateRandomWordArray(16);
        const options = {
          mode: CryptoJS.mode.CBC,
          padding: CryptoJS.pad.Pkcs7,
          iv
        };
        return (buffer) => wordArrayToBuffer(iv.clone().concat(CryptoJS.AES.encrypt(CryptoJS.lib.WordArray.create(buffer), key, options).ciphertext));
      }
      end() {
        this.dictionary.end();
      }
    };
    function getPermissionsR2(permissionObject = {}) {
      let permissions = 4294967232 >> 0;
      if (permissionObject.printing) {
        permissions |= 4;
      }
      if (permissionObject.modifying) {
        permissions |= 8;
      }
      if (permissionObject.copying) {
        permissions |= 16;
      }
      if (permissionObject.annotating) {
        permissions |= 32;
      }
      return permissions;
    }
    function getPermissionsR3(permissionObject = {}) {
      let permissions = 4294963392 >> 0;
      if (permissionObject.printing === "lowResolution") {
        permissions |= 4;
      }
      if (permissionObject.printing === "highResolution") {
        permissions |= 2052;
      }
      if (permissionObject.modifying) {
        permissions |= 8;
      }
      if (permissionObject.copying) {
        permissions |= 16;
      }
      if (permissionObject.annotating) {
        permissions |= 32;
      }
      if (permissionObject.fillingForms) {
        permissions |= 256;
      }
      if (permissionObject.contentAccessibility) {
        permissions |= 512;
      }
      if (permissionObject.documentAssembly) {
        permissions |= 1024;
      }
      return permissions;
    }
    function getUserPasswordR2(encryptionKey) {
      return CryptoJS.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
    }
    function getUserPasswordR3R4(documentId, encryptionKey) {
      const key = encryptionKey.clone();
      let cipher = CryptoJS.MD5(processPasswordR2R3R4().concat(CryptoJS.lib.WordArray.create(documentId)));
      for (let i2 = 0; i2 < 20; i2++) {
        const xorRound = Math.ceil(key.sigBytes / 4);
        for (let j = 0; j < xorRound; j++) {
          key.words[j] = encryptionKey.words[j] ^ (i2 | i2 << 8 | i2 << 16 | i2 << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
      }
      return cipher.concat(CryptoJS.lib.WordArray.create(null, 16));
    }
    function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
      let digest = paddedOwnerPassword;
      let round = r >= 3 ? 51 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        digest = CryptoJS.MD5(digest);
      }
      const key = digest.clone();
      key.sigBytes = keyBits / 8;
      let cipher = paddedUserPassword;
      round = r >= 3 ? 20 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        const xorRound = Math.ceil(key.sigBytes / 4);
        for (let j = 0; j < xorRound; j++) {
          key.words[j] = digest.words[j] ^ (i2 | i2 << 8 | i2 << 16 | i2 << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
      }
      return cipher;
    }
    function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
      let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(CryptoJS.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(CryptoJS.lib.WordArray.create(documentId));
      const round = r >= 3 ? 51 : 1;
      for (let i2 = 0; i2 < round; i2++) {
        key = CryptoJS.MD5(key);
        key.sigBytes = keyBits / 8;
      }
      return key;
    }
    function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
      const validationSalt = generateRandomWordArray(8);
      const keySalt = generateRandomWordArray(8);
      return CryptoJS.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
    }
    function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
      const key = CryptoJS.SHA256(processedUserPassword.clone().concat(userKeySalt));
      const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
      };
      return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
    }
    function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
      const validationSalt = generateRandomWordArray(8);
      const keySalt = generateRandomWordArray(8);
      return CryptoJS.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
    }
    function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
      const key = CryptoJS.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
      const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
      };
      return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
    }
    function getEncryptionKeyR5(generateRandomWordArray) {
      return generateRandomWordArray(32);
    }
    function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
      const cipher = CryptoJS.lib.WordArray.create([lsbFirstWord(permissions), 4294967295, 1415668834], 12).concat(generateRandomWordArray(4));
      const options = {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.NoPadding
      };
      return CryptoJS.AES.encrypt(cipher, encryptionKey, options).ciphertext;
    }
    function processPasswordR2R3R4(password = "") {
      const out = Buffer.alloc(32);
      const length = password.length;
      let index = 0;
      while (index < length && index < 32) {
        const code = password.charCodeAt(index);
        if (code > 255) {
          throw new Error("Password contains one or more invalid characters.");
        }
        out[index] = code;
        index++;
      }
      while (index < 32) {
        out[index] = PASSWORD_PADDING[index - length];
        index++;
      }
      return CryptoJS.lib.WordArray.create(out);
    }
    function processPasswordR5(password = "") {
      password = unescape(encodeURIComponent(saslprep(password)));
      const length = Math.min(127, password.length);
      const out = Buffer.alloc(length);
      for (let i2 = 0; i2 < length; i2++) {
        out[i2] = password.charCodeAt(i2);
      }
      return CryptoJS.lib.WordArray.create(out);
    }
    function lsbFirstWord(data) {
      return (data & 255) << 24 | (data & 65280) << 8 | data >> 8 & 65280 | data >> 24 & 255;
    }
    function wordArrayToBuffer(wordArray) {
      const byteArray = [];
      for (let i2 = 0; i2 < wordArray.sigBytes; i2++) {
        byteArray.push(wordArray.words[Math.floor(i2 / 4)] >> 8 * (3 - i2 % 4) & 255);
      }
      return Buffer.from(byteArray);
    }
    var PASSWORD_PADDING = [40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122];
    var {
      number
    } = PDFObject;
    var PDFGradient = class {
      constructor(doc) {
        this.doc = doc;
        this.stops = [];
        this.embedded = false;
        this.transform = [1, 0, 0, 1, 0, 0];
      }
      stop(pos, color, opacity) {
        if (opacity == null) {
          opacity = 1;
        }
        color = this.doc._normalizeColor(color);
        if (this.stops.length === 0) {
          if (color.length === 3) {
            this._colorSpace = "DeviceRGB";
          } else if (color.length === 4) {
            this._colorSpace = "DeviceCMYK";
          } else if (color.length === 1) {
            this._colorSpace = "DeviceGray";
          } else {
            throw new Error("Unknown color space");
          }
        } else if (this._colorSpace === "DeviceRGB" && color.length !== 3 || this._colorSpace === "DeviceCMYK" && color.length !== 4 || this._colorSpace === "DeviceGray" && color.length !== 1) {
          throw new Error("All gradient stops must use the same color space");
        }
        opacity = Math.max(0, Math.min(1, opacity));
        this.stops.push([pos, color, opacity]);
        return this;
      }
      setTransform(m11, m12, m21, m22, dx, dy) {
        this.transform = [m11, m12, m21, m22, dx, dy];
        return this;
      }
      embed(m) {
        let fn;
        const stopsLength = this.stops.length;
        if (stopsLength === 0) {
          return;
        }
        this.embedded = true;
        this.matrix = m;
        const last2 = this.stops[stopsLength - 1];
        if (last2[0] < 1) {
          this.stops.push([1, last2[1], last2[2]]);
        }
        const bounds = [];
        const encode = [];
        const stops = [];
        for (let i2 = 0; i2 < stopsLength - 1; i2++) {
          encode.push(0, 1);
          if (i2 + 2 !== stopsLength) {
            bounds.push(this.stops[i2 + 1][0]);
          }
          fn = this.doc.ref({
            FunctionType: 2,
            Domain: [0, 1],
            C0: this.stops[i2 + 0][1],
            C1: this.stops[i2 + 1][1],
            N: 1
          });
          stops.push(fn);
          fn.end();
        }
        if (stopsLength === 1) {
          fn = stops[0];
        } else {
          fn = this.doc.ref({
            FunctionType: 3,
            // stitching function
            Domain: [0, 1],
            Functions: stops,
            Bounds: bounds,
            Encode: encode
          });
          fn.end();
        }
        this.id = `Sh${++this.doc._gradCount}`;
        const shader = this.shader(fn);
        shader.end();
        const pattern2 = this.doc.ref({
          Type: "Pattern",
          PatternType: 2,
          Shading: shader,
          Matrix: this.matrix.map(number)
        });
        pattern2.end();
        if (this.stops.some((stop) => stop[2] < 1)) {
          let grad = this.opacityGradient();
          grad._colorSpace = "DeviceGray";
          for (let stop of this.stops) {
            grad.stop(stop[0], [stop[2]]);
          }
          grad = grad.embed(this.matrix);
          const pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
          const form = this.doc.ref({
            Type: "XObject",
            Subtype: "Form",
            FormType: 1,
            BBox: pageBBox,
            Group: {
              Type: "Group",
              S: "Transparency",
              CS: "DeviceGray"
            },
            Resources: {
              ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
              Pattern: {
                Sh1: grad
              }
            }
          });
          form.write("/Pattern cs /Sh1 scn");
          form.end(`${pageBBox.join(" ")} re f`);
          const gstate = this.doc.ref({
            Type: "ExtGState",
            SMask: {
              Type: "Mask",
              S: "Luminosity",
              G: form
            }
          });
          gstate.end();
          const opacityPattern = this.doc.ref({
            Type: "Pattern",
            PatternType: 1,
            PaintType: 1,
            TilingType: 2,
            BBox: pageBBox,
            XStep: pageBBox[2],
            YStep: pageBBox[3],
            Resources: {
              ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
              Pattern: {
                Sh1: pattern2
              },
              ExtGState: {
                Gs1: gstate
              }
            }
          });
          opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
          opacityPattern.end(`${pageBBox.join(" ")} re f`);
          this.doc.page.patterns[this.id] = opacityPattern;
        } else {
          this.doc.page.patterns[this.id] = pattern2;
        }
        return pattern2;
      }
      apply(stroke) {
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = this.transform;
        const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
        if (!this.embedded || m.join(" ") !== this.matrix.join(" ")) {
          this.embed(m);
        }
        this.doc._setColorSpace("Pattern", stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`/${this.id} ${op}`);
      }
    };
    var PDFLinearGradient = class _PDFLinearGradient extends PDFGradient {
      constructor(doc, x1, y1, x2, y2) {
        super(doc);
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
      }
      shader(fn) {
        return this.doc.ref({
          ShadingType: 2,
          ColorSpace: this._colorSpace,
          Coords: [this.x1, this.y1, this.x2, this.y2],
          Function: fn,
          Extend: [true, true]
        });
      }
      opacityGradient() {
        return new _PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
      }
    };
    var PDFRadialGradient = class _PDFRadialGradient extends PDFGradient {
      constructor(doc, x1, y1, r1, x2, y2, r2) {
        super(doc);
        this.doc = doc;
        this.x1 = x1;
        this.y1 = y1;
        this.r1 = r1;
        this.x2 = x2;
        this.y2 = y2;
        this.r2 = r2;
      }
      shader(fn) {
        return this.doc.ref({
          ShadingType: 3,
          ColorSpace: this._colorSpace,
          Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
          Function: fn,
          Extend: [true, true]
        });
      }
      opacityGradient() {
        return new _PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
      }
    };
    var Gradient = {
      PDFGradient,
      PDFLinearGradient,
      PDFRadialGradient
    };
    var underlyingColorSpaces = ["DeviceCMYK", "DeviceRGB"];
    var PDFTilingPattern = class {
      constructor(doc, bBox, xStep, yStep, stream2) {
        this.doc = doc;
        this.bBox = bBox;
        this.xStep = xStep;
        this.yStep = yStep;
        this.stream = stream2;
      }
      createPattern() {
        const resources = this.doc.ref();
        resources.end();
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = [1, 0, 0, 1, 0, 0];
        const m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
        const pattern2 = this.doc.ref({
          Type: "Pattern",
          PatternType: 1,
          // tiling
          PaintType: 2,
          // 1-colored, 2-uncolored
          TilingType: 2,
          // 2-no distortion
          BBox: this.bBox,
          XStep: this.xStep,
          YStep: this.yStep,
          Matrix: m.map((v) => +v.toFixed(5)),
          Resources: resources
        });
        pattern2.end(this.stream);
        return pattern2;
      }
      embedPatternColorSpaces() {
        underlyingColorSpaces.forEach((csName) => {
          const csId = this.getPatternColorSpaceId(csName);
          if (this.doc.page.colorSpaces[csId])
            return;
          const cs = this.doc.ref(["Pattern", csName]);
          cs.end();
          this.doc.page.colorSpaces[csId] = cs;
        });
      }
      getPatternColorSpaceId(underlyingColorspace) {
        return `CsP${underlyingColorspace}`;
      }
      embed() {
        if (!this.id) {
          this.doc._patternCount = this.doc._patternCount + 1;
          this.id = "P" + this.doc._patternCount;
          this.pattern = this.createPattern();
        }
        if (!this.doc.page.patterns[this.id]) {
          this.doc.page.patterns[this.id] = this.pattern;
        }
      }
      apply(stroke, patternColor) {
        this.embedPatternColorSpaces();
        this.embed();
        const normalizedColor = this.doc._normalizeColor(patternColor);
        if (!normalizedColor)
          throw Error(`invalid pattern color. (value: ${patternColor})`);
        const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
        this.doc._setColorSpace(csId, stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`${normalizedColor.join(" ")} /${this.id} ${op}`);
      }
    };
    var pattern = {
      PDFTilingPattern
    };
    var {
      PDFGradient: PDFGradient$1,
      PDFLinearGradient: PDFLinearGradient$1,
      PDFRadialGradient: PDFRadialGradient$1
    } = Gradient;
    var {
      PDFTilingPattern: PDFTilingPattern$1
    } = pattern;
    var ColorMixin = {
      initColor() {
        this._opacityRegistry = {};
        this._opacityCount = 0;
        this._patternCount = 0;
        return this._gradCount = 0;
      },
      _normalizeColor(color) {
        if (typeof color === "string") {
          if (color.charAt(0) === "#") {
            if (color.length === 4) {
              color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
            }
            const hex = parseInt(color.slice(1), 16);
            color = [hex >> 16, hex >> 8 & 255, hex & 255];
          } else if (namedColors[color]) {
            color = namedColors[color];
          }
        }
        if (Array.isArray(color)) {
          if (color.length === 3) {
            color = color.map((part) => part / 255);
          } else if (color.length === 4) {
            color = color.map((part) => part / 100);
          }
          return color;
        }
        return null;
      },
      _setColor(color, stroke) {
        if (color instanceof PDFGradient$1) {
          color.apply(stroke);
          return true;
        } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {
          color[0].apply(stroke, color[1]);
          return true;
        }
        return this._setColorCore(color, stroke);
      },
      _setColorCore(color, stroke) {
        color = this._normalizeColor(color);
        if (!color) {
          return false;
        }
        const op = stroke ? "SCN" : "scn";
        const space = this._getColorSpace(color);
        this._setColorSpace(space, stroke);
        color = color.join(" ");
        this.addContent(`${color} ${op}`);
        return true;
      },
      _setColorSpace(space, stroke) {
        const op = stroke ? "CS" : "cs";
        return this.addContent(`/${space} ${op}`);
      },
      _getColorSpace(color) {
        return color.length === 4 ? "DeviceCMYK" : "DeviceRGB";
      },
      fillColor(color, opacity) {
        const set = this._setColor(color, false);
        if (set) {
          this.fillOpacity(opacity);
        }
        this._fillColor = [color, opacity];
        return this;
      },
      strokeColor(color, opacity) {
        const set = this._setColor(color, true);
        if (set) {
          this.strokeOpacity(opacity);
        }
        return this;
      },
      opacity(opacity) {
        this._doOpacity(opacity, opacity);
        return this;
      },
      fillOpacity(opacity) {
        this._doOpacity(opacity, null);
        return this;
      },
      strokeOpacity(opacity) {
        this._doOpacity(null, opacity);
        return this;
      },
      _doOpacity(fillOpacity, strokeOpacity) {
        let dictionary, name;
        if (fillOpacity == null && strokeOpacity == null) {
          return;
        }
        if (fillOpacity != null) {
          fillOpacity = Math.max(0, Math.min(1, fillOpacity));
        }
        if (strokeOpacity != null) {
          strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
        }
        const key = `${fillOpacity}_${strokeOpacity}`;
        if (this._opacityRegistry[key]) {
          [dictionary, name] = this._opacityRegistry[key];
        } else {
          dictionary = {
            Type: "ExtGState"
          };
          if (fillOpacity != null) {
            dictionary.ca = fillOpacity;
          }
          if (strokeOpacity != null) {
            dictionary.CA = strokeOpacity;
          }
          dictionary = this.ref(dictionary);
          dictionary.end();
          const id = ++this._opacityCount;
          name = `Gs${id}`;
          this._opacityRegistry[key] = [dictionary, name];
        }
        this.page.ext_gstates[name] = dictionary;
        return this.addContent(`/${name} gs`);
      },
      linearGradient(x1, y1, x2, y2) {
        return new PDFLinearGradient$1(this, x1, y1, x2, y2);
      },
      radialGradient(x1, y1, r1, x2, y2, r2) {
        return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);
      },
      pattern(bbox, xStep, yStep, stream2) {
        return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream2);
      }
    };
    var namedColors = {
      aliceblue: [240, 248, 255],
      antiquewhite: [250, 235, 215],
      aqua: [0, 255, 255],
      aquamarine: [127, 255, 212],
      azure: [240, 255, 255],
      beige: [245, 245, 220],
      bisque: [255, 228, 196],
      black: [0, 0, 0],
      blanchedalmond: [255, 235, 205],
      blue: [0, 0, 255],
      blueviolet: [138, 43, 226],
      brown: [165, 42, 42],
      burlywood: [222, 184, 135],
      cadetblue: [95, 158, 160],
      chartreuse: [127, 255, 0],
      chocolate: [210, 105, 30],
      coral: [255, 127, 80],
      cornflowerblue: [100, 149, 237],
      cornsilk: [255, 248, 220],
      crimson: [220, 20, 60],
      cyan: [0, 255, 255],
      darkblue: [0, 0, 139],
      darkcyan: [0, 139, 139],
      darkgoldenrod: [184, 134, 11],
      darkgray: [169, 169, 169],
      darkgreen: [0, 100, 0],
      darkgrey: [169, 169, 169],
      darkkhaki: [189, 183, 107],
      darkmagenta: [139, 0, 139],
      darkolivegreen: [85, 107, 47],
      darkorange: [255, 140, 0],
      darkorchid: [153, 50, 204],
      darkred: [139, 0, 0],
      darksalmon: [233, 150, 122],
      darkseagreen: [143, 188, 143],
      darkslateblue: [72, 61, 139],
      darkslategray: [47, 79, 79],
      darkslategrey: [47, 79, 79],
      darkturquoise: [0, 206, 209],
      darkviolet: [148, 0, 211],
      deeppink: [255, 20, 147],
      deepskyblue: [0, 191, 255],
      dimgray: [105, 105, 105],
      dimgrey: [105, 105, 105],
      dodgerblue: [30, 144, 255],
      firebrick: [178, 34, 34],
      floralwhite: [255, 250, 240],
      forestgreen: [34, 139, 34],
      fuchsia: [255, 0, 255],
      gainsboro: [220, 220, 220],
      ghostwhite: [248, 248, 255],
      gold: [255, 215, 0],
      goldenrod: [218, 165, 32],
      gray: [128, 128, 128],
      grey: [128, 128, 128],
      green: [0, 128, 0],
      greenyellow: [173, 255, 47],
      honeydew: [240, 255, 240],
      hotpink: [255, 105, 180],
      indianred: [205, 92, 92],
      indigo: [75, 0, 130],
      ivory: [255, 255, 240],
      khaki: [240, 230, 140],
      lavender: [230, 230, 250],
      lavenderblush: [255, 240, 245],
      lawngreen: [124, 252, 0],
      lemonchiffon: [255, 250, 205],
      lightblue: [173, 216, 230],
      lightcoral: [240, 128, 128],
      lightcyan: [224, 255, 255],
      lightgoldenrodyellow: [250, 250, 210],
      lightgray: [211, 211, 211],
      lightgreen: [144, 238, 144],
      lightgrey: [211, 211, 211],
      lightpink: [255, 182, 193],
      lightsalmon: [255, 160, 122],
      lightseagreen: [32, 178, 170],
      lightskyblue: [135, 206, 250],
      lightslategray: [119, 136, 153],
      lightslategrey: [119, 136, 153],
      lightsteelblue: [176, 196, 222],
      lightyellow: [255, 255, 224],
      lime: [0, 255, 0],
      limegreen: [50, 205, 50],
      linen: [250, 240, 230],
      magenta: [255, 0, 255],
      maroon: [128, 0, 0],
      mediumaquamarine: [102, 205, 170],
      mediumblue: [0, 0, 205],
      mediumorchid: [186, 85, 211],
      mediumpurple: [147, 112, 219],
      mediumseagreen: [60, 179, 113],
      mediumslateblue: [123, 104, 238],
      mediumspringgreen: [0, 250, 154],
      mediumturquoise: [72, 209, 204],
      mediumvioletred: [199, 21, 133],
      midnightblue: [25, 25, 112],
      mintcream: [245, 255, 250],
      mistyrose: [255, 228, 225],
      moccasin: [255, 228, 181],
      navajowhite: [255, 222, 173],
      navy: [0, 0, 128],
      oldlace: [253, 245, 230],
      olive: [128, 128, 0],
      olivedrab: [107, 142, 35],
      orange: [255, 165, 0],
      orangered: [255, 69, 0],
      orchid: [218, 112, 214],
      palegoldenrod: [238, 232, 170],
      palegreen: [152, 251, 152],
      paleturquoise: [175, 238, 238],
      palevioletred: [219, 112, 147],
      papayawhip: [255, 239, 213],
      peachpuff: [255, 218, 185],
      peru: [205, 133, 63],
      pink: [255, 192, 203],
      plum: [221, 160, 221],
      powderblue: [176, 224, 230],
      purple: [128, 0, 128],
      red: [255, 0, 0],
      rosybrown: [188, 143, 143],
      royalblue: [65, 105, 225],
      saddlebrown: [139, 69, 19],
      salmon: [250, 128, 114],
      sandybrown: [244, 164, 96],
      seagreen: [46, 139, 87],
      seashell: [255, 245, 238],
      sienna: [160, 82, 45],
      silver: [192, 192, 192],
      skyblue: [135, 206, 235],
      slateblue: [106, 90, 205],
      slategray: [112, 128, 144],
      slategrey: [112, 128, 144],
      snow: [255, 250, 250],
      springgreen: [0, 255, 127],
      steelblue: [70, 130, 180],
      tan: [210, 180, 140],
      teal: [0, 128, 128],
      thistle: [216, 191, 216],
      tomato: [255, 99, 71],
      turquoise: [64, 224, 208],
      violet: [238, 130, 238],
      wheat: [245, 222, 179],
      white: [255, 255, 255],
      whitesmoke: [245, 245, 245],
      yellow: [255, 255, 0],
      yellowgreen: [154, 205, 50]
    };
    var cx;
    var cy;
    var px;
    var py;
    var sx;
    var sy;
    cx = cy = px = py = sx = sy = 0;
    var parameters = {
      A: 7,
      a: 7,
      C: 6,
      c: 6,
      H: 1,
      h: 1,
      L: 2,
      l: 2,
      M: 2,
      m: 2,
      Q: 4,
      q: 4,
      S: 4,
      s: 4,
      T: 2,
      t: 2,
      V: 1,
      v: 1,
      Z: 0,
      z: 0
    };
    var parse = function(path) {
      let cmd;
      const ret = [];
      let args = [];
      let curArg = "";
      let foundDecimal = false;
      let params = 0;
      for (let c of path) {
        if (parameters[c] != null) {
          params = parameters[c];
          if (cmd) {
            if (curArg.length > 0) {
              args[args.length] = +curArg;
            }
            ret[ret.length] = {
              cmd,
              args
            };
            args = [];
            curArg = "";
            foundDecimal = false;
          }
          cmd = c;
        } else if ([" ", ","].includes(c) || c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== "e" || c === "." && foundDecimal) {
          if (curArg.length === 0) {
            continue;
          }
          if (args.length === params) {
            ret[ret.length] = {
              cmd,
              args
            };
            args = [+curArg];
            if (cmd === "M") {
              cmd = "L";
            }
            if (cmd === "m") {
              cmd = "l";
            }
          } else {
            args[args.length] = +curArg;
          }
          foundDecimal = c === ".";
          curArg = ["-", "."].includes(c) ? c : "";
        } else {
          curArg += c;
          if (c === ".") {
            foundDecimal = true;
          }
        }
      }
      if (curArg.length > 0) {
        if (args.length === params) {
          ret[ret.length] = {
            cmd,
            args
          };
          args = [+curArg];
          if (cmd === "M") {
            cmd = "L";
          }
          if (cmd === "m") {
            cmd = "l";
          }
        } else {
          args[args.length] = +curArg;
        }
      }
      ret[ret.length] = {
        cmd,
        args
      };
      return ret;
    };
    var apply = function(commands, doc) {
      cx = cy = px = py = sx = sy = 0;
      for (let i2 = 0; i2 < commands.length; i2++) {
        const c = commands[i2];
        if (typeof runners[c.cmd] === "function") {
          runners[c.cmd](doc, c.args);
        }
      }
    };
    var runners = {
      M(doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
      },
      m(doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
      },
      C(doc, a) {
        cx = a[4];
        cy = a[5];
        px = a[2];
        py = a[3];
        return doc.bezierCurveTo(...a);
      },
      c(doc, a) {
        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
        px = cx + a[2];
        py = cy + a[3];
        cx += a[4];
        return cy += a[5];
      },
      S(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
        px = a[0];
        py = a[1];
        cx = a[2];
        return cy = a[3];
      },
      s(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
      },
      Q(doc, a) {
        px = a[0];
        py = a[1];
        cx = a[2];
        cy = a[3];
        return doc.quadraticCurveTo(a[0], a[1], cx, cy);
      },
      q(doc, a) {
        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
      },
      T(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        } else {
          px = cx - (px - cx);
          py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, a[0], a[1]);
        px = cx - (px - cx);
        py = cy - (py - cy);
        cx = a[0];
        return cy = a[1];
      },
      t(doc, a) {
        if (px === null) {
          px = cx;
          py = cy;
        } else {
          px = cx - (px - cx);
          py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
        cx += a[0];
        return cy += a[1];
      },
      A(doc, a) {
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
      },
      a(doc, a) {
        a[5] += cx;
        a[6] += cy;
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
      },
      L(doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      l(doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      H(doc, a) {
        cx = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      h(doc, a) {
        cx += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      V(doc, a) {
        cy = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      v(doc, a) {
        cy += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
      },
      Z(doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
      },
      z(doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
      }
    };
    var solveArc = function(doc, x, y, coords) {
      const [rx, ry, rot, large, sweep, ex, ey] = coords;
      const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
      for (let seg of segs) {
        const bez = segmentToBezier(...seg);
        doc.bezierCurveTo(...bez);
      }
    };
    var arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
      const th = rotateX * (Math.PI / 180);
      const sin_th = Math.sin(th);
      const cos_th = Math.cos(th);
      rx = Math.abs(rx);
      ry = Math.abs(ry);
      px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
      py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
      let pl = px * px / (rx * rx) + py * py / (ry * ry);
      if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
      }
      const a00 = cos_th / rx;
      const a01 = sin_th / rx;
      const a10 = -sin_th / ry;
      const a11 = cos_th / ry;
      const x0 = a00 * ox + a01 * oy;
      const y0 = a10 * ox + a11 * oy;
      const x1 = a00 * x + a01 * y;
      const y1 = a10 * x + a11 * y;
      const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
      let sfactor_sq = 1 / d - 0.25;
      if (sfactor_sq < 0) {
        sfactor_sq = 0;
      }
      let sfactor = Math.sqrt(sfactor_sq);
      if (sweep === large) {
        sfactor = -sfactor;
      }
      const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
      const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
      const th0 = Math.atan2(y0 - yc, x0 - xc);
      const th1 = Math.atan2(y1 - yc, x1 - xc);
      let th_arc = th1 - th0;
      if (th_arc < 0 && sweep === 1) {
        th_arc += 2 * Math.PI;
      } else if (th_arc > 0 && sweep === 0) {
        th_arc -= 2 * Math.PI;
      }
      const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 1e-3)));
      const result = [];
      for (let i2 = 0; i2 < segments; i2++) {
        const th2 = th0 + i2 * th_arc / segments;
        const th3 = th0 + (i2 + 1) * th_arc / segments;
        result[i2] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
      }
      return result;
    };
    var segmentToBezier = function(cx2, cy2, th0, th1, rx, ry, sin_th, cos_th) {
      const a00 = cos_th * rx;
      const a01 = -sin_th * ry;
      const a10 = sin_th * rx;
      const a11 = cos_th * ry;
      const th_half = 0.5 * (th1 - th0);
      const t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
      const x1 = cx2 + Math.cos(th0) - t * Math.sin(th0);
      const y1 = cy2 + Math.sin(th0) + t * Math.cos(th0);
      const x3 = cx2 + Math.cos(th1);
      const y3 = cy2 + Math.sin(th1);
      const x2 = x3 + t * Math.sin(th1);
      const y2 = y3 - t * Math.cos(th1);
      return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
    };
    var SVGPath = class {
      static apply(doc, path) {
        const commands = parse(path);
        apply(commands, doc);
      }
    };
    var {
      number: number$1
    } = PDFObject;
    var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
    var VectorMixin = {
      initVector() {
        this._ctm = [1, 0, 0, 1, 0, 0];
        return this._ctmStack = [];
      },
      save() {
        this._ctmStack.push(this._ctm.slice());
        return this.addContent("q");
      },
      restore() {
        this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
        return this.addContent("Q");
      },
      closePath() {
        return this.addContent("h");
      },
      lineWidth(w) {
        return this.addContent(`${number$1(w)} w`);
      },
      _CAP_STYLES: {
        BUTT: 0,
        ROUND: 1,
        SQUARE: 2
      },
      lineCap(c) {
        if (typeof c === "string") {
          c = this._CAP_STYLES[c.toUpperCase()];
        }
        return this.addContent(`${c} J`);
      },
      _JOIN_STYLES: {
        MITER: 0,
        ROUND: 1,
        BEVEL: 2
      },
      lineJoin(j) {
        if (typeof j === "string") {
          j = this._JOIN_STYLES[j.toUpperCase()];
        }
        return this.addContent(`${j} j`);
      },
      miterLimit(m) {
        return this.addContent(`${number$1(m)} M`);
      },
      dash(length, options = {}) {
        const originalLength = length;
        if (!Array.isArray(length)) {
          length = [length, options.space || length];
        }
        const valid = length.every((x) => Number.isFinite(x) && x > 0);
        if (!valid) {
          throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);
        }
        length = length.map(number$1).join(" ");
        return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);
      },
      undash() {
        return this.addContent("[] 0 d");
      },
      moveTo(x, y) {
        return this.addContent(`${number$1(x)} ${number$1(y)} m`);
      },
      lineTo(x, y) {
        return this.addContent(`${number$1(x)} ${number$1(y)} l`);
      },
      bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
        return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x)} ${number$1(y)} c`);
      },
      quadraticCurveTo(cpx, cpy, x, y) {
        return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x)} ${number$1(y)} v`);
      },
      rect(x, y, w, h) {
        return this.addContent(`${number$1(x)} ${number$1(y)} ${number$1(w)} ${number$1(h)} re`);
      },
      roundedRect(x, y, w, h, r) {
        if (r == null) {
          r = 0;
        }
        r = Math.min(r, 0.5 * w, 0.5 * h);
        const c = r * (1 - KAPPA);
        this.moveTo(x + r, y);
        this.lineTo(x + w - r, y);
        this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
        this.lineTo(x + w, y + h - r);
        this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
        this.lineTo(x + r, y + h);
        this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
        this.lineTo(x, y + r);
        this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
        return this.closePath();
      },
      ellipse(x, y, r1, r2) {
        if (r2 == null) {
          r2 = r1;
        }
        x -= r1;
        y -= r2;
        const ox = r1 * KAPPA;
        const oy = r2 * KAPPA;
        const xe = x + r1 * 2;
        const ye = y + r2 * 2;
        const xm = x + r1;
        const ym = y + r2;
        this.moveTo(x, ym);
        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
        return this.closePath();
      },
      circle(x, y, radius) {
        return this.ellipse(x, y, radius);
      },
      arc(x, y, radius, startAngle, endAngle, anticlockwise) {
        if (anticlockwise == null) {
          anticlockwise = false;
        }
        const TWO_PI = 2 * Math.PI;
        const HALF_PI = 0.5 * Math.PI;
        let deltaAng = endAngle - startAngle;
        if (Math.abs(deltaAng) > TWO_PI) {
          deltaAng = TWO_PI;
        } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
          const dir = anticlockwise ? -1 : 1;
          deltaAng = dir * TWO_PI + deltaAng;
        }
        const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
        const segAng = deltaAng / numSegs;
        const handleLen = segAng / HALF_PI * KAPPA * radius;
        let curAng = startAngle;
        let deltaCx = -Math.sin(curAng) * handleLen;
        let deltaCy = Math.cos(curAng) * handleLen;
        let ax = x + Math.cos(curAng) * radius;
        let ay = y + Math.sin(curAng) * radius;
        this.moveTo(ax, ay);
        for (let segIdx = 0; segIdx < numSegs; segIdx++) {
          const cp1x = ax + deltaCx;
          const cp1y = ay + deltaCy;
          curAng += segAng;
          ax = x + Math.cos(curAng) * radius;
          ay = y + Math.sin(curAng) * radius;
          deltaCx = -Math.sin(curAng) * handleLen;
          deltaCy = Math.cos(curAng) * handleLen;
          const cp2x = ax - deltaCx;
          const cp2y = ay - deltaCy;
          this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
        }
        return this;
      },
      polygon(...points) {
        this.moveTo(...points.shift() || []);
        for (let point of points) {
          this.lineTo(...point || []);
        }
        return this.closePath();
      },
      path(path) {
        SVGPath.apply(this, path);
        return this;
      },
      _windingRule(rule) {
        if (/even-?odd/.test(rule)) {
          return "*";
        }
        return "";
      },
      fill(color, rule) {
        if (/(even-?odd)|(non-?zero)/.test(color)) {
          rule = color;
          color = null;
        }
        if (color) {
          this.fillColor(color);
        }
        return this.addContent(`f${this._windingRule(rule)}`);
      },
      stroke(color) {
        if (color) {
          this.strokeColor(color);
        }
        return this.addContent("S");
      },
      fillAndStroke(fillColor, strokeColor, rule) {
        if (strokeColor == null) {
          strokeColor = fillColor;
        }
        const isFillRule = /(even-?odd)|(non-?zero)/;
        if (isFillRule.test(fillColor)) {
          rule = fillColor;
          fillColor = null;
        }
        if (isFillRule.test(strokeColor)) {
          rule = strokeColor;
          strokeColor = fillColor;
        }
        if (fillColor) {
          this.fillColor(fillColor);
          this.strokeColor(strokeColor);
        }
        return this.addContent(`B${this._windingRule(rule)}`);
      },
      clip(rule) {
        return this.addContent(`W${this._windingRule(rule)} n`);
      },
      transform(m11, m12, m21, m22, dx, dy) {
        const m = this._ctm;
        const [m0, m1, m2, m3, m4, m5] = m;
        m[0] = m0 * m11 + m2 * m12;
        m[1] = m1 * m11 + m3 * m12;
        m[2] = m0 * m21 + m2 * m22;
        m[3] = m1 * m21 + m3 * m22;
        m[4] = m0 * dx + m2 * dy + m4;
        m[5] = m1 * dx + m3 * dy + m5;
        const values = [m11, m12, m21, m22, dx, dy].map((v) => number$1(v)).join(" ");
        return this.addContent(`${values} cm`);
      },
      translate(x, y) {
        return this.transform(1, 0, 0, 1, x, y);
      },
      rotate(angle, options = {}) {
        let y;
        const rad = angle * Math.PI / 180;
        const cos = Math.cos(rad);
        const sin = Math.sin(rad);
        let x = y = 0;
        if (options.origin != null) {
          [x, y] = options.origin;
          const x1 = x * cos - y * sin;
          const y1 = x * sin + y * cos;
          x -= x1;
          y -= y1;
        }
        return this.transform(cos, sin, -sin, cos, x, y);
      },
      scale(xFactor, yFactor, options = {}) {
        let y;
        if (yFactor == null) {
          yFactor = xFactor;
        }
        if (typeof yFactor === "object") {
          options = yFactor;
          yFactor = xFactor;
        }
        let x = y = 0;
        if (options.origin != null) {
          [x, y] = options.origin;
          x -= xFactor * x;
          y -= yFactor * y;
        }
        return this.transform(xFactor, 0, 0, yFactor, x, y);
      }
    };
    var WIN_ANSI_MAP = {
      402: 131,
      8211: 150,
      8212: 151,
      8216: 145,
      8217: 146,
      8218: 130,
      8220: 147,
      8221: 148,
      8222: 132,
      8224: 134,
      8225: 135,
      8226: 149,
      8230: 133,
      8364: 128,
      8240: 137,
      8249: 139,
      8250: 155,
      710: 136,
      8482: 153,
      338: 140,
      339: 156,
      732: 152,
      352: 138,
      353: 154,
      376: 159,
      381: 142,
      382: 158
    };
    var characters = `.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
  
space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question
  
at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore
  
grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef
  
Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis
  
space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown
  
Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls
  
agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis`.split(/\s+/);
    var AFMFont = class _AFMFont {
      static open(filename) {
        return new _AFMFont(fs.readFileSync(filename, "utf8"));
      }
      constructor(contents) {
        this.contents = contents;
        this.attributes = {};
        this.glyphWidths = {};
        this.boundingBoxes = {};
        this.kernPairs = {};
        this.parse();
        this.charWidths = new Array(256);
        for (let char = 0; char <= 255; char++) {
          this.charWidths[char] = this.glyphWidths[characters[char]];
        }
        this.bbox = this.attributes["FontBBox"].split(/\s+/).map((e) => +e);
        this.ascender = +(this.attributes["Ascender"] || 0);
        this.descender = +(this.attributes["Descender"] || 0);
        this.xHeight = +(this.attributes["XHeight"] || 0);
        this.capHeight = +(this.attributes["CapHeight"] || 0);
        this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
      }
      parse() {
        let section = "";
        for (let line of this.contents.split("\n")) {
          var match;
          var a;
          if (match = line.match(/^Start(\w+)/)) {
            section = match[1];
            continue;
          } else if (match = line.match(/^End(\w+)/)) {
            section = "";
            continue;
          }
          switch (section) {
            case "FontMetrics":
              match = line.match(/(^\w+)\s+(.*)/);
              var key = match[1];
              var value = match[2];
              if (a = this.attributes[key]) {
                if (!Array.isArray(a)) {
                  a = this.attributes[key] = [a];
                }
                a.push(value);
              } else {
                this.attributes[key] = value;
              }
              break;
            case "CharMetrics":
              if (!/^CH?\s/.test(line)) {
                continue;
              }
              var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
              this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
              break;
            case "KernPairs":
              match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
              if (match) {
                this.kernPairs[match[1] + "\0" + match[2]] = parseInt(match[3]);
              }
              break;
          }
        }
      }
      encodeText(text) {
        const res = [];
        for (let i2 = 0, len = text.length; i2 < len; i2++) {
          let char = text.charCodeAt(i2);
          char = WIN_ANSI_MAP[char] || char;
          res.push(char.toString(16));
        }
        return res;
      }
      glyphsForString(string) {
        const glyphs = [];
        for (let i2 = 0, len = string.length; i2 < len; i2++) {
          const charCode = string.charCodeAt(i2);
          glyphs.push(this.characterToGlyph(charCode));
        }
        return glyphs;
      }
      characterToGlyph(character) {
        return characters[WIN_ANSI_MAP[character] || character] || ".notdef";
      }
      widthOfGlyph(glyph) {
        return this.glyphWidths[glyph] || 0;
      }
      getKernPair(left, right) {
        return this.kernPairs[left + "\0" + right] || 0;
      }
      advancesForGlyphs(glyphs) {
        const advances = [];
        for (let index = 0; index < glyphs.length; index++) {
          const left = glyphs[index];
          const right = glyphs[index + 1];
          advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
        }
        return advances;
      }
    };
    var PDFFont = class {
      constructor() {
      }
      encode() {
        throw new Error("Must be implemented by subclasses");
      }
      widthOfString() {
        throw new Error("Must be implemented by subclasses");
      }
      ref() {
        return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
      }
      finalize() {
        if (this.embedded || this.dictionary == null) {
          return;
        }
        this.embed();
        return this.embedded = true;
      }
      embed() {
        throw new Error("Must be implemented by subclasses");
      }
      lineHeight(size, includeGap) {
        if (includeGap == null) {
          includeGap = false;
        }
        const gap = includeGap ? this.lineGap : 0;
        return (this.ascender + gap - this.descender) / 1e3 * size;
      }
    };
    var STANDARD_FONTS = {
      Courier() {
        return fs.readFileSync(__dirname + "/data/Courier.afm", "utf8");
      },
      "Courier-Bold"() {
        return fs.readFileSync(__dirname + "/data/Courier-Bold.afm", "utf8");
      },
      "Courier-Oblique"() {
        return fs.readFileSync(__dirname + "/data/Courier-Oblique.afm", "utf8");
      },
      "Courier-BoldOblique"() {
        return fs.readFileSync(__dirname + "/data/Courier-BoldOblique.afm", "utf8");
      },
      Helvetica() {
        return fs.readFileSync(__dirname + "/data/Helvetica.afm", "utf8");
      },
      "Helvetica-Bold"() {
        return fs.readFileSync(__dirname + "/data/Helvetica-Bold.afm", "utf8");
      },
      "Helvetica-Oblique"() {
        return fs.readFileSync(__dirname + "/data/Helvetica-Oblique.afm", "utf8");
      },
      "Helvetica-BoldOblique"() {
        return fs.readFileSync(__dirname + "/data/Helvetica-BoldOblique.afm", "utf8");
      },
      "Times-Roman"() {
        return fs.readFileSync(__dirname + "/data/Times-Roman.afm", "utf8");
      },
      "Times-Bold"() {
        return fs.readFileSync(__dirname + "/data/Times-Bold.afm", "utf8");
      },
      "Times-Italic"() {
        return fs.readFileSync(__dirname + "/data/Times-Italic.afm", "utf8");
      },
      "Times-BoldItalic"() {
        return fs.readFileSync(__dirname + "/data/Times-BoldItalic.afm", "utf8");
      },
      Symbol() {
        return fs.readFileSync(__dirname + "/data/Symbol.afm", "utf8");
      },
      ZapfDingbats() {
        return fs.readFileSync(__dirname + "/data/ZapfDingbats.afm", "utf8");
      }
    };
    var StandardFont = class extends PDFFont {
      constructor(document2, name, id) {
        super();
        this.document = document2;
        this.name = name;
        this.id = id;
        this.font = new AFMFont(STANDARD_FONTS[this.name]());
        ({
          ascender: this.ascender,
          descender: this.descender,
          bbox: this.bbox,
          lineGap: this.lineGap,
          xHeight: this.xHeight,
          capHeight: this.capHeight
        } = this.font);
      }
      embed() {
        this.dictionary.data = {
          Type: "Font",
          BaseFont: this.name,
          Subtype: "Type1",
          Encoding: "WinAnsiEncoding"
        };
        return this.dictionary.end();
      }
      encode(text) {
        const encoded = this.font.encodeText(text);
        const glyphs = this.font.glyphsForString(`${text}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        const positions = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          const glyph = glyphs[i2];
          positions.push({
            xAdvance: advances[i2],
            yAdvance: 0,
            xOffset: 0,
            yOffset: 0,
            advanceWidth: this.font.widthOfGlyph(glyph)
          });
        }
        return [encoded, positions];
      }
      widthOfString(string, size) {
        const glyphs = this.font.glyphsForString(`${string}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        let width = 0;
        for (let advance of advances) {
          width += advance;
        }
        const scale = size / 1e3;
        return width * scale;
      }
      static isStandardFont(name) {
        return name in STANDARD_FONTS;
      }
    };
    var toHex = function(num) {
      return `0000${num.toString(16)}`.slice(-4);
    };
    var EmbeddedFont = class extends PDFFont {
      constructor(document2, font, id) {
        super();
        this.document = document2;
        this.font = font;
        this.id = id;
        this.subset = this.font.createSubset();
        this.unicode = [[0]];
        this.widths = [this.font.getGlyph(0).advanceWidth];
        this.name = this.font.postscriptName;
        this.scale = 1e3 / this.font.unitsPerEm;
        this.ascender = this.font.ascent * this.scale;
        this.descender = this.font.descent * this.scale;
        this.xHeight = this.font.xHeight * this.scale;
        this.capHeight = this.font.capHeight * this.scale;
        this.lineGap = this.font.lineGap * this.scale;
        this.bbox = this.font.bbox;
        if (document2.options.fontLayoutCache !== false) {
          this.layoutCache = /* @__PURE__ */ Object.create(null);
        }
      }
      layoutRun(text, features) {
        const run = this.font.layout(text, features);
        for (let i2 = 0; i2 < run.positions.length; i2++) {
          const position = run.positions[i2];
          for (let key in position) {
            position[key] *= this.scale;
          }
          position.advanceWidth = run.glyphs[i2].advanceWidth * this.scale;
        }
        return run;
      }
      layoutCached(text) {
        if (!this.layoutCache) {
          return this.layoutRun(text);
        }
        let cached;
        if (cached = this.layoutCache[text]) {
          return cached;
        }
        const run = this.layoutRun(text);
        this.layoutCache[text] = run;
        return run;
      }
      layout(text, features, onlyWidth) {
        if (features) {
          return this.layoutRun(text, features);
        }
        let glyphs = onlyWidth ? null : [];
        let positions = onlyWidth ? null : [];
        let advanceWidth = 0;
        let last2 = 0;
        let index = 0;
        while (index <= text.length) {
          var needle;
          if (index === text.length && last2 < index || (needle = text.charAt(index), [" ", "	"].includes(needle))) {
            const run = this.layoutCached(text.slice(last2, ++index));
            if (!onlyWidth) {
              glyphs = glyphs.concat(run.glyphs);
              positions = positions.concat(run.positions);
            }
            advanceWidth += run.advanceWidth;
            last2 = index;
          } else {
            index++;
          }
        }
        return {
          glyphs,
          positions,
          advanceWidth
        };
      }
      encode(text, features) {
        const {
          glyphs,
          positions
        } = this.layout(text, features);
        const res = [];
        for (let i2 = 0; i2 < glyphs.length; i2++) {
          const glyph = glyphs[i2];
          const gid = this.subset.includeGlyph(glyph.id);
          res.push(`0000${gid.toString(16)}`.slice(-4));
          if (this.widths[gid] == null) {
            this.widths[gid] = glyph.advanceWidth * this.scale;
          }
          if (this.unicode[gid] == null) {
            this.unicode[gid] = glyph.codePoints;
          }
        }
        return [res, positions];
      }
      widthOfString(string, size, features) {
        const width = this.layout(string, features, true).advanceWidth;
        const scale = size / 1e3;
        return width * scale;
      }
      embed() {
        const isCFF = this.subset.cff != null;
        const fontFile = this.document.ref();
        if (isCFF) {
          fontFile.data.Subtype = "CIDFontType0C";
        }
        this.subset.encodeStream().on("data", (data) => fontFile.write(data)).on("end", () => fontFile.end());
        const familyClass = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : void 0) || 0) >> 8;
        let flags = 0;
        if (this.font.post.isFixedPitch) {
          flags |= 1 << 0;
        }
        if (1 <= familyClass && familyClass <= 7) {
          flags |= 1 << 1;
        }
        flags |= 1 << 2;
        if (familyClass === 10) {
          flags |= 1 << 3;
        }
        if (this.font.head.macStyle.italic) {
          flags |= 1 << 6;
        }
        const tag = [1, 2, 3, 4, 5, 6].map((i2) => String.fromCharCode((this.id.charCodeAt(i2) || 73) + 17)).join("");
        const name = tag + "+" + this.font.postscriptName;
        const {
          bbox
        } = this.font;
        const descriptor = this.document.ref({
          Type: "FontDescriptor",
          FontName: name,
          Flags: flags,
          FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
          ItalicAngle: this.font.italicAngle,
          Ascent: this.ascender,
          Descent: this.descender,
          CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
          XHeight: (this.font.xHeight || 0) * this.scale,
          StemV: 0
        });
        if (isCFF) {
          descriptor.data.FontFile3 = fontFile;
        } else {
          descriptor.data.FontFile2 = fontFile;
        }
        if (this.document.subset) {
          const CIDSet = Buffer.from("FFFFFFFFC0", "hex");
          const CIDSetRef = this.document.ref();
          CIDSetRef.write(CIDSet);
          CIDSetRef.end();
          descriptor.data.CIDSet = CIDSetRef;
        }
        descriptor.end();
        const descendantFontData = {
          Type: "Font",
          Subtype: "CIDFontType0",
          BaseFont: name,
          CIDSystemInfo: {
            Registry: new String("Adobe"),
            Ordering: new String("Identity"),
            Supplement: 0
          },
          FontDescriptor: descriptor,
          W: [0, this.widths]
        };
        if (!isCFF) {
          descendantFontData.Subtype = "CIDFontType2";
          descendantFontData.CIDToGIDMap = "Identity";
        }
        const descendantFont = this.document.ref(descendantFontData);
        descendantFont.end();
        this.dictionary.data = {
          Type: "Font",
          Subtype: "Type0",
          BaseFont: name,
          Encoding: "Identity-H",
          DescendantFonts: [descendantFont],
          ToUnicode: this.toUnicodeCmap()
        };
        return this.dictionary.end();
      }
      // Maps the glyph ids encoded in the PDF back to unicode strings
      // Because of ligature substitutions and the like, there may be one or more
      // unicode characters represented by each glyph.
      toUnicodeCmap() {
        const cmap = this.document.ref();
        const entries = [];
        for (let codePoints of this.unicode) {
          const encoded = [];
          for (let value of codePoints) {
            if (value > 65535) {
              value -= 65536;
              encoded.push(toHex(value >>> 10 & 1023 | 55296));
              value = 56320 | value & 1023;
            }
            encoded.push(toHex(value));
          }
          entries.push(`<${encoded.join(" ")}>`);
        }
        cmap.end(`/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
1 beginbfrange
<0000> <${toHex(entries.length - 1)}> [${entries.join(" ")}]
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end`);
        return cmap;
      }
    };
    var PDFFontFactory = class {
      static open(document2, src, family, id) {
        let font;
        if (typeof src === "string") {
          if (StandardFont.isStandardFont(src)) {
            return new StandardFont(document2, src, id);
          }
          src = fs.readFileSync(src);
        }
        if (Buffer.isBuffer(src)) {
          font = fontkit.create(src, family);
        } else if (src instanceof Uint8Array) {
          font = fontkit.create(Buffer.from(src), family);
        } else if (src instanceof ArrayBuffer) {
          font = fontkit.create(Buffer.from(new Uint8Array(src)), family);
        }
        if (font == null) {
          throw new Error("Not a supported font format or standard PDF font.");
        }
        return new EmbeddedFont(document2, font, id);
      }
    };
    var FontsMixin = {
      initFonts(defaultFont = "Helvetica") {
        this._fontFamilies = {};
        this._fontCount = 0;
        this._fontSize = 12;
        this._font = null;
        this._registeredFonts = {};
        if (defaultFont) {
          this.font(defaultFont);
        }
      },
      font(src, family, size) {
        let cacheKey, font;
        if (typeof family === "number") {
          size = family;
          family = null;
        }
        if (typeof src === "string" && this._registeredFonts[src]) {
          cacheKey = src;
          ({
            src,
            family
          } = this._registeredFonts[src]);
        } else {
          cacheKey = family || src;
          if (typeof cacheKey !== "string") {
            cacheKey = null;
          }
        }
        if (size != null) {
          this.fontSize(size);
        }
        if (font = this._fontFamilies[cacheKey]) {
          this._font = font;
          return this;
        }
        const id = `F${++this._fontCount}`;
        this._font = PDFFontFactory.open(this, src, family, id);
        if (font = this._fontFamilies[this._font.name]) {
          this._font = font;
          return this;
        }
        if (cacheKey) {
          this._fontFamilies[cacheKey] = this._font;
        }
        if (this._font.name) {
          this._fontFamilies[this._font.name] = this._font;
        }
        return this;
      },
      fontSize(_fontSize) {
        this._fontSize = _fontSize;
        return this;
      },
      currentLineHeight(includeGap) {
        if (includeGap == null) {
          includeGap = false;
        }
        return this._font.lineHeight(this._fontSize, includeGap);
      },
      registerFont(name, src, family) {
        this._registeredFonts[name] = {
          src,
          family
        };
        return this;
      }
    };
    var LineWrapper = class extends events.EventEmitter {
      constructor(document2, options) {
        super();
        this.document = document2;
        this.indent = options.indent || 0;
        this.characterSpacing = options.characterSpacing || 0;
        this.wordSpacing = options.wordSpacing === 0;
        this.columns = options.columns || 1;
        this.columnGap = options.columnGap != null ? options.columnGap : 18;
        this.lineWidth = (options.width - this.columnGap * (this.columns - 1)) / this.columns;
        this.spaceLeft = this.lineWidth;
        this.startX = this.document.x;
        this.startY = this.document.y;
        this.column = 1;
        this.ellipsis = options.ellipsis;
        this.continuedX = 0;
        this.features = options.features;
        if (options.height != null) {
          this.height = options.height;
          this.maxY = this.startY + options.height;
        } else {
          this.maxY = this.document.page.maxY();
        }
        this.on("firstLine", (options2) => {
          const indent = this.continuedX || this.indent;
          this.document.x += indent;
          this.lineWidth -= indent;
          return this.once("line", () => {
            this.document.x -= indent;
            this.lineWidth += indent;
            if (options2.continued && !this.continuedX) {
              this.continuedX = this.indent;
            }
            if (!options2.continued) {
              return this.continuedX = 0;
            }
          });
        });
        this.on("lastLine", (options2) => {
          const {
            align
          } = options2;
          if (align === "justify") {
            options2.align = "left";
          }
          this.lastLine = true;
          return this.once("line", () => {
            this.document.y += options2.paragraphGap || 0;
            options2.align = align;
            return this.lastLine = false;
          });
        });
      }
      wordWidth(word) {
        return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
      }
      eachWord(text, fn) {
        let bk;
        const breaker = new LineBreaker(text);
        let last2 = null;
        const wordWidths = /* @__PURE__ */ Object.create(null);
        while (bk = breaker.nextBreak()) {
          var shouldContinue;
          let word = text.slice((last2 != null ? last2.position : void 0) || 0, bk.position);
          let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
          if (w > this.lineWidth + this.continuedX) {
            let lbk = last2;
            const fbk = {};
            while (word.length) {
              var l, mightGrow;
              if (w > this.spaceLeft) {
                l = Math.ceil(this.spaceLeft / (w / word.length));
                w = this.wordWidth(word.slice(0, l));
                mightGrow = w <= this.spaceLeft && l < word.length;
              } else {
                l = word.length;
              }
              let mustShrink = w > this.spaceLeft && l > 0;
              while (mustShrink || mightGrow) {
                if (mustShrink) {
                  w = this.wordWidth(word.slice(0, --l));
                  mustShrink = w > this.spaceLeft && l > 0;
                } else {
                  w = this.wordWidth(word.slice(0, ++l));
                  mustShrink = w > this.spaceLeft && l > 0;
                  mightGrow = w <= this.spaceLeft && l < word.length;
                }
              }
              if (l === 0 && this.spaceLeft === this.lineWidth) {
                l = 1;
              }
              fbk.required = bk.required || l < word.length;
              shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
              lbk = {
                required: false
              };
              word = word.slice(l);
              w = this.wordWidth(word);
              if (shouldContinue === false) {
                break;
              }
            }
          } else {
            shouldContinue = fn(word, w, bk, last2);
          }
          if (shouldContinue === false) {
            break;
          }
          last2 = bk;
        }
      }
      wrap(text, options) {
        if (options.indent != null) {
          this.indent = options.indent;
        }
        if (options.characterSpacing != null) {
          this.characterSpacing = options.characterSpacing;
        }
        if (options.wordSpacing != null) {
          this.wordSpacing = options.wordSpacing;
        }
        if (options.ellipsis != null) {
          this.ellipsis = options.ellipsis;
        }
        const nextY = this.document.y + this.document.currentLineHeight(true);
        if (this.document.y > this.maxY || nextY > this.maxY) {
          this.nextSection();
        }
        let buffer = "";
        let textWidth = 0;
        let wc = 0;
        let lc = 0;
        let {
          y
        } = this.document;
        const emitLine = () => {
          options.textWidth = textWidth + this.wordSpacing * (wc - 1);
          options.wordCount = wc;
          options.lineWidth = this.lineWidth;
          ({
            y
          } = this.document);
          this.emit("line", buffer, options, this);
          return lc++;
        };
        this.emit("sectionStart", options, this);
        this.eachWord(text, (word, w, bk, last2) => {
          if (last2 == null || last2.required) {
            this.emit("firstLine", options, this);
            this.spaceLeft = this.lineWidth;
          }
          if (w <= this.spaceLeft) {
            buffer += word;
            textWidth += w;
            wc++;
          }
          if (bk.required || w > this.spaceLeft) {
            const lh = this.document.currentLineHeight(true);
            if (this.height != null && this.ellipsis && this.document.y + lh * 2 > this.maxY && this.column >= this.columns) {
              if (this.ellipsis === true) {
                this.ellipsis = "\u2026";
              }
              buffer = buffer.replace(/\s+$/, "");
              textWidth = this.wordWidth(buffer + this.ellipsis);
              while (buffer && textWidth > this.lineWidth) {
                buffer = buffer.slice(0, -1).replace(/\s+$/, "");
                textWidth = this.wordWidth(buffer + this.ellipsis);
              }
              if (textWidth <= this.lineWidth) {
                buffer = buffer + this.ellipsis;
              }
              textWidth = this.wordWidth(buffer);
            }
            if (bk.required) {
              if (w > this.spaceLeft) {
                emitLine();
                buffer = word;
                textWidth = w;
                wc = 1;
              }
              this.emit("lastLine", options, this);
            }
            emitLine();
            if (this.document.y + lh > this.maxY) {
              const shouldContinue = this.nextSection();
              if (!shouldContinue) {
                wc = 0;
                buffer = "";
                return false;
              }
            }
            if (bk.required) {
              this.spaceLeft = this.lineWidth;
              buffer = "";
              textWidth = 0;
              return wc = 0;
            } else {
              this.spaceLeft = this.lineWidth - w;
              buffer = word;
              textWidth = w;
              return wc = 1;
            }
          } else {
            return this.spaceLeft -= w;
          }
        });
        if (wc > 0) {
          this.emit("lastLine", options, this);
          emitLine();
        }
        this.emit("sectionEnd", options, this);
        if (options.continued === true) {
          if (lc > 1) {
            this.continuedX = 0;
          }
          this.continuedX += options.textWidth || 0;
          return this.document.y = y;
        } else {
          return this.document.x = this.startX;
        }
      }
      nextSection(options) {
        this.emit("sectionEnd", options, this);
        if (++this.column > this.columns) {
          if (this.height != null) {
            return false;
          }
          this.document.continueOnNewPage();
          this.column = 1;
          this.startY = this.document.page.margins.top;
          this.maxY = this.document.page.maxY();
          this.document.x = this.startX;
          if (this.document._fillColor) {
            this.document.fillColor(...this.document._fillColor);
          }
          this.emit("pageBreak", options, this);
        } else {
          this.document.x += this.lineWidth + this.columnGap;
          this.document.y = this.startY;
          this.emit("columnBreak", options, this);
        }
        this.emit("sectionStart", options, this);
        return true;
      }
    };
    var {
      number: number$2
    } = PDFObject;
    var TextMixin = {
      initText() {
        this._line = this._line.bind(this);
        this.x = 0;
        this.y = 0;
        return this._lineGap = 0;
      },
      lineGap(_lineGap) {
        this._lineGap = _lineGap;
        return this;
      },
      moveDown(lines) {
        if (lines == null) {
          lines = 1;
        }
        this.y += this.currentLineHeight(true) * lines + this._lineGap;
        return this;
      },
      moveUp(lines) {
        if (lines == null) {
          lines = 1;
        }
        this.y -= this.currentLineHeight(true) * lines + this._lineGap;
        return this;
      },
      _text(text, x, y, options, lineCallback) {
        options = this._initOptions(x, y, options);
        text = text == null ? "" : `${text}`;
        if (options.wordSpacing) {
          text = text.replace(/\s{2,}/g, " ");
        }
        const addStructure = () => {
          if (options.structParent) {
            options.structParent.add(this.struct(options.structType || "P", [this.markStructureContent(options.structType || "P")]));
          }
        };
        if (options.width) {
          let wrapper = this._wrapper;
          if (!wrapper) {
            wrapper = new LineWrapper(this, options);
            wrapper.on("line", lineCallback);
            wrapper.on("firstLine", addStructure);
          }
          this._wrapper = options.continued ? wrapper : null;
          this._textOptions = options.continued ? options : null;
          wrapper.wrap(text, options);
        } else {
          for (let line of text.split("\n")) {
            addStructure();
            lineCallback(line, options);
          }
        }
        return this;
      },
      text(text, x, y, options) {
        return this._text(text, x, y, options, this._line);
      },
      widthOfString(string, options = {}) {
        return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
      },
      heightOfString(text, options) {
        const {
          x,
          y
        } = this;
        options = this._initOptions(options);
        options.height = Infinity;
        const lineGap = options.lineGap || this._lineGap || 0;
        this._text(text, this.x, this.y, options, () => {
          return this.y += this.currentLineHeight(true) + lineGap;
        });
        const height = this.y - y;
        this.x = x;
        this.y = y;
        return height;
      },
      list(list, x, y, options, wrapper) {
        options = this._initOptions(x, y, options);
        const listType = options.listType || "bullet";
        const unit = Math.round(this._font.ascender / 1e3 * this._fontSize);
        const midLine = unit / 2;
        const r = options.bulletRadius || unit / 3;
        const indent = options.textIndent || (listType === "bullet" ? r * 5 : unit * 2);
        const itemIndent = options.bulletIndent || (listType === "bullet" ? r * 8 : unit * 2);
        let level = 1;
        const items = [];
        const levels = [];
        const numbers = [];
        var flatten = function(list2) {
          let n = 1;
          for (let i3 = 0; i3 < list2.length; i3++) {
            const item = list2[i3];
            if (Array.isArray(item)) {
              level++;
              flatten(item);
              level--;
            } else {
              items.push(item);
              levels.push(level);
              if (listType !== "bullet") {
                numbers.push(n++);
              }
            }
          }
        };
        flatten(list);
        const label = function(n) {
          switch (listType) {
            case "numbered":
              return `${n}.`;
            case "lettered":
              var letter = String.fromCharCode((n - 1) % 26 + 65);
              var times = Math.floor((n - 1) / 26 + 1);
              var text = Array(times + 1).join(letter);
              return `${text}.`;
          }
        };
        wrapper = new LineWrapper(this, options);
        wrapper.on("line", this._line);
        level = 1;
        let i2 = 0;
        wrapper.on("firstLine", () => {
          let item, itemType, labelType, bodyType;
          if (options.structParent) {
            if (options.structTypes) {
              [itemType, labelType, bodyType] = options.structTypes;
            } else {
              [itemType, labelType, bodyType] = ["LI", "Lbl", "LBody"];
            }
          }
          if (itemType) {
            item = this.struct(itemType);
            options.structParent.add(item);
          } else if (options.structParent) {
            item = options.structParent;
          }
          let l;
          if ((l = levels[i2++]) !== level) {
            const diff = itemIndent * (l - level);
            this.x += diff;
            wrapper.lineWidth -= diff;
            level = l;
          }
          if (item && (labelType || bodyType)) {
            item.add(this.struct(labelType || bodyType, [this.markStructureContent(labelType || bodyType)]));
          }
          switch (listType) {
            case "bullet":
              this.circle(this.x - indent + r, this.y + midLine, r);
              this.fill();
              break;
            case "numbered":
            case "lettered":
              var text = label(numbers[i2 - 1]);
              this._fragment(text, this.x - indent, this.y, options);
              break;
          }
          if (item && labelType && bodyType) {
            item.add(this.struct(bodyType, [this.markStructureContent(bodyType)]));
          }
          if (item && item !== options.structParent) {
            item.end();
          }
        });
        wrapper.on("sectionStart", () => {
          const pos = indent + itemIndent * (level - 1);
          this.x += pos;
          return wrapper.lineWidth -= pos;
        });
        wrapper.on("sectionEnd", () => {
          const pos = indent + itemIndent * (level - 1);
          this.x -= pos;
          return wrapper.lineWidth += pos;
        });
        wrapper.wrap(items.join("\n"), options);
        return this;
      },
      _initOptions(x = {}, y, options = {}) {
        if (typeof x === "object") {
          options = x;
          x = null;
        }
        const result = Object.assign({}, options);
        if (this._textOptions) {
          for (let key in this._textOptions) {
            const val = this._textOptions[key];
            if (key !== "continued") {
              if (result[key] === void 0) {
                result[key] = val;
              }
            }
          }
        }
        if (x != null) {
          this.x = x;
        }
        if (y != null) {
          this.y = y;
        }
        if (result.lineBreak !== false) {
          if (result.width == null) {
            result.width = this.page.width - this.x - this.page.margins.right;
          }
          result.width = Math.max(result.width, 0);
        }
        if (!result.columns) {
          result.columns = 0;
        }
        if (result.columnGap == null) {
          result.columnGap = 18;
        }
        return result;
      },
      _line(text, options = {}, wrapper) {
        this._fragment(text, this.x, this.y, options);
        const lineGap = options.lineGap || this._lineGap || 0;
        if (!wrapper) {
          return this.x += this.widthOfString(text);
        } else {
          return this.y += this.currentLineHeight(true) + lineGap;
        }
      },
      _fragment(text, x, y, options) {
        let dy, encoded, i2, positions, textWidth, words;
        text = `${text}`.replace(/\n/g, "");
        if (text.length === 0) {
          return;
        }
        const align = options.align || "left";
        let wordSpacing = options.wordSpacing || 0;
        const characterSpacing = options.characterSpacing || 0;
        if (options.width) {
          switch (align) {
            case "right":
              textWidth = this.widthOfString(text.replace(/\s+$/, ""), options);
              x += options.lineWidth - textWidth;
              break;
            case "center":
              x += options.lineWidth / 2 - options.textWidth / 2;
              break;
            case "justify":
              words = text.trim().split(/\s+/);
              textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
              var spaceWidth = this.widthOfString(" ") + characterSpacing;
              wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
              break;
          }
        }
        if (typeof options.baseline === "number") {
          dy = -options.baseline;
        } else {
          switch (options.baseline) {
            case "svg-middle":
              dy = 0.5 * this._font.xHeight;
              break;
            case "middle":
            case "svg-central":
              dy = 0.5 * (this._font.descender + this._font.ascender);
              break;
            case "bottom":
            case "ideographic":
              dy = this._font.descender;
              break;
            case "alphabetic":
              dy = 0;
              break;
            case "mathematical":
              dy = 0.5 * this._font.ascender;
              break;
            case "hanging":
              dy = 0.8 * this._font.ascender;
              break;
            case "top":
              dy = this._font.ascender;
              break;
            default:
              dy = this._font.ascender;
          }
          dy = dy / 1e3 * this._fontSize;
        }
        const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
        if (options.link != null) {
          this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
        }
        if (options.goTo != null) {
          this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);
        }
        if (options.destination != null) {
          this.addNamedDestination(options.destination, "XYZ", x, y, null);
        }
        if (options.underline) {
          this.save();
          if (!options.stroke) {
            this.strokeColor(...this._fillColor || []);
          }
          const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
          this.lineWidth(lineWidth);
          let lineY = y + this.currentLineHeight() - lineWidth;
          this.moveTo(x, lineY);
          this.lineTo(x + renderedWidth, lineY);
          this.stroke();
          this.restore();
        }
        if (options.strike) {
          this.save();
          if (!options.stroke) {
            this.strokeColor(...this._fillColor || []);
          }
          const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
          this.lineWidth(lineWidth);
          let lineY = y + this.currentLineHeight() / 2;
          this.moveTo(x, lineY);
          this.lineTo(x + renderedWidth, lineY);
          this.stroke();
          this.restore();
        }
        this.save();
        if (options.oblique) {
          let skew;
          if (typeof options.oblique === "number") {
            skew = -Math.tan(options.oblique * Math.PI / 180);
          } else {
            skew = -0.25;
          }
          this.transform(1, 0, 0, 1, x, y);
          this.transform(1, 0, skew, 1, -skew * dy, 0);
          this.transform(1, 0, 0, 1, -x, -y);
        }
        this.transform(1, 0, 0, -1, 0, this.page.height);
        y = this.page.height - y - dy;
        if (this.page.fonts[this._font.id] == null) {
          this.page.fonts[this._font.id] = this._font.ref();
        }
        this.addContent("BT");
        this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);
        this.addContent(`/${this._font.id} ${number$2(this._fontSize)} Tf`);
        const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
        if (mode) {
          this.addContent(`${mode} Tr`);
        }
        if (characterSpacing) {
          this.addContent(`${number$2(characterSpacing)} Tc`);
        }
        if (wordSpacing) {
          words = text.trim().split(/\s+/);
          wordSpacing += this.widthOfString(" ") + characterSpacing;
          wordSpacing *= 1e3 / this._fontSize;
          encoded = [];
          positions = [];
          for (let word of words) {
            const [encodedWord, positionsWord] = this._font.encode(word, options.features);
            encoded = encoded.concat(encodedWord);
            positions = positions.concat(positionsWord);
            const space = {};
            const object = positions[positions.length - 1];
            for (let key in object) {
              const val = object[key];
              space[key] = val;
            }
            space.xAdvance += wordSpacing;
            positions[positions.length - 1] = space;
          }
        } else {
          [encoded, positions] = this._font.encode(text, options.features);
        }
        const scale = this._fontSize / 1e3;
        const commands = [];
        let last2 = 0;
        let hadOffset = false;
        const addSegment = (cur) => {
          if (last2 < cur) {
            const hex = encoded.slice(last2, cur).join("");
            const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
            commands.push(`<${hex}> ${number$2(-advance)}`);
          }
          return last2 = cur;
        };
        const flush = (i3) => {
          addSegment(i3);
          if (commands.length > 0) {
            this.addContent(`[${commands.join(" ")}] TJ`);
            return commands.length = 0;
          }
        };
        for (i2 = 0; i2 < positions.length; i2++) {
          const pos = positions[i2];
          if (pos.xOffset || pos.yOffset) {
            flush(i2);
            this.addContent(`1 0 0 1 ${number$2(x + pos.xOffset * scale)} ${number$2(y + pos.yOffset * scale)} Tm`);
            flush(i2 + 1);
            hadOffset = true;
          } else {
            if (hadOffset) {
              this.addContent(`1 0 0 1 ${number$2(x)} ${number$2(y)} Tm`);
              hadOffset = false;
            }
            if (pos.xAdvance - pos.advanceWidth !== 0) {
              addSegment(i2 + 1);
            }
          }
          x += pos.xAdvance * scale;
        }
        flush(i2);
        this.addContent("ET");
        return this.restore();
      }
    };
    var MARKERS = [65472, 65473, 65474, 65475, 65477, 65478, 65479, 65480, 65481, 65482, 65483, 65484, 65485, 65486, 65487];
    var COLOR_SPACE_MAP = {
      1: "DeviceGray",
      3: "DeviceRGB",
      4: "DeviceCMYK"
    };
    var JPEG = class {
      constructor(data, label) {
        let marker;
        this.data = data;
        this.label = label;
        if (this.data.readUInt16BE(0) !== 65496) {
          throw "SOI not found in JPEG";
        }
        let pos = 2;
        while (pos < this.data.length) {
          marker = this.data.readUInt16BE(pos);
          pos += 2;
          if (MARKERS.includes(marker)) {
            break;
          }
          pos += this.data.readUInt16BE(pos);
        }
        if (!MARKERS.includes(marker)) {
          throw "Invalid JPEG.";
        }
        pos += 2;
        this.bits = this.data[pos++];
        this.height = this.data.readUInt16BE(pos);
        pos += 2;
        this.width = this.data.readUInt16BE(pos);
        pos += 2;
        const channels = this.data[pos++];
        this.colorSpace = COLOR_SPACE_MAP[channels];
        this.obj = null;
      }
      embed(document2) {
        if (this.obj) {
          return;
        }
        this.obj = document2.ref({
          Type: "XObject",
          Subtype: "Image",
          BitsPerComponent: this.bits,
          Width: this.width,
          Height: this.height,
          ColorSpace: this.colorSpace,
          Filter: "DCTDecode"
        });
        if (this.colorSpace === "DeviceCMYK") {
          this.obj.data["Decode"] = [1, 0, 1, 0, 1, 0, 1, 0];
        }
        this.obj.end(this.data);
        return this.data = null;
      }
    };
    var PNGImage = class {
      constructor(data, label) {
        this.label = label;
        this.image = new PNG(data);
        this.width = this.image.width;
        this.height = this.image.height;
        this.imgData = this.image.imgData;
        this.obj = null;
      }
      embed(document2) {
        let dataDecoded = false;
        this.document = document2;
        if (this.obj) {
          return;
        }
        const hasAlphaChannel = this.image.hasAlphaChannel;
        const isInterlaced = this.image.interlaceMethod === 1;
        this.obj = this.document.ref({
          Type: "XObject",
          Subtype: "Image",
          BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
          Width: this.width,
          Height: this.height,
          Filter: "FlateDecode"
        });
        if (!hasAlphaChannel) {
          const params = this.document.ref({
            Predictor: isInterlaced ? 1 : 15,
            Colors: this.image.colors,
            BitsPerComponent: this.image.bits,
            Columns: this.width
          });
          this.obj.data["DecodeParms"] = params;
          params.end();
        }
        if (this.image.palette.length === 0) {
          this.obj.data["ColorSpace"] = this.image.colorSpace;
        } else {
          const palette = this.document.ref();
          palette.end(Buffer.from(this.image.palette));
          this.obj.data["ColorSpace"] = ["Indexed", "DeviceRGB", this.image.palette.length / 3 - 1, palette];
        }
        if (this.image.transparency.grayscale != null) {
          const val = this.image.transparency.grayscale;
          this.obj.data["Mask"] = [val, val];
        } else if (this.image.transparency.rgb) {
          const {
            rgb
          } = this.image.transparency;
          const mask = [];
          for (let x of rgb) {
            mask.push(x, x);
          }
          this.obj.data["Mask"] = mask;
        } else if (this.image.transparency.indexed) {
          dataDecoded = true;
          return this.loadIndexedAlphaChannel();
        } else if (hasAlphaChannel) {
          dataDecoded = true;
          return this.splitAlphaChannel();
        }
        if (isInterlaced && !dataDecoded) {
          return this.decodeData();
        }
        this.finalize();
      }
      finalize() {
        if (this.alphaChannel) {
          const sMask = this.document.ref({
            Type: "XObject",
            Subtype: "Image",
            Height: this.height,
            Width: this.width,
            BitsPerComponent: 8,
            Filter: "FlateDecode",
            ColorSpace: "DeviceGray",
            Decode: [0, 1]
          });
          sMask.end(this.alphaChannel);
          this.obj.data["SMask"] = sMask;
        }
        this.obj.end(this.imgData);
        this.image = null;
        return this.imgData = null;
      }
      splitAlphaChannel() {
        return this.image.decodePixels((pixels) => {
          let a, p;
          const colorCount = this.image.colors;
          const pixelCount = this.width * this.height;
          const imgData = Buffer.alloc(pixelCount * colorCount);
          const alphaChannel = Buffer.alloc(pixelCount);
          let i2 = p = a = 0;
          const len = pixels.length;
          const skipByteCount = this.image.bits === 16 ? 1 : 0;
          while (i2 < len) {
            for (let colorIndex = 0; colorIndex < colorCount; colorIndex++) {
              imgData[p++] = pixels[i2++];
              i2 += skipByteCount;
            }
            alphaChannel[a++] = pixels[i2++];
            i2 += skipByteCount;
          }
          this.imgData = zlib.deflateSync(imgData);
          this.alphaChannel = zlib.deflateSync(alphaChannel);
          return this.finalize();
        });
      }
      loadIndexedAlphaChannel() {
        const transparency = this.image.transparency.indexed;
        return this.image.decodePixels((pixels) => {
          const alphaChannel = Buffer.alloc(this.width * this.height);
          let i2 = 0;
          for (let j = 0, end = pixels.length; j < end; j++) {
            alphaChannel[i2++] = transparency[pixels[j]];
          }
          this.alphaChannel = zlib.deflateSync(alphaChannel);
          return this.finalize();
        });
      }
      decodeData() {
        this.image.decodePixels((pixels) => {
          this.imgData = zlib.deflateSync(pixels);
          this.finalize();
        });
      }
    };
    var PDFImage = class {
      static open(src, label) {
        let data;
        if (Buffer.isBuffer(src)) {
          data = src;
        } else if (src instanceof ArrayBuffer) {
          data = Buffer.from(new Uint8Array(src));
        } else {
          let match;
          if (match = /^data:.+;base64,(.*)$/.exec(src)) {
            data = Buffer.from(match[1], "base64");
          } else {
            data = fs.readFileSync(src);
            if (!data) {
              return;
            }
          }
        }
        if (data[0] === 255 && data[1] === 216) {
          return new JPEG(data, label);
        } else if (data[0] === 137 && data.toString("ascii", 1, 4) === "PNG") {
          return new PNGImage(data, label);
        } else {
          throw new Error("Unknown image format.");
        }
      }
    };
    var ImagesMixin = {
      initImages() {
        this._imageRegistry = {};
        return this._imageCount = 0;
      },
      image(src, x, y, options = {}) {
        let bh, bp, bw, image, ip, left, left1;
        if (typeof x === "object") {
          options = x;
          x = null;
        }
        x = (left = x != null ? x : options.x) != null ? left : this.x;
        y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;
        if (typeof src === "string") {
          image = this._imageRegistry[src];
        }
        if (!image) {
          if (src.width && src.height) {
            image = src;
          } else {
            image = this.openImage(src);
          }
        }
        if (!image.obj) {
          image.embed(this);
        }
        if (this.page.xobjects[image.label] == null) {
          this.page.xobjects[image.label] = image.obj;
        }
        let w = options.width || image.width;
        let h = options.height || image.height;
        if (options.width && !options.height) {
          const wp = w / image.width;
          w = image.width * wp;
          h = image.height * wp;
        } else if (options.height && !options.width) {
          const hp = h / image.height;
          w = image.width * hp;
          h = image.height * hp;
        } else if (options.scale) {
          w = image.width * options.scale;
          h = image.height * options.scale;
        } else if (options.fit) {
          [bw, bh] = options.fit;
          bp = bw / bh;
          ip = image.width / image.height;
          if (ip > bp) {
            w = bw;
            h = bw / ip;
          } else {
            h = bh;
            w = bh * ip;
          }
        } else if (options.cover) {
          [bw, bh] = options.cover;
          bp = bw / bh;
          ip = image.width / image.height;
          if (ip > bp) {
            h = bh;
            w = bh * ip;
          } else {
            w = bw;
            h = bw / ip;
          }
        }
        if (options.fit || options.cover) {
          if (options.align === "center") {
            x = x + bw / 2 - w / 2;
          } else if (options.align === "right") {
            x = x + bw - w;
          }
          if (options.valign === "center") {
            y = y + bh / 2 - h / 2;
          } else if (options.valign === "bottom") {
            y = y + bh - h;
          }
        }
        if (options.link != null) {
          this.link(x, y, w, h, options.link);
        }
        if (options.goTo != null) {
          this.goTo(x, y, w, h, options.goTo);
        }
        if (options.destination != null) {
          this.addNamedDestination(options.destination, "XYZ", x, y, null);
        }
        if (this.y === y) {
          this.y += h;
        }
        this.save();
        this.transform(w, 0, 0, -h, x, y + h);
        this.addContent(`/${image.label} Do`);
        this.restore();
        return this;
      },
      openImage(src) {
        let image;
        if (typeof src === "string") {
          image = this._imageRegistry[src];
        }
        if (!image) {
          image = PDFImage.open(src, `I${++this._imageCount}`);
          if (typeof src === "string") {
            this._imageRegistry[src] = image;
          }
        }
        return image;
      }
    };
    var AnnotationsMixin = {
      annotate(x, y, w, h, options) {
        options.Type = "Annot";
        options.Rect = this._convertRect(x, y, w, h);
        options.Border = [0, 0, 0];
        if (options.Subtype === "Link" && typeof options.F === "undefined") {
          options.F = 1 << 2;
        }
        if (options.Subtype !== "Link") {
          if (options.C == null) {
            options.C = this._normalizeColor(options.color || [0, 0, 0]);
          }
        }
        delete options.color;
        if (typeof options.Dest === "string") {
          options.Dest = new String(options.Dest);
        }
        for (let key in options) {
          const val = options[key];
          options[key[0].toUpperCase() + key.slice(1)] = val;
        }
        const ref = this.ref(options);
        this.page.annotations.push(ref);
        ref.end();
        return this;
      },
      note(x, y, w, h, contents, options = {}) {
        options.Subtype = "Text";
        options.Contents = new String(contents);
        options.Name = "Comment";
        if (options.color == null) {
          options.color = [243, 223, 92];
        }
        return this.annotate(x, y, w, h, options);
      },
      goTo(x, y, w, h, name, options = {}) {
        options.Subtype = "Link";
        options.A = this.ref({
          S: "GoTo",
          D: new String(name)
        });
        options.A.end();
        return this.annotate(x, y, w, h, options);
      },
      link(x, y, w, h, url, options = {}) {
        options.Subtype = "Link";
        if (typeof url === "number") {
          const pages = this._root.data.Pages.data;
          if (url >= 0 && url < pages.Kids.length) {
            options.A = this.ref({
              S: "GoTo",
              D: [pages.Kids[url], "XYZ", null, null, null]
            });
            options.A.end();
          } else {
            throw new Error(`The document has no page ${url}`);
          }
        } else {
          options.A = this.ref({
            S: "URI",
            URI: new String(url)
          });
          options.A.end();
        }
        return this.annotate(x, y, w, h, options);
      },
      _markup(x, y, w, h, options = {}) {
        const [x1, y1, x2, y2] = this._convertRect(x, y, w, h);
        options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
      },
      highlight(x, y, w, h, options = {}) {
        options.Subtype = "Highlight";
        if (options.color == null) {
          options.color = [241, 238, 148];
        }
        return this._markup(x, y, w, h, options);
      },
      underline(x, y, w, h, options = {}) {
        options.Subtype = "Underline";
        return this._markup(x, y, w, h, options);
      },
      strike(x, y, w, h, options = {}) {
        options.Subtype = "StrikeOut";
        return this._markup(x, y, w, h, options);
      },
      lineAnnotation(x1, y1, x2, y2, options = {}) {
        options.Subtype = "Line";
        options.Contents = new String();
        options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
        return this.annotate(x1, y1, x2, y2, options);
      },
      rectAnnotation(x, y, w, h, options = {}) {
        options.Subtype = "Square";
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
      },
      ellipseAnnotation(x, y, w, h, options = {}) {
        options.Subtype = "Circle";
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
      },
      textAnnotation(x, y, w, h, text, options = {}) {
        options.Subtype = "FreeText";
        options.Contents = new String(text);
        options.DA = new String();
        return this.annotate(x, y, w, h, options);
      },
      fileAnnotation(x, y, w, h, file = {}, options = {}) {
        const filespec = this.file(file.src, Object.assign({
          hidden: true
        }, file));
        options.Subtype = "FileAttachment";
        options.FS = filespec;
        if (options.Contents) {
          options.Contents = new String(options.Contents);
        } else if (filespec.data.Desc) {
          options.Contents = filespec.data.Desc;
        }
        return this.annotate(x, y, w, h, options);
      },
      _convertRect(x1, y1, w, h) {
        let y2 = y1;
        y1 += h;
        let x2 = x1 + w;
        const [m0, m1, m2, m3, m4, m5] = this._ctm;
        x1 = m0 * x1 + m2 * y1 + m4;
        y1 = m1 * x1 + m3 * y1 + m5;
        x2 = m0 * x2 + m2 * y2 + m4;
        y2 = m1 * x2 + m3 * y2 + m5;
        return [x1, y1, x2, y2];
      }
    };
    var PDFOutline = class _PDFOutline {
      constructor(document2, parent, title, dest, options = {
        expanded: false
      }) {
        this.document = document2;
        this.options = options;
        this.outlineData = {};
        if (dest !== null) {
          this.outlineData["Dest"] = [dest.dictionary, "Fit"];
        }
        if (parent !== null) {
          this.outlineData["Parent"] = parent;
        }
        if (title !== null) {
          this.outlineData["Title"] = new String(title);
        }
        this.dictionary = this.document.ref(this.outlineData);
        this.children = [];
      }
      addItem(title, options = {
        expanded: false
      }) {
        const result = new _PDFOutline(this.document, this.dictionary, title, this.document.page, options);
        this.children.push(result);
        return result;
      }
      endOutline() {
        if (this.children.length > 0) {
          if (this.options.expanded) {
            this.outlineData.Count = this.children.length;
          }
          const first2 = this.children[0], last2 = this.children[this.children.length - 1];
          this.outlineData.First = first2.dictionary;
          this.outlineData.Last = last2.dictionary;
          for (let i2 = 0, len = this.children.length; i2 < len; i2++) {
            const child = this.children[i2];
            if (i2 > 0) {
              child.outlineData.Prev = this.children[i2 - 1].dictionary;
            }
            if (i2 < this.children.length - 1) {
              child.outlineData.Next = this.children[i2 + 1].dictionary;
            }
            child.endOutline();
          }
        }
        return this.dictionary.end();
      }
    };
    var OutlineMixin = {
      initOutline() {
        return this.outline = new PDFOutline(this, null, null, null);
      },
      endOutline() {
        this.outline.endOutline();
        if (this.outline.children.length > 0) {
          this._root.data.Outlines = this.outline.dictionary;
          return this._root.data.PageMode = "UseOutlines";
        }
      }
    };
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var PDFStructureContent = class {
      constructor(pageRef, mcid) {
        this.refs = [{
          pageRef,
          mcid
        }];
      }
      push(structContent) {
        structContent.refs.forEach((ref) => this.refs.push(ref));
      }
    };
    var PDFStructureElement = class _PDFStructureElement {
      constructor(document2, type, options = {}, children = null) {
        this.document = document2;
        this._attached = false;
        this._ended = false;
        this._flushed = false;
        this.dictionary = document2.ref({
          // Type: "StructElem",
          S: type
        });
        const data = this.dictionary.data;
        if (Array.isArray(options) || this._isValidChild(options)) {
          children = options;
          options = {};
        }
        if (typeof options.title !== "undefined") {
          data.T = new String(options.title);
        }
        if (typeof options.lang !== "undefined") {
          data.Lang = new String(options.lang);
        }
        if (typeof options.alt !== "undefined") {
          data.Alt = new String(options.alt);
        }
        if (typeof options.expanded !== "undefined") {
          data.E = new String(options.expanded);
        }
        if (typeof options.actual !== "undefined") {
          data.ActualText = new String(options.actual);
        }
        this._children = [];
        if (children) {
          if (!Array.isArray(children)) {
            children = [children];
          }
          children.forEach((child) => this.add(child));
          this.end();
        }
      }
      add(child) {
        if (this._ended) {
          throw new Error(`Cannot add child to already-ended structure element`);
        }
        if (!this._isValidChild(child)) {
          throw new Error(`Invalid structure element child`);
        }
        if (child instanceof _PDFStructureElement) {
          child.setParent(this.dictionary);
          if (this._attached) {
            child.setAttached();
          }
        }
        if (child instanceof PDFStructureContent) {
          this._addContentToParentTree(child);
        }
        if (typeof child === "function" && this._attached) {
          child = this._contentForClosure(child);
        }
        this._children.push(child);
        return this;
      }
      _addContentToParentTree(content) {
        content.refs.forEach(({
          pageRef,
          mcid
        }) => {
          const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);
          pageStructParents[mcid] = this.dictionary;
        });
      }
      setParent(parentRef) {
        if (this.dictionary.data.P) {
          throw new Error(`Structure element added to more than one parent`);
        }
        this.dictionary.data.P = parentRef;
        this._flush();
      }
      setAttached() {
        if (this._attached) {
          return;
        }
        this._children.forEach((child, index) => {
          if (child instanceof _PDFStructureElement) {
            child.setAttached();
          }
          if (typeof child === "function") {
            this._children[index] = this._contentForClosure(child);
          }
        });
        this._attached = true;
        this._flush();
      }
      end() {
        if (this._ended) {
          return;
        }
        this._children.filter((child) => child instanceof _PDFStructureElement).forEach((child) => child.end());
        this._ended = true;
        this._flush();
      }
      _isValidChild(child) {
        return child instanceof _PDFStructureElement || child instanceof PDFStructureContent || typeof child === "function";
      }
      _contentForClosure(closure) {
        const content = this.document.markStructureContent(this.dictionary.data.S);
        closure();
        this.document.endMarkedContent();
        this._addContentToParentTree(content);
        return content;
      }
      _isFlushable() {
        if (!this.dictionary.data.P || !this._ended) {
          return false;
        }
        return this._children.every((child) => {
          if (typeof child === "function") {
            return false;
          }
          if (child instanceof _PDFStructureElement) {
            return child._isFlushable();
          }
          return true;
        });
      }
      _flush() {
        if (this._flushed || !this._isFlushable()) {
          return;
        }
        this.dictionary.data.K = [];
        this._children.forEach((child) => this._flushChild(child));
        this.dictionary.end();
        this._children = [];
        this.dictionary.data.K = null;
        this._flushed = true;
      }
      _flushChild(child) {
        if (child instanceof _PDFStructureElement) {
          this.dictionary.data.K.push(child.dictionary);
        }
        if (child instanceof PDFStructureContent) {
          child.refs.forEach(({
            pageRef,
            mcid
          }) => {
            if (!this.dictionary.data.Pg) {
              this.dictionary.data.Pg = pageRef;
            }
            if (this.dictionary.data.Pg === pageRef) {
              this.dictionary.data.K.push(mcid);
            } else {
              this.dictionary.data.K.push({
                Type: "MCR",
                Pg: pageRef,
                MCID: mcid
              });
            }
          });
        }
      }
    };
    var PDFNumberTree = class extends PDFTree {
      _compareKeys(a, b) {
        return parseInt(a) - parseInt(b);
      }
      _keysName() {
        return "Nums";
      }
      _dataForKey(k) {
        return parseInt(k);
      }
    };
    var MarkingsMixin = {
      initMarkings(options) {
        this.structChildren = [];
        if (options.tagged) {
          this.getMarkInfoDictionary().data.Marked = true;
          this.getStructTreeRoot();
        }
      },
      markContent(tag, options = null) {
        if (tag === "Artifact" || options && options.mcid) {
          let toClose = 0;
          this.page.markings.forEach((marking) => {
            if (toClose || marking.structContent || marking.tag === "Artifact") {
              toClose++;
            }
          });
          while (toClose--) {
            this.endMarkedContent();
          }
        }
        if (!options) {
          this.page.markings.push({
            tag
          });
          this.addContent(`/${tag} BMC`);
          return this;
        }
        this.page.markings.push({
          tag,
          options
        });
        const dictionary = {};
        if (typeof options.mcid !== "undefined") {
          dictionary.MCID = options.mcid;
        }
        if (tag === "Artifact") {
          if (typeof options.type === "string") {
            dictionary.Type = options.type;
          }
          if (Array.isArray(options.bbox)) {
            dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];
          }
          if (Array.isArray(options.attached) && options.attached.every((val) => typeof val === "string")) {
            dictionary.Attached = options.attached;
          }
        }
        if (tag === "Span") {
          if (options.lang) {
            dictionary.Lang = new String(options.lang);
          }
          if (options.alt) {
            dictionary.Alt = new String(options.alt);
          }
          if (options.expanded) {
            dictionary.E = new String(options.expanded);
          }
          if (options.actual) {
            dictionary.ActualText = new String(options.actual);
          }
        }
        this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);
        return this;
      },
      markStructureContent(tag, options = {}) {
        const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
        const mcid = pageStructParents.length;
        pageStructParents.push(null);
        this.markContent(tag, _objectSpread2(_objectSpread2({}, options), {}, {
          mcid
        }));
        const structContent = new PDFStructureContent(this.page.dictionary, mcid);
        this.page.markings.slice(-1)[0].structContent = structContent;
        return structContent;
      },
      endMarkedContent() {
        this.page.markings.pop();
        this.addContent("EMC");
        return this;
      },
      struct(type, options = {}, children = null) {
        return new PDFStructureElement(this, type, options, children);
      },
      addStructure(structElem) {
        const structTreeRoot = this.getStructTreeRoot();
        structElem.setParent(structTreeRoot);
        structElem.setAttached();
        this.structChildren.push(structElem);
        if (!structTreeRoot.data.K) {
          structTreeRoot.data.K = [];
        }
        structTreeRoot.data.K.push(structElem.dictionary);
        return this;
      },
      initPageMarkings(pageMarkings) {
        pageMarkings.forEach((marking) => {
          if (marking.structContent) {
            const structContent = marking.structContent;
            const newStructContent = this.markStructureContent(marking.tag, marking.options);
            structContent.push(newStructContent);
            this.page.markings.slice(-1)[0].structContent = structContent;
          } else {
            this.markContent(marking.tag, marking.options);
          }
        });
      },
      endPageMarkings(page) {
        const pageMarkings = page.markings;
        pageMarkings.forEach(() => page.write("EMC"));
        page.markings = [];
        return pageMarkings;
      },
      getMarkInfoDictionary() {
        if (!this._root.data.MarkInfo) {
          this._root.data.MarkInfo = this.ref({});
        }
        return this._root.data.MarkInfo;
      },
      getStructTreeRoot() {
        if (!this._root.data.StructTreeRoot) {
          this._root.data.StructTreeRoot = this.ref({
            Type: "StructTreeRoot",
            ParentTree: new PDFNumberTree(),
            ParentTreeNextKey: 0
          });
        }
        return this._root.data.StructTreeRoot;
      },
      getStructParentTree() {
        return this.getStructTreeRoot().data.ParentTree;
      },
      createStructParentTreeNextKey() {
        this.getMarkInfoDictionary();
        const structTreeRoot = this.getStructTreeRoot();
        const key = structTreeRoot.data.ParentTreeNextKey++;
        structTreeRoot.data.ParentTree.add(key, []);
        return key;
      },
      endMarkings() {
        const structTreeRoot = this._root.data.StructTreeRoot;
        if (structTreeRoot) {
          structTreeRoot.end();
          this.structChildren.forEach((structElem) => structElem.end());
        }
        if (this._root.data.MarkInfo) {
          this._root.data.MarkInfo.end();
        }
      }
    };
    var FIELD_FLAGS = {
      readOnly: 1,
      required: 2,
      noExport: 4,
      multiline: 4096,
      password: 8192,
      toggleToOffButton: 16384,
      radioButton: 32768,
      pushButton: 65536,
      combo: 131072,
      edit: 262144,
      sort: 524288,
      multiSelect: 2097152,
      noSpell: 4194304
    };
    var FIELD_JUSTIFY = {
      left: 0,
      center: 1,
      right: 2
    };
    var VALUE_MAP = {
      value: "V",
      defaultValue: "DV"
    };
    var FORMAT_SPECIAL = {
      zip: "0",
      zipPlus4: "1",
      zip4: "1",
      phone: "2",
      ssn: "3"
    };
    var FORMAT_DEFAULT = {
      number: {
        nDec: 0,
        sepComma: false,
        negStyle: "MinusBlack",
        currency: "",
        currencyPrepend: true
      },
      percent: {
        nDec: 0,
        sepComma: false
      }
    };
    var AcroFormMixin = {
      /**
       * Must call if adding AcroForms to a document. Must also call font() before
       * this method to set the default font.
       */
      initForm() {
        if (!this._font) {
          throw new Error("Must set a font before calling initForm method");
        }
        this._acroform = {
          fonts: {},
          defaultFont: this._font.name
        };
        this._acroform.fonts[this._font.id] = this._font.ref();
        let data = {
          Fields: [],
          NeedAppearances: true,
          DA: new String(`/${this._font.id} 0 Tf 0 g`),
          DR: {
            Font: {}
          }
        };
        data.DR.Font[this._font.id] = this._font.ref();
        const AcroForm = this.ref(data);
        this._root.data.AcroForm = AcroForm;
        return this;
      },
      /**
       * Called automatically by document.js
       */
      endAcroForm() {
        if (this._root.data.AcroForm) {
          if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
            throw new Error("No fonts specified for PDF form");
          }
          let fontDict = this._root.data.AcroForm.data.DR.Font;
          Object.keys(this._acroform.fonts).forEach((name) => {
            fontDict[name] = this._acroform.fonts[name];
          });
          this._root.data.AcroForm.data.Fields.forEach((fieldRef) => {
            this._endChild(fieldRef);
          });
          this._root.data.AcroForm.end();
        }
        return this;
      },
      _endChild(ref) {
        if (Array.isArray(ref.data.Kids)) {
          ref.data.Kids.forEach((childRef) => {
            this._endChild(childRef);
          });
          ref.end();
        }
        return this;
      },
      /**
       * Creates and adds a form field to the document. Form fields are intermediate
       * nodes in a PDF form that are used to specify form name heirarchy and form
       * value defaults.
       * @param {string} name - field name (T attribute in field dictionary)
       * @param {object} options  - other attributes to include in field dictionary
       */
      formField(name, options = {}) {
        let fieldDict = this._fieldDict(name, null, options);
        let fieldRef = this.ref(fieldDict);
        this._addToParent(fieldRef);
        return fieldRef;
      },
      /**
       * Creates and adds a Form Annotation to the document. Form annotations are
       * called Widget annotations internally within a PDF file.
       * @param {string} name - form field name (T attribute of widget annotation
       * dictionary)
       * @param {number} x
       * @param {number} y
       * @param {number} w
       * @param {number} h
       * @param {object} options
       */
      formAnnotation(name, type, x, y, w, h, options = {}) {
        let fieldDict = this._fieldDict(name, type, options);
        fieldDict.Subtype = "Widget";
        if (fieldDict.F === void 0) {
          fieldDict.F = 4;
        }
        this.annotate(x, y, w, h, fieldDict);
        let annotRef = this.page.annotations[this.page.annotations.length - 1];
        return this._addToParent(annotRef);
      },
      formText(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "text", x, y, w, h, options);
      },
      formPushButton(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "pushButton", x, y, w, h, options);
      },
      formCombo(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "combo", x, y, w, h, options);
      },
      formList(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "list", x, y, w, h, options);
      },
      formRadioButton(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "radioButton", x, y, w, h, options);
      },
      formCheckbox(name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "checkbox", x, y, w, h, options);
      },
      _addToParent(fieldRef) {
        let parent = fieldRef.data.Parent;
        if (parent) {
          if (!parent.data.Kids) {
            parent.data.Kids = [];
          }
          parent.data.Kids.push(fieldRef);
        } else {
          this._root.data.AcroForm.data.Fields.push(fieldRef);
        }
        return this;
      },
      _fieldDict(name, type, options = {}) {
        if (!this._acroform) {
          throw new Error("Call document.initForms() method before adding form elements to document");
        }
        let opts = Object.assign({}, options);
        if (type !== null) {
          opts = this._resolveType(type, options);
        }
        opts = this._resolveFlags(opts);
        opts = this._resolveJustify(opts);
        opts = this._resolveFont(opts);
        opts = this._resolveStrings(opts);
        opts = this._resolveColors(opts);
        opts = this._resolveFormat(opts);
        opts.T = new String(name);
        if (opts.parent) {
          opts.Parent = opts.parent;
          delete opts.parent;
        }
        return opts;
      },
      _resolveType(type, opts) {
        if (type === "text") {
          opts.FT = "Tx";
        } else if (type === "pushButton") {
          opts.FT = "Btn";
          opts.pushButton = true;
        } else if (type === "radioButton") {
          opts.FT = "Btn";
          opts.radioButton = true;
        } else if (type === "checkbox") {
          opts.FT = "Btn";
        } else if (type === "combo") {
          opts.FT = "Ch";
          opts.combo = true;
        } else if (type === "list") {
          opts.FT = "Ch";
        } else {
          throw new Error(`Invalid form annotation type '${type}'`);
        }
        return opts;
      },
      _resolveFormat(opts) {
        const f = opts.format;
        if (f && f.type) {
          let fnKeystroke;
          let fnFormat;
          let params = "";
          if (FORMAT_SPECIAL[f.type] !== void 0) {
            fnKeystroke = `AFSpecial_Keystroke`;
            fnFormat = `AFSpecial_Format`;
            params = FORMAT_SPECIAL[f.type];
          } else {
            let format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
            fnKeystroke = `AF${format}_Keystroke`;
            fnFormat = `AF${format}_Format`;
            if (f.type === "date") {
              fnKeystroke += "Ex";
              params = String(f.param);
            } else if (f.type === "time") {
              params = String(f.param);
            } else if (f.type === "number") {
              let p = Object.assign({}, FORMAT_DEFAULT.number, f);
              params = String([String(p.nDec), p.sepComma ? "0" : "1", '"' + p.negStyle + '"', "null", '"' + p.currency + '"', String(p.currencyPrepend)].join(","));
            } else if (f.type === "percent") {
              let p = Object.assign({}, FORMAT_DEFAULT.percent, f);
              params = String([String(p.nDec), p.sepComma ? "0" : "1"].join(","));
            }
          }
          opts.AA = opts.AA ? opts.AA : {};
          opts.AA.K = {
            S: "JavaScript",
            JS: new String(`${fnKeystroke}(${params});`)
          };
          opts.AA.F = {
            S: "JavaScript",
            JS: new String(`${fnFormat}(${params});`)
          };
        }
        delete opts.format;
        return opts;
      },
      _resolveColors(opts) {
        let color = this._normalizeColor(opts.backgroundColor);
        if (color) {
          if (!opts.MK) {
            opts.MK = {};
          }
          opts.MK.BG = color;
        }
        color = this._normalizeColor(opts.borderColor);
        if (color) {
          if (!opts.MK) {
            opts.MK = {};
          }
          opts.MK.BC = color;
        }
        delete opts.backgroundColor;
        delete opts.borderColor;
        return opts;
      },
      _resolveFlags(options) {
        let result = 0;
        Object.keys(options).forEach((key) => {
          if (FIELD_FLAGS[key]) {
            result |= FIELD_FLAGS[key];
            delete options[key];
          }
        });
        if (result !== 0) {
          options.Ff = options.Ff ? options.Ff : 0;
          options.Ff |= result;
        }
        return options;
      },
      _resolveJustify(options) {
        let result = 0;
        if (options.align !== void 0) {
          if (typeof FIELD_JUSTIFY[options.align] === "number") {
            result = FIELD_JUSTIFY[options.align];
          }
          delete options.align;
        }
        if (result !== 0) {
          options.Q = result;
        }
        return options;
      },
      _resolveFont(options) {
        if (this._acroform.fonts[this._font.id] === null) {
          this._acroform.fonts[this._font.id] = this._font.ref();
        }
        if (this._acroform.defaultFont !== this._font.name) {
          options.DR = {
            Font: {}
          };
          const fontSize = options.fontSize || 0;
          options.DR.Font[this._font.id] = this._font.ref();
          options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);
        }
        return options;
      },
      _resolveStrings(options) {
        let select = [];
        function appendChoices(a) {
          if (Array.isArray(a)) {
            for (let idx = 0; idx < a.length; idx++) {
              if (typeof a[idx] === "string") {
                select.push(new String(a[idx]));
              } else {
                select.push(a[idx]);
              }
            }
          }
        }
        appendChoices(options.Opt);
        if (options.select) {
          appendChoices(options.select);
          delete options.select;
        }
        if (select.length) {
          options.Opt = select;
        }
        Object.keys(VALUE_MAP).forEach((key) => {
          if (options[key] !== void 0) {
            options[VALUE_MAP[key]] = options[key];
            delete options[key];
          }
        });
        ["V", "DV"].forEach((key) => {
          if (typeof options[key] === "string") {
            options[key] = new String(options[key]);
          }
        });
        if (options.MK && options.MK.CA) {
          options.MK.CA = new String(options.MK.CA);
        }
        if (options.label) {
          options.MK = options.MK ? options.MK : {};
          options.MK.CA = new String(options.label);
          delete options.label;
        }
        return options;
      }
    };
    var AttachmentsMixin = {
      /**
       * Embed contents of `src` in PDF
       * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file
       * @param {object} options
       *  * options.name: filename to be shown in PDF, will use `src` if none set
       *  * options.type: filetype to be shown in PDF
       *  * options.description: description to be shown in PDF
       *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations
       *  * options.creationDate: override creation date
       *  * options.modifiedDate: override modified date
       * @returns filespec reference
       */
      file(src, options = {}) {
        options.name = options.name || src;
        const refBody = {
          Type: "EmbeddedFile",
          Params: {}
        };
        let data;
        if (!src) {
          throw new Error("No src specified");
        }
        if (Buffer.isBuffer(src)) {
          data = src;
        } else if (src instanceof ArrayBuffer) {
          data = Buffer.from(new Uint8Array(src));
        } else {
          let match;
          if (match = /^data:(.*);base64,(.*)$/.exec(src)) {
            if (match[1]) {
              refBody.Subtype = match[1].replace("/", "#2F");
            }
            data = Buffer.from(match[2], "base64");
          } else {
            data = fs.readFileSync(src);
            if (!data) {
              throw new Error(`Could not read contents of file at filepath ${src}`);
            }
            const {
              birthtime,
              ctime
            } = fs.statSync(src);
            refBody.Params.CreationDate = birthtime;
            refBody.Params.ModDate = ctime;
          }
        }
        if (options.creationDate instanceof Date) {
          refBody.Params.CreationDate = options.creationDate;
        }
        if (options.modifiedDate instanceof Date) {
          refBody.Params.ModDate = options.modifiedDate;
        }
        if (options.type) {
          refBody.Subtype = options.type.replace("/", "#2F");
        }
        const checksum = CryptoJS.MD5(CryptoJS.lib.WordArray.create(new Uint8Array(data)));
        refBody.Params.CheckSum = new String(checksum);
        refBody.Params.Size = data.byteLength;
        let ref;
        if (!this._fileRegistry)
          this._fileRegistry = {};
        let file = this._fileRegistry[options.name];
        if (file && isEqual(refBody, file)) {
          ref = file.ref;
        } else {
          ref = this.ref(refBody);
          ref.end(data);
          this._fileRegistry[options.name] = _objectSpread2(_objectSpread2({}, refBody), {}, {
            ref
          });
        }
        const fileSpecBody = {
          Type: "Filespec",
          F: new String(options.name),
          EF: {
            F: ref
          },
          UF: new String(options.name)
        };
        if (options.description) {
          fileSpecBody.Desc = new String(options.description);
        }
        const filespec = this.ref(fileSpecBody);
        filespec.end();
        if (!options.hidden) {
          this.addNamedEmbeddedFile(options.name, filespec);
        }
        return filespec;
      }
    };
    function isEqual(a, b) {
      return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;
    }
    var PDFA = {
      initPDFA(pSubset) {
        if (pSubset.charAt(pSubset.length - 3) === "-") {
          this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
          this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
        } else {
          this.subset_conformance = "B";
          this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
        }
      },
      endSubset() {
        this._addPdfaMetadata();
        const jsPath = `${__dirname}/data/sRGB_IEC61966_2_1.icc`;
        const jestPath = `${__dirname}/../color_profiles/sRGB_IEC61966_2_1.icc`;
        this._addColorOutputIntent(fs.existsSync(jsPath) ? jsPath : jestPath);
      },
      _addColorOutputIntent(pICCPath) {
        const iccProfile = fs.readFileSync(pICCPath);
        const colorProfileRef = this.ref({
          Length: iccProfile.length,
          N: 3
        });
        colorProfileRef.write(iccProfile);
        colorProfileRef.end();
        const intentRef = this.ref({
          Type: "OutputIntent",
          S: "GTS_PDFA1",
          Info: new String("sRGB IEC61966-2.1"),
          OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
          DestOutputProfile: colorProfileRef
        });
        intentRef.end();
        this._root.data.OutputIntents = [intentRef];
      },
      _getPdfaid() {
        return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
      },
      _addPdfaMetadata() {
        this.appendXML(this._getPdfaid());
      }
    };
    var SubsetMixin = {
      _importSubset(subset) {
        Object.assign(this, subset);
      },
      initSubset(options) {
        switch (options.subset) {
          case "PDF/A-1":
          case "PDF/A-1a":
          case "PDF/A-1b":
          case "PDF/A-2":
          case "PDF/A-2a":
          case "PDF/A-2b":
          case "PDF/A-3":
          case "PDF/A-3a":
          case "PDF/A-3b":
            this._importSubset(PDFA);
            this.initPDFA(options.subset);
            break;
        }
      }
    };
    var PDFMetadata = class {
      constructor() {
        this._metadata = `
        <?xpacket begin="\uFEFF" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
      }
      _closeTags() {
        this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
      }
      append(xml, newline = true) {
        this._metadata = this._metadata.concat(xml);
        if (newline)
          this._metadata = this._metadata.concat("\n");
      }
      getXML() {
        return this._metadata;
      }
      getLength() {
        return this._metadata.length;
      }
      end() {
        this._closeTags();
        this._metadata = this._metadata.trim();
      }
    };
    var MetadataMixin = {
      initMetadata() {
        this.metadata = new PDFMetadata();
      },
      appendXML(xml, newline = true) {
        this.metadata.append(xml, newline);
      },
      _addInfo() {
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);
        if (this.info.Title || this.info.Author || this.info.Subject) {
          this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);
          if (this.info.Title) {
            this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);
          }
          if (this.info.Author) {
            this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);
          }
          if (this.info.Subject) {
            this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);
          }
          this.appendXML(`
            </rdf:Description>
            `);
        }
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);
        if (this.info.Keywords) {
          this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);
        }
        this.appendXML(`
        </rdf:Description>
        `);
      },
      endMetadata() {
        this._addInfo();
        this.metadata.end();
        if (this.version != 1.3) {
          this.metadataRef = this.ref({
            length: this.metadata.getLength(),
            Type: "Metadata",
            Subtype: "XML"
          });
          this.metadataRef.compress = false;
          this.metadataRef.write(Buffer.from(this.metadata.getXML(), "utf-8"));
          this.metadataRef.end();
          this._root.data.Metadata = this.metadataRef;
        }
      }
    };
    var PDFDocument2 = class extends stream.Readable {
      constructor(options = {}) {
        super(options);
        this.options = options;
        switch (options.pdfVersion) {
          case "1.4":
            this.version = 1.4;
            break;
          case "1.5":
            this.version = 1.5;
            break;
          case "1.6":
            this.version = 1.6;
            break;
          case "1.7":
          case "1.7ext3":
            this.version = 1.7;
            break;
          default:
            this.version = 1.3;
            break;
        }
        this.compress = this.options.compress != null ? this.options.compress : true;
        this._pageBuffer = [];
        this._pageBufferStart = 0;
        this._offsets = [];
        this._waiting = 0;
        this._ended = false;
        this._offset = 0;
        const Pages = this.ref({
          Type: "Pages",
          Count: 0,
          Kids: []
        });
        const Names = this.ref({
          Dests: new PDFNameTree()
        });
        this._root = this.ref({
          Type: "Catalog",
          Pages,
          Names
        });
        if (this.options.lang) {
          this._root.data.Lang = new String(this.options.lang);
        }
        this.page = null;
        this.initMetadata();
        this.initColor();
        this.initVector();
        this.initFonts(options.font);
        this.initText();
        this.initImages();
        this.initOutline();
        this.initMarkings(options);
        this.initSubset(options);
        this.info = {
          Producer: "PDFKit",
          Creator: "PDFKit",
          CreationDate: /* @__PURE__ */ new Date()
        };
        if (this.options.info) {
          for (let key in this.options.info) {
            const val = this.options.info[key];
            this.info[key] = val;
          }
        }
        if (this.options.displayTitle) {
          this._root.data.ViewerPreferences = this.ref({
            DisplayDocTitle: true
          });
        }
        this._id = PDFSecurity.generateFileID(this.info);
        this._security = PDFSecurity.create(this, options);
        this._write(`%PDF-${this.version}`);
        this._write("%\xFF\xFF\xFF\xFF");
        if (this.options.autoFirstPage !== false) {
          this.addPage();
        }
      }
      addPage(options) {
        if (options == null) {
          ({
            options
          } = this);
        }
        if (!this.options.bufferPages) {
          this.flushPages();
        }
        this.page = new PDFPage(this, options);
        this._pageBuffer.push(this.page);
        const pages = this._root.data.Pages.data;
        pages.Kids.push(this.page.dictionary);
        pages.Count++;
        this.x = this.page.margins.left;
        this.y = this.page.margins.top;
        this._ctm = [1, 0, 0, 1, 0, 0];
        this.transform(1, 0, 0, -1, 0, this.page.height);
        this.emit("pageAdded");
        return this;
      }
      continueOnNewPage(options) {
        const pageMarkings = this.endPageMarkings(this.page);
        this.addPage(options);
        this.initPageMarkings(pageMarkings);
        return this;
      }
      bufferedPageRange() {
        return {
          start: this._pageBufferStart,
          count: this._pageBuffer.length
        };
      }
      switchToPage(n) {
        let page;
        if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
          throw new Error(`switchToPage(${n}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
        }
        return this.page = page;
      }
      flushPages() {
        const pages = this._pageBuffer;
        this._pageBuffer = [];
        this._pageBufferStart += pages.length;
        for (let page of pages) {
          this.endPageMarkings(page);
          page.end();
        }
      }
      addNamedDestination(name, ...args) {
        if (args.length === 0) {
          args = ["XYZ", null, null, null];
        }
        if (args[0] === "XYZ" && args[2] !== null) {
          args[2] = this.page.height - args[2];
        }
        args.unshift(this.page.dictionary);
        this._root.data.Names.data.Dests.add(name, args);
      }
      addNamedEmbeddedFile(name, ref) {
        if (!this._root.data.Names.data.EmbeddedFiles) {
          this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
            limits: false
          });
        }
        this._root.data.Names.data.EmbeddedFiles.add(name, ref);
      }
      addNamedJavaScript(name, js) {
        if (!this._root.data.Names.data.JavaScript) {
          this._root.data.Names.data.JavaScript = new PDFNameTree();
        }
        let data = {
          JS: new String(js),
          S: "JavaScript"
        };
        this._root.data.Names.data.JavaScript.add(name, data);
      }
      ref(data) {
        const ref = new PDFReference(this, this._offsets.length + 1, data);
        this._offsets.push(null);
        this._waiting++;
        return ref;
      }
      _read() {
      }
      // do nothing, but this method is required by node
      _write(data) {
        if (!Buffer.isBuffer(data)) {
          data = Buffer.from(data + "\n", "binary");
        }
        this.push(data);
        return this._offset += data.length;
      }
      addContent(data) {
        this.page.write(data);
        return this;
      }
      _refEnd(ref) {
        this._offsets[ref.id - 1] = ref.offset;
        if (--this._waiting === 0 && this._ended) {
          this._finalize();
          return this._ended = false;
        }
      }
      write(filename, fn) {
        const err = new Error(`PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.`);
        console.warn(err.stack);
        this.pipe(fs.createWriteStream(filename));
        this.end();
        return this.once("end", fn);
      }
      end() {
        this.flushPages();
        this._info = this.ref();
        for (let key in this.info) {
          let val = this.info[key];
          if (typeof val === "string") {
            val = new String(val);
          }
          let entry = this.ref(val);
          entry.end();
          this._info.data[key] = entry;
        }
        this._info.end();
        for (let name in this._fontFamilies) {
          const font = this._fontFamilies[name];
          font.finalize();
        }
        this.endOutline();
        this.endMarkings();
        if (this.subset) {
          this.endSubset();
        }
        this.endMetadata();
        this._root.end();
        this._root.data.Pages.end();
        this._root.data.Names.end();
        this.endAcroForm();
        if (this._root.data.ViewerPreferences) {
          this._root.data.ViewerPreferences.end();
        }
        if (this._security) {
          this._security.end();
        }
        if (this._waiting === 0) {
          return this._finalize();
        } else {
          return this._ended = true;
        }
      }
      _finalize() {
        const xRefOffset = this._offset;
        this._write("xref");
        this._write(`0 ${this._offsets.length + 1}`);
        this._write("0000000000 65535 f ");
        for (let offset of this._offsets) {
          offset = `0000000000${offset}`.slice(-10);
          this._write(offset + " 00000 n ");
        }
        const trailer = {
          Size: this._offsets.length + 1,
          Root: this._root,
          Info: this._info,
          ID: [this._id, this._id]
        };
        if (this._security) {
          trailer.Encrypt = this._security.dictionary;
        }
        this._write("trailer");
        this._write(PDFObject.convert(trailer));
        this._write("startxref");
        this._write(`${xRefOffset}`);
        this._write("%%EOF");
        return this.push(null);
      }
      toString() {
        return "[object PDFDocument]";
      }
    };
    var mixin = (methods) => {
      Object.assign(PDFDocument2.prototype, methods);
    };
    mixin(MetadataMixin);
    mixin(ColorMixin);
    mixin(VectorMixin);
    mixin(FontsMixin);
    mixin(TextMixin);
    mixin(ImagesMixin);
    mixin(AnnotationsMixin);
    mixin(OutlineMixin);
    mixin(MarkingsMixin);
    mixin(AcroFormMixin);
    mixin(AttachmentsMixin);
    mixin(SubsetMixin);
    PDFDocument2.LineWrapper = LineWrapper;
    module2.exports = PDFDocument2;
  }
});

// pdf-function.ts
var pdf_function_exports = {};
__export(pdf_function_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(pdf_function_exports);
var import_pdfkit = __toESM(require_pdfkit());
var handler = async () => {
  const createPdf = async () => {
    return new Promise((resolve, reject) => {
      const doc = new import_pdfkit.default({
        size: "A4",
        margin: 20
        // bufferPages: true,
      });
      const buffers = [];
      doc.on("data", (chunk) => {
        buffers.push(chunk);
      });
      doc.on("end", () => {
        const pdfBuffer = Buffer.concat(buffers);
        resolve(pdfBuffer);
      });
      doc.fontSize(14);
      doc.text("Hello World!").text("John doe!");
      doc.end();
    });
  };
  const pdf = await createPdf();
  return {
    statusCode: 200,
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": "attachment; filename=example.pdf"
    },
    body: pdf.toString("base64"),
    isBase64Encoded: true
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*! Bundled license information:

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
